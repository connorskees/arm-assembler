//! This file is autogenerated! Manual changes will not be saved.
#![allow(non_camel_case_types, unused_variables, dead_code, non_snake_case, unreachable_patterns)]
#![allow(clippy::all)]
#[derive(Debug)]
pub enum OpCode {
    ABS_Z_P_Z__,
    ABS_asimdmisc_R,
    ABS_asisdmisc_R,
    ADCS_32_addsub_carry,
    ADCS_64_addsub_carry,
    ADC_32_addsub_carry,
    ADC_64_addsub_carry,
    ADDG_64_addsub_immtags,
    ADDHN_asimddiff_N,
    ADDPL_R_RI__,
    ADDP_asimdsame_only,
    ADDP_asisdpair_only,
    ADDS_32S_addsub_ext,
    ADDS_32S_addsub_imm,
    ADDS_32_addsub_shift,
    ADDS_64S_addsub_ext,
    ADDS_64S_addsub_imm,
    ADDS_64_addsub_shift,
    ADDVL_R_RI__,
    ADDV_asimdall_only,
    ADD_32_addsub_ext,
    ADD_32_addsub_imm,
    ADD_32_addsub_shift,
    ADD_64_addsub_ext,
    ADD_64_addsub_imm,
    ADD_64_addsub_shift,
    ADD_Z_P_ZZ__,
    ADD_Z_ZI__,
    ADD_Z_ZZ__,
    ADD_asimdsame_only,
    ADD_asisdsame_only,
    ADRP_only_pcreladdr,
    ADR_Z_AZ_D_s32_scaled,
    ADR_Z_AZ_D_u32_scaled,
    ADR_Z_AZ_SD_same_scaled,
    ADR_only_pcreladdr,
    AESD_B_cryptoaes,
    AESE_B_cryptoaes,
    AESIMC_B_cryptoaes,
    AESMC_B_cryptoaes,
    ANDS_32S_log_imm,
    ANDS_32_log_shift,
    ANDS_64S_log_imm,
    ANDS_64_log_shift,
    ANDS_P_P_PP_Z,
    ANDV_R_P_Z__,
    AND_32_log_imm,
    AND_32_log_shift,
    AND_64_log_imm,
    AND_64_log_shift,
    AND_P_P_PP_Z,
    AND_Z_P_ZZ__,
    AND_Z_ZI__,
    AND_Z_ZZ__,
    AND_asimdsame_only,
    ASRD_Z_P_ZI__,
    ASRR_Z_P_ZZ__,
    ASRV_32_dp_2src,
    ASRV_64_dp_2src,
    ASR_Z_P_ZI__,
    ASR_Z_P_ZW__,
    ASR_Z_P_ZZ__,
    ASR_Z_ZI__,
    ASR_Z_ZW__,
    AUTDA_64P_dp_1src,
    AUTDB_64P_dp_1src,
    AUTDZA_64Z_dp_1src,
    AUTDZB_64Z_dp_1src,
    AUTIA1716_HI_hints,
    AUTIASP_HI_hints,
    AUTIAZ_HI_hints,
    AUTIA_64P_dp_1src,
    AUTIB1716_HI_hints,
    AUTIBSP_HI_hints,
    AUTIBZ_HI_hints,
    AUTIB_64P_dp_1src,
    AUTIZA_64Z_dp_1src,
    AUTIZB_64Z_dp_1src,
    AXFLAG_M_pstate,
    BCAX_VVV16_crypto4,
    BFCVTNT_Z_P_Z_S2BF,
    BFCVTN_asimdmisc_4S,
    BFCVT_BS_floatdp1,
    BFCVT_Z_P_Z_S2BF,
    BFDOT_Z_ZZZ__,
    BFDOT_Z_ZZZi__,
    BFDOT_asimdelem_E,
    BFDOT_asimdsame2_D,
    BFMLALB_Z_ZZZ__,
    BFMLALB_Z_ZZZi__,
    BFMLALT_Z_ZZZ__,
    BFMLALT_Z_ZZZi__,
    BFMLAL_asimdelem_F,
    BFMLAL_asimdsame2_F_,
    BFMMLA_Z_ZZZ__,
    BFMMLA_asimdsame2_E,
    BFM_32M_bitfield,
    BFM_64M_bitfield,
    BICS_32_log_shift,
    BICS_64_log_shift,
    BICS_P_P_PP_Z,
    BIC_32_log_shift,
    BIC_64_log_shift,
    BIC_P_P_PP_Z,
    BIC_Z_P_ZZ__,
    BIC_Z_ZZ__,
    BIC_asimdimm_L_hl,
    BIC_asimdimm_L_sl,
    BIC_asimdsame_only,
    BIF_asimdsame_only,
    BIT_asimdsame_only,
    BLRAAZ_64_branch_reg,
    BLRAA_64P_branch_reg,
    BLRABZ_64_branch_reg,
    BLRAB_64P_branch_reg,
    BLR_64_branch_reg,
    BL_only_branch_imm,
    BRAAZ_64_branch_reg,
    BRAA_64P_branch_reg,
    BRABZ_64_branch_reg,
    BRAB_64P_branch_reg,
    BRKAS_P_P_P_Z,
    BRKA_P_P_P__,
    BRKBS_P_P_P_Z,
    BRKB_P_P_P__,
    BRKNS_P_P_PP__,
    BRKN_P_P_PP__,
    BRKPAS_P_P_PP__,
    BRKPA_P_P_PP__,
    BRKPBS_P_P_PP__,
    BRKPB_P_P_PP__,
    BRK_EX_exception,
    BR_64_branch_reg,
    BSL_asimdsame_only,
    BTI_HB_hints,
    B_only_branch_imm,
    B_only_condbranch,
    CASAB_C32_ldstexcl,
    CASAH_C32_ldstexcl,
    CASALB_C32_ldstexcl,
    CASALH_C32_ldstexcl,
    CASAL_C32_ldstexcl,
    CASAL_C64_ldstexcl,
    CASA_C32_ldstexcl,
    CASA_C64_ldstexcl,
    CASB_C32_ldstexcl,
    CASH_C32_ldstexcl,
    CASLB_C32_ldstexcl,
    CASLH_C32_ldstexcl,
    CASL_C32_ldstexcl,
    CASL_C64_ldstexcl,
    CASPAL_CP32_ldstexcl,
    CASPAL_CP64_ldstexcl,
    CASPA_CP32_ldstexcl,
    CASPA_CP64_ldstexcl,
    CASPL_CP32_ldstexcl,
    CASPL_CP64_ldstexcl,
    CASP_CP32_ldstexcl,
    CASP_CP64_ldstexcl,
    CAS_C32_ldstexcl,
    CAS_C64_ldstexcl,
    CBNZ_32_compbranch,
    CBNZ_64_compbranch,
    CBZ_32_compbranch,
    CBZ_64_compbranch,
    CCMN_32_condcmp_imm,
    CCMN_32_condcmp_reg,
    CCMN_64_condcmp_imm,
    CCMN_64_condcmp_reg,
    CCMP_32_condcmp_imm,
    CCMP_32_condcmp_reg,
    CCMP_64_condcmp_imm,
    CCMP_64_condcmp_reg,
    CFINV_M_pstate,
    CLASTA_R_P_Z__,
    CLASTA_V_P_Z__,
    CLASTA_Z_P_ZZ__,
    CLASTB_R_P_Z__,
    CLASTB_V_P_Z__,
    CLASTB_Z_P_ZZ__,
    CLREX_BN_barriers,
    CLS_32_dp_1src,
    CLS_64_dp_1src,
    CLS_Z_P_Z__,
    CLS_asimdmisc_R,
    CLZ_32_dp_1src,
    CLZ_64_dp_1src,
    CLZ_Z_P_Z__,
    CLZ_asimdmisc_R,
    CMEQ_asimdmisc_Z,
    CMEQ_asimdsame_only,
    CMEQ_asisdmisc_Z,
    CMEQ_asisdsame_only,
    CMGE_asimdmisc_Z,
    CMGE_asimdsame_only,
    CMGE_asisdmisc_Z,
    CMGE_asisdsame_only,
    CMGT_asimdmisc_Z,
    CMGT_asimdsame_only,
    CMGT_asisdmisc_Z,
    CMGT_asisdsame_only,
    CMHI_asimdsame_only,
    CMHI_asisdsame_only,
    CMHS_asimdsame_only,
    CMHS_asisdsame_only,
    CMLE_asimdmisc_Z,
    CMLE_asisdmisc_Z,
    CMLT_asimdmisc_Z,
    CMLT_asisdmisc_Z,
    CMPEQ_P_P_ZI__,
    CMPEQ_P_P_ZW__,
    CMPEQ_P_P_ZZ__,
    CMPGE_P_P_ZI__,
    CMPGE_P_P_ZW__,
    CMPGE_P_P_ZZ__,
    CMPGT_P_P_ZI__,
    CMPGT_P_P_ZW__,
    CMPGT_P_P_ZZ__,
    CMPHI_P_P_ZI__,
    CMPHI_P_P_ZW__,
    CMPHI_P_P_ZZ__,
    CMPHS_P_P_ZI__,
    CMPHS_P_P_ZW__,
    CMPHS_P_P_ZZ__,
    CMPLE_P_P_ZI__,
    CMPLE_P_P_ZW__,
    CMPLO_P_P_ZI__,
    CMPLO_P_P_ZW__,
    CMPLS_P_P_ZI__,
    CMPLS_P_P_ZW__,
    CMPLT_P_P_ZI__,
    CMPLT_P_P_ZW__,
    CMPNE_P_P_ZI__,
    CMPNE_P_P_ZW__,
    CMPNE_P_P_ZZ__,
    CMTST_asimdsame_only,
    CMTST_asisdsame_only,
    CNOT_Z_P_Z__,
    CNTB_R_S__,
    CNTD_R_S__,
    CNTH_R_S__,
    CNTP_R_P_P__,
    CNTW_R_S__,
    CNT_Z_P_Z__,
    CNT_asimdmisc_R,
    COMPACT_Z_P_Z__,
    CPY_Z_O_I__,
    CPY_Z_P_I__,
    CPY_Z_P_R__,
    CPY_Z_P_V__,
    CRC32B_32C_dp_2src,
    CRC32CB_32C_dp_2src,
    CRC32CH_32C_dp_2src,
    CRC32CW_32C_dp_2src,
    CRC32CX_64C_dp_2src,
    CRC32H_32C_dp_2src,
    CRC32W_32C_dp_2src,
    CRC32X_64C_dp_2src,
    CSDB_HI_hints,
    CSEL_32_condsel,
    CSEL_64_condsel,
    CSINC_32_condsel,
    CSINC_64_condsel,
    CSINV_32_condsel,
    CSINV_64_condsel,
    CSNEG_32_condsel,
    CSNEG_64_condsel,
    CTERMEQ_RR__,
    CTERMNE_RR__,
    DCPS1_DC_exception,
    DCPS2_DC_exception,
    DCPS3_DC_exception,
    DECB_R_RS__,
    DECD_R_RS__,
    DECD_Z_ZS__,
    DECH_R_RS__,
    DECH_Z_ZS__,
    DECP_R_P_R__,
    DECP_Z_P_Z__,
    DECW_R_RS__,
    DECW_Z_ZS__,
    DGH_HI_hints,
    DMB_BO_barriers,
    DRPS_64E_branch_reg,
    DSB_BO_barriers,
    DUPM_Z_I__,
    DUP_Z_I__,
    DUP_Z_R__,
    DUP_Z_Zi__,
    DUP_asimdins_DR_r,
    DUP_asimdins_DV_v,
    DUP_asisdone_only,
    EON_32_log_shift,
    EON_64_log_shift,
    EOR3_VVV16_crypto4,
    EORS_P_P_PP_Z,
    EORV_R_P_Z__,
    EOR_32_log_imm,
    EOR_32_log_shift,
    EOR_64_log_imm,
    EOR_64_log_shift,
    EOR_P_P_PP_Z,
    EOR_Z_P_ZZ__,
    EOR_Z_ZI__,
    EOR_Z_ZZ__,
    EOR_asimdsame_only,
    ERETAA_64E_branch_reg,
    ERETAB_64E_branch_reg,
    ERET_64E_branch_reg,
    ESB_HI_hints,
    EXTR_32_extract,
    EXTR_64_extract,
    EXT_Z_ZI_Des,
    EXT_asimdext_only,
    FABD_Z_P_ZZ__,
    FABD_asimdsame_only,
    FABD_asimdsamefp16_only,
    FABD_asisdsame_only,
    FABD_asisdsamefp16_only,
    FABS_D_floatdp1,
    FABS_H_floatdp1,
    FABS_S_floatdp1,
    FABS_Z_P_Z__,
    FABS_asimdmisc_R,
    FABS_asimdmiscfp16_R,
    FACGE_P_P_ZZ__,
    FACGE_asimdsame_only,
    FACGE_asimdsamefp16_only,
    FACGE_asisdsame_only,
    FACGE_asisdsamefp16_only,
    FACGT_P_P_ZZ__,
    FACGT_asimdsame_only,
    FACGT_asimdsamefp16_only,
    FACGT_asisdsame_only,
    FACGT_asisdsamefp16_only,
    FADDA_V_P_Z__,
    FADDP_asimdsame_only,
    FADDP_asimdsamefp16_only,
    FADDP_asisdpair_only_H,
    FADDP_asisdpair_only_SD,
    FADDV_V_P_Z__,
    FADD_D_floatdp2,
    FADD_H_floatdp2,
    FADD_S_floatdp2,
    FADD_Z_P_ZS__,
    FADD_Z_P_ZZ__,
    FADD_Z_ZZ__,
    FADD_asimdsame_only,
    FADD_asimdsamefp16_only,
    FCADD_Z_P_ZZ__,
    FCADD_asimdsame2_C,
    FCCMPE_D_floatccmp,
    FCCMPE_H_floatccmp,
    FCCMPE_S_floatccmp,
    FCCMP_D_floatccmp,
    FCCMP_H_floatccmp,
    FCCMP_S_floatccmp,
    FCMEQ_P_P_Z0__,
    FCMEQ_P_P_ZZ__,
    FCMEQ_asimdmisc_FZ,
    FCMEQ_asimdmiscfp16_FZ,
    FCMEQ_asimdsame_only,
    FCMEQ_asimdsamefp16_only,
    FCMEQ_asisdmisc_FZ,
    FCMEQ_asisdmiscfp16_FZ,
    FCMEQ_asisdsame_only,
    FCMEQ_asisdsamefp16_only,
    FCMGE_P_P_Z0__,
    FCMGE_P_P_ZZ__,
    FCMGE_asimdmisc_FZ,
    FCMGE_asimdmiscfp16_FZ,
    FCMGE_asimdsame_only,
    FCMGE_asimdsamefp16_only,
    FCMGE_asisdmisc_FZ,
    FCMGE_asisdmiscfp16_FZ,
    FCMGE_asisdsame_only,
    FCMGE_asisdsamefp16_only,
    FCMGT_P_P_Z0__,
    FCMGT_P_P_ZZ__,
    FCMGT_asimdmisc_FZ,
    FCMGT_asimdmiscfp16_FZ,
    FCMGT_asimdsame_only,
    FCMGT_asimdsamefp16_only,
    FCMGT_asisdmisc_FZ,
    FCMGT_asisdmiscfp16_FZ,
    FCMGT_asisdsame_only,
    FCMGT_asisdsamefp16_only,
    FCMLA_Z_P_ZZZ__,
    FCMLA_Z_ZZZi_H,
    FCMLA_Z_ZZZi_S,
    FCMLA_asimdelem_C_H,
    FCMLA_asimdelem_C_S,
    FCMLA_asimdsame2_C,
    FCMLE_P_P_Z0__,
    FCMLE_asimdmisc_FZ,
    FCMLE_asimdmiscfp16_FZ,
    FCMLE_asisdmisc_FZ,
    FCMLE_asisdmiscfp16_FZ,
    FCMLT_P_P_Z0__,
    FCMLT_asimdmisc_FZ,
    FCMLT_asimdmiscfp16_FZ,
    FCMLT_asisdmisc_FZ,
    FCMLT_asisdmiscfp16_FZ,
    FCMNE_P_P_Z0__,
    FCMNE_P_P_ZZ__,
    FCMPE_DZ_floatcmp,
    FCMPE_D_floatcmp,
    FCMPE_HZ_floatcmp,
    FCMPE_H_floatcmp,
    FCMPE_SZ_floatcmp,
    FCMPE_S_floatcmp,
    FCMP_DZ_floatcmp,
    FCMP_D_floatcmp,
    FCMP_HZ_floatcmp,
    FCMP_H_floatcmp,
    FCMP_SZ_floatcmp,
    FCMP_S_floatcmp,
    FCMUO_P_P_ZZ__,
    FCPY_Z_P_I__,
    FCSEL_D_floatsel,
    FCSEL_H_floatsel,
    FCSEL_S_floatsel,
    FCVTAS_32D_float2int,
    FCVTAS_32H_float2int,
    FCVTAS_32S_float2int,
    FCVTAS_64D_float2int,
    FCVTAS_64H_float2int,
    FCVTAS_64S_float2int,
    FCVTAS_asimdmisc_R,
    FCVTAS_asimdmiscfp16_R,
    FCVTAS_asisdmisc_R,
    FCVTAS_asisdmiscfp16_R,
    FCVTAU_32D_float2int,
    FCVTAU_32H_float2int,
    FCVTAU_32S_float2int,
    FCVTAU_64D_float2int,
    FCVTAU_64H_float2int,
    FCVTAU_64S_float2int,
    FCVTAU_asimdmisc_R,
    FCVTAU_asimdmiscfp16_R,
    FCVTAU_asisdmisc_R,
    FCVTAU_asisdmiscfp16_R,
    FCVTL_asimdmisc_L,
    FCVTMS_32D_float2int,
    FCVTMS_32H_float2int,
    FCVTMS_32S_float2int,
    FCVTMS_64D_float2int,
    FCVTMS_64H_float2int,
    FCVTMS_64S_float2int,
    FCVTMS_asimdmisc_R,
    FCVTMS_asimdmiscfp16_R,
    FCVTMS_asisdmisc_R,
    FCVTMS_asisdmiscfp16_R,
    FCVTMU_32D_float2int,
    FCVTMU_32H_float2int,
    FCVTMU_32S_float2int,
    FCVTMU_64D_float2int,
    FCVTMU_64H_float2int,
    FCVTMU_64S_float2int,
    FCVTMU_asimdmisc_R,
    FCVTMU_asimdmiscfp16_R,
    FCVTMU_asisdmisc_R,
    FCVTMU_asisdmiscfp16_R,
    FCVTNS_32D_float2int,
    FCVTNS_32H_float2int,
    FCVTNS_32S_float2int,
    FCVTNS_64D_float2int,
    FCVTNS_64H_float2int,
    FCVTNS_64S_float2int,
    FCVTNS_asimdmisc_R,
    FCVTNS_asimdmiscfp16_R,
    FCVTNS_asisdmisc_R,
    FCVTNS_asisdmiscfp16_R,
    FCVTNU_32D_float2int,
    FCVTNU_32H_float2int,
    FCVTNU_32S_float2int,
    FCVTNU_64D_float2int,
    FCVTNU_64H_float2int,
    FCVTNU_64S_float2int,
    FCVTNU_asimdmisc_R,
    FCVTNU_asimdmiscfp16_R,
    FCVTNU_asisdmisc_R,
    FCVTNU_asisdmiscfp16_R,
    FCVTN_asimdmisc_N,
    FCVTPS_32D_float2int,
    FCVTPS_32H_float2int,
    FCVTPS_32S_float2int,
    FCVTPS_64D_float2int,
    FCVTPS_64H_float2int,
    FCVTPS_64S_float2int,
    FCVTPS_asimdmisc_R,
    FCVTPS_asimdmiscfp16_R,
    FCVTPS_asisdmisc_R,
    FCVTPS_asisdmiscfp16_R,
    FCVTPU_32D_float2int,
    FCVTPU_32H_float2int,
    FCVTPU_32S_float2int,
    FCVTPU_64D_float2int,
    FCVTPU_64H_float2int,
    FCVTPU_64S_float2int,
    FCVTPU_asimdmisc_R,
    FCVTPU_asimdmiscfp16_R,
    FCVTPU_asisdmisc_R,
    FCVTPU_asisdmiscfp16_R,
    FCVTXN_asimdmisc_N,
    FCVTXN_asisdmisc_N,
    FCVTZS_32D_float2fix,
    FCVTZS_32D_float2int,
    FCVTZS_32H_float2fix,
    FCVTZS_32H_float2int,
    FCVTZS_32S_float2fix,
    FCVTZS_32S_float2int,
    FCVTZS_64D_float2fix,
    FCVTZS_64D_float2int,
    FCVTZS_64H_float2fix,
    FCVTZS_64H_float2int,
    FCVTZS_64S_float2fix,
    FCVTZS_64S_float2int,
    FCVTZS_Z_P_Z_D2W,
    FCVTZS_Z_P_Z_D2X,
    FCVTZS_Z_P_Z_FP162H,
    FCVTZS_Z_P_Z_FP162W,
    FCVTZS_Z_P_Z_FP162X,
    FCVTZS_Z_P_Z_S2W,
    FCVTZS_Z_P_Z_S2X,
    FCVTZS_asimdmisc_R,
    FCVTZS_asimdmiscfp16_R,
    FCVTZS_asimdshf_C,
    FCVTZS_asisdmisc_R,
    FCVTZS_asisdmiscfp16_R,
    FCVTZS_asisdshf_C,
    FCVTZU_32D_float2fix,
    FCVTZU_32D_float2int,
    FCVTZU_32H_float2fix,
    FCVTZU_32H_float2int,
    FCVTZU_32S_float2fix,
    FCVTZU_32S_float2int,
    FCVTZU_64D_float2fix,
    FCVTZU_64D_float2int,
    FCVTZU_64H_float2fix,
    FCVTZU_64H_float2int,
    FCVTZU_64S_float2fix,
    FCVTZU_64S_float2int,
    FCVTZU_Z_P_Z_D2W,
    FCVTZU_Z_P_Z_D2X,
    FCVTZU_Z_P_Z_FP162H,
    FCVTZU_Z_P_Z_FP162W,
    FCVTZU_Z_P_Z_FP162X,
    FCVTZU_Z_P_Z_S2W,
    FCVTZU_Z_P_Z_S2X,
    FCVTZU_asimdmisc_R,
    FCVTZU_asimdmiscfp16_R,
    FCVTZU_asimdshf_C,
    FCVTZU_asisdmisc_R,
    FCVTZU_asisdmiscfp16_R,
    FCVTZU_asisdshf_C,
    FCVT_DH_floatdp1,
    FCVT_DS_floatdp1,
    FCVT_HD_floatdp1,
    FCVT_HS_floatdp1,
    FCVT_SD_floatdp1,
    FCVT_SH_floatdp1,
    FCVT_Z_P_Z_D2H,
    FCVT_Z_P_Z_D2S,
    FCVT_Z_P_Z_H2D,
    FCVT_Z_P_Z_H2S,
    FCVT_Z_P_Z_S2D,
    FCVT_Z_P_Z_S2H,
    FDIVR_Z_P_ZZ__,
    FDIV_D_floatdp2,
    FDIV_H_floatdp2,
    FDIV_S_floatdp2,
    FDIV_Z_P_ZZ__,
    FDIV_asimdsame_only,
    FDIV_asimdsamefp16_only,
    FDUP_Z_I__,
    FEXPA_Z_Z__,
    FJCVTZS_32D_float2int,
    FMADD_D_floatdp3,
    FMADD_H_floatdp3,
    FMADD_S_floatdp3,
    FMAD_Z_P_ZZZ__,
    FMAXNMP_asimdsame_only,
    FMAXNMP_asimdsamefp16_only,
    FMAXNMP_asisdpair_only_H,
    FMAXNMP_asisdpair_only_SD,
    FMAXNMV_V_P_Z__,
    FMAXNMV_asimdall_only_H,
    FMAXNMV_asimdall_only_SD,
    FMAXNM_D_floatdp2,
    FMAXNM_H_floatdp2,
    FMAXNM_S_floatdp2,
    FMAXNM_Z_P_ZS__,
    FMAXNM_Z_P_ZZ__,
    FMAXNM_asimdsame_only,
    FMAXNM_asimdsamefp16_only,
    FMAXP_asimdsame_only,
    FMAXP_asimdsamefp16_only,
    FMAXP_asisdpair_only_H,
    FMAXP_asisdpair_only_SD,
    FMAXV_V_P_Z__,
    FMAXV_asimdall_only_H,
    FMAXV_asimdall_only_SD,
    FMAX_D_floatdp2,
    FMAX_H_floatdp2,
    FMAX_S_floatdp2,
    FMAX_Z_P_ZS__,
    FMAX_Z_P_ZZ__,
    FMAX_asimdsame_only,
    FMAX_asimdsamefp16_only,
    FMINNMP_asimdsame_only,
    FMINNMP_asimdsamefp16_only,
    FMINNMP_asisdpair_only_H,
    FMINNMP_asisdpair_only_SD,
    FMINNMV_V_P_Z__,
    FMINNMV_asimdall_only_H,
    FMINNMV_asimdall_only_SD,
    FMINNM_D_floatdp2,
    FMINNM_H_floatdp2,
    FMINNM_S_floatdp2,
    FMINNM_Z_P_ZS__,
    FMINNM_Z_P_ZZ__,
    FMINNM_asimdsame_only,
    FMINNM_asimdsamefp16_only,
    FMINP_asimdsame_only,
    FMINP_asimdsamefp16_only,
    FMINP_asisdpair_only_H,
    FMINP_asisdpair_only_SD,
    FMINV_V_P_Z__,
    FMINV_asimdall_only_H,
    FMINV_asimdall_only_SD,
    FMIN_D_floatdp2,
    FMIN_H_floatdp2,
    FMIN_S_floatdp2,
    FMIN_Z_P_ZS__,
    FMIN_Z_P_ZZ__,
    FMIN_asimdsame_only,
    FMIN_asimdsamefp16_only,
    FMLAL2_asimdelem_LH,
    FMLAL2_asimdsame_F,
    FMLAL_asimdelem_LH,
    FMLAL_asimdsame_F,
    FMLA_Z_P_ZZZ__,
    FMLA_Z_ZZZi_D,
    FMLA_Z_ZZZi_H,
    FMLA_Z_ZZZi_S,
    FMLA_asimdelem_RH_H,
    FMLA_asimdelem_R_SD,
    FMLA_asimdsame_only,
    FMLA_asimdsamefp16_only,
    FMLA_asisdelem_RH_H,
    FMLA_asisdelem_R_SD,
    FMLSL2_asimdelem_LH,
    FMLSL2_asimdsame_F,
    FMLSL_asimdelem_LH,
    FMLSL_asimdsame_F,
    FMLS_Z_P_ZZZ__,
    FMLS_Z_ZZZi_D,
    FMLS_Z_ZZZi_H,
    FMLS_Z_ZZZi_S,
    FMLS_asimdelem_RH_H,
    FMLS_asimdelem_R_SD,
    FMLS_asimdsame_only,
    FMLS_asimdsamefp16_only,
    FMLS_asisdelem_RH_H,
    FMLS_asisdelem_R_SD,
    FMMLA_Z_ZZZ_D,
    FMMLA_Z_ZZZ_S,
    FMOV_32H_float2int,
    FMOV_32S_float2int,
    FMOV_64D_float2int,
    FMOV_64H_float2int,
    FMOV_64VX_float2int,
    FMOV_D64_float2int,
    FMOV_D_floatdp1,
    FMOV_D_floatimm,
    FMOV_H32_float2int,
    FMOV_H64_float2int,
    FMOV_H_floatdp1,
    FMOV_H_floatimm,
    FMOV_S32_float2int,
    FMOV_S_floatdp1,
    FMOV_S_floatimm,
    FMOV_V64I_float2int,
    FMOV_asimdimm_D2_d,
    FMOV_asimdimm_H_h,
    FMOV_asimdimm_S_s,
    FMSB_Z_P_ZZZ__,
    FMSUB_D_floatdp3,
    FMSUB_H_floatdp3,
    FMSUB_S_floatdp3,
    FMULX_Z_P_ZZ__,
    FMULX_asimdelem_RH_H,
    FMULX_asimdelem_R_SD,
    FMULX_asimdsame_only,
    FMULX_asimdsamefp16_only,
    FMULX_asisdelem_RH_H,
    FMULX_asisdelem_R_SD,
    FMULX_asisdsame_only,
    FMULX_asisdsamefp16_only,
    FMUL_D_floatdp2,
    FMUL_H_floatdp2,
    FMUL_S_floatdp2,
    FMUL_Z_P_ZS__,
    FMUL_Z_P_ZZ__,
    FMUL_Z_ZZ__,
    FMUL_Z_ZZi_D,
    FMUL_Z_ZZi_H,
    FMUL_Z_ZZi_S,
    FMUL_asimdelem_RH_H,
    FMUL_asimdelem_R_SD,
    FMUL_asimdsame_only,
    FMUL_asimdsamefp16_only,
    FMUL_asisdelem_RH_H,
    FMUL_asisdelem_R_SD,
    FNEG_D_floatdp1,
    FNEG_H_floatdp1,
    FNEG_S_floatdp1,
    FNEG_Z_P_Z__,
    FNEG_asimdmisc_R,
    FNEG_asimdmiscfp16_R,
    FNMADD_D_floatdp3,
    FNMADD_H_floatdp3,
    FNMADD_S_floatdp3,
    FNMAD_Z_P_ZZZ__,
    FNMLA_Z_P_ZZZ__,
    FNMLS_Z_P_ZZZ__,
    FNMSB_Z_P_ZZZ__,
    FNMSUB_D_floatdp3,
    FNMSUB_H_floatdp3,
    FNMSUB_S_floatdp3,
    FNMUL_D_floatdp2,
    FNMUL_H_floatdp2,
    FNMUL_S_floatdp2,
    FRECPE_Z_Z__,
    FRECPE_asimdmisc_R,
    FRECPE_asimdmiscfp16_R,
    FRECPE_asisdmisc_R,
    FRECPE_asisdmiscfp16_R,
    FRECPS_Z_ZZ__,
    FRECPS_asimdsame_only,
    FRECPS_asimdsamefp16_only,
    FRECPS_asisdsame_only,
    FRECPS_asisdsamefp16_only,
    FRECPX_Z_P_Z__,
    FRECPX_asisdmisc_R,
    FRECPX_asisdmiscfp16_R,
    FRINT32X_D_floatdp1,
    FRINT32X_S_floatdp1,
    FRINT32X_asimdmisc_R,
    FRINT32Z_D_floatdp1,
    FRINT32Z_S_floatdp1,
    FRINT32Z_asimdmisc_R,
    FRINT64X_D_floatdp1,
    FRINT64X_S_floatdp1,
    FRINT64X_asimdmisc_R,
    FRINT64Z_D_floatdp1,
    FRINT64Z_S_floatdp1,
    FRINT64Z_asimdmisc_R,
    FRINTA_D_floatdp1,
    FRINTA_H_floatdp1,
    FRINTA_S_floatdp1,
    FRINTA_Z_P_Z__,
    FRINTA_asimdmisc_R,
    FRINTA_asimdmiscfp16_R,
    FRINTI_D_floatdp1,
    FRINTI_H_floatdp1,
    FRINTI_S_floatdp1,
    FRINTI_Z_P_Z__,
    FRINTI_asimdmisc_R,
    FRINTI_asimdmiscfp16_R,
    FRINTM_D_floatdp1,
    FRINTM_H_floatdp1,
    FRINTM_S_floatdp1,
    FRINTM_Z_P_Z__,
    FRINTM_asimdmisc_R,
    FRINTM_asimdmiscfp16_R,
    FRINTN_D_floatdp1,
    FRINTN_H_floatdp1,
    FRINTN_S_floatdp1,
    FRINTN_Z_P_Z__,
    FRINTN_asimdmisc_R,
    FRINTN_asimdmiscfp16_R,
    FRINTP_D_floatdp1,
    FRINTP_H_floatdp1,
    FRINTP_S_floatdp1,
    FRINTP_Z_P_Z__,
    FRINTP_asimdmisc_R,
    FRINTP_asimdmiscfp16_R,
    FRINTX_D_floatdp1,
    FRINTX_H_floatdp1,
    FRINTX_S_floatdp1,
    FRINTX_Z_P_Z__,
    FRINTX_asimdmisc_R,
    FRINTX_asimdmiscfp16_R,
    FRINTZ_D_floatdp1,
    FRINTZ_H_floatdp1,
    FRINTZ_S_floatdp1,
    FRINTZ_Z_P_Z__,
    FRINTZ_asimdmisc_R,
    FRINTZ_asimdmiscfp16_R,
    FRSQRTE_Z_Z__,
    FRSQRTE_asimdmisc_R,
    FRSQRTE_asimdmiscfp16_R,
    FRSQRTE_asisdmisc_R,
    FRSQRTE_asisdmiscfp16_R,
    FRSQRTS_Z_ZZ__,
    FRSQRTS_asimdsame_only,
    FRSQRTS_asimdsamefp16_only,
    FRSQRTS_asisdsame_only,
    FRSQRTS_asisdsamefp16_only,
    FSCALE_Z_P_ZZ__,
    FSQRT_D_floatdp1,
    FSQRT_H_floatdp1,
    FSQRT_S_floatdp1,
    FSQRT_Z_P_Z__,
    FSQRT_asimdmisc_R,
    FSQRT_asimdmiscfp16_R,
    FSUBR_Z_P_ZS__,
    FSUBR_Z_P_ZZ__,
    FSUB_D_floatdp2,
    FSUB_H_floatdp2,
    FSUB_S_floatdp2,
    FSUB_Z_P_ZS__,
    FSUB_Z_P_ZZ__,
    FSUB_Z_ZZ__,
    FSUB_asimdsame_only,
    FSUB_asimdsamefp16_only,
    FTMAD_Z_ZZI__,
    FTSMUL_Z_ZZ__,
    FTSSEL_Z_ZZ__,
    GMI_64G_dp_2src,
    HINT_HM_hints,
    HLT_EX_exception,
    HVC_EX_exception,
    INCB_R_RS__,
    INCD_R_RS__,
    INCD_Z_ZS__,
    INCH_R_RS__,
    INCH_Z_ZS__,
    INCP_R_P_R__,
    INCP_Z_P_Z__,
    INCW_R_RS__,
    INCW_Z_ZS__,
    INDEX_Z_II__,
    INDEX_Z_IR__,
    INDEX_Z_RI__,
    INDEX_Z_RR__,
    INSR_Z_R__,
    INSR_Z_V__,
    INS_asimdins_IR_r,
    INS_asimdins_IV_v,
    IRG_64I_dp_2src,
    ISB_BI_barriers,
    LASTA_R_P_Z__,
    LASTA_V_P_Z__,
    LASTB_R_P_Z__,
    LASTB_V_P_Z__,
    LD1B_Z_P_AI_D,
    LD1B_Z_P_AI_S,
    LD1B_Z_P_BI_U16,
    LD1B_Z_P_BI_U32,
    LD1B_Z_P_BI_U64,
    LD1B_Z_P_BI_U8,
    LD1B_Z_P_BR_U16,
    LD1B_Z_P_BR_U32,
    LD1B_Z_P_BR_U64,
    LD1B_Z_P_BR_U8,
    LD1B_Z_P_BZ_D_64_unscaled,
    LD1B_Z_P_BZ_D_x32_unscaled,
    LD1B_Z_P_BZ_S_x32_unscaled,
    LD1D_Z_P_AI_D,
    LD1D_Z_P_BI_U64,
    LD1D_Z_P_BR_U64,
    LD1D_Z_P_BZ_D_64_scaled,
    LD1D_Z_P_BZ_D_64_unscaled,
    LD1D_Z_P_BZ_D_x32_scaled,
    LD1D_Z_P_BZ_D_x32_unscaled,
    LD1H_Z_P_AI_D,
    LD1H_Z_P_AI_S,
    LD1H_Z_P_BI_U16,
    LD1H_Z_P_BI_U32,
    LD1H_Z_P_BI_U64,
    LD1H_Z_P_BR_U16,
    LD1H_Z_P_BR_U32,
    LD1H_Z_P_BR_U64,
    LD1H_Z_P_BZ_D_64_scaled,
    LD1H_Z_P_BZ_D_64_unscaled,
    LD1H_Z_P_BZ_D_x32_scaled,
    LD1H_Z_P_BZ_D_x32_unscaled,
    LD1H_Z_P_BZ_S_x32_scaled,
    LD1H_Z_P_BZ_S_x32_unscaled,
    LD1RB_Z_P_BI_U16,
    LD1RB_Z_P_BI_U32,
    LD1RB_Z_P_BI_U64,
    LD1RB_Z_P_BI_U8,
    LD1RD_Z_P_BI_U64,
    LD1RH_Z_P_BI_U16,
    LD1RH_Z_P_BI_U32,
    LD1RH_Z_P_BI_U64,
    LD1ROB_Z_P_BI_U8,
    LD1ROB_Z_P_BR_Contiguous,
    LD1ROD_Z_P_BI_U64,
    LD1ROD_Z_P_BR_Contiguous,
    LD1ROH_Z_P_BI_U16,
    LD1ROH_Z_P_BR_Contiguous,
    LD1ROW_Z_P_BI_U32,
    LD1ROW_Z_P_BR_Contiguous,
    LD1RQB_Z_P_BI_U8,
    LD1RQB_Z_P_BR_Contiguous,
    LD1RQD_Z_P_BI_U64,
    LD1RQD_Z_P_BR_Contiguous,
    LD1RQH_Z_P_BI_U16,
    LD1RQH_Z_P_BR_Contiguous,
    LD1RQW_Z_P_BI_U32,
    LD1RQW_Z_P_BR_Contiguous,
    LD1RSB_Z_P_BI_S16,
    LD1RSB_Z_P_BI_S32,
    LD1RSB_Z_P_BI_S64,
    LD1RSH_Z_P_BI_S32,
    LD1RSH_Z_P_BI_S64,
    LD1RSW_Z_P_BI_S64,
    LD1RW_Z_P_BI_U32,
    LD1RW_Z_P_BI_U64,
    LD1R_asisdlso_R1,
    LD1R_asisdlsop_R1_i,
    LD1R_asisdlsop_RX1_r,
    LD1SB_Z_P_AI_D,
    LD1SB_Z_P_AI_S,
    LD1SB_Z_P_BI_S16,
    LD1SB_Z_P_BI_S32,
    LD1SB_Z_P_BI_S64,
    LD1SB_Z_P_BR_S16,
    LD1SB_Z_P_BR_S32,
    LD1SB_Z_P_BR_S64,
    LD1SB_Z_P_BZ_D_64_unscaled,
    LD1SB_Z_P_BZ_D_x32_unscaled,
    LD1SB_Z_P_BZ_S_x32_unscaled,
    LD1SH_Z_P_AI_D,
    LD1SH_Z_P_AI_S,
    LD1SH_Z_P_BI_S32,
    LD1SH_Z_P_BI_S64,
    LD1SH_Z_P_BR_S32,
    LD1SH_Z_P_BR_S64,
    LD1SH_Z_P_BZ_D_64_scaled,
    LD1SH_Z_P_BZ_D_64_unscaled,
    LD1SH_Z_P_BZ_D_x32_scaled,
    LD1SH_Z_P_BZ_D_x32_unscaled,
    LD1SH_Z_P_BZ_S_x32_scaled,
    LD1SH_Z_P_BZ_S_x32_unscaled,
    LD1SW_Z_P_AI_D,
    LD1SW_Z_P_BI_S64,
    LD1SW_Z_P_BR_S64,
    LD1SW_Z_P_BZ_D_64_scaled,
    LD1SW_Z_P_BZ_D_64_unscaled,
    LD1SW_Z_P_BZ_D_x32_scaled,
    LD1SW_Z_P_BZ_D_x32_unscaled,
    LD1W_Z_P_AI_D,
    LD1W_Z_P_AI_S,
    LD1W_Z_P_BI_U32,
    LD1W_Z_P_BI_U64,
    LD1W_Z_P_BR_U32,
    LD1W_Z_P_BR_U64,
    LD1W_Z_P_BZ_D_64_scaled,
    LD1W_Z_P_BZ_D_64_unscaled,
    LD1W_Z_P_BZ_D_x32_scaled,
    LD1W_Z_P_BZ_D_x32_unscaled,
    LD1W_Z_P_BZ_S_x32_scaled,
    LD1W_Z_P_BZ_S_x32_unscaled,
    LD1_asisdlse_R1_1v,
    LD1_asisdlse_R2_2v,
    LD1_asisdlse_R3_3v,
    LD1_asisdlse_R4_4v,
    LD1_asisdlsep_I1_i1,
    LD1_asisdlsep_I2_i2,
    LD1_asisdlsep_I3_i3,
    LD1_asisdlsep_I4_i4,
    LD1_asisdlsep_R1_r1,
    LD1_asisdlsep_R2_r2,
    LD1_asisdlsep_R3_r3,
    LD1_asisdlsep_R4_r4,
    LD1_asisdlso_B1_1b,
    LD1_asisdlso_D1_1d,
    LD1_asisdlso_H1_1h,
    LD1_asisdlso_S1_1s,
    LD1_asisdlsop_B1_i1b,
    LD1_asisdlsop_BX1_r1b,
    LD1_asisdlsop_D1_i1d,
    LD1_asisdlsop_DX1_r1d,
    LD1_asisdlsop_H1_i1h,
    LD1_asisdlsop_HX1_r1h,
    LD1_asisdlsop_S1_i1s,
    LD1_asisdlsop_SX1_r1s,
    LD2B_Z_P_BI_Contiguous,
    LD2B_Z_P_BR_Contiguous,
    LD2D_Z_P_BI_Contiguous,
    LD2D_Z_P_BR_Contiguous,
    LD2H_Z_P_BI_Contiguous,
    LD2H_Z_P_BR_Contiguous,
    LD2R_asisdlso_R2,
    LD2R_asisdlsop_R2_i,
    LD2R_asisdlsop_RX2_r,
    LD2W_Z_P_BI_Contiguous,
    LD2W_Z_P_BR_Contiguous,
    LD2_asisdlse_R2,
    LD2_asisdlsep_I2_i,
    LD2_asisdlsep_R2_r,
    LD2_asisdlso_B2_2b,
    LD2_asisdlso_D2_2d,
    LD2_asisdlso_H2_2h,
    LD2_asisdlso_S2_2s,
    LD2_asisdlsop_B2_i2b,
    LD2_asisdlsop_BX2_r2b,
    LD2_asisdlsop_D2_i2d,
    LD2_asisdlsop_DX2_r2d,
    LD2_asisdlsop_H2_i2h,
    LD2_asisdlsop_HX2_r2h,
    LD2_asisdlsop_S2_i2s,
    LD2_asisdlsop_SX2_r2s,
    LD3B_Z_P_BI_Contiguous,
    LD3B_Z_P_BR_Contiguous,
    LD3D_Z_P_BI_Contiguous,
    LD3D_Z_P_BR_Contiguous,
    LD3H_Z_P_BI_Contiguous,
    LD3H_Z_P_BR_Contiguous,
    LD3R_asisdlso_R3,
    LD3R_asisdlsop_R3_i,
    LD3R_asisdlsop_RX3_r,
    LD3W_Z_P_BI_Contiguous,
    LD3W_Z_P_BR_Contiguous,
    LD3_asisdlse_R3,
    LD3_asisdlsep_I3_i,
    LD3_asisdlsep_R3_r,
    LD3_asisdlso_B3_3b,
    LD3_asisdlso_D3_3d,
    LD3_asisdlso_H3_3h,
    LD3_asisdlso_S3_3s,
    LD3_asisdlsop_B3_i3b,
    LD3_asisdlsop_BX3_r3b,
    LD3_asisdlsop_D3_i3d,
    LD3_asisdlsop_DX3_r3d,
    LD3_asisdlsop_H3_i3h,
    LD3_asisdlsop_HX3_r3h,
    LD3_asisdlsop_S3_i3s,
    LD3_asisdlsop_SX3_r3s,
    LD4B_Z_P_BI_Contiguous,
    LD4B_Z_P_BR_Contiguous,
    LD4D_Z_P_BI_Contiguous,
    LD4D_Z_P_BR_Contiguous,
    LD4H_Z_P_BI_Contiguous,
    LD4H_Z_P_BR_Contiguous,
    LD4R_asisdlso_R4,
    LD4R_asisdlsop_R4_i,
    LD4R_asisdlsop_RX4_r,
    LD4W_Z_P_BI_Contiguous,
    LD4W_Z_P_BR_Contiguous,
    LD4_asisdlse_R4,
    LD4_asisdlsep_I4_i,
    LD4_asisdlsep_R4_r,
    LD4_asisdlso_B4_4b,
    LD4_asisdlso_D4_4d,
    LD4_asisdlso_H4_4h,
    LD4_asisdlso_S4_4s,
    LD4_asisdlsop_B4_i4b,
    LD4_asisdlsop_BX4_r4b,
    LD4_asisdlsop_D4_i4d,
    LD4_asisdlsop_DX4_r4d,
    LD4_asisdlsop_H4_i4h,
    LD4_asisdlsop_HX4_r4h,
    LD4_asisdlsop_S4_i4s,
    LD4_asisdlsop_SX4_r4s,
    LDADDAB_32_memop,
    LDADDAH_32_memop,
    LDADDALB_32_memop,
    LDADDALH_32_memop,
    LDADDAL_32_memop,
    LDADDAL_64_memop,
    LDADDA_32_memop,
    LDADDA_64_memop,
    LDADDB_32_memop,
    LDADDH_32_memop,
    LDADDLB_32_memop,
    LDADDLH_32_memop,
    LDADDL_32_memop,
    LDADDL_64_memop,
    LDADD_32_memop,
    LDADD_64_memop,
    LDAPRB_32L_memop,
    LDAPRH_32L_memop,
    LDAPR_32L_memop,
    LDAPR_64L_memop,
    LDAPURB_32_ldapstl_unscaled,
    LDAPURH_32_ldapstl_unscaled,
    LDAPURSB_32_ldapstl_unscaled,
    LDAPURSB_64_ldapstl_unscaled,
    LDAPURSH_32_ldapstl_unscaled,
    LDAPURSH_64_ldapstl_unscaled,
    LDAPURSW_64_ldapstl_unscaled,
    LDAPUR_32_ldapstl_unscaled,
    LDAPUR_64_ldapstl_unscaled,
    LDARB_LR32_ldstexcl,
    LDARH_LR32_ldstexcl,
    LDAR_LR32_ldstexcl,
    LDAR_LR64_ldstexcl,
    LDAXP_LP32_ldstexcl,
    LDAXP_LP64_ldstexcl,
    LDAXRB_LR32_ldstexcl,
    LDAXRH_LR32_ldstexcl,
    LDAXR_LR32_ldstexcl,
    LDAXR_LR64_ldstexcl,
    LDCLRAB_32_memop,
    LDCLRAH_32_memop,
    LDCLRALB_32_memop,
    LDCLRALH_32_memop,
    LDCLRAL_32_memop,
    LDCLRAL_64_memop,
    LDCLRA_32_memop,
    LDCLRA_64_memop,
    LDCLRB_32_memop,
    LDCLRH_32_memop,
    LDCLRLB_32_memop,
    LDCLRLH_32_memop,
    LDCLRL_32_memop,
    LDCLRL_64_memop,
    LDCLR_32_memop,
    LDCLR_64_memop,
    LDEORAB_32_memop,
    LDEORAH_32_memop,
    LDEORALB_32_memop,
    LDEORALH_32_memop,
    LDEORAL_32_memop,
    LDEORAL_64_memop,
    LDEORA_32_memop,
    LDEORA_64_memop,
    LDEORB_32_memop,
    LDEORH_32_memop,
    LDEORLB_32_memop,
    LDEORLH_32_memop,
    LDEORL_32_memop,
    LDEORL_64_memop,
    LDEOR_32_memop,
    LDEOR_64_memop,
    LDFF1B_Z_P_AI_D,
    LDFF1B_Z_P_AI_S,
    LDFF1B_Z_P_BR_U16,
    LDFF1B_Z_P_BR_U32,
    LDFF1B_Z_P_BR_U64,
    LDFF1B_Z_P_BR_U8,
    LDFF1B_Z_P_BZ_D_64_unscaled,
    LDFF1B_Z_P_BZ_D_x32_unscaled,
    LDFF1B_Z_P_BZ_S_x32_unscaled,
    LDFF1D_Z_P_AI_D,
    LDFF1D_Z_P_BR_U64,
    LDFF1D_Z_P_BZ_D_64_scaled,
    LDFF1D_Z_P_BZ_D_64_unscaled,
    LDFF1D_Z_P_BZ_D_x32_scaled,
    LDFF1D_Z_P_BZ_D_x32_unscaled,
    LDFF1H_Z_P_AI_D,
    LDFF1H_Z_P_AI_S,
    LDFF1H_Z_P_BR_U16,
    LDFF1H_Z_P_BR_U32,
    LDFF1H_Z_P_BR_U64,
    LDFF1H_Z_P_BZ_D_64_scaled,
    LDFF1H_Z_P_BZ_D_64_unscaled,
    LDFF1H_Z_P_BZ_D_x32_scaled,
    LDFF1H_Z_P_BZ_D_x32_unscaled,
    LDFF1H_Z_P_BZ_S_x32_scaled,
    LDFF1H_Z_P_BZ_S_x32_unscaled,
    LDFF1SB_Z_P_AI_D,
    LDFF1SB_Z_P_AI_S,
    LDFF1SB_Z_P_BR_S16,
    LDFF1SB_Z_P_BR_S32,
    LDFF1SB_Z_P_BR_S64,
    LDFF1SB_Z_P_BZ_D_64_unscaled,
    LDFF1SB_Z_P_BZ_D_x32_unscaled,
    LDFF1SB_Z_P_BZ_S_x32_unscaled,
    LDFF1SH_Z_P_AI_D,
    LDFF1SH_Z_P_AI_S,
    LDFF1SH_Z_P_BR_S32,
    LDFF1SH_Z_P_BR_S64,
    LDFF1SH_Z_P_BZ_D_64_scaled,
    LDFF1SH_Z_P_BZ_D_64_unscaled,
    LDFF1SH_Z_P_BZ_D_x32_scaled,
    LDFF1SH_Z_P_BZ_D_x32_unscaled,
    LDFF1SH_Z_P_BZ_S_x32_scaled,
    LDFF1SH_Z_P_BZ_S_x32_unscaled,
    LDFF1SW_Z_P_AI_D,
    LDFF1SW_Z_P_BR_S64,
    LDFF1SW_Z_P_BZ_D_64_scaled,
    LDFF1SW_Z_P_BZ_D_64_unscaled,
    LDFF1SW_Z_P_BZ_D_x32_scaled,
    LDFF1SW_Z_P_BZ_D_x32_unscaled,
    LDFF1W_Z_P_AI_D,
    LDFF1W_Z_P_AI_S,
    LDFF1W_Z_P_BR_U32,
    LDFF1W_Z_P_BR_U64,
    LDFF1W_Z_P_BZ_D_64_scaled,
    LDFF1W_Z_P_BZ_D_64_unscaled,
    LDFF1W_Z_P_BZ_D_x32_scaled,
    LDFF1W_Z_P_BZ_D_x32_unscaled,
    LDFF1W_Z_P_BZ_S_x32_scaled,
    LDFF1W_Z_P_BZ_S_x32_unscaled,
    LDGM_64bulk_ldsttags,
    LDG_64Loffset_ldsttags,
    LDLARB_LR32_ldstexcl,
    LDLARH_LR32_ldstexcl,
    LDLAR_LR32_ldstexcl,
    LDLAR_LR64_ldstexcl,
    LDNF1B_Z_P_BI_U16,
    LDNF1B_Z_P_BI_U32,
    LDNF1B_Z_P_BI_U64,
    LDNF1B_Z_P_BI_U8,
    LDNF1D_Z_P_BI_U64,
    LDNF1H_Z_P_BI_U16,
    LDNF1H_Z_P_BI_U32,
    LDNF1H_Z_P_BI_U64,
    LDNF1SB_Z_P_BI_S16,
    LDNF1SB_Z_P_BI_S32,
    LDNF1SB_Z_P_BI_S64,
    LDNF1SH_Z_P_BI_S32,
    LDNF1SH_Z_P_BI_S64,
    LDNF1SW_Z_P_BI_S64,
    LDNF1W_Z_P_BI_U32,
    LDNF1W_Z_P_BI_U64,
    LDNP_32_ldstnapair_offs,
    LDNP_64_ldstnapair_offs,
    LDNP_D_ldstnapair_offs,
    LDNP_Q_ldstnapair_offs,
    LDNP_S_ldstnapair_offs,
    LDNT1B_Z_P_BI_Contiguous,
    LDNT1B_Z_P_BR_Contiguous,
    LDNT1D_Z_P_BI_Contiguous,
    LDNT1D_Z_P_BR_Contiguous,
    LDNT1H_Z_P_BI_Contiguous,
    LDNT1H_Z_P_BR_Contiguous,
    LDNT1W_Z_P_BI_Contiguous,
    LDNT1W_Z_P_BR_Contiguous,
    LDPSW_64_ldstpair_off,
    LDPSW_64_ldstpair_post,
    LDPSW_64_ldstpair_pre,
    LDP_32_ldstpair_off,
    LDP_32_ldstpair_post,
    LDP_32_ldstpair_pre,
    LDP_64_ldstpair_off,
    LDP_64_ldstpair_post,
    LDP_64_ldstpair_pre,
    LDP_D_ldstpair_off,
    LDP_D_ldstpair_post,
    LDP_D_ldstpair_pre,
    LDP_Q_ldstpair_off,
    LDP_Q_ldstpair_post,
    LDP_Q_ldstpair_pre,
    LDP_S_ldstpair_off,
    LDP_S_ldstpair_post,
    LDP_S_ldstpair_pre,
    LDRAA_64W_ldst_pac,
    LDRAA_64_ldst_pac,
    LDRAB_64W_ldst_pac,
    LDRAB_64_ldst_pac,
    LDRB_32BL_ldst_regoff,
    LDRB_32B_ldst_regoff,
    LDRB_32_ldst_immpost,
    LDRB_32_ldst_immpre,
    LDRB_32_ldst_pos,
    LDRH_32_ldst_immpost,
    LDRH_32_ldst_immpre,
    LDRH_32_ldst_pos,
    LDRH_32_ldst_regoff,
    LDRSB_32BL_ldst_regoff,
    LDRSB_32B_ldst_regoff,
    LDRSB_32_ldst_immpost,
    LDRSB_32_ldst_immpre,
    LDRSB_32_ldst_pos,
    LDRSB_64BL_ldst_regoff,
    LDRSB_64B_ldst_regoff,
    LDRSB_64_ldst_immpost,
    LDRSB_64_ldst_immpre,
    LDRSB_64_ldst_pos,
    LDRSH_32_ldst_immpost,
    LDRSH_32_ldst_immpre,
    LDRSH_32_ldst_pos,
    LDRSH_32_ldst_regoff,
    LDRSH_64_ldst_immpost,
    LDRSH_64_ldst_immpre,
    LDRSH_64_ldst_pos,
    LDRSH_64_ldst_regoff,
    LDRSW_64_ldst_immpost,
    LDRSW_64_ldst_immpre,
    LDRSW_64_ldst_pos,
    LDRSW_64_ldst_regoff,
    LDRSW_64_loadlit,
    LDR_32_ldst_immpost,
    LDR_32_ldst_immpre,
    LDR_32_ldst_pos,
    LDR_32_ldst_regoff,
    LDR_32_loadlit,
    LDR_64_ldst_immpost,
    LDR_64_ldst_immpre,
    LDR_64_ldst_pos,
    LDR_64_ldst_regoff,
    LDR_64_loadlit,
    LDR_BL_ldst_regoff,
    LDR_B_ldst_immpost,
    LDR_B_ldst_immpre,
    LDR_B_ldst_pos,
    LDR_B_ldst_regoff,
    LDR_D_ldst_immpost,
    LDR_D_ldst_immpre,
    LDR_D_ldst_pos,
    LDR_D_ldst_regoff,
    LDR_D_loadlit,
    LDR_H_ldst_immpost,
    LDR_H_ldst_immpre,
    LDR_H_ldst_pos,
    LDR_H_ldst_regoff,
    LDR_P_BI__,
    LDR_Q_ldst_immpost,
    LDR_Q_ldst_immpre,
    LDR_Q_ldst_pos,
    LDR_Q_ldst_regoff,
    LDR_Q_loadlit,
    LDR_S_ldst_immpost,
    LDR_S_ldst_immpre,
    LDR_S_ldst_pos,
    LDR_S_ldst_regoff,
    LDR_S_loadlit,
    LDR_Z_BI__,
    LDSETAB_32_memop,
    LDSETAH_32_memop,
    LDSETALB_32_memop,
    LDSETALH_32_memop,
    LDSETAL_32_memop,
    LDSETAL_64_memop,
    LDSETA_32_memop,
    LDSETA_64_memop,
    LDSETB_32_memop,
    LDSETH_32_memop,
    LDSETLB_32_memop,
    LDSETLH_32_memop,
    LDSETL_32_memop,
    LDSETL_64_memop,
    LDSET_32_memop,
    LDSET_64_memop,
    LDSMAXAB_32_memop,
    LDSMAXAH_32_memop,
    LDSMAXALB_32_memop,
    LDSMAXALH_32_memop,
    LDSMAXAL_32_memop,
    LDSMAXAL_64_memop,
    LDSMAXA_32_memop,
    LDSMAXA_64_memop,
    LDSMAXB_32_memop,
    LDSMAXH_32_memop,
    LDSMAXLB_32_memop,
    LDSMAXLH_32_memop,
    LDSMAXL_32_memop,
    LDSMAXL_64_memop,
    LDSMAX_32_memop,
    LDSMAX_64_memop,
    LDSMINAB_32_memop,
    LDSMINAH_32_memop,
    LDSMINALB_32_memop,
    LDSMINALH_32_memop,
    LDSMINAL_32_memop,
    LDSMINAL_64_memop,
    LDSMINA_32_memop,
    LDSMINA_64_memop,
    LDSMINB_32_memop,
    LDSMINH_32_memop,
    LDSMINLB_32_memop,
    LDSMINLH_32_memop,
    LDSMINL_32_memop,
    LDSMINL_64_memop,
    LDSMIN_32_memop,
    LDSMIN_64_memop,
    LDTRB_32_ldst_unpriv,
    LDTRH_32_ldst_unpriv,
    LDTRSB_32_ldst_unpriv,
    LDTRSB_64_ldst_unpriv,
    LDTRSH_32_ldst_unpriv,
    LDTRSH_64_ldst_unpriv,
    LDTRSW_64_ldst_unpriv,
    LDTR_32_ldst_unpriv,
    LDTR_64_ldst_unpriv,
    LDUMAXAB_32_memop,
    LDUMAXAH_32_memop,
    LDUMAXALB_32_memop,
    LDUMAXALH_32_memop,
    LDUMAXAL_32_memop,
    LDUMAXAL_64_memop,
    LDUMAXA_32_memop,
    LDUMAXA_64_memop,
    LDUMAXB_32_memop,
    LDUMAXH_32_memop,
    LDUMAXLB_32_memop,
    LDUMAXLH_32_memop,
    LDUMAXL_32_memop,
    LDUMAXL_64_memop,
    LDUMAX_32_memop,
    LDUMAX_64_memop,
    LDUMINAB_32_memop,
    LDUMINAH_32_memop,
    LDUMINALB_32_memop,
    LDUMINALH_32_memop,
    LDUMINAL_32_memop,
    LDUMINAL_64_memop,
    LDUMINA_32_memop,
    LDUMINA_64_memop,
    LDUMINB_32_memop,
    LDUMINH_32_memop,
    LDUMINLB_32_memop,
    LDUMINLH_32_memop,
    LDUMINL_32_memop,
    LDUMINL_64_memop,
    LDUMIN_32_memop,
    LDUMIN_64_memop,
    LDURB_32_ldst_unscaled,
    LDURH_32_ldst_unscaled,
    LDURSB_32_ldst_unscaled,
    LDURSB_64_ldst_unscaled,
    LDURSH_32_ldst_unscaled,
    LDURSH_64_ldst_unscaled,
    LDURSW_64_ldst_unscaled,
    LDUR_32_ldst_unscaled,
    LDUR_64_ldst_unscaled,
    LDUR_B_ldst_unscaled,
    LDUR_D_ldst_unscaled,
    LDUR_H_ldst_unscaled,
    LDUR_Q_ldst_unscaled,
    LDUR_S_ldst_unscaled,
    LDXP_LP32_ldstexcl,
    LDXP_LP64_ldstexcl,
    LDXRB_LR32_ldstexcl,
    LDXRH_LR32_ldstexcl,
    LDXR_LR32_ldstexcl,
    LDXR_LR64_ldstexcl,
    LSLR_Z_P_ZZ__,
    LSLV_32_dp_2src,
    LSLV_64_dp_2src,
    LSL_Z_P_ZI__,
    LSL_Z_P_ZW__,
    LSL_Z_P_ZZ__,
    LSL_Z_ZI__,
    LSL_Z_ZW__,
    LSRR_Z_P_ZZ__,
    LSRV_32_dp_2src,
    LSRV_64_dp_2src,
    LSR_Z_P_ZI__,
    LSR_Z_P_ZW__,
    LSR_Z_P_ZZ__,
    LSR_Z_ZI__,
    LSR_Z_ZW__,
    MADD_32A_dp_3src,
    MADD_64A_dp_3src,
    MAD_Z_P_ZZZ__,
    MLA_Z_P_ZZZ__,
    MLA_asimdelem_R,
    MLA_asimdsame_only,
    MLS_Z_P_ZZZ__,
    MLS_asimdelem_R,
    MLS_asimdsame_only,
    MOVI_asimdimm_D2_d,
    MOVI_asimdimm_D_ds,
    MOVI_asimdimm_L_hl,
    MOVI_asimdimm_L_sl,
    MOVI_asimdimm_M_sm,
    MOVI_asimdimm_N_b,
    MOVK_32_movewide,
    MOVK_64_movewide,
    MOVN_32_movewide,
    MOVN_64_movewide,
    MOVPRFX_Z_P_Z__,
    MOVPRFX_Z_Z__,
    MOVZ_32_movewide,
    MOVZ_64_movewide,
    MRS_RS_systemmove,
    MSB_Z_P_ZZZ__,
    MSR_SI_pstate,
    MSR_SR_systemmove,
    MSUB_32A_dp_3src,
    MSUB_64A_dp_3src,
    MUL_Z_P_ZZ__,
    MUL_Z_ZI__,
    MUL_asimdelem_R,
    MUL_asimdsame_only,
    MVNI_asimdimm_L_hl,
    MVNI_asimdimm_L_sl,
    MVNI_asimdimm_M_sm,
    NANDS_P_P_PP_Z,
    NAND_P_P_PP_Z,
    NEG_Z_P_Z__,
    NEG_asimdmisc_R,
    NEG_asisdmisc_R,
    NOP_HI_hints,
    NORS_P_P_PP_Z,
    NOR_P_P_PP_Z,
    NOT_Z_P_Z__,
    NOT_asimdmisc_R,
    ORNS_P_P_PP_Z,
    ORN_32_log_shift,
    ORN_64_log_shift,
    ORN_P_P_PP_Z,
    ORN_asimdsame_only,
    ORRS_P_P_PP_Z,
    ORR_32_log_imm,
    ORR_32_log_shift,
    ORR_64_log_imm,
    ORR_64_log_shift,
    ORR_P_P_PP_Z,
    ORR_Z_P_ZZ__,
    ORR_Z_ZI__,
    ORR_Z_ZZ__,
    ORR_asimdimm_L_hl,
    ORR_asimdimm_L_sl,
    ORR_asimdsame_only,
    ORV_R_P_Z__,
    PACDA_64P_dp_1src,
    PACDB_64P_dp_1src,
    PACDZA_64Z_dp_1src,
    PACDZB_64Z_dp_1src,
    PACGA_64P_dp_2src,
    PACIA1716_HI_hints,
    PACIASP_HI_hints,
    PACIAZ_HI_hints,
    PACIA_64P_dp_1src,
    PACIB1716_HI_hints,
    PACIBSP_HI_hints,
    PACIBZ_HI_hints,
    PACIB_64P_dp_1src,
    PACIZA_64Z_dp_1src,
    PACIZB_64Z_dp_1src,
    PFALSE_P__,
    PFIRST_P_P_P__,
    PMULL_asimddiff_L,
    PMUL_asimdsame_only,
    PNEXT_P_P_P__,
    PRFB_I_P_AI_D,
    PRFB_I_P_AI_S,
    PRFB_I_P_BI_S,
    PRFB_I_P_BR_S,
    PRFB_I_P_BZ_D_64_scaled,
    PRFB_I_P_BZ_D_x32_scaled,
    PRFB_I_P_BZ_S_x32_scaled,
    PRFD_I_P_AI_D,
    PRFD_I_P_AI_S,
    PRFD_I_P_BI_S,
    PRFD_I_P_BR_S,
    PRFD_I_P_BZ_D_64_scaled,
    PRFD_I_P_BZ_D_x32_scaled,
    PRFD_I_P_BZ_S_x32_scaled,
    PRFH_I_P_AI_D,
    PRFH_I_P_AI_S,
    PRFH_I_P_BI_S,
    PRFH_I_P_BR_S,
    PRFH_I_P_BZ_D_64_scaled,
    PRFH_I_P_BZ_D_x32_scaled,
    PRFH_I_P_BZ_S_x32_scaled,
    PRFM_P_ldst_pos,
    PRFM_P_ldst_regoff,
    PRFM_P_loadlit,
    PRFUM_P_ldst_unscaled,
    PRFW_I_P_AI_D,
    PRFW_I_P_AI_S,
    PRFW_I_P_BI_S,
    PRFW_I_P_BR_S,
    PRFW_I_P_BZ_D_64_scaled,
    PRFW_I_P_BZ_D_x32_scaled,
    PRFW_I_P_BZ_S_x32_scaled,
    PSB_HC_hints,
    PSSBB_only_barriers,
    PTEST__P_P__,
    PTRUES_P_S__,
    PTRUE_P_S__,
    PUNPKHI_P_P__,
    PUNPKLO_P_P__,
    RADDHN_asimddiff_N,
    RAX1_VVV2_cryptosha512_3,
    RBIT_32_dp_1src,
    RBIT_64_dp_1src,
    RBIT_Z_P_Z__,
    RBIT_asimdmisc_R,
    RDFFRS_P_P_F__,
    RDFFR_P_F__,
    RDFFR_P_P_F__,
    RDVL_R_I__,
    RETAA_64E_branch_reg,
    RETAB_64E_branch_reg,
    RET_64R_branch_reg,
    REV16_32_dp_1src,
    REV16_64_dp_1src,
    REV16_asimdmisc_R,
    REV32_64_dp_1src,
    REV32_asimdmisc_R,
    REV64_asimdmisc_R,
    REVB_Z_Z__,
    REVH_Z_Z__,
    REVW_Z_Z__,
    REV_32_dp_1src,
    REV_64_dp_1src,
    REV_P_P__,
    REV_Z_Z__,
    RMIF_only_rmif,
    RORV_32_dp_2src,
    RORV_64_dp_2src,
    RSHRN_asimdshf_N,
    RSUBHN_asimddiff_N,
    SABAL_asimddiff_L,
    SABA_asimdsame_only,
    SABDL_asimddiff_L,
    SABD_Z_P_ZZ__,
    SABD_asimdsame_only,
    SADALP_asimdmisc_P,
    SADDLP_asimdmisc_P,
    SADDLV_asimdall_only,
    SADDL_asimddiff_L,
    SADDV_R_P_Z__,
    SADDW_asimddiff_W,
    SBCS_32_addsub_carry,
    SBCS_64_addsub_carry,
    SBC_32_addsub_carry,
    SBC_64_addsub_carry,
    SBFM_32M_bitfield,
    SBFM_64M_bitfield,
    SB_only_barriers,
    SCVTF_D32_float2fix,
    SCVTF_D32_float2int,
    SCVTF_D64_float2fix,
    SCVTF_D64_float2int,
    SCVTF_H32_float2fix,
    SCVTF_H32_float2int,
    SCVTF_H64_float2fix,
    SCVTF_H64_float2int,
    SCVTF_S32_float2fix,
    SCVTF_S32_float2int,
    SCVTF_S64_float2fix,
    SCVTF_S64_float2int,
    SCVTF_Z_P_Z_H2FP16,
    SCVTF_Z_P_Z_W2D,
    SCVTF_Z_P_Z_W2FP16,
    SCVTF_Z_P_Z_W2S,
    SCVTF_Z_P_Z_X2D,
    SCVTF_Z_P_Z_X2FP16,
    SCVTF_Z_P_Z_X2S,
    SCVTF_asimdmisc_R,
    SCVTF_asimdmiscfp16_R,
    SCVTF_asimdshf_C,
    SCVTF_asisdmisc_R,
    SCVTF_asisdmiscfp16_R,
    SCVTF_asisdshf_C,
    SDIVR_Z_P_ZZ__,
    SDIV_32_dp_2src,
    SDIV_64_dp_2src,
    SDIV_Z_P_ZZ__,
    SDOT_Z_ZZZ__,
    SDOT_Z_ZZZi_D,
    SDOT_Z_ZZZi_S,
    SDOT_asimdelem_D,
    SDOT_asimdsame2_D,
    SEL_P_P_PP__,
    SEL_Z_P_ZZ__,
    SETF16_only_setf,
    SETF8_only_setf,
    SETFFR_F__,
    SEVL_HI_hints,
    SEV_HI_hints,
    SHA1C_QSV_cryptosha3,
    SHA1H_SS_cryptosha2,
    SHA1M_QSV_cryptosha3,
    SHA1P_QSV_cryptosha3,
    SHA1SU0_VVV_cryptosha3,
    SHA1SU1_VV_cryptosha2,
    SHA256H2_QQV_cryptosha3,
    SHA256H_QQV_cryptosha3,
    SHA256SU0_VV_cryptosha2,
    SHA256SU1_VVV_cryptosha3,
    SHA512H2_QQV_cryptosha512_3,
    SHA512H_QQV_cryptosha512_3,
    SHA512SU0_VV2_cryptosha512_2,
    SHA512SU1_VVV2_cryptosha512_3,
    SHADD_asimdsame_only,
    SHLL_asimdmisc_S,
    SHL_asimdshf_R,
    SHL_asisdshf_R,
    SHRN_asimdshf_N,
    SHSUB_asimdsame_only,
    SLI_asimdshf_R,
    SLI_asisdshf_R,
    SM3PARTW1_VVV4_cryptosha512_3,
    SM3PARTW2_VVV4_cryptosha512_3,
    SM3SS1_VVV4_crypto4,
    SM3TT1A_VVV4_crypto3_imm2,
    SM3TT1B_VVV4_crypto3_imm2,
    SM3TT2A_VVV4_crypto3_imm2,
    SM3TT2B_VVV_crypto3_imm2,
    SM4EKEY_VVV4_cryptosha512_3,
    SM4E_VV4_cryptosha512_2,
    SMADDL_64WA_dp_3src,
    SMAXP_asimdsame_only,
    SMAXV_R_P_Z__,
    SMAXV_asimdall_only,
    SMAX_Z_P_ZZ__,
    SMAX_Z_ZI__,
    SMAX_asimdsame_only,
    SMC_EX_exception,
    SMINP_asimdsame_only,
    SMINV_R_P_Z__,
    SMINV_asimdall_only,
    SMIN_Z_P_ZZ__,
    SMIN_Z_ZI__,
    SMIN_asimdsame_only,
    SMLAL_asimddiff_L,
    SMLAL_asimdelem_L,
    SMLSL_asimddiff_L,
    SMLSL_asimdelem_L,
    SMMLA_Z_ZZZ__,
    SMMLA_asimdsame2_G,
    SMOV_asimdins_W_w,
    SMOV_asimdins_X_x,
    SMSUBL_64WA_dp_3src,
    SMULH_64_dp_3src,
    SMULH_Z_P_ZZ__,
    SMULL_asimddiff_L,
    SMULL_asimdelem_L,
    SPLICE_Z_P_ZZ_Des,
    SQABS_asimdmisc_R,
    SQABS_asisdmisc_R,
    SQADD_Z_ZI__,
    SQADD_Z_ZZ__,
    SQADD_asimdsame_only,
    SQADD_asisdsame_only,
    SQDECB_R_RS_SX,
    SQDECB_R_RS_X,
    SQDECD_R_RS_SX,
    SQDECD_R_RS_X,
    SQDECD_Z_ZS__,
    SQDECH_R_RS_SX,
    SQDECH_R_RS_X,
    SQDECH_Z_ZS__,
    SQDECP_R_P_R_SX,
    SQDECP_R_P_R_X,
    SQDECP_Z_P_Z__,
    SQDECW_R_RS_SX,
    SQDECW_R_RS_X,
    SQDECW_Z_ZS__,
    SQDMLAL_asimddiff_L,
    SQDMLAL_asimdelem_L,
    SQDMLAL_asisddiff_only,
    SQDMLAL_asisdelem_L,
    SQDMLSL_asimddiff_L,
    SQDMLSL_asimdelem_L,
    SQDMLSL_asisddiff_only,
    SQDMLSL_asisdelem_L,
    SQDMULH_asimdelem_R,
    SQDMULH_asimdsame_only,
    SQDMULH_asisdelem_R,
    SQDMULH_asisdsame_only,
    SQDMULL_asimddiff_L,
    SQDMULL_asimdelem_L,
    SQDMULL_asisddiff_only,
    SQDMULL_asisdelem_L,
    SQINCB_R_RS_SX,
    SQINCB_R_RS_X,
    SQINCD_R_RS_SX,
    SQINCD_R_RS_X,
    SQINCD_Z_ZS__,
    SQINCH_R_RS_SX,
    SQINCH_R_RS_X,
    SQINCH_Z_ZS__,
    SQINCP_R_P_R_SX,
    SQINCP_R_P_R_X,
    SQINCP_Z_P_Z__,
    SQINCW_R_RS_SX,
    SQINCW_R_RS_X,
    SQINCW_Z_ZS__,
    SQNEG_asimdmisc_R,
    SQNEG_asisdmisc_R,
    SQRDMLAH_asimdelem_R,
    SQRDMLAH_asimdsame2_only,
    SQRDMLAH_asisdelem_R,
    SQRDMLAH_asisdsame2_only,
    SQRDMLSH_asimdelem_R,
    SQRDMLSH_asimdsame2_only,
    SQRDMLSH_asisdelem_R,
    SQRDMLSH_asisdsame2_only,
    SQRDMULH_asimdelem_R,
    SQRDMULH_asimdsame_only,
    SQRDMULH_asisdelem_R,
    SQRDMULH_asisdsame_only,
    SQRSHL_asimdsame_only,
    SQRSHL_asisdsame_only,
    SQRSHRN_asimdshf_N,
    SQRSHRN_asisdshf_N,
    SQRSHRUN_asimdshf_N,
    SQRSHRUN_asisdshf_N,
    SQSHLU_asimdshf_R,
    SQSHLU_asisdshf_R,
    SQSHL_asimdsame_only,
    SQSHL_asimdshf_R,
    SQSHL_asisdsame_only,
    SQSHL_asisdshf_R,
    SQSHRN_asimdshf_N,
    SQSHRN_asisdshf_N,
    SQSHRUN_asimdshf_N,
    SQSHRUN_asisdshf_N,
    SQSUB_Z_ZI__,
    SQSUB_Z_ZZ__,
    SQSUB_asimdsame_only,
    SQSUB_asisdsame_only,
    SQXTN_asimdmisc_N,
    SQXTN_asisdmisc_N,
    SQXTUN_asimdmisc_N,
    SQXTUN_asisdmisc_N,
    SRHADD_asimdsame_only,
    SRI_asimdshf_R,
    SRI_asisdshf_R,
    SRSHL_asimdsame_only,
    SRSHL_asisdsame_only,
    SRSHR_asimdshf_R,
    SRSHR_asisdshf_R,
    SRSRA_asimdshf_R,
    SRSRA_asisdshf_R,
    SSBB_only_barriers,
    SSHLL_asimdshf_L,
    SSHL_asimdsame_only,
    SSHL_asisdsame_only,
    SSHR_asimdshf_R,
    SSHR_asisdshf_R,
    SSRA_asimdshf_R,
    SSRA_asisdshf_R,
    SSUBL_asimddiff_L,
    SSUBW_asimddiff_W,
    ST1B_Z_P_AI_D,
    ST1B_Z_P_AI_S,
    ST1B_Z_P_BI__,
    ST1B_Z_P_BR__,
    ST1B_Z_P_BZ_D_64_unscaled,
    ST1B_Z_P_BZ_D_x32_unscaled,
    ST1B_Z_P_BZ_S_x32_unscaled,
    ST1D_Z_P_AI_D,
    ST1D_Z_P_BI__,
    ST1D_Z_P_BR__,
    ST1D_Z_P_BZ_D_64_scaled,
    ST1D_Z_P_BZ_D_64_unscaled,
    ST1D_Z_P_BZ_D_x32_scaled,
    ST1D_Z_P_BZ_D_x32_unscaled,
    ST1H_Z_P_AI_D,
    ST1H_Z_P_AI_S,
    ST1H_Z_P_BI__,
    ST1H_Z_P_BR__,
    ST1H_Z_P_BZ_D_64_scaled,
    ST1H_Z_P_BZ_D_64_unscaled,
    ST1H_Z_P_BZ_D_x32_scaled,
    ST1H_Z_P_BZ_D_x32_unscaled,
    ST1H_Z_P_BZ_S_x32_scaled,
    ST1H_Z_P_BZ_S_x32_unscaled,
    ST1W_Z_P_AI_D,
    ST1W_Z_P_AI_S,
    ST1W_Z_P_BI__,
    ST1W_Z_P_BR__,
    ST1W_Z_P_BZ_D_64_scaled,
    ST1W_Z_P_BZ_D_64_unscaled,
    ST1W_Z_P_BZ_D_x32_scaled,
    ST1W_Z_P_BZ_D_x32_unscaled,
    ST1W_Z_P_BZ_S_x32_scaled,
    ST1W_Z_P_BZ_S_x32_unscaled,
    ST1_asisdlse_R1_1v,
    ST1_asisdlse_R2_2v,
    ST1_asisdlse_R3_3v,
    ST1_asisdlse_R4_4v,
    ST1_asisdlsep_I1_i1,
    ST1_asisdlsep_I2_i2,
    ST1_asisdlsep_I3_i3,
    ST1_asisdlsep_I4_i4,
    ST1_asisdlsep_R1_r1,
    ST1_asisdlsep_R2_r2,
    ST1_asisdlsep_R3_r3,
    ST1_asisdlsep_R4_r4,
    ST1_asisdlso_B1_1b,
    ST1_asisdlso_D1_1d,
    ST1_asisdlso_H1_1h,
    ST1_asisdlso_S1_1s,
    ST1_asisdlsop_B1_i1b,
    ST1_asisdlsop_BX1_r1b,
    ST1_asisdlsop_D1_i1d,
    ST1_asisdlsop_DX1_r1d,
    ST1_asisdlsop_H1_i1h,
    ST1_asisdlsop_HX1_r1h,
    ST1_asisdlsop_S1_i1s,
    ST1_asisdlsop_SX1_r1s,
    ST2B_Z_P_BI_Contiguous,
    ST2B_Z_P_BR_Contiguous,
    ST2D_Z_P_BI_Contiguous,
    ST2D_Z_P_BR_Contiguous,
    ST2G_64Soffset_ldsttags,
    ST2G_64Spost_ldsttags,
    ST2G_64Spre_ldsttags,
    ST2H_Z_P_BI_Contiguous,
    ST2H_Z_P_BR_Contiguous,
    ST2W_Z_P_BI_Contiguous,
    ST2W_Z_P_BR_Contiguous,
    ST2_asisdlse_R2,
    ST2_asisdlsep_I2_i,
    ST2_asisdlsep_R2_r,
    ST2_asisdlso_B2_2b,
    ST2_asisdlso_D2_2d,
    ST2_asisdlso_H2_2h,
    ST2_asisdlso_S2_2s,
    ST2_asisdlsop_B2_i2b,
    ST2_asisdlsop_BX2_r2b,
    ST2_asisdlsop_D2_i2d,
    ST2_asisdlsop_DX2_r2d,
    ST2_asisdlsop_H2_i2h,
    ST2_asisdlsop_HX2_r2h,
    ST2_asisdlsop_S2_i2s,
    ST2_asisdlsop_SX2_r2s,
    ST3B_Z_P_BI_Contiguous,
    ST3B_Z_P_BR_Contiguous,
    ST3D_Z_P_BI_Contiguous,
    ST3D_Z_P_BR_Contiguous,
    ST3H_Z_P_BI_Contiguous,
    ST3H_Z_P_BR_Contiguous,
    ST3W_Z_P_BI_Contiguous,
    ST3W_Z_P_BR_Contiguous,
    ST3_asisdlse_R3,
    ST3_asisdlsep_I3_i,
    ST3_asisdlsep_R3_r,
    ST3_asisdlso_B3_3b,
    ST3_asisdlso_D3_3d,
    ST3_asisdlso_H3_3h,
    ST3_asisdlso_S3_3s,
    ST3_asisdlsop_B3_i3b,
    ST3_asisdlsop_BX3_r3b,
    ST3_asisdlsop_D3_i3d,
    ST3_asisdlsop_DX3_r3d,
    ST3_asisdlsop_H3_i3h,
    ST3_asisdlsop_HX3_r3h,
    ST3_asisdlsop_S3_i3s,
    ST3_asisdlsop_SX3_r3s,
    ST4B_Z_P_BI_Contiguous,
    ST4B_Z_P_BR_Contiguous,
    ST4D_Z_P_BI_Contiguous,
    ST4D_Z_P_BR_Contiguous,
    ST4H_Z_P_BI_Contiguous,
    ST4H_Z_P_BR_Contiguous,
    ST4W_Z_P_BI_Contiguous,
    ST4W_Z_P_BR_Contiguous,
    ST4_asisdlse_R4,
    ST4_asisdlsep_I4_i,
    ST4_asisdlsep_R4_r,
    ST4_asisdlso_B4_4b,
    ST4_asisdlso_D4_4d,
    ST4_asisdlso_H4_4h,
    ST4_asisdlso_S4_4s,
    ST4_asisdlsop_B4_i4b,
    ST4_asisdlsop_BX4_r4b,
    ST4_asisdlsop_D4_i4d,
    ST4_asisdlsop_DX4_r4d,
    ST4_asisdlsop_H4_i4h,
    ST4_asisdlsop_HX4_r4h,
    ST4_asisdlsop_S4_i4s,
    ST4_asisdlsop_SX4_r4s,
    STGM_64bulk_ldsttags,
    STGP_64_ldstpair_off,
    STGP_64_ldstpair_post,
    STGP_64_ldstpair_pre,
    STG_64Soffset_ldsttags,
    STG_64Spost_ldsttags,
    STG_64Spre_ldsttags,
    STLLRB_SL32_ldstexcl,
    STLLRH_SL32_ldstexcl,
    STLLR_SL32_ldstexcl,
    STLLR_SL64_ldstexcl,
    STLRB_SL32_ldstexcl,
    STLRH_SL32_ldstexcl,
    STLR_SL32_ldstexcl,
    STLR_SL64_ldstexcl,
    STLURB_32_ldapstl_unscaled,
    STLURH_32_ldapstl_unscaled,
    STLUR_32_ldapstl_unscaled,
    STLUR_64_ldapstl_unscaled,
    STLXP_SP32_ldstexcl,
    STLXP_SP64_ldstexcl,
    STLXRB_SR32_ldstexcl,
    STLXRH_SR32_ldstexcl,
    STLXR_SR32_ldstexcl,
    STLXR_SR64_ldstexcl,
    STNP_32_ldstnapair_offs,
    STNP_64_ldstnapair_offs,
    STNP_D_ldstnapair_offs,
    STNP_Q_ldstnapair_offs,
    STNP_S_ldstnapair_offs,
    STNT1B_Z_P_BI_Contiguous,
    STNT1B_Z_P_BR_Contiguous,
    STNT1D_Z_P_BI_Contiguous,
    STNT1D_Z_P_BR_Contiguous,
    STNT1H_Z_P_BI_Contiguous,
    STNT1H_Z_P_BR_Contiguous,
    STNT1W_Z_P_BI_Contiguous,
    STNT1W_Z_P_BR_Contiguous,
    STP_32_ldstpair_off,
    STP_32_ldstpair_post,
    STP_32_ldstpair_pre,
    STP_64_ldstpair_off,
    STP_64_ldstpair_post,
    STP_64_ldstpair_pre,
    STP_D_ldstpair_off,
    STP_D_ldstpair_post,
    STP_D_ldstpair_pre,
    STP_Q_ldstpair_off,
    STP_Q_ldstpair_post,
    STP_Q_ldstpair_pre,
    STP_S_ldstpair_off,
    STP_S_ldstpair_post,
    STP_S_ldstpair_pre,
    STRB_32BL_ldst_regoff,
    STRB_32B_ldst_regoff,
    STRB_32_ldst_immpost,
    STRB_32_ldst_immpre,
    STRB_32_ldst_pos,
    STRH_32_ldst_immpost,
    STRH_32_ldst_immpre,
    STRH_32_ldst_pos,
    STRH_32_ldst_regoff,
    STR_32_ldst_immpost,
    STR_32_ldst_immpre,
    STR_32_ldst_pos,
    STR_32_ldst_regoff,
    STR_64_ldst_immpost,
    STR_64_ldst_immpre,
    STR_64_ldst_pos,
    STR_64_ldst_regoff,
    STR_BL_ldst_regoff,
    STR_B_ldst_immpost,
    STR_B_ldst_immpre,
    STR_B_ldst_pos,
    STR_B_ldst_regoff,
    STR_D_ldst_immpost,
    STR_D_ldst_immpre,
    STR_D_ldst_pos,
    STR_D_ldst_regoff,
    STR_H_ldst_immpost,
    STR_H_ldst_immpre,
    STR_H_ldst_pos,
    STR_H_ldst_regoff,
    STR_P_BI__,
    STR_Q_ldst_immpost,
    STR_Q_ldst_immpre,
    STR_Q_ldst_pos,
    STR_Q_ldst_regoff,
    STR_S_ldst_immpost,
    STR_S_ldst_immpre,
    STR_S_ldst_pos,
    STR_S_ldst_regoff,
    STR_Z_BI__,
    STTRB_32_ldst_unpriv,
    STTRH_32_ldst_unpriv,
    STTR_32_ldst_unpriv,
    STTR_64_ldst_unpriv,
    STURB_32_ldst_unscaled,
    STURH_32_ldst_unscaled,
    STUR_32_ldst_unscaled,
    STUR_64_ldst_unscaled,
    STUR_B_ldst_unscaled,
    STUR_D_ldst_unscaled,
    STUR_H_ldst_unscaled,
    STUR_Q_ldst_unscaled,
    STUR_S_ldst_unscaled,
    STXP_SP32_ldstexcl,
    STXP_SP64_ldstexcl,
    STXRB_SR32_ldstexcl,
    STXRH_SR32_ldstexcl,
    STXR_SR32_ldstexcl,
    STXR_SR64_ldstexcl,
    STZ2G_64Soffset_ldsttags,
    STZ2G_64Spost_ldsttags,
    STZ2G_64Spre_ldsttags,
    STZGM_64bulk_ldsttags,
    STZG_64Soffset_ldsttags,
    STZG_64Spost_ldsttags,
    STZG_64Spre_ldsttags,
    SUBG_64_addsub_immtags,
    SUBHN_asimddiff_N,
    SUBPS_64S_dp_2src,
    SUBP_64S_dp_2src,
    SUBR_Z_P_ZZ__,
    SUBR_Z_ZI__,
    SUBS_32S_addsub_ext,
    SUBS_32S_addsub_imm,
    SUBS_32_addsub_shift,
    SUBS_64S_addsub_ext,
    SUBS_64S_addsub_imm,
    SUBS_64_addsub_shift,
    SUB_32_addsub_ext,
    SUB_32_addsub_imm,
    SUB_32_addsub_shift,
    SUB_64_addsub_ext,
    SUB_64_addsub_imm,
    SUB_64_addsub_shift,
    SUB_Z_P_ZZ__,
    SUB_Z_ZI__,
    SUB_Z_ZZ__,
    SUB_asimdsame_only,
    SUB_asisdsame_only,
    SUDOT_Z_ZZZi_S,
    SUDOT_asimdelem_D,
    SUNPKHI_Z_Z__,
    SUNPKLO_Z_Z__,
    SUQADD_asimdmisc_R,
    SUQADD_asisdmisc_R,
    SVC_EX_exception,
    SWPAB_32_memop,
    SWPAH_32_memop,
    SWPALB_32_memop,
    SWPALH_32_memop,
    SWPAL_32_memop,
    SWPAL_64_memop,
    SWPA_32_memop,
    SWPA_64_memop,
    SWPB_32_memop,
    SWPH_32_memop,
    SWPLB_32_memop,
    SWPLH_32_memop,
    SWPL_32_memop,
    SWPL_64_memop,
    SWP_32_memop,
    SWP_64_memop,
    SXTB_Z_P_Z__,
    SXTH_Z_P_Z__,
    SXTW_Z_P_Z__,
    SYSL_RC_systeminstrs,
    SYS_CR_systeminstrs,
    TBL_Z_ZZ_1,
    TBL_asimdtbl_L1_1,
    TBL_asimdtbl_L2_2,
    TBL_asimdtbl_L3_3,
    TBL_asimdtbl_L4_4,
    TBNZ_only_testbranch,
    TBX_asimdtbl_L1_1,
    TBX_asimdtbl_L2_2,
    TBX_asimdtbl_L3_3,
    TBX_asimdtbl_L4_4,
    TBZ_only_testbranch,
    TRN1_P_PP__,
    TRN1_Z_ZZ_Q,
    TRN1_Z_ZZ__,
    TRN1_asimdperm_only,
    TRN2_P_PP__,
    TRN2_Z_ZZ_Q,
    TRN2_Z_ZZ__,
    TRN2_asimdperm_only,
    TSB_HC_hints,
    UABAL_asimddiff_L,
    UABA_asimdsame_only,
    UABDL_asimddiff_L,
    UABD_Z_P_ZZ__,
    UABD_asimdsame_only,
    UADALP_asimdmisc_P,
    UADDLP_asimdmisc_P,
    UADDLV_asimdall_only,
    UADDL_asimddiff_L,
    UADDV_R_P_Z__,
    UADDW_asimddiff_W,
    UBFM_32M_bitfield,
    UBFM_64M_bitfield,
    UCVTF_D32_float2fix,
    UCVTF_D32_float2int,
    UCVTF_D64_float2fix,
    UCVTF_D64_float2int,
    UCVTF_H32_float2fix,
    UCVTF_H32_float2int,
    UCVTF_H64_float2fix,
    UCVTF_H64_float2int,
    UCVTF_S32_float2fix,
    UCVTF_S32_float2int,
    UCVTF_S64_float2fix,
    UCVTF_S64_float2int,
    UCVTF_Z_P_Z_H2FP16,
    UCVTF_Z_P_Z_W2D,
    UCVTF_Z_P_Z_W2FP16,
    UCVTF_Z_P_Z_W2S,
    UCVTF_Z_P_Z_X2D,
    UCVTF_Z_P_Z_X2FP16,
    UCVTF_Z_P_Z_X2S,
    UCVTF_asimdmisc_R,
    UCVTF_asimdmiscfp16_R,
    UCVTF_asimdshf_C,
    UCVTF_asisdmisc_R,
    UCVTF_asisdmiscfp16_R,
    UCVTF_asisdshf_C,
    UDF_only_perm_undef,
    UDIVR_Z_P_ZZ__,
    UDIV_32_dp_2src,
    UDIV_64_dp_2src,
    UDIV_Z_P_ZZ__,
    UDOT_Z_ZZZ__,
    UDOT_Z_ZZZi_D,
    UDOT_Z_ZZZi_S,
    UDOT_asimdelem_D,
    UDOT_asimdsame2_D,
    UHADD_asimdsame_only,
    UHSUB_asimdsame_only,
    UMADDL_64WA_dp_3src,
    UMAXP_asimdsame_only,
    UMAXV_R_P_Z__,
    UMAXV_asimdall_only,
    UMAX_Z_P_ZZ__,
    UMAX_Z_ZI__,
    UMAX_asimdsame_only,
    UMINP_asimdsame_only,
    UMINV_R_P_Z__,
    UMINV_asimdall_only,
    UMIN_Z_P_ZZ__,
    UMIN_Z_ZI__,
    UMIN_asimdsame_only,
    UMLAL_asimddiff_L,
    UMLAL_asimdelem_L,
    UMLSL_asimddiff_L,
    UMLSL_asimdelem_L,
    UMMLA_Z_ZZZ__,
    UMMLA_asimdsame2_G,
    UMOV_asimdins_W_w,
    UMOV_asimdins_X_x,
    UMSUBL_64WA_dp_3src,
    UMULH_64_dp_3src,
    UMULH_Z_P_ZZ__,
    UMULL_asimddiff_L,
    UMULL_asimdelem_L,
    UQADD_Z_ZI__,
    UQADD_Z_ZZ__,
    UQADD_asimdsame_only,
    UQADD_asisdsame_only,
    UQDECB_R_RS_UW,
    UQDECB_R_RS_X,
    UQDECD_R_RS_UW,
    UQDECD_R_RS_X,
    UQDECD_Z_ZS__,
    UQDECH_R_RS_UW,
    UQDECH_R_RS_X,
    UQDECH_Z_ZS__,
    UQDECP_R_P_R_UW,
    UQDECP_R_P_R_X,
    UQDECP_Z_P_Z__,
    UQDECW_R_RS_UW,
    UQDECW_R_RS_X,
    UQDECW_Z_ZS__,
    UQINCB_R_RS_UW,
    UQINCB_R_RS_X,
    UQINCD_R_RS_UW,
    UQINCD_R_RS_X,
    UQINCD_Z_ZS__,
    UQINCH_R_RS_UW,
    UQINCH_R_RS_X,
    UQINCH_Z_ZS__,
    UQINCP_R_P_R_UW,
    UQINCP_R_P_R_X,
    UQINCP_Z_P_Z__,
    UQINCW_R_RS_UW,
    UQINCW_R_RS_X,
    UQINCW_Z_ZS__,
    UQRSHL_asimdsame_only,
    UQRSHL_asisdsame_only,
    UQRSHRN_asimdshf_N,
    UQRSHRN_asisdshf_N,
    UQSHL_asimdsame_only,
    UQSHL_asimdshf_R,
    UQSHL_asisdsame_only,
    UQSHL_asisdshf_R,
    UQSHRN_asimdshf_N,
    UQSHRN_asisdshf_N,
    UQSUB_Z_ZI__,
    UQSUB_Z_ZZ__,
    UQSUB_asimdsame_only,
    UQSUB_asisdsame_only,
    UQXTN_asimdmisc_N,
    UQXTN_asisdmisc_N,
    URECPE_asimdmisc_R,
    URHADD_asimdsame_only,
    URSHL_asimdsame_only,
    URSHL_asisdsame_only,
    URSHR_asimdshf_R,
    URSHR_asisdshf_R,
    URSQRTE_asimdmisc_R,
    URSRA_asimdshf_R,
    URSRA_asisdshf_R,
    USDOT_Z_ZZZ_S,
    USDOT_Z_ZZZi_S,
    USDOT_asimdelem_D,
    USDOT_asimdsame2_D,
    USHLL_asimdshf_L,
    USHL_asimdsame_only,
    USHL_asisdsame_only,
    USHR_asimdshf_R,
    USHR_asisdshf_R,
    USMMLA_Z_ZZZ__,
    USMMLA_asimdsame2_G,
    USQADD_asimdmisc_R,
    USQADD_asisdmisc_R,
    USRA_asimdshf_R,
    USRA_asisdshf_R,
    USUBL_asimddiff_L,
    USUBW_asimddiff_W,
    UUNPKHI_Z_Z__,
    UUNPKLO_Z_Z__,
    UXTB_Z_P_Z__,
    UXTH_Z_P_Z__,
    UXTW_Z_P_Z__,
    UZP1_P_PP__,
    UZP1_Z_ZZ_Q,
    UZP1_Z_ZZ__,
    UZP1_asimdperm_only,
    UZP2_P_PP__,
    UZP2_Z_ZZ_Q,
    UZP2_Z_ZZ__,
    UZP2_asimdperm_only,
    WFE_HI_hints,
    WFI_HI_hints,
    WHILELE_P_P_RR__,
    WHILELO_P_P_RR__,
    WHILELS_P_P_RR__,
    WHILELT_P_P_RR__,
    WRFFR_F_P__,
    XAFLAG_M_pstate,
    XAR_VVV2_crypto3_imm6,
    XPACD_64Z_dp_1src,
    XPACI_64Z_dp_1src,
    XPACLRI_HI_hints,
    XTN_asimdmisc_N,
    YIELD_HI_hints,
    ZIP1_P_PP__,
    ZIP1_Z_ZZ_Q,
    ZIP1_Z_ZZ__,
    ZIP1_asimdperm_only,
    ZIP2_P_PP__,
    ZIP2_Z_ZZ_Q,
    ZIP2_Z_ZZ__,
    ZIP2_asimdperm_only,
    Unallocated,
    Unpredictable,
}
pub fn decode_inst(inst: u32) -> OpCode {
match ((inst >> 29) & 0b111, (inst >> 24) & 0b11111, inst & 0b111111111111111111111111) {
    (_, 0b00000 | 0b00001, _) => match ((inst >> 29) & 0b111, (inst >> 25) & 0b1111, (inst >> 16) & 0b111111111, inst & 0b1111111111111111) {
        (0b000, _, 0b000000000, _) => {
            let imm16 = inst & 0b1111111111111111;
return OpCode::UDF_only_perm_undef;
        }
        (_, _, var0, _) if var0 != 0b000000000 => return OpCode::Unpredictable,
        (var0, _, _, _) if var0 != 0b000 => return OpCode::Unpredictable,
        _ => return OpCode::Unpredictable,
    }
    (_, 0b00011, _) => return OpCode::Unpredictable,
    (_, 0b00100 | 0b00101, _) => match ((inst >> 29) & 0b111, (inst >> 25) & 0b1111, (inst >> 23) & 0b11, (inst >> 22) & 0b1, (inst >> 17) & 0b11111, (inst >> 16) & 0b1, (inst >> 10) & 0b111111, inst & 0b1111111111) {
        (0b000, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b010000 | 0b110000 | 0b011000 | 0b111000 | 0b010100 | 0b110100 | 0b011100 | 0b111100 | 0b010010 | 0b110010 | 0b011010 | 0b111010 | 0b010110 | 0b110110 | 0b011110 | 0b111110 | 0b010001 | 0b110001 | 0b011001 | 0b111001 | 0b010101 | 0b110101 | 0b011101 | 0b111101 | 0b010011 | 0b110011 | 0b011011 | 0b111011 | 0b010111 | 0b110111 | 0b011111 | 0b111111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 15) & 0b1, (inst >> 14) & 0b1, inst & 0b11111111111111) {
            (_, _, _, _, 0, _, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let op = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match op {
                    0 => return OpCode::MLA_Z_P_ZZZ__,
                    1 => return OpCode::MLS_Z_P_ZZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, 1, _, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let op = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Za = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match op {
                    0 => return OpCode::MAD_Z_P_ZZZ__,
                    1 => return OpCode::MSB_Z_P_ZZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b000000 | 0b000100 | 0b000010 | 0b000110 | 0b000001 | 0b000101 | 0b000011 | 0b000111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 18) & 0b111, (inst >> 16) & 0b11, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, _, 0b000 | 0b001, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match opc {
                    0b000 => return OpCode::ADD_Z_P_ZZ__,
                    0b001 => return OpCode::SUB_Z_P_ZZ__,
                    0b010 => return OpCode::Unallocated,
                    0b011 => return OpCode::SUBR_Z_P_ZZ__,
                    0b100 | 0b110 | 0b101 | 0b111 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b010 | 0b011, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 17) & 0b11;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match (opc, U) {
                    (0b00, 0) => return OpCode::SMAX_Z_P_ZZ__,
                    (0b00, 1) => return OpCode::UMAX_Z_P_ZZ__,
                    (0b01, 0) => return OpCode::SMIN_Z_P_ZZ__,
                    (0b01, 1) => return OpCode::UMIN_Z_P_ZZ__,
                    (0b10, 0) => return OpCode::SABD_Z_P_ZZ__,
                    (0b10, 1) => return OpCode::UABD_Z_P_ZZ__,
                    (0b11, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b100, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let H = (inst >> 17) & 0b1;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match (H, U) {
                    (0, 0) => return OpCode::MUL_Z_P_ZZ__,
                    (0, 1) => return OpCode::Unallocated,
                    (1, 0) => return OpCode::SMULH_Z_P_ZZ__,
                    (1, 1) => return OpCode::UMULH_Z_P_ZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b101, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let R = (inst >> 17) & 0b1;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match (R, U) {
                    (0, 0) => return OpCode::SDIV_Z_P_ZZ__,
                    (0, 1) => return OpCode::UDIV_Z_P_ZZ__,
                    (1, 0) => return OpCode::SDIVR_Z_P_ZZ__,
                    (1, 1) => return OpCode::UDIVR_Z_P_ZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b110 | 0b111, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match opc {
                    0b000 => return OpCode::ORR_Z_P_ZZ__,
                    0b001 => return OpCode::EOR_Z_P_ZZ__,
                    0b010 => return OpCode::AND_Z_P_ZZ__,
                    0b011 => return OpCode::BIC_Z_P_ZZ__,
                    0b100 | 0b110 | 0b101 | 0b111 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 19) & 0b11, (inst >> 16) & 0b111, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, _, 0b00, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 17) & 0b11;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Vd = inst & 0b11111;
                match (opc, U) {
                    (0b00, 0) => return OpCode::SADDV_R_P_Z__,
                    (0b00, 1) => return OpCode::UADDV_R_P_Z__,
                    (0b01, _) => return OpCode::Unallocated,
                    (0b10 | 0b11, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b01, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 17) & 0b11;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Vd = inst & 0b11111;
                match (opc, U) {
                    (0b00, 0) => return OpCode::SMAXV_R_P_Z__,
                    (0b00, 1) => return OpCode::UMAXV_R_P_Z__,
                    (0b01, 0) => return OpCode::SMINV_R_P_Z__,
                    (0b01, 1) => return OpCode::UMINV_R_P_Z__,
                    (0b10 | 0b11, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b10, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 17) & 0b11;
                let M = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::MOVPRFX_Z_P_Z__,
                    0b01 => return OpCode::Unallocated,
                    0b10 | 0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b11, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Vd = inst & 0b11111;
                match opc {
                    0b000 => return OpCode::ORV_R_P_Z__,
                    0b001 => return OpCode::EORV_R_P_Z__,
                    0b010 => return OpCode::ANDV_R_P_Z__,
                    0b011 => return OpCode::Unallocated,
                    0b100 | 0b110 | 0b101 | 0b111 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b100000 | 0b100100 | 0b100010 | 0b100110 | 0b100001 | 0b100101 | 0b100011 | 0b100111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 19) & 0b11, (inst >> 16) & 0b111, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, _, 0b00 | 0b01, _, _, _) => {
                let tszh = (inst >> 22) & 0b11;
                let opc = (inst >> 18) & 0b11;
                let L = (inst >> 17) & 0b1;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let tszl = (inst >> 8) & 0b11;
                let imm3 = (inst >> 5) & 0b111;
                let Zdn = inst & 0b11111;
                match (opc, L, U) {
                    (0b00, 0, 0) => return OpCode::ASR_Z_P_ZI__,
                    (0b00, 0, 1) => return OpCode::LSR_Z_P_ZI__,
                    (0b00, 1, 0) => return OpCode::Unallocated,
                    (0b00, 1, 1) => return OpCode::LSL_Z_P_ZI__,
                    (0b01, 0, 0) => return OpCode::ASRD_Z_P_ZI__,
                    (0b01, 0, 1) => return OpCode::Unallocated,
                    (0b01, 1, _) => return OpCode::Unallocated,
                    (0b10 | 0b11, _, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b10, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let R = (inst >> 18) & 0b1;
                let L = (inst >> 17) & 0b1;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match (R, L, U) {
                    (_, 1, 0) => return OpCode::Unallocated,
                    (0, 0, 0) => return OpCode::ASR_Z_P_ZZ__,
                    (0, 0, 1) => return OpCode::LSR_Z_P_ZZ__,
                    (0, 1, 1) => return OpCode::LSL_Z_P_ZZ__,
                    (1, 0, 0) => return OpCode::ASRR_Z_P_ZZ__,
                    (1, 0, 1) => return OpCode::LSRR_Z_P_ZZ__,
                    (1, 1, 1) => return OpCode::LSLR_Z_P_ZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b11, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let R = (inst >> 18) & 0b1;
                let L = (inst >> 17) & 0b1;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match (R, L, U) {
                    (0, 0, 0) => return OpCode::ASR_Z_P_ZW__,
                    (0, 0, 1) => return OpCode::LSR_Z_P_ZW__,
                    (0, 1, 0) => return OpCode::Unallocated,
                    (0, 1, 1) => return OpCode::LSL_Z_P_ZW__,
                    (1, _, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b101000 | 0b101100 | 0b101010 | 0b101110 | 0b101001 | 0b101101 | 0b101011 | 0b101111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 19) & 0b11, (inst >> 16) & 0b111, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, _, 0b00 | 0b01, _, _, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b000 => return OpCode::SXTB_Z_P_Z__,
                    0b001 => return OpCode::UXTB_Z_P_Z__,
                    0b010 => return OpCode::SXTH_Z_P_Z__,
                    0b011 => return OpCode::UXTH_Z_P_Z__,
                    0b100 => return OpCode::SXTW_Z_P_Z__,
                    0b101 => return OpCode::UXTW_Z_P_Z__,
                    0b110 => return OpCode::ABS_Z_P_Z__,
                    0b111 => return OpCode::NEG_Z_P_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b11, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b000 => return OpCode::CLS_Z_P_Z__,
                    0b001 => return OpCode::CLZ_Z_P_Z__,
                    0b010 => return OpCode::CNT_Z_P_Z__,
                    0b011 => return OpCode::CNOT_Z_P_Z__,
                    0b100 => return OpCode::FABS_Z_P_Z__,
                    0b101 => return OpCode::FNEG_Z_P_Z__,
                    0b110 => return OpCode::NOT_Z_P_Z__,
                    0b111 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b000000 | 0b000100 | 0b000010 | 0b000110 | 0b000001 | 0b000101 | 0b000011 | 0b000111, _) => {
            let size = (inst >> 22) & 0b11;
            let Zm = (inst >> 16) & 0b11111;
            let opc = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let Zd = inst & 0b11111;
            match opc {
                0b000 => return OpCode::ADD_Z_ZZ__,
                0b001 => return OpCode::SUB_Z_ZZ__,
                0b010 | 0b011 => return OpCode::Unallocated,
                0b100 => return OpCode::SQADD_Z_ZZ__,
                0b101 => return OpCode::UQADD_Z_ZZ__,
                0b110 => return OpCode::SQSUB_Z_ZZ__,
                0b111 => return OpCode::UQSUB_Z_ZZ__,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 13) & 0b111, (inst >> 12) & 0b1, (inst >> 10) & 0b11, inst & 0b1111111111) {
            (_, _, _, _, _, 0, _, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, 1, 0b00, _) => {
                let opc = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::AND_Z_ZZ__,
                    0b01 => return OpCode::ORR_Z_ZZ__,
                    0b10 => return OpCode::EOR_Z_ZZ__,
                    0b11 => return OpCode::BIC_Z_ZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 1, var0, _) if var0 != 0b00 => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b010000 | 0b010010 | 0b010001 | 0b010011, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 12) & 0b1111, (inst >> 10) & 0b11, inst & 0b1111111111) {
            (_, _, _, _, _, 0b00, _) => {
                let size = (inst >> 22) & 0b11;
                let imm5b = (inst >> 16) & 0b11111;
                let imm5 = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::INDEX_Z_II__;
            }
            (_, _, _, _, _, 0b01, _) => {
                let size = (inst >> 22) & 0b11;
                let imm5 = (inst >> 16) & 0b11111;
                let Rn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::INDEX_Z_RI__;
            }
            (_, _, _, _, _, 0b10, _) => {
                let size = (inst >> 22) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let imm5 = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::INDEX_Z_IR__;
            }
            (_, _, _, _, _, 0b11, _) => {
                let size = (inst >> 22) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let Rn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::INDEX_Z_RR__;
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b010100 | 0b010110 | 0b010101 | 0b010111, _) => match ((inst >> 24) & 0b11111111, (inst >> 23) & 0b1, (inst >> 22) & 0b1, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 12) & 0b1111, (inst >> 11) & 0b1, inst & 0b11111111111) {
            (_, 0, _, _, _, _, 0, _) => {
                let op = (inst >> 22) & 0b1;
                let Rn = (inst >> 16) & 0b11111;
                let imm6 = (inst >> 5) & 0b111111;
                let Rd = inst & 0b11111;
                match op {
                    0 => return OpCode::ADDVL_R_RI__,
                    1 => return OpCode::ADDPL_R_RI__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 1, _, _, _, _, 0, _) => {
                let op = (inst >> 22) & 0b1;
                let opc2 = (inst >> 16) & 0b11111;
                let imm6 = (inst >> 5) & 0b111111;
                let Rd = inst & 0b11111;
                match (op, opc2) {
                    (0, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111) => return OpCode::Unallocated,
                    (0, 0b10000 | 0b10100 | 0b10010 | 0b10110 | 0b10001 | 0b10101 | 0b10011 | 0b10111) => return OpCode::Unallocated,
                    (0, 0b11000 | 0b11010 | 0b11001 | 0b11011) => return OpCode::Unallocated,
                    (0, 0b11100 | 0b11101) => return OpCode::Unallocated,
                    (0, 0b11110) => return OpCode::Unallocated,
                    (0, 0b11111) => return OpCode::RDVL_R_I__,
                    (1, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, _, 1, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b011000 | 0b011100 | 0b011010 | 0b011110 | 0b011001 | 0b011101 | 0b011011 | 0b011111, _) => return OpCode::Unpredictable,
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b100000 | 0b100100 | 0b100010 | 0b100110 | 0b100001 | 0b100101 | 0b100011 | 0b100111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 13) & 0b111, (inst >> 12) & 0b1, inst & 0b111111111111) {
            (_, _, _, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let opc = (inst >> 10) & 0b11;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::ASR_Z_ZW__,
                    0b01 => return OpCode::LSR_Z_ZW__,
                    0b10 => return OpCode::Unallocated,
                    0b11 => return OpCode::LSL_Z_ZW__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 1, _) => {
                let tszh = (inst >> 22) & 0b11;
                let tszl = (inst >> 19) & 0b11;
                let imm3 = (inst >> 16) & 0b111;
                let opc = (inst >> 10) & 0b11;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::ASR_Z_ZI__,
                    0b01 => return OpCode::LSR_Z_ZI__,
                    0b10 => return OpCode::Unallocated,
                    0b11 => return OpCode::LSL_Z_ZI__,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b101000 | 0b101010 | 0b101001 | 0b101011, _) => {
            let opc = (inst >> 22) & 0b11;
            let Zm = (inst >> 16) & 0b11111;
            let msz = (inst >> 10) & 0b11;
            let Zn = (inst >> 5) & 0b11111;
            let Zd = inst & 0b11111;
            match opc {
                0b00 => return OpCode::ADR_Z_AZ_D_s32_scaled,
                0b01 => return OpCode::ADR_Z_AZ_D_u32_scaled,
                0b10 | 0b11 => return OpCode::ADR_Z_AZ_SD_same_scaled,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b101100 | 0b101110 | 0b101101 | 0b101111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 12) & 0b1111, (inst >> 10) & 0b11, inst & 0b1111111111) {
            (_, _, _, _, _, 0b00 | 0b01, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let op = (inst >> 10) & 0b1;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match op {
                    0 => return OpCode::FTSSEL_Z_ZZ__,
                    1 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 0b10, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b11111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b00000 => return OpCode::FEXPA_Z_Z__,
                    0b00001 => return OpCode::Unallocated,
                    0b00010 | 0b00011 => return OpCode::Unallocated,
                    0b00100 | 0b00110 | 0b00101 | 0b00111 => return OpCode::Unallocated,
                    0b01000 | 0b01100 | 0b01010 | 0b01110 | 0b01001 | 0b01101 | 0b01011 | 0b01111 => return OpCode::Unallocated,
                    0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 0b11, _) => {
                let opc = (inst >> 22) & 0b11;
                let opc2 = (inst >> 16) & 0b11111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match (opc, opc2) {
                    (0b00, 0b00000) => return OpCode::MOVPRFX_Z_Z__,
                    (0b00, 0b00001) => return OpCode::Unallocated,
                    (0b00, 0b00010 | 0b00011) => return OpCode::Unallocated,
                    (0b00, 0b00100 | 0b00110 | 0b00101 | 0b00111) => return OpCode::Unallocated,
                    (0b00, 0b01000 | 0b01100 | 0b01010 | 0b01110 | 0b01001 | 0b01101 | 0b01011 | 0b01111) => return OpCode::Unallocated,
                    (0b00, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111) => return OpCode::Unallocated,
                    (0b01, _) => return OpCode::Unallocated,
                    (0b10 | 0b11, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b110000 | 0b111000 | 0b110100 | 0b111100 | 0b110010 | 0b111010 | 0b110110 | 0b111110 | 0b110001 | 0b111001 | 0b110101 | 0b111101 | 0b110011 | 0b111011 | 0b110111 | 0b111111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 20) & 0b1, (inst >> 16) & 0b1111, (inst >> 14) & 0b11, (inst >> 11) & 0b111, inst & 0b11111111111) {
            (_, _, _, 0, _, _, 0b000 | 0b001, _) => {
                let size = (inst >> 22) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let D = (inst >> 11) & 0b1;
                let U = (inst >> 10) & 0b1;
                let pattern = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match (size, D, U) {
                    (0b00, _, _) => return OpCode::Unallocated,
                    (0b01, 0, 0) => return OpCode::SQINCH_Z_ZS__,
                    (0b01, 0, 1) => return OpCode::UQINCH_Z_ZS__,
                    (0b01, 1, 0) => return OpCode::SQDECH_Z_ZS__,
                    (0b01, 1, 1) => return OpCode::UQDECH_Z_ZS__,
                    (0b10, 0, 0) => return OpCode::SQINCW_Z_ZS__,
                    (0b10, 0, 1) => return OpCode::UQINCW_Z_ZS__,
                    (0b10, 1, 0) => return OpCode::SQDECW_Z_ZS__,
                    (0b10, 1, 1) => return OpCode::UQDECW_Z_ZS__,
                    (0b11, 0, 0) => return OpCode::SQINCD_Z_ZS__,
                    (0b11, 0, 1) => return OpCode::UQINCD_Z_ZS__,
                    (0b11, 1, 0) => return OpCode::SQDECD_Z_ZS__,
                    (0b11, 1, 1) => return OpCode::UQDECD_Z_ZS__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, _, _, 0b100, _) => {
                let size = (inst >> 22) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let op = (inst >> 10) & 0b1;
                let pattern = (inst >> 5) & 0b11111;
                let Rd = inst & 0b11111;
                match (size, op) {
                    (_, 1) => return OpCode::Unallocated,
                    (0b00, 0) => return OpCode::CNTB_R_S__,
                    (0b01, 0) => return OpCode::CNTH_R_S__,
                    (0b10, 0) => return OpCode::CNTW_R_S__,
                    (0b11, 0) => return OpCode::CNTD_R_S__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, _, _, 0b101, _) => return OpCode::Unpredictable,
            (_, _, _, 1, _, _, 0b000, _) => {
                let size = (inst >> 22) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let D = (inst >> 10) & 0b1;
                let pattern = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match (size, D) {
                    (0b00, _) => return OpCode::Unallocated,
                    (0b01, 0) => return OpCode::INCH_Z_ZS__,
                    (0b01, 1) => return OpCode::DECH_Z_ZS__,
                    (0b10, 0) => return OpCode::INCW_Z_ZS__,
                    (0b10, 1) => return OpCode::DECW_Z_ZS__,
                    (0b11, 0) => return OpCode::INCD_Z_ZS__,
                    (0b11, 1) => return OpCode::DECD_Z_ZS__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, _, _, 0b100, _) => {
                let size = (inst >> 22) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let D = (inst >> 10) & 0b1;
                let pattern = (inst >> 5) & 0b11111;
                let Rdn = inst & 0b11111;
                match (size, D) {
                    (0b00, 0) => return OpCode::INCB_R_RS__,
                    (0b00, 1) => return OpCode::DECB_R_RS__,
                    (0b01, 0) => return OpCode::INCH_R_RS__,
                    (0b01, 1) => return OpCode::DECH_R_RS__,
                    (0b10, 0) => return OpCode::INCW_R_RS__,
                    (0b10, 1) => return OpCode::DECW_R_RS__,
                    (0b11, 0) => return OpCode::INCD_R_RS__,
                    (0b11, 1) => return OpCode::DECD_R_RS__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, _, _, 0b001 | 0b101, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, _, 0b010 | 0b011, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, _, 0b110 | 0b111, _) => {
                let size = (inst >> 22) & 0b11;
                let sf = (inst >> 20) & 0b1;
                let imm4 = (inst >> 16) & 0b1111;
                let D = (inst >> 11) & 0b1;
                let U = (inst >> 10) & 0b1;
                let pattern = (inst >> 5) & 0b11111;
                let Rdn = inst & 0b11111;
                match (size, sf, D, U) {
                    (0b00, 0, 0, 0) => return OpCode::SQINCB_R_RS_SX,
                    (0b00, 0, 0, 1) => return OpCode::UQINCB_R_RS_UW,
                    (0b00, 0, 1, 0) => return OpCode::SQDECB_R_RS_SX,
                    (0b00, 0, 1, 1) => return OpCode::UQDECB_R_RS_UW,
                    (0b00, 1, 0, 0) => return OpCode::SQINCB_R_RS_X,
                    (0b00, 1, 0, 1) => return OpCode::UQINCB_R_RS_X,
                    (0b00, 1, 1, 0) => return OpCode::SQDECB_R_RS_X,
                    (0b00, 1, 1, 1) => return OpCode::UQDECB_R_RS_X,
                    (0b01, 0, 0, 0) => return OpCode::SQINCH_R_RS_SX,
                    (0b01, 0, 0, 1) => return OpCode::UQINCH_R_RS_UW,
                    (0b01, 0, 1, 0) => return OpCode::SQDECH_R_RS_SX,
                    (0b01, 0, 1, 1) => return OpCode::UQDECH_R_RS_UW,
                    (0b01, 1, 0, 0) => return OpCode::SQINCH_R_RS_X,
                    (0b01, 1, 0, 1) => return OpCode::UQINCH_R_RS_X,
                    (0b01, 1, 1, 0) => return OpCode::SQDECH_R_RS_X,
                    (0b01, 1, 1, 1) => return OpCode::UQDECH_R_RS_X,
                    (0b10, 0, 0, 0) => return OpCode::SQINCW_R_RS_SX,
                    (0b10, 0, 0, 1) => return OpCode::UQINCW_R_RS_UW,
                    (0b10, 0, 1, 0) => return OpCode::SQDECW_R_RS_SX,
                    (0b10, 0, 1, 1) => return OpCode::UQDECW_R_RS_UW,
                    (0b10, 1, 0, 0) => return OpCode::SQINCW_R_RS_X,
                    (0b10, 1, 0, 1) => return OpCode::UQINCW_R_RS_X,
                    (0b10, 1, 1, 0) => return OpCode::SQDECW_R_RS_X,
                    (0b10, 1, 1, 1) => return OpCode::UQDECW_R_RS_X,
                    (0b11, 0, 0, 0) => return OpCode::SQINCD_R_RS_SX,
                    (0b11, 0, 0, 1) => return OpCode::UQINCD_R_RS_UW,
                    (0b11, 0, 1, 0) => return OpCode::SQDECD_R_RS_SX,
                    (0b11, 0, 1, 1) => return OpCode::UQDECD_R_RS_UW,
                    (0b11, 1, 0, 0) => return OpCode::SQINCD_R_RS_X,
                    (0b11, 1, 0, 1) => return OpCode::UQINCD_R_RS_X,
                    (0b11, 1, 1, 0) => return OpCode::SQDECD_R_RS_X,
                    (0b11, 1, 1, 1) => return OpCode::UQDECD_R_RS_X,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b10 | 0b11, _, 0b00000 | 0b00100 | 0b00010 | 0b00110 | 0b00001 | 0b00101 | 0b00011 | 0b00111, _, _, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 20) & 0b11, (inst >> 18) & 0b11, inst & 0b111111111111111111) {
            (_, 0b11, _, 0b00, _) => {
                let imm13 = (inst >> 5) & 0b1111111111111;
                let Zd = inst & 0b11111;
return OpCode::DUPM_Z_I__;
            }
            (_, var0, _, 0b00, _) if var0 != 0b11 => {
                let opc = (inst >> 22) & 0b11;
                let imm13 = (inst >> 5) & 0b1111111111111;
                let Zdn = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::ORR_Z_ZI__,
                    0b01 => return OpCode::EOR_Z_ZI__,
                    0b10 => return OpCode::AND_Z_ZI__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, var0, _) if var0 != 0b00 => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b10 | 0b11, _, 0b01000 | 0b01100 | 0b01010 | 0b01110 | 0b01001 | 0b01101 | 0b01011 | 0b01111, _, _, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 20) & 0b11, (inst >> 16) & 0b1111, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, _, _, 0b000 | 0b010 | 0b001 | 0b011, _) => {
                let size = (inst >> 22) & 0b11;
                let Pg = (inst >> 16) & 0b1111;
                let M = (inst >> 14) & 0b1;
                let sh = (inst >> 13) & 0b1;
                let imm8 = (inst >> 5) & 0b11111111;
                let Zd = inst & 0b11111;
                match M {
                    0 => return OpCode::CPY_Z_O_I__,
                    1 => return OpCode::CPY_Z_P_I__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, 0b100 | 0b101, _) => return OpCode::Unpredictable,
            (_, _, _, _, 0b110, _) => {
                let size = (inst >> 22) & 0b11;
                let Pg = (inst >> 16) & 0b1111;
                let imm8 = (inst >> 5) & 0b11111111;
                let Zd = inst & 0b11111;
return OpCode::FCPY_Z_P_I__;
            }
            (_, _, _, _, 0b111, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 19) & 0b11, (inst >> 17) & 0b11, (inst >> 16) & 0b1, (inst >> 13) & 0b111, (inst >> 12) & 0b1, (inst >> 10) & 0b11, inst & 0b1111111111) {
            (_, _, _, 0b00, 0b00, 0, _, 1, 0b10, _) => {
                let size = (inst >> 22) & 0b11;
                let Rn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::DUP_Z_R__;
            }
            (_, _, _, 0b00, 0b10, 0, _, 1, 0b10, _) => {
                let size = (inst >> 22) & 0b11;
                let Rm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
return OpCode::INSR_Z_R__;
            }
            (_, _, _, 0b00, 0b00 | 0b10, 0, _, 0, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b00, 0b00 | 0b10, 0, _, 1, 0b01 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b00, 0b01 | 0b11, _, _, 1, 0b10 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b00, 0b01 | 0b11, _, _, _, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b00, _, 1, _, 1, 0b10 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b00, _, 1, _, _, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b00, _, _, _, 0, 0b10 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b01, _, _, _, _, var0, _) if var0 != 0b00 => return OpCode::Unpredictable,
            (_, _, _, 0b10, 0b00 | 0b01, _, _, 0, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10, 0b00 | 0b01, _, _, 1, 0b10, _) => {
                let size = (inst >> 22) & 0b11;
                let U = (inst >> 17) & 0b1;
                let H = (inst >> 16) & 0b1;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match (U, H) {
                    (0, 0) => return OpCode::SUNPKLO_Z_Z__,
                    (0, 1) => return OpCode::SUNPKHI_Z_Z__,
                    (1, 0) => return OpCode::UUNPKLO_Z_Z__,
                    (1, 1) => return OpCode::UUNPKHI_Z_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b10, 0b00 | 0b01, _, _, 1, 0b01 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10, 0b10, 0, _, 0, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10, 0b10, 0, _, 1, 0b10, _) => {
                let size = (inst >> 22) & 0b11;
                let Vm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
return OpCode::INSR_Z_V__;
            }
            (_, _, _, 0b10, 0b10, 0, _, 1, 0b01 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10, 0b11, _, _, 1, 0b10 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10, 0b11, _, _, _, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10, 0b10 | 0b11, 1, _, 1, 0b10 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10, 0b10 | 0b11, 1, _, _, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b11, 0b00, 0, _, 0, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b11, 0b00, 0, _, 1, 0b10, _) => {
                let size = (inst >> 22) & 0b11;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::REV_Z_Z__;
            }
            (_, _, _, 0b11, 0b00, 0, _, 1, 0b01 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b11, 0b00 | 0b01, 1, _, 1, 0b10 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, 0b11, 0b00 | 0b01, 1, _, _, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, 0b11, var0, _, _, 1, 0b10 | 0b11, _) if var0 != 0b00 => return OpCode::Unpredictable,
            (_, _, _, 0b11, var0, _, _, _, 0b01, _) if var0 != 0b00 => return OpCode::Unpredictable,
            (_, _, _, 0b10 | 0b11, _, _, _, 0, 0b10 | 0b11, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, _, _, 0, 0b00, _) => {
                let imm2 = (inst >> 22) & 0b11;
                let tsz = (inst >> 16) & 0b11111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::DUP_Z_Zi__;
            }
            (_, _, _, _, _, _, _, 1, 0b00, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::TBL_Z_ZZ_1;
            }
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b010000 | 0b010100 | 0b010010 | 0b010110 | 0b010001 | 0b010101 | 0b010011 | 0b010111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 13) & 0b111, (inst >> 9) & 0b1111, (inst >> 5) & 0b1111, (inst >> 4) & 0b1, inst & 0b1111) {
            (_, 0b00, _, 0b10000 | 0b10001, _, 0b0000, _, 0, _) => {
                let H = (inst >> 16) & 0b1;
                let Pn = (inst >> 5) & 0b1111;
                let Pd = inst & 0b1111;
                match H {
                    0 => return OpCode::PUNPKLO_P_P__,
                    1 => return OpCode::PUNPKHI_P_P__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0b01, _, 0b10000 | 0b10001, _, 0b0000, _, 0, _) => return OpCode::Unpredictable,
            (_, 0b10, _, 0b10000 | 0b10001, _, 0b0000, _, 0, _) => return OpCode::Unpredictable,
            (_, 0b11, _, 0b10000 | 0b10001, _, 0b0000, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b0000 | 0b1000 | 0b0100 | 0b1100 | 0b0010 | 0b1010 | 0b0110 | 0b1110, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Pm = (inst >> 16) & 0b1111;
                let opc = (inst >> 11) & 0b11;
                let H = (inst >> 10) & 0b1;
                let Pn = (inst >> 5) & 0b1111;
                let Pd = inst & 0b1111;
                match (opc, H) {
                    (0b00, 0) => return OpCode::ZIP1_P_PP__,
                    (0b00, 1) => return OpCode::ZIP2_P_PP__,
                    (0b01, 0) => return OpCode::UZP1_P_PP__,
                    (0b01, 1) => return OpCode::UZP2_P_PP__,
                    (0b10, 0) => return OpCode::TRN1_P_PP__,
                    (0b10, 1) => return OpCode::TRN2_P_PP__,
                    (0b11, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b0001 | 0b1001 | 0b0101 | 0b1101 | 0b0011 | 0b1011 | 0b0111 | 0b1111, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10100, _, 0b0000, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Pn = (inst >> 5) & 0b1111;
                let Pd = inst & 0b1111;
return OpCode::REV_P_P__;
            }
            (_, _, _, 0b10101, _, 0b0000, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10000 | 0b10100 | 0b10001 | 0b10101, _, 0b1000, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10000 | 0b10100 | 0b10001 | 0b10101, _, 0b0100 | 0b1100, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10000 | 0b10100 | 0b10001 | 0b10101, _, 0b0010 | 0b1010 | 0b0110 | 0b1110, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10000 | 0b10100 | 0b10001 | 0b10101, _, 0b0001 | 0b1001 | 0b0101 | 0b1101 | 0b0011 | 0b1011 | 0b0111 | 0b1111, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b10010 | 0b10110 | 0b10011 | 0b10111, _, _, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b11000 | 0b11100 | 0b11010 | 0b11110 | 0b11001 | 0b11101 | 0b11011 | 0b11111, _, _, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, _, _, 1, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b011000 | 0b011100 | 0b011010 | 0b011110 | 0b011001 | 0b011101 | 0b011011 | 0b011111, _) => {
            let size = (inst >> 22) & 0b11;
            let Zm = (inst >> 16) & 0b11111;
            let opc = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let Zd = inst & 0b11111;
            match opc {
                0b000 => return OpCode::ZIP1_Z_ZZ__,
                0b001 => return OpCode::ZIP2_Z_ZZ__,
                0b010 => return OpCode::UZP1_Z_ZZ__,
                0b011 => return OpCode::UZP2_Z_ZZ__,
                0b100 => return OpCode::TRN1_Z_ZZ__,
                0b101 => return OpCode::TRN2_Z_ZZ__,
                0b110 | 0b111 => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b000, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b100000 | 0b101000 | 0b100100 | 0b101100 | 0b100010 | 0b101010 | 0b100110 | 0b101110 | 0b100001 | 0b101001 | 0b100101 | 0b101101 | 0b100011 | 0b101011 | 0b100111 | 0b101111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 20) & 0b1, (inst >> 17) & 0b111, (inst >> 16) & 0b1, (inst >> 14) & 0b11, (inst >> 13) & 0b1, inst & 0b1111111111111) {
            (_, _, _, 0, 0b000, 0, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Vn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::CPY_Z_P_V__;
            }
            (_, _, _, 0, 0b000, 1, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::COMPACT_Z_P_Z__;
            }
            (_, _, _, 0, 0b000, _, _, 1, _) => {
                let size = (inst >> 22) & 0b11;
                let B = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Rd = inst & 0b11111;
                match B {
                    0 => return OpCode::LASTA_R_P_Z__,
                    1 => return OpCode::LASTB_R_P_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, 0b001, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let B = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Vd = inst & 0b11111;
                match B {
                    0 => return OpCode::LASTA_V_P_Z__,
                    1 => return OpCode::LASTB_V_P_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, 0b010 | 0b011, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::REVB_Z_Z__,
                    0b01 => return OpCode::REVH_Z_Z__,
                    0b10 => return OpCode::REVW_Z_Z__,
                    0b11 => return OpCode::RBIT_Z_P_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, 0b010 | 0b011, _, _, 1, _) => return OpCode::Unpredictable,
            (_, _, _, 0, 0b100, 0, _, 1, _) => {
                let size = (inst >> 22) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
return OpCode::CPY_Z_P_R__;
            }
            (_, _, _, 0, 0b100, 1, _, 1, _) => return OpCode::Unpredictable,
            (_, _, _, 0, 0b100, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let B = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match B {
                    0 => return OpCode::CLASTA_Z_P_ZZ__,
                    1 => return OpCode::CLASTB_Z_P_ZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, 0b101, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let B = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Vdn = inst & 0b11111;
                match B {
                    0 => return OpCode::CLASTA_V_P_Z__,
                    1 => return OpCode::CLASTB_V_P_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, 0b110, 0, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
return OpCode::SPLICE_Z_P_ZZ_Des;
            }
            (_, _, _, 0, 0b110, 0, _, 1, _) => return OpCode::Unpredictable,
            (_, _, _, 0, 0b110, 1, _, _, _) => return OpCode::Unpredictable,
            (_, _, _, 0, 0b111, 0, _, _, _) => return OpCode::Unpredictable,
            (_, _, _, 0, 0b111, 1, _, _, _) => return OpCode::Unpredictable,
            (_, _, _, 0, 0b001 | 0b101, _, _, 1, _) => return OpCode::Unpredictable,
            (_, _, _, 1, 0b000, _, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 1, 0b000, _, _, 1, _) => {
                let size = (inst >> 22) & 0b11;
                let B = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Rdn = inst & 0b11111;
                match B {
                    0 => return OpCode::CLASTA_R_P_Z__,
                    1 => return OpCode::CLASTB_R_P_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, var0, _, _, _, _) if var0 != 0b000 => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b110000 | 0b111000 | 0b110100 | 0b111100 | 0b110010 | 0b111010 | 0b110110 | 0b111110 | 0b110001 | 0b111001 | 0b110101 | 0b111101 | 0b110011 | 0b111011 | 0b110111 | 0b111111, _) => {
            let size = (inst >> 22) & 0b11;
            let Zm = (inst >> 16) & 0b11111;
            let Pg = (inst >> 10) & 0b1111;
            let Zn = (inst >> 5) & 0b11111;
            let Zd = inst & 0b11111;
return OpCode::SEL_Z_P_ZZ__;
        }
        (0b000, _, 0b10, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b000000 | 0b000100 | 0b000010 | 0b000110 | 0b000001 | 0b000101 | 0b000011 | 0b000111, _) => match ((inst >> 23) & 0b111111111, (inst >> 22) & 0b1, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, 0, _, _, _, _) => {
                let imm8h = (inst >> 16) & 0b11111;
                let imm8l = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
return OpCode::EXT_Z_ZI_Des;
            }
            (_, 1, _, _, _, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b000, _, 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b000000 | 0b000100 | 0b000010 | 0b000110 | 0b000001 | 0b000101 | 0b000011 | 0b000111, _) => {
            let op = (inst >> 22) & 0b1;
            let Zm = (inst >> 16) & 0b11111;
            let opc2 = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let Zd = inst & 0b11111;
            match (op, opc2) {
                (0, 0b000) => return OpCode::ZIP1_Z_ZZ_Q,
                (0, 0b001) => return OpCode::ZIP2_Z_ZZ_Q,
                (0, 0b010) => return OpCode::UZP1_Z_ZZ_Q,
                (0, 0b011) => return OpCode::UZP2_Z_ZZ_Q,
                (0, 0b100 | 0b101) => return OpCode::Unallocated,
                (0, 0b110) => return OpCode::TRN1_Z_ZZ_Q,
                (0, 0b111) => return OpCode::TRN2_Z_ZZ_Q,
                (1, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b001, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, _, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 15) & 0b111111, (inst >> 14) & 0b1, inst & 0b11111111111111) {
            (_, _, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let op = (inst >> 15) & 0b1;
                let o2 = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let ne = (inst >> 4) & 0b1;
                let Pd = inst & 0b1111;
                match (op, o2, ne) {
                    (0, 0, 0) => return OpCode::CMPHS_P_P_ZZ__,
                    (0, 0, 1) => return OpCode::CMPHI_P_P_ZZ__,
                    (0, 1, 0) => return OpCode::CMPEQ_P_P_ZW__,
                    (0, 1, 1) => return OpCode::CMPNE_P_P_ZW__,
                    (1, 0, 0) => return OpCode::CMPGE_P_P_ZZ__,
                    (1, 0, 1) => return OpCode::CMPGT_P_P_ZZ__,
                    (1, 1, 0) => return OpCode::CMPEQ_P_P_ZZ__,
                    (1, 1, 1) => return OpCode::CMPNE_P_P_ZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, 1, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 15) & 0b1;
                let lt = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let ne = (inst >> 4) & 0b1;
                let Pd = inst & 0b1111;
                match (U, lt, ne) {
                    (0, 0, 0) => return OpCode::CMPGE_P_P_ZW__,
                    (0, 0, 1) => return OpCode::CMPGT_P_P_ZW__,
                    (0, 1, 0) => return OpCode::CMPLT_P_P_ZW__,
                    (0, 1, 1) => return OpCode::CMPLE_P_P_ZW__,
                    (1, 0, 0) => return OpCode::CMPHS_P_P_ZW__,
                    (1, 0, 1) => return OpCode::CMPHI_P_P_ZW__,
                    (1, 1, 0) => return OpCode::CMPLO_P_P_ZW__,
                    (1, 1, 1) => return OpCode::CMPLS_P_P_ZW__,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b001, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, _, _) => {
            let size = (inst >> 22) & 0b11;
            let imm7 = (inst >> 14) & 0b1111111;
            let lt = (inst >> 13) & 0b1;
            let Pg = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let ne = (inst >> 4) & 0b1;
            let Pd = inst & 0b1111;
            match (lt, ne) {
                (0, 0) => return OpCode::CMPHS_P_P_ZI__,
                (0, 1) => return OpCode::CMPHI_P_P_ZI__,
                (1, 0) => return OpCode::CMPLO_P_P_ZI__,
                (1, 1) => return OpCode::CMPLS_P_P_ZI__,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b001, _, 0b10 | 0b11, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b000000 | 0b100000 | 0b001000 | 0b101000 | 0b000100 | 0b100100 | 0b001100 | 0b101100 | 0b000010 | 0b100010 | 0b001010 | 0b101010 | 0b000110 | 0b100110 | 0b001110 | 0b101110 | 0b000001 | 0b100001 | 0b001001 | 0b101001 | 0b000101 | 0b100101 | 0b001101 | 0b101101 | 0b000011 | 0b100011 | 0b001011 | 0b101011 | 0b000111 | 0b100111 | 0b001111 | 0b101111, _) => {
            let size = (inst >> 22) & 0b11;
            let imm5 = (inst >> 16) & 0b11111;
            let op = (inst >> 15) & 0b1;
            let o2 = (inst >> 13) & 0b1;
            let Pg = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let ne = (inst >> 4) & 0b1;
            let Pd = inst & 0b1111;
            match (op, o2, ne) {
                (0, 0, 0) => return OpCode::CMPGE_P_P_ZI__,
                (0, 0, 1) => return OpCode::CMPGT_P_P_ZI__,
                (0, 1, 0) => return OpCode::CMPLT_P_P_ZI__,
                (0, 1, 1) => return OpCode::CMPLE_P_P_ZI__,
                (1, 0, 0) => return OpCode::CMPEQ_P_P_ZI__,
                (1, 0, 1) => return OpCode::CMPNE_P_P_ZI__,
                (1, 1, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b001, _, 0b10 | 0b11, _, 0b00000 | 0b00100 | 0b00010 | 0b00110 | 0b00001 | 0b00101 | 0b00011 | 0b00111, _, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _) => {
            let op = (inst >> 23) & 0b1;
            let S = (inst >> 22) & 0b1;
            let Pm = (inst >> 16) & 0b1111;
            let Pg = (inst >> 10) & 0b1111;
            let o2 = (inst >> 9) & 0b1;
            let Pn = (inst >> 5) & 0b1111;
            let o3 = (inst >> 4) & 0b1;
            let Pd = inst & 0b1111;
            match (op, S, o2, o3) {
                (0, 0, 0, 0) => return OpCode::AND_P_P_PP_Z,
                (0, 0, 0, 1) => return OpCode::BIC_P_P_PP_Z,
                (0, 0, 1, 0) => return OpCode::EOR_P_P_PP_Z,
                (0, 0, 1, 1) => return OpCode::SEL_P_P_PP__,
                (0, 1, 0, 0) => return OpCode::ANDS_P_P_PP_Z,
                (0, 1, 0, 1) => return OpCode::BICS_P_P_PP_Z,
                (0, 1, 1, 0) => return OpCode::EORS_P_P_PP_Z,
                (0, 1, 1, 1) => return OpCode::Unallocated,
                (1, 0, 0, 0) => return OpCode::ORR_P_P_PP_Z,
                (1, 0, 0, 1) => return OpCode::ORN_P_P_PP_Z,
                (1, 0, 1, 0) => return OpCode::NOR_P_P_PP_Z,
                (1, 0, 1, 1) => return OpCode::NAND_P_P_PP_Z,
                (1, 1, 0, 0) => return OpCode::ORRS_P_P_PP_Z,
                (1, 1, 0, 1) => return OpCode::ORNS_P_P_PP_Z,
                (1, 1, 1, 0) => return OpCode::NORS_P_P_PP_Z,
                (1, 1, 1, 1) => return OpCode::NANDS_P_P_PP_Z,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b001, _, 0b10 | 0b11, _, 0b00000 | 0b00100 | 0b00010 | 0b00110 | 0b00001 | 0b00101 | 0b00011 | 0b00111, _, 0b110000 | 0b111000 | 0b110100 | 0b111100 | 0b110010 | 0b111010 | 0b110110 | 0b111110 | 0b110001 | 0b111001 | 0b110101 | 0b111101 | 0b110011 | 0b111011 | 0b110111 | 0b111111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 20) & 0b11, (inst >> 16) & 0b1111, (inst >> 14) & 0b11, (inst >> 10) & 0b1111, (inst >> 9) & 0b1, inst & 0b111111111) {
            (_, _, _, _, _, _, 0, _) => {
                let op = (inst >> 23) & 0b1;
                let S = (inst >> 22) & 0b1;
                let Pm = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b1111;
                let Pn = (inst >> 5) & 0b1111;
                let B = (inst >> 4) & 0b1;
                let Pd = inst & 0b1111;
                match (op, S, B) {
                    (0, 0, 0) => return OpCode::BRKPA_P_P_PP__,
                    (0, 0, 1) => return OpCode::BRKPB_P_P_PP__,
                    (0, 1, 0) => return OpCode::BRKPAS_P_P_PP__,
                    (0, 1, 1) => return OpCode::BRKPBS_P_P_PP__,
                    (1, _, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, _, 1, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b001, _, 0b10 | 0b11, _, 0b01000 | 0b01100 | 0b01010 | 0b01110 | 0b01001 | 0b01101 | 0b01011 | 0b01111, _, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _) => match ((inst >> 24) & 0b11111111, (inst >> 23) & 0b1, (inst >> 22) & 0b1, (inst >> 20) & 0b11, (inst >> 16) & 0b1111, (inst >> 14) & 0b11, (inst >> 10) & 0b1111, (inst >> 9) & 0b1, (inst >> 5) & 0b1111, (inst >> 4) & 0b1, inst & 0b1111) {
            (_, 0, _, _, 0b1000, _, _, 0, _, 0, _) => {
                let S = (inst >> 22) & 0b1;
                let Pg = (inst >> 10) & 0b1111;
                let Pn = (inst >> 5) & 0b1111;
                let Pdm = inst & 0b1111;
                match S {
                    0 => return OpCode::BRKN_P_P_PP__,
                    1 => return OpCode::BRKNS_P_P_PP__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0, _, _, 0b1000, _, _, 0, _, 1, _) => return OpCode::Unpredictable,
            (_, 0, _, _, 0b0000 | 0b1000, _, _, 1, _, _, _) => return OpCode::Unpredictable,
            (_, 0, _, _, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, _, _, _, _, _, _) => return OpCode::Unpredictable,
            (_, 0, _, _, 0b0010 | 0b1010 | 0b0110 | 0b1110 | 0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, _, _, _) => return OpCode::Unpredictable,
            (_, 0, _, _, 0b0001 | 0b1001 | 0b0101 | 0b1101 | 0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, _, _, _) => return OpCode::Unpredictable,
            (_, 1, _, _, 0b0000, _, _, 1, _, _, _) => return OpCode::Unpredictable,
            (_, 1, _, _, var0, _, _, _, _, _, _) if var0 != 0b0000 => return OpCode::Unpredictable,
            (_, _, _, _, 0b0000, _, _, 0, _, _, _) => {
                let B = (inst >> 23) & 0b1;
                let S = (inst >> 22) & 0b1;
                let Pg = (inst >> 10) & 0b1111;
                let Pn = (inst >> 5) & 0b1111;
                let M = (inst >> 4) & 0b1;
                let Pd = inst & 0b1111;
                match (B, S, M) {
                    (_, 1, 1) => return OpCode::Unallocated,
                    (0, 0, _) => return OpCode::BRKA_P_P_P__,
                    (0, 1, 0) => return OpCode::BRKAS_P_P_P_Z,
                    (1, 0, _) => return OpCode::BRKB_P_P_P__,
                    (1, 1, 0) => return OpCode::BRKBS_P_P_P_Z,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b001, _, 0b10 | 0b11, _, 0b01000 | 0b01100 | 0b01010 | 0b01110 | 0b01001 | 0b01101 | 0b01011 | 0b01111, _, 0b110000 | 0b111000 | 0b110100 | 0b111100 | 0b110010 | 0b111010 | 0b110110 | 0b111110 | 0b110001 | 0b111001 | 0b110101 | 0b111101 | 0b110011 | 0b111011 | 0b110111 | 0b111111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 20) & 0b11, (inst >> 16) & 0b1111, (inst >> 14) & 0b11, (inst >> 11) & 0b111, (inst >> 9) & 0b11, (inst >> 5) & 0b1111, (inst >> 4) & 0b1, inst & 0b1111) {
            (_, _, _, 0b0000, _, _, 0b00 | 0b10, _, 0, _) => {
                let op = (inst >> 23) & 0b1;
                let S = (inst >> 22) & 0b1;
                let Pg = (inst >> 10) & 0b1111;
                let Pn = (inst >> 5) & 0b1111;
                let opc2 = inst & 0b1111;
                match (op, S, opc2) {
                    (0, 0, _) => return OpCode::Unallocated,
                    (0, 1, 0b0000) => return OpCode::PTEST__P_P__,
                    (0, 1, 0b0001) => return OpCode::Unallocated,
                    (0, 1, 0b0010 | 0b0011) => return OpCode::Unallocated,
                    (0, 1, 0b0100 | 0b0110 | 0b0101 | 0b0111) => return OpCode::Unallocated,
                    (0, 1, 0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111) => return OpCode::Unallocated,
                    (1, _, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b0100, _, _, 0b00 | 0b10, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b0010 | 0b0110, _, _, 0b00 | 0b10, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b0001 | 0b0101 | 0b0011 | 0b0111, _, _, 0b00 | 0b10, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b0000 | 0b0100 | 0b0010 | 0b0110 | 0b0001 | 0b0101 | 0b0011 | 0b0111, _, _, 0b01 | 0b11, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b1000, _, 0b000, 0b00, _, 0, _) => {
                let op = (inst >> 23) & 0b1;
                let S = (inst >> 22) & 0b1;
                let Pg = (inst >> 5) & 0b1111;
                let Pdn = inst & 0b1111;
                match (op, S) {
                    (0, 0) => return OpCode::Unallocated,
                    (0, 1) => return OpCode::PFIRST_P_P_P__,
                    (1, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b1000, _, 0b000, var0, _, 0, _) if var0 != 0b00 => return OpCode::Unpredictable,
            (_, _, _, 0b1000, _, 0b100, 0b10, 0b0000, 0, _) => {
                let op = (inst >> 23) & 0b1;
                let S = (inst >> 22) & 0b1;
                let Pd = inst & 0b1111;
                match (op, S) {
                    (0, 0) => return OpCode::PFALSE_P__,
                    (0, 1) => return OpCode::Unallocated,
                    (1, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b1000, _, 0b100, 0b10, var0, 0, _) if var0 != 0b0000 => return OpCode::Unpredictable,
            (_, _, _, 0b1000, _, 0b110, 0b00, _, 0, _) => {
                let op = (inst >> 23) & 0b1;
                let S = (inst >> 22) & 0b1;
                let Pg = (inst >> 5) & 0b1111;
                let Pd = inst & 0b1111;
                match (op, S) {
                    (0, 0) => return OpCode::RDFFR_P_P_F__,
                    (0, 1) => return OpCode::RDFFRS_P_P_F__,
                    (1, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b1001, _, 0b000, 0b00 | 0b01, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b1001, _, 0b000, 0b10, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Pg = (inst >> 5) & 0b1111;
                let Pdn = inst & 0b1111;
return OpCode::PNEXT_P_P_P__;
            }
            (_, _, _, 0b1001, _, 0b000, 0b11, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b1001, _, 0b100, 0b10, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b1001, _, 0b110, 0b00, 0b0000, 0, _) => {
                let op = (inst >> 23) & 0b1;
                let S = (inst >> 22) & 0b1;
                let Pd = inst & 0b1111;
                match (op, S) {
                    (0, 0) => return OpCode::RDFFR_P_F__,
                    (0, 1) => return OpCode::Unallocated,
                    (1, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b1001, _, 0b110, 0b00, var0, 0, _) if var0 != 0b0000 => return OpCode::Unpredictable,
            (_, _, _, 0b1000 | 0b1001, _, 0b010, _, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b1000 | 0b1001, _, 0b100, 0b00 | 0b01, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let S = (inst >> 16) & 0b1;
                let pattern = (inst >> 5) & 0b11111;
                let Pd = inst & 0b1111;
                match S {
                    0 => return OpCode::PTRUE_P_S__,
                    1 => return OpCode::PTRUES_P_S__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b1000 | 0b1001, _, 0b100, 0b11, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b1000 | 0b1001, _, 0b110, var0, _, 0, _) if var0 != 0b00 => return OpCode::Unpredictable,
            (_, _, _, 0b1000 | 0b1001, _, 0b001 | 0b101 | 0b011 | 0b111, _, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b1100 | 0b1101, _, _, _, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, 0b1010 | 0b1110 | 0b1011 | 0b1111, _, _, _, _, 0, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, _, _, _, 1, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b001, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b000000 | 0b001000 | 0b000100 | 0b001100 | 0b000010 | 0b001010 | 0b000110 | 0b001110 | 0b000001 | 0b001001 | 0b000101 | 0b001101 | 0b000011 | 0b001011 | 0b000111 | 0b001111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 14) & 0b11, (inst >> 13) & 0b1, (inst >> 10) & 0b111, (inst >> 4) & 0b111111, inst & 0b1111) {
            (_, _, _, _, _, 0, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let sf = (inst >> 12) & 0b1;
                let U = (inst >> 11) & 0b1;
                let lt = (inst >> 10) & 0b1;
                let Rn = (inst >> 5) & 0b11111;
                let eq = (inst >> 4) & 0b1;
                let Pd = inst & 0b1111;
                match (U, lt, eq) {
                    (_, 0, _) => return OpCode::Unallocated,
                    (0, 1, 0) => return OpCode::WHILELT_P_P_RR__,
                    (0, 1, 1) => return OpCode::WHILELE_P_P_RR__,
                    (1, 1, 0) => return OpCode::WHILELO_P_P_RR__,
                    (1, 1, 1) => return OpCode::WHILELS_P_P_RR__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 1, 0b000, _, 0b0000) => {
                let op = (inst >> 23) & 0b1;
                let sz = (inst >> 22) & 0b1;
                let Rm = (inst >> 16) & 0b11111;
                let Rn = (inst >> 5) & 0b11111;
                let ne = (inst >> 4) & 0b1;
                match (op, ne) {
                    (0, _) => return OpCode::Unallocated,
                    (1, 0) => return OpCode::CTERMEQ_RR__,
                    (1, 1) => return OpCode::CTERMNE_RR__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 1, 0b000, _, var0) if var0 != 0b0000 => return OpCode::Unpredictable,
            (_, _, _, _, _, 1, var0, _, _) if var0 != 0b000 => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b001, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _) => return OpCode::Unpredictable,
        (0b001, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b110000 | 0b111000 | 0b110100 | 0b111100 | 0b110010 | 0b111010 | 0b110110 | 0b111110 | 0b110001 | 0b111001 | 0b110101 | 0b111101 | 0b110011 | 0b111011 | 0b110111 | 0b111111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 19) & 0b11, (inst >> 17) & 0b11, (inst >> 16) & 0b1, (inst >> 14) & 0b11, inst & 0b11111111111111) {
            (_, _, _, 0b00, _, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let sh = (inst >> 13) & 0b1;
                let imm8 = (inst >> 5) & 0b11111111;
                let Zdn = inst & 0b11111;
                match opc {
                    0b000 => return OpCode::ADD_Z_ZI__,
                    0b001 => return OpCode::SUB_Z_ZI__,
                    0b010 => return OpCode::Unallocated,
                    0b011 => return OpCode::SUBR_Z_ZI__,
                    0b100 => return OpCode::SQADD_Z_ZI__,
                    0b101 => return OpCode::UQADD_Z_ZI__,
                    0b110 => return OpCode::SQSUB_Z_ZI__,
                    0b111 => return OpCode::UQSUB_Z_ZI__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b01, _, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let o2 = (inst >> 13) & 0b1;
                let imm8 = (inst >> 5) & 0b11111111;
                let Zdn = inst & 0b11111;
                match (opc, o2) {
                    (0b000 | 0b010 | 0b001 | 0b011, 1) => return OpCode::Unallocated,
                    (0b000, 0) => return OpCode::SMAX_Z_ZI__,
                    (0b001, 0) => return OpCode::UMAX_Z_ZI__,
                    (0b010, 0) => return OpCode::SMIN_Z_ZI__,
                    (0b011, 0) => return OpCode::UMIN_Z_ZI__,
                    (0b100 | 0b110 | 0b101 | 0b111, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b10, _, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let o2 = (inst >> 13) & 0b1;
                let imm8 = (inst >> 5) & 0b11111111;
                let Zdn = inst & 0b11111;
                match (opc, o2) {
                    (0b000, 0) => return OpCode::MUL_Z_ZI__,
                    (0b000, 1) => return OpCode::Unallocated,
                    (0b001, _) => return OpCode::Unallocated,
                    (0b010 | 0b011, _) => return OpCode::Unallocated,
                    (0b100 | 0b110 | 0b101 | 0b111, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b11, _, 0, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 17) & 0b11;
                let sh = (inst >> 13) & 0b1;
                let imm8 = (inst >> 5) & 0b11111111;
                let Zd = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::DUP_Z_I__,
                    0b01 => return OpCode::Unallocated,
                    0b10 | 0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b11, _, 1, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 17) & 0b11;
                let o2 = (inst >> 13) & 0b1;
                let imm8 = (inst >> 5) & 0b11111111;
                let Zd = inst & 0b11111;
                match (opc, o2) {
                    (0b00, 0) => return OpCode::FDUP_Z_I__,
                    (0b00, 1) => return OpCode::Unallocated,
                    (0b01, _) => return OpCode::Unallocated,
                    (0b10 | 0b11, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b001, _, 0b10 | 0b11, _, 0b10000 | 0b10010 | 0b10001 | 0b10011, _, 0b100000 | 0b101000 | 0b100100 | 0b101100 | 0b100010 | 0b101010 | 0b100110 | 0b101110 | 0b100001 | 0b101001 | 0b100101 | 0b101101 | 0b100011 | 0b101011 | 0b100111 | 0b101111, _) => {
            let size = (inst >> 22) & 0b11;
            let opc = (inst >> 16) & 0b111;
            let Pg = (inst >> 10) & 0b1111;
            let o2 = (inst >> 9) & 0b1;
            let Pn = (inst >> 5) & 0b1111;
            let Rd = inst & 0b11111;
            match (opc, o2) {
                (0b000, 0) => return OpCode::CNTP_R_P_P__,
                (0b000, 1) => return OpCode::Unallocated,
                (0b001, _) => return OpCode::Unallocated,
                (0b010 | 0b011, _) => return OpCode::Unallocated,
                (0b100 | 0b110 | 0b101 | 0b111, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b001, _, 0b10 | 0b11, _, 0b10100 | 0b10110 | 0b10101 | 0b10111, _, 0b100000 | 0b100010 | 0b100001 | 0b100011, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 19) & 0b111, (inst >> 18) & 0b1, (inst >> 16) & 0b11, (inst >> 12) & 0b1111, (inst >> 11) & 0b1, inst & 0b11111111111) {
            (_, _, _, 0, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let D = (inst >> 17) & 0b1;
                let U = (inst >> 16) & 0b1;
                let opc = (inst >> 9) & 0b11;
                let Pm = (inst >> 5) & 0b1111;
                let Zdn = inst & 0b11111;
                match (D, U, opc) {
                    (_, _, 0b01) => return OpCode::Unallocated,
                    (_, _, 0b10 | 0b11) => return OpCode::Unallocated,
                    (0, 0, 0b00) => return OpCode::SQINCP_Z_P_Z__,
                    (0, 1, 0b00) => return OpCode::UQINCP_Z_P_Z__,
                    (1, 0, 0b00) => return OpCode::SQDECP_Z_P_Z__,
                    (1, 1, 0b00) => return OpCode::UQDECP_Z_P_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, _, _, 1, _) => {
                let size = (inst >> 22) & 0b11;
                let D = (inst >> 17) & 0b1;
                let U = (inst >> 16) & 0b1;
                let sf = (inst >> 10) & 0b1;
                let op = (inst >> 9) & 0b1;
                let Pm = (inst >> 5) & 0b1111;
                let Rdn = inst & 0b11111;
                match (D, U, sf, op) {
                    (_, _, _, 1) => return OpCode::Unallocated,
                    (0, 0, 0, 0) => return OpCode::SQINCP_R_P_R_SX,
                    (0, 0, 1, 0) => return OpCode::SQINCP_R_P_R_X,
                    (0, 1, 0, 0) => return OpCode::UQINCP_R_P_R_UW,
                    (0, 1, 1, 0) => return OpCode::UQINCP_R_P_R_X,
                    (1, 0, 0, 0) => return OpCode::SQDECP_R_P_R_SX,
                    (1, 0, 1, 0) => return OpCode::SQDECP_R_P_R_X,
                    (1, 1, 0, 0) => return OpCode::UQDECP_R_P_R_UW,
                    (1, 1, 1, 0) => return OpCode::UQDECP_R_P_R_X,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let op = (inst >> 17) & 0b1;
                let D = (inst >> 16) & 0b1;
                let opc2 = (inst >> 9) & 0b11;
                let Pm = (inst >> 5) & 0b1111;
                let Zdn = inst & 0b11111;
                match (op, D, opc2) {
                    (0, _, 0b01) => return OpCode::Unallocated,
                    (0, _, 0b10 | 0b11) => return OpCode::Unallocated,
                    (0, 0, 0b00) => return OpCode::INCP_Z_P_Z__,
                    (0, 1, 0b00) => return OpCode::DECP_Z_P_Z__,
                    (1, _, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, _, _, 1, _) => {
                let size = (inst >> 22) & 0b11;
                let op = (inst >> 17) & 0b1;
                let D = (inst >> 16) & 0b1;
                let opc2 = (inst >> 9) & 0b11;
                let Pm = (inst >> 5) & 0b1111;
                let Rdn = inst & 0b11111;
                match (op, D, opc2) {
                    (0, _, 0b01) => return OpCode::Unallocated,
                    (0, _, 0b10 | 0b11) => return OpCode::Unallocated,
                    (0, 0, 0b00) => return OpCode::INCP_R_P_R__,
                    (0, 1, 0b00) => return OpCode::DECP_R_P_R__,
                    (1, _, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b001, _, 0b10 | 0b11, _, 0b10100 | 0b10110 | 0b10101 | 0b10111, _, 0b100100 | 0b100110 | 0b100101 | 0b100111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 19) & 0b111, (inst >> 18) & 0b1, (inst >> 16) & 0b11, (inst >> 12) & 0b1111, (inst >> 9) & 0b111, (inst >> 5) & 0b1111, inst & 0b11111) {
            (_, _, _, 0, 0b00, _, 0b000, _, 0b00000) => {
                let opc = (inst >> 22) & 0b11;
                let Pn = (inst >> 5) & 0b1111;
                match opc {
                    0b00 => return OpCode::WRFFR_F_P__,
                    0b01 => return OpCode::Unallocated,
                    0b10 | 0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, 0b00, _, 0b000, 0b0000, 0b00000) => {
                let opc = (inst >> 22) & 0b11;
                match opc {
                    0b00 => return OpCode::SETFFR_F__,
                    0b01 => return OpCode::Unallocated,
                    0b10 | 0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, 0b00, _, 0b000, 0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111, 0b00000) => return OpCode::Unpredictable,
            (_, _, _, 1, 0b00, _, 0b000, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b00000) => return OpCode::Unpredictable,
            (_, _, _, 1, 0b00, _, 0b000, 0b0010 | 0b1010 | 0b0110 | 0b1110 | 0b0011 | 0b1011 | 0b0111 | 0b1111, 0b00000) => return OpCode::Unpredictable,
            (_, _, _, 1, 0b00, _, 0b000, 0b0001 | 0b1001 | 0b0101 | 0b1101 | 0b0011 | 0b1011 | 0b0111 | 0b1111, 0b00000) => return OpCode::Unpredictable,
            (_, _, _, _, 0b00, _, 0b000, _, var0) if var0 != 0b00000 => return OpCode::Unpredictable,
            (_, _, _, _, 0b00, _, var0, _, _) if var0 != 0b000 => return OpCode::Unpredictable,
            (_, _, _, _, var0, _, _, _, _) if var0 != 0b00 => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b001, _, 0b10 | 0b11, _, 0b10100 | 0b10110 | 0b10101 | 0b10111, _, 0b101000 | 0b101100 | 0b101010 | 0b101110 | 0b101001 | 0b101101 | 0b101011 | 0b101111, _) => return OpCode::Unpredictable,
        (0b001, _, 0b10 | 0b11, _, 0b11000 | 0b11100 | 0b11010 | 0b11110 | 0b11001 | 0b11101 | 0b11011 | 0b11111, _, 0b100000 | 0b101000 | 0b100100 | 0b101100 | 0b100010 | 0b101010 | 0b100110 | 0b101110 | 0b100001 | 0b101001 | 0b100101 | 0b101101 | 0b100011 | 0b101011 | 0b100111 | 0b101111, _) => return OpCode::Unpredictable,
        (0b010, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 15) & 0b1, (inst >> 14) & 0b1, (inst >> 11) & 0b111, (inst >> 10) & 0b1, inst & 0b1111111111) {
            (_, _, _, _, _, 0, 0b000, _, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 10) & 0b1;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match U {
                    0 => return OpCode::SDOT_Z_ZZZ__,
                    1 => return OpCode::UDOT_Z_ZZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 0, var0, _, _) if var0 != 0b000 => return OpCode::Unpredictable,
            (_, _, _, _, _, 1, 0b000 | 0b010 | 0b001 | 0b011, _, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, 1, 0b100 | 0b101, _, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, 1, 0b110, _, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, 1, 0b111, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match size {
                    0b00 | 0b01 => return OpCode::Unallocated,
                    0b10 => return OpCode::USDOT_Z_ZZZ_S,
                    0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 1, 0b111, 1, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b010, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _) => return OpCode::Unpredictable,
        (0b010, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, _, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 13) & 0b111, (inst >> 11) & 0b11, inst & 0b11111111111) {
            (_, _, _, _, 0b000, 0b00, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b11111;
                let U = (inst >> 10) & 0b1;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match (size, U) {
                    (0b00 | 0b01, _) => return OpCode::Unallocated,
                    (0b10, 0) => return OpCode::SDOT_Z_ZZZi_S,
                    (0b10, 1) => return OpCode::UDOT_Z_ZZZi_S,
                    (0b11, 0) => return OpCode::SDOT_Z_ZZZi_D,
                    (0b11, 1) => return OpCode::UDOT_Z_ZZZi_D,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, 0b000, 0b01, _) => return OpCode::Unpredictable,
            (_, _, _, _, 0b000, 0b10, _) => return OpCode::Unpredictable,
            (_, _, _, _, 0b000, 0b11, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b11111;
                let U = (inst >> 10) & 0b1;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match (size, U) {
                    (0b00 | 0b01, _) => return OpCode::Unallocated,
                    (0b10, 0) => return OpCode::USDOT_Z_ZZZi_S,
                    (0b10, 1) => return OpCode::SUDOT_Z_ZZZi_S,
                    (0b11, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, var0, _, _) if var0 != 0b000 => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b010, _, 0b10 | 0b11, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _) => return OpCode::Unpredictable,
        (0b010, _, 0b10 | 0b11, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b100000 | 0b101000 | 0b100100 | 0b101100 | 0b100010 | 0b101010 | 0b100110 | 0b101110 | 0b100001 | 0b101001 | 0b100101 | 0b101101 | 0b100011 | 0b101011 | 0b100111 | 0b101111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 14) & 0b11, (inst >> 10) & 0b1111, inst & 0b1111111111) {
            (_, _, _, _, _, 0b0000 | 0b0010 | 0b0001 | 0b0011, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, 0b0100 | 0b0101, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, 0b0110, _) => {
                let uns = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match uns {
                    0b00 => return OpCode::SMMLA_Z_ZZZ__,
                    0b01 => return OpCode::Unallocated,
                    0b10 => return OpCode::USMMLA_Z_ZZZ__,
                    0b11 => return OpCode::UMMLA_Z_ZZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 0b0111, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, 0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b010, _, 0b10 | 0b11, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b110000 | 0b111000 | 0b110100 | 0b111100 | 0b110010 | 0b111010 | 0b110110 | 0b111110 | 0b110001 | 0b111001 | 0b110101 | 0b111101 | 0b110011 | 0b111011 | 0b110111 | 0b111111, _) => return OpCode::Unpredictable,
        (0b010, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, _, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _) => {
            let size = (inst >> 22) & 0b11;
            let Zm = (inst >> 16) & 0b11111;
            let rot = (inst >> 13) & 0b11;
            let Pg = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let Zda = inst & 0b11111;
return OpCode::FCMLA_Z_P_ZZZ__;
        }
        (0b011, _, 0b00 | 0b01, _, 0b00010 | 0b00110 | 0b00011 | 0b00111, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b00000, _, 0b100000 | 0b100100 | 0b100010 | 0b100110 | 0b100001 | 0b100101 | 0b100011 | 0b100111, _) => {
            let size = (inst >> 22) & 0b11;
            let rot = (inst >> 16) & 0b1;
            let Pg = (inst >> 10) & 0b111;
            let Zm = (inst >> 5) & 0b11111;
            let Zdn = inst & 0b11111;
return OpCode::FCADD_Z_P_ZZ__;
        }
        (0b011, _, 0b00 | 0b01, _, 0b00000, _, 0b101000 | 0b101100 | 0b101010 | 0b101110 | 0b101001 | 0b101101 | 0b101011 | 0b101111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b00000, _, 0b110000 | 0b111000 | 0b110100 | 0b111100 | 0b110010 | 0b111010 | 0b110110 | 0b111110 | 0b110001 | 0b111001 | 0b110101 | 0b111101 | 0b110011 | 0b111011 | 0b110111 | 0b111111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b00001, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b00100 | 0b00101, _, 0b100000 | 0b100100 | 0b100010 | 0b100110 | 0b100001 | 0b100101 | 0b100011 | 0b100111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b00100 | 0b00101, _, 0b101000 | 0b101100 | 0b101010 | 0b101110 | 0b101001 | 0b101101 | 0b101011 | 0b101111, _) => {
            let opc = (inst >> 22) & 0b11;
            let opc2 = (inst >> 16) & 0b11;
            let Pg = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let Zd = inst & 0b11111;
            match (opc, opc2) {
                (0b00 | 0b01, _) => return OpCode::Unallocated,
                (0b10, 0b00 | 0b01) => return OpCode::Unallocated,
                (0b10, 0b10) => return OpCode::BFCVTNT_Z_P_Z_S2BF,
                (0b10, 0b11) => return OpCode::Unallocated,
                (0b11, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b00 | 0b01, _, 0b00100 | 0b00101, _, 0b110000 | 0b111000 | 0b110100 | 0b111100 | 0b110010 | 0b111010 | 0b110110 | 0b111110 | 0b110001 | 0b111001 | 0b110101 | 0b111101 | 0b110011 | 0b111011 | 0b110111 | 0b111111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b01000 | 0b01100 | 0b01010 | 0b01110 | 0b01001 | 0b01101 | 0b01011 | 0b01111, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b000010 | 0b100010 | 0b001010 | 0b101010 | 0b000011 | 0b100011 | 0b001011 | 0b101011, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b000000 | 0b000001, _) => {
            let size = (inst >> 22) & 0b11;
            let opc = (inst >> 16) & 0b11111;
            let op = (inst >> 10) & 0b1;
            let Zn = (inst >> 5) & 0b11111;
            let Zda = inst & 0b11111;
            match (size, op) {
                (0b00 | 0b01, 0) => return OpCode::FMLA_Z_ZZZi_H,
                (0b00 | 0b01, 1) => return OpCode::FMLS_Z_ZZZi_H,
                (0b10, 0) => return OpCode::FMLA_Z_ZZZi_S,
                (0b10, 1) => return OpCode::FMLS_Z_ZZZi_S,
                (0b11, 0) => return OpCode::FMLA_Z_ZZZi_D,
                (0b11, 1) => return OpCode::FMLS_Z_ZZZi_D,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b000100 | 0b000110 | 0b000101 | 0b000111, _) => {
            let size = (inst >> 22) & 0b11;
            let opc = (inst >> 16) & 0b11111;
            let rot = (inst >> 10) & 0b11;
            let Zn = (inst >> 5) & 0b11111;
            let Zda = inst & 0b11111;
            match size {
                0b00 | 0b01 => return OpCode::Unallocated,
                0b10 => return OpCode::FCMLA_Z_ZZZi_H,
                0b11 => return OpCode::FCMLA_Z_ZZZi_S,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b001000, _) => {
            let size = (inst >> 22) & 0b11;
            let opc = (inst >> 16) & 0b11111;
            let Zn = (inst >> 5) & 0b11111;
            let Zd = inst & 0b11111;
            match size {
                0b00 | 0b01 => return OpCode::FMUL_Z_ZZi_H,
                0b10 => return OpCode::FMUL_Z_ZZi_S,
                0b11 => return OpCode::FMUL_Z_ZZi_D,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b001001, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b001100 | 0b001110 | 0b001101 | 0b001111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b010000 | 0b011000 | 0b010010 | 0b011010 | 0b010001 | 0b011001 | 0b010011 | 0b011011, _) => match ((inst >> 24) & 0b11111111, (inst >> 23) & 0b1, (inst >> 22) & 0b1, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 14) & 0b11, (inst >> 13) & 0b1, (inst >> 12) & 0b1, (inst >> 10) & 0b11, inst & 0b1111111111) {
            (_, 0, _, _, _, _, 0, _, 0b00, _) => {
                let op = (inst >> 22) & 0b1;
                let i2 = (inst >> 19) & 0b11;
                let Zm = (inst >> 16) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match op {
                    0 => return OpCode::Unallocated,
                    1 => return OpCode::BFDOT_Z_ZZZi__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0, _, _, _, _, 0, _, var0, _) if var0 != 0b00 => return OpCode::Unpredictable,
            (_, 0, _, _, _, _, 1, _, _, _) => return OpCode::Unpredictable,
            (_, 1, _, _, _, _, _, _, _, _) => {
                let o2 = (inst >> 22) & 0b1;
                let i3h = (inst >> 19) & 0b11;
                let Zm = (inst >> 16) & 0b111;
                let op = (inst >> 13) & 0b1;
                let i3l = (inst >> 11) & 0b1;
                let T = (inst >> 10) & 0b1;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match (o2, op, T) {
                    (0, _, _) => return OpCode::Unallocated,
                    (1, 0, 0) => return OpCode::BFMLALB_Z_ZZZi__,
                    (1, 0, 1) => return OpCode::BFMLALT_Z_ZZZi__,
                    (1, 1, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b010100 | 0b011100 | 0b010110 | 0b011110 | 0b010101 | 0b011101 | 0b010111 | 0b011111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b100000 | 0b101000 | 0b100001 | 0b101001, _) => match ((inst >> 24) & 0b11111111, (inst >> 23) & 0b1, (inst >> 22) & 0b1, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 14) & 0b11, (inst >> 13) & 0b1, (inst >> 11) & 0b11, (inst >> 10) & 0b1, inst & 0b1111111111) {
            (_, 0, _, _, _, _, 0, _, 0, _) => {
                let op = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match op {
                    0 => return OpCode::Unallocated,
                    1 => return OpCode::BFDOT_Z_ZZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0, _, _, _, _, 0, _, 1, _) => return OpCode::Unpredictable,
            (_, 0, _, _, _, _, 1, _, _, _) => return OpCode::Unpredictable,
            (_, 1, _, _, _, _, _, _, _, _) => {
                let o2 = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let op = (inst >> 13) & 0b1;
                let T = (inst >> 10) & 0b1;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match (o2, op, T) {
                    (0, _, _) => return OpCode::Unallocated,
                    (1, 0, 0) => return OpCode::BFMLALB_Z_ZZZ__,
                    (1, 0, 1) => return OpCode::BFMLALT_Z_ZZZ__,
                    (1, 1, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b100100 | 0b101100 | 0b100110 | 0b101110 | 0b100101 | 0b101101 | 0b100111 | 0b101111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b110000 | 0b110100 | 0b110010 | 0b110110 | 0b110001 | 0b110101 | 0b110011 | 0b110111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b111000, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b111001, _) => {
            let opc = (inst >> 22) & 0b11;
            let Zm = (inst >> 16) & 0b11111;
            let Zn = (inst >> 5) & 0b11111;
            let Zda = inst & 0b11111;
            match opc {
                0b00 => return OpCode::Unallocated,
                0b01 => return OpCode::BFMMLA_Z_ZZZ__,
                0b10 => return OpCode::FMMLA_Z_ZZZ_S,
                0b11 => return OpCode::FMMLA_Z_ZZZ_D,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b111010 | 0b111011, _) => return OpCode::Unpredictable,
        (0b011, _, 0b00 | 0b01, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, 0b111100 | 0b111110 | 0b111101 | 0b111111, _) => return OpCode::Unpredictable,
        (0b011, _, 0b10 | 0b11, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b010000 | 0b110000 | 0b011000 | 0b111000 | 0b010100 | 0b110100 | 0b011100 | 0b111100 | 0b010010 | 0b110010 | 0b011010 | 0b111010 | 0b010110 | 0b110110 | 0b011110 | 0b111110 | 0b010001 | 0b110001 | 0b011001 | 0b111001 | 0b010101 | 0b110101 | 0b011101 | 0b111101 | 0b010011 | 0b110011 | 0b011011 | 0b111011 | 0b010111 | 0b110111 | 0b011111 | 0b111111, _) => {
            let size = (inst >> 22) & 0b11;
            let Zm = (inst >> 16) & 0b11111;
            let op = (inst >> 15) & 0b1;
            let o2 = (inst >> 13) & 0b1;
            let Pg = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let o3 = (inst >> 4) & 0b1;
            let Pd = inst & 0b1111;
            match (op, o2, o3) {
                (0, 0, 0) => return OpCode::FCMGE_P_P_ZZ__,
                (0, 0, 1) => return OpCode::FCMGT_P_P_ZZ__,
                (0, 1, 0) => return OpCode::FCMEQ_P_P_ZZ__,
                (0, 1, 1) => return OpCode::FCMNE_P_P_ZZ__,
                (1, 0, 0) => return OpCode::FCMUO_P_P_ZZ__,
                (1, 0, 1) => return OpCode::FACGE_P_P_ZZ__,
                (1, 1, 0) => return OpCode::Unallocated,
                (1, 1, 1) => return OpCode::FACGT_P_P_ZZ__,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b10 | 0b11, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b000000 | 0b000100 | 0b000010 | 0b000110 | 0b000001 | 0b000101 | 0b000011 | 0b000111, _) => {
            let size = (inst >> 22) & 0b11;
            let Zm = (inst >> 16) & 0b11111;
            let opc = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let Zd = inst & 0b11111;
            match opc {
                0b000 => return OpCode::FADD_Z_ZZ__,
                0b001 => return OpCode::FSUB_Z_ZZ__,
                0b010 => return OpCode::FMUL_Z_ZZ__,
                0b011 => return OpCode::FTSMUL_Z_ZZ__,
                0b100 | 0b101 => return OpCode::Unallocated,
                0b110 => return OpCode::FRECPS_Z_ZZ__,
                0b111 => return OpCode::FRSQRTS_Z_ZZ__,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b10 | 0b11, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b100000 | 0b100100 | 0b100010 | 0b100110 | 0b100001 | 0b100101 | 0b100011 | 0b100111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 19) & 0b11, (inst >> 16) & 0b111, (inst >> 13) & 0b111, (inst >> 10) & 0b111, (inst >> 6) & 0b1111, inst & 0b111111) {
            (_, _, _, 0b00 | 0b01, _, _, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match opc {
                    0b0000 => return OpCode::FADD_Z_P_ZZ__,
                    0b0001 => return OpCode::FSUB_Z_P_ZZ__,
                    0b0010 => return OpCode::FMUL_Z_P_ZZ__,
                    0b0011 => return OpCode::FSUBR_Z_P_ZZ__,
                    0b0100 => return OpCode::FMAXNM_Z_P_ZZ__,
                    0b0101 => return OpCode::FMINNM_Z_P_ZZ__,
                    0b0110 => return OpCode::FMAX_Z_P_ZZ__,
                    0b0111 => return OpCode::FMIN_Z_P_ZZ__,
                    0b1000 => return OpCode::FABD_Z_P_ZZ__,
                    0b1001 => return OpCode::FSCALE_Z_P_ZZ__,
                    0b1010 => return OpCode::FMULX_Z_P_ZZ__,
                    0b1011 => return OpCode::Unallocated,
                    0b1100 => return OpCode::FDIVR_Z_P_ZZ__,
                    0b1101 => return OpCode::FDIV_Z_P_ZZ__,
                    0b1110 | 0b1111 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b10, _, _, 0b000, _, _) => {
                let size = (inst >> 22) & 0b11;
                let imm3 = (inst >> 16) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
return OpCode::FTMAD_Z_ZZI__;
            }
            (_, _, _, 0b10, _, _, var0, _, _) if var0 != 0b000 => return OpCode::Unpredictable,
            (_, _, _, 0b11, _, _, _, 0b0000, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let Pg = (inst >> 10) & 0b111;
                let i1 = (inst >> 5) & 0b1;
                let Zdn = inst & 0b11111;
                match opc {
                    0b000 => return OpCode::FADD_Z_P_ZS__,
                    0b001 => return OpCode::FSUB_Z_P_ZS__,
                    0b010 => return OpCode::FMUL_Z_P_ZS__,
                    0b011 => return OpCode::FSUBR_Z_P_ZS__,
                    0b100 => return OpCode::FMAXNM_Z_P_ZS__,
                    0b101 => return OpCode::FMINNM_Z_P_ZS__,
                    0b110 => return OpCode::FMAX_Z_P_ZS__,
                    0b111 => return OpCode::FMIN_Z_P_ZS__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b11, _, _, _, var0, _) if var0 != 0b0000 => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b011, _, 0b10 | 0b11, _, 0b00000 | 0b01000 | 0b00100 | 0b01100 | 0b00010 | 0b01010 | 0b00110 | 0b01110 | 0b00001 | 0b01001 | 0b00101 | 0b01101 | 0b00011 | 0b01011 | 0b00111 | 0b01111, _, 0b101000 | 0b101100 | 0b101010 | 0b101110 | 0b101001 | 0b101101 | 0b101011 | 0b101111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 18) & 0b111, (inst >> 16) & 0b11, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, _, 0b000 | 0b001, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b000 => return OpCode::FRINTN_Z_P_Z__,
                    0b001 => return OpCode::FRINTP_Z_P_Z__,
                    0b010 => return OpCode::FRINTM_Z_P_Z__,
                    0b011 => return OpCode::FRINTZ_Z_P_Z__,
                    0b100 => return OpCode::FRINTA_Z_P_Z__,
                    0b101 => return OpCode::Unallocated,
                    0b110 => return OpCode::FRINTX_Z_P_Z__,
                    0b111 => return OpCode::FRINTI_Z_P_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b010, _, _, _) => {
                let opc = (inst >> 22) & 0b11;
                let opc2 = (inst >> 16) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match (opc, opc2) {
                    (0b00 | 0b01, _) => return OpCode::Unallocated,
                    (0b10, 0b00) => return OpCode::FCVT_Z_P_Z_S2H,
                    (0b10, 0b01) => return OpCode::FCVT_Z_P_Z_H2S,
                    (0b10, 0b10) => return OpCode::BFCVT_Z_P_Z_S2BF,
                    (0b10, 0b11) => return OpCode::Unallocated,
                    (0b11, 0b00) => return OpCode::FCVT_Z_P_Z_D2H,
                    (0b11, 0b01) => return OpCode::FCVT_Z_P_Z_H2D,
                    (0b11, 0b10) => return OpCode::FCVT_Z_P_Z_D2S,
                    (0b11, 0b11) => return OpCode::FCVT_Z_P_Z_S2D,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b011, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::FRECPX_Z_P_Z__,
                    0b01 => return OpCode::FSQRT_Z_P_Z__,
                    0b10 | 0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b100 | 0b101, _, _, _) => {
                let opc = (inst >> 22) & 0b11;
                let opc2 = (inst >> 17) & 0b11;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match (opc, opc2, U) {
                    (0b00, _, _) => return OpCode::Unallocated,
                    (0b01, 0b00, _) => return OpCode::Unallocated,
                    (0b01, 0b01, 0) => return OpCode::SCVTF_Z_P_Z_H2FP16,
                    (0b01, 0b01, 1) => return OpCode::UCVTF_Z_P_Z_H2FP16,
                    (0b01, 0b10, 0) => return OpCode::SCVTF_Z_P_Z_W2FP16,
                    (0b01, 0b10, 1) => return OpCode::UCVTF_Z_P_Z_W2FP16,
                    (0b01, 0b11, 0) => return OpCode::SCVTF_Z_P_Z_X2FP16,
                    (0b01, 0b11, 1) => return OpCode::UCVTF_Z_P_Z_X2FP16,
                    (0b10, 0b00 | 0b01, _) => return OpCode::Unallocated,
                    (0b10, 0b10, 0) => return OpCode::SCVTF_Z_P_Z_W2S,
                    (0b10, 0b10, 1) => return OpCode::UCVTF_Z_P_Z_W2S,
                    (0b10, 0b11, _) => return OpCode::Unallocated,
                    (0b11, 0b00, 0) => return OpCode::SCVTF_Z_P_Z_W2D,
                    (0b11, 0b00, 1) => return OpCode::UCVTF_Z_P_Z_W2D,
                    (0b11, 0b01, _) => return OpCode::Unallocated,
                    (0b11, 0b10, 0) => return OpCode::SCVTF_Z_P_Z_X2S,
                    (0b11, 0b10, 1) => return OpCode::UCVTF_Z_P_Z_X2S,
                    (0b11, 0b11, 0) => return OpCode::SCVTF_Z_P_Z_X2D,
                    (0b11, 0b11, 1) => return OpCode::UCVTF_Z_P_Z_X2D,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0b110 | 0b111, _, _, _) => {
                let opc = (inst >> 22) & 0b11;
                let opc2 = (inst >> 17) & 0b11;
                let U = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match (opc, opc2, U) {
                    (0b00, _, _) => return OpCode::Unallocated,
                    (0b01, 0b00, _) => return OpCode::Unallocated,
                    (0b01, 0b01, 0) => return OpCode::FCVTZS_Z_P_Z_FP162H,
                    (0b01, 0b01, 1) => return OpCode::FCVTZU_Z_P_Z_FP162H,
                    (0b01, 0b10, 0) => return OpCode::FCVTZS_Z_P_Z_FP162W,
                    (0b01, 0b10, 1) => return OpCode::FCVTZU_Z_P_Z_FP162W,
                    (0b01, 0b11, 0) => return OpCode::FCVTZS_Z_P_Z_FP162X,
                    (0b01, 0b11, 1) => return OpCode::FCVTZU_Z_P_Z_FP162X,
                    (0b10, 0b00 | 0b01, _) => return OpCode::Unallocated,
                    (0b10, 0b10, 0) => return OpCode::FCVTZS_Z_P_Z_S2W,
                    (0b10, 0b10, 1) => return OpCode::FCVTZU_Z_P_Z_S2W,
                    (0b10, 0b11, _) => return OpCode::Unallocated,
                    (0b11, 0b00, 0) => return OpCode::FCVTZS_Z_P_Z_D2W,
                    (0b11, 0b00, 1) => return OpCode::FCVTZU_Z_P_Z_D2W,
                    (0b11, 0b01, _) => return OpCode::Unallocated,
                    (0b11, 0b10, 0) => return OpCode::FCVTZS_Z_P_Z_S2X,
                    (0b11, 0b10, 1) => return OpCode::FCVTZU_Z_P_Z_S2X,
                    (0b11, 0b11, 0) => return OpCode::FCVTZS_Z_P_Z_D2X,
                    (0b11, 0b11, 1) => return OpCode::FCVTZU_Z_P_Z_D2X,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b011, _, 0b10 | 0b11, _, 0b00000 | 0b00010 | 0b00001 | 0b00011, _, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _) => {
            let size = (inst >> 22) & 0b11;
            let opc = (inst >> 16) & 0b111;
            let Pg = (inst >> 10) & 0b111;
            let Zn = (inst >> 5) & 0b11111;
            let Vd = inst & 0b11111;
            match opc {
                0b000 => return OpCode::FADDV_V_P_Z__,
                0b001 => return OpCode::Unallocated,
                0b010 | 0b011 => return OpCode::Unallocated,
                0b100 => return OpCode::FMAXNMV_V_P_Z__,
                0b101 => return OpCode::FMINNMV_V_P_Z__,
                0b110 => return OpCode::FMAXV_V_P_Z__,
                0b111 => return OpCode::FMINV_V_P_Z__,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b10 | 0b11, _, 0b00100 | 0b00110 | 0b00101 | 0b00111, _, 0b001000 | 0b001010 | 0b001001 | 0b001011, _) => return OpCode::Unpredictable,
        (0b011, _, 0b10 | 0b11, _, 0b00100 | 0b00110 | 0b00101 | 0b00111, _, 0b001100 | 0b001110 | 0b001101 | 0b001111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 19) & 0b111, (inst >> 16) & 0b111, (inst >> 12) & 0b1111, (inst >> 10) & 0b11, inst & 0b1111111111) {
            (_, _, _, _, _, 0b00, _) => {
                let size = (inst >> 22) & 0b11;
                let opc = (inst >> 16) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zd = inst & 0b11111;
                match opc {
                    0b000 | 0b010 | 0b001 | 0b011 => return OpCode::Unallocated,
                    0b100 | 0b101 => return OpCode::Unallocated,
                    0b110 => return OpCode::FRECPE_Z_Z__,
                    0b111 => return OpCode::FRSQRTE_Z_Z__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, var0, _) if var0 != 0b00 => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b011, _, 0b10 | 0b11, _, 0b01000 | 0b01010 | 0b01001 | 0b01011, _, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 19) & 0b111, (inst >> 18) & 0b1, (inst >> 16) & 0b11, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, _, 0, _, _, _) => {
                let size = (inst >> 22) & 0b11;
                let eq = (inst >> 17) & 0b1;
                let lt = (inst >> 16) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let ne = (inst >> 4) & 0b1;
                let Pd = inst & 0b1111;
                match (eq, lt, ne) {
                    (0, 0, 0) => return OpCode::FCMGE_P_P_Z0__,
                    (0, 0, 1) => return OpCode::FCMGT_P_P_Z0__,
                    (0, 1, 0) => return OpCode::FCMLT_P_P_Z0__,
                    (0, 1, 1) => return OpCode::FCMLE_P_P_Z0__,
                    (1, _, 1) => return OpCode::Unallocated,
                    (1, 0, 0) => return OpCode::FCMEQ_P_P_Z0__,
                    (1, 1, 0) => return OpCode::FCMNE_P_P_Z0__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, _, _, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b011, _, 0b10 | 0b11, _, 0b01100 | 0b01110 | 0b01101 | 0b01111, _, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _) => {
            let size = (inst >> 22) & 0b11;
            let opc = (inst >> 16) & 0b111;
            let Pg = (inst >> 10) & 0b111;
            let Zm = (inst >> 5) & 0b11111;
            let Vdn = inst & 0b11111;
            match opc {
                0b000 => return OpCode::FADDA_V_P_Z__,
                0b001 => return OpCode::Unallocated,
                0b010 | 0b011 => return OpCode::Unallocated,
                0b100 | 0b110 | 0b101 | 0b111 => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b011, _, 0b10 | 0b11, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, _, _) => match ((inst >> 24) & 0b11111111, (inst >> 22) & 0b11, (inst >> 21) & 0b1, (inst >> 16) & 0b11111, (inst >> 15) & 0b1, inst & 0b111111111111111) {
            (_, _, _, _, 0, _) => {
                let size = (inst >> 22) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let opc = (inst >> 13) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zda = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::FMLA_Z_P_ZZZ__,
                    0b01 => return OpCode::FMLS_Z_P_ZZZ__,
                    0b10 => return OpCode::FNMLA_Z_P_ZZZ__,
                    0b11 => return OpCode::FNMLS_Z_P_ZZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, 1, _) => {
                let size = (inst >> 22) & 0b11;
                let Za = (inst >> 16) & 0b11111;
                let opc = (inst >> 13) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Zm = (inst >> 5) & 0b11111;
                let Zdn = inst & 0b11111;
                match opc {
                    0b00 => return OpCode::FMAD_Z_P_ZZZ__,
                    0b01 => return OpCode::FMSB_Z_P_ZZZ__,
                    0b10 => return OpCode::FNMAD_Z_P_ZZZ__,
                    0b11 => return OpCode::FNMSB_Z_P_ZZZ__,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b100, _, _, _, _, _, _, _) => match ((inst >> 25) & 0b1111111, (inst >> 23) & 0b11, (inst >> 21) & 0b11, (inst >> 16) & 0b11111, (inst >> 13) & 0b111, (inst >> 5) & 0b11111111, (inst >> 4) & 0b1, inst & 0b1111) {
            (_, 0b00, 0b01 | 0b11, _, 0b000 | 0b010 | 0b001 | 0b011, _, 0, _) => {
                let xs = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let msz = (inst >> 13) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let prfop = inst & 0b1111;
                match msz {
                    0b00 => return OpCode::PRFB_I_P_BZ_S_x32_scaled,
                    0b01 => return OpCode::PRFH_I_P_BZ_S_x32_scaled,
                    0b10 => return OpCode::PRFW_I_P_BZ_S_x32_scaled,
                    0b11 => return OpCode::PRFD_I_P_BZ_S_x32_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0b00, 0b01 | 0b11, _, 0b000 | 0b010 | 0b001 | 0b011, _, 1, _) => return OpCode::Unpredictable,
            (_, 0b01, 0b01 | 0b11, _, 0b000 | 0b010 | 0b001 | 0b011, _, _, _) => {
                let xs = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (U, ff) {
                    (0, 0) => return OpCode::LD1SH_Z_P_BZ_S_x32_scaled,
                    (0, 1) => return OpCode::LDFF1SH_Z_P_BZ_S_x32_scaled,
                    (1, 0) => return OpCode::LD1H_Z_P_BZ_S_x32_scaled,
                    (1, 1) => return OpCode::LDFF1H_Z_P_BZ_S_x32_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0b10, 0b01 | 0b11, _, 0b000 | 0b010 | 0b001 | 0b011, _, _, _) => {
                let xs = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (U, ff) {
                    (0, _) => return OpCode::Unallocated,
                    (1, 0) => return OpCode::LD1W_Z_P_BZ_S_x32_scaled,
                    (1, 1) => return OpCode::LDFF1W_Z_P_BZ_S_x32_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0b11, 0b00 | 0b01, _, 0b000, _, 0, _) => {
                let imm9h = (inst >> 16) & 0b111111;
                let imm9l = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Pt = inst & 0b1111;
return OpCode::LDR_P_BI__;
            }
            (_, 0b11, 0b00 | 0b01, _, 0b000, _, 1, _) => return OpCode::Unpredictable,
            (_, 0b11, 0b00 | 0b01, _, 0b010, _, _, _) => {
                let imm9h = (inst >> 16) & 0b111111;
                let imm9l = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
return OpCode::LDR_Z_BI__;
            }
            (_, 0b11, 0b00 | 0b01, _, 0b001 | 0b011, _, _, _) => return OpCode::Unpredictable,
            (_, 0b11, 0b10 | 0b11, _, 0b000 | 0b010 | 0b001 | 0b011, _, 0, _) => {
                let imm6 = (inst >> 16) & 0b111111;
                let msz = (inst >> 13) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let prfop = inst & 0b1111;
                match msz {
                    0b00 => return OpCode::PRFB_I_P_BI_S,
                    0b01 => return OpCode::PRFH_I_P_BI_S,
                    0b10 => return OpCode::PRFW_I_P_BI_S,
                    0b11 => return OpCode::PRFD_I_P_BI_S,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0b11, 0b10 | 0b11, _, 0b000 | 0b010 | 0b001 | 0b011, _, 1, _) => return OpCode::Unpredictable,
            (_, var0, 0b00 | 0b10, _, 0b000 | 0b010 | 0b001 | 0b011, _, _, _) if var0 != 0b11 => {
                let opc = (inst >> 23) & 0b11;
                let xs = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (opc, U, ff) {
                    (0b00, 0, 0) => return OpCode::LD1SB_Z_P_BZ_S_x32_unscaled,
                    (0b00, 0, 1) => return OpCode::LDFF1SB_Z_P_BZ_S_x32_unscaled,
                    (0b00, 1, 0) => return OpCode::LD1B_Z_P_BZ_S_x32_unscaled,
                    (0b00, 1, 1) => return OpCode::LDFF1B_Z_P_BZ_S_x32_unscaled,
                    (0b01, 0, 0) => return OpCode::LD1SH_Z_P_BZ_S_x32_unscaled,
                    (0b01, 0, 1) => return OpCode::LDFF1SH_Z_P_BZ_S_x32_unscaled,
                    (0b01, 1, 0) => return OpCode::LD1H_Z_P_BZ_S_x32_unscaled,
                    (0b01, 1, 1) => return OpCode::LDFF1H_Z_P_BZ_S_x32_unscaled,
                    (0b10, 0, _) => return OpCode::Unallocated,
                    (0b10, 1, 0) => return OpCode::LD1W_Z_P_BZ_S_x32_unscaled,
                    (0b10, 1, 1) => return OpCode::LDFF1W_Z_P_BZ_S_x32_unscaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b00, _, 0b100 | 0b101, _, _, _) => return OpCode::Unpredictable,
            (_, _, 0b00, _, 0b110, _, 0, _) => {
                let msz = (inst >> 23) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let prfop = inst & 0b1111;
                match msz {
                    0b00 => return OpCode::PRFB_I_P_BR_S,
                    0b01 => return OpCode::PRFH_I_P_BR_S,
                    0b10 => return OpCode::PRFW_I_P_BR_S,
                    0b11 => return OpCode::PRFD_I_P_BR_S,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b00, _, 0b111, _, 0, _) => {
                let msz = (inst >> 23) & 0b11;
                let imm5 = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let prfop = inst & 0b1111;
                match msz {
                    0b00 => return OpCode::PRFB_I_P_AI_S,
                    0b01 => return OpCode::PRFH_I_P_AI_S,
                    0b10 => return OpCode::PRFW_I_P_AI_S,
                    0b11 => return OpCode::PRFD_I_P_AI_S,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b00, _, 0b110 | 0b111, _, 1, _) => return OpCode::Unpredictable,
            (_, _, 0b01, _, 0b100 | 0b110 | 0b101 | 0b111, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let imm5 = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, U, ff) {
                    (0b00, 0, 0) => return OpCode::LD1SB_Z_P_AI_S,
                    (0b00, 0, 1) => return OpCode::LDFF1SB_Z_P_AI_S,
                    (0b00, 1, 0) => return OpCode::LD1B_Z_P_AI_S,
                    (0b00, 1, 1) => return OpCode::LDFF1B_Z_P_AI_S,
                    (0b01, 0, 0) => return OpCode::LD1SH_Z_P_AI_S,
                    (0b01, 0, 1) => return OpCode::LDFF1SH_Z_P_AI_S,
                    (0b01, 1, 0) => return OpCode::LD1H_Z_P_AI_S,
                    (0b01, 1, 1) => return OpCode::LDFF1H_Z_P_AI_S,
                    (0b10, 0, _) => return OpCode::Unallocated,
                    (0b10, 1, 0) => return OpCode::LD1W_Z_P_AI_S,
                    (0b10, 1, 1) => return OpCode::LDFF1W_Z_P_AI_S,
                    (0b11, _, _) => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b10 | 0b11, _, 0b100 | 0b110 | 0b101 | 0b111, _, _, _) => {
                let dtypeh = (inst >> 23) & 0b11;
                let imm6 = (inst >> 16) & 0b111111;
                let dtypel = (inst >> 13) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (dtypeh, dtypel) {
                    (0b00, 0b00) => return OpCode::LD1RB_Z_P_BI_U8,
                    (0b00, 0b01) => return OpCode::LD1RB_Z_P_BI_U16,
                    (0b00, 0b10) => return OpCode::LD1RB_Z_P_BI_U32,
                    (0b00, 0b11) => return OpCode::LD1RB_Z_P_BI_U64,
                    (0b01, 0b00) => return OpCode::LD1RSW_Z_P_BI_S64,
                    (0b01, 0b01) => return OpCode::LD1RH_Z_P_BI_U16,
                    (0b01, 0b10) => return OpCode::LD1RH_Z_P_BI_U32,
                    (0b01, 0b11) => return OpCode::LD1RH_Z_P_BI_U64,
                    (0b10, 0b00) => return OpCode::LD1RSH_Z_P_BI_S64,
                    (0b10, 0b01) => return OpCode::LD1RSH_Z_P_BI_S32,
                    (0b10, 0b10) => return OpCode::LD1RW_Z_P_BI_U32,
                    (0b10, 0b11) => return OpCode::LD1RW_Z_P_BI_U64,
                    (0b11, 0b00) => return OpCode::LD1RSB_Z_P_BI_S64,
                    (0b11, 0b01) => return OpCode::LD1RSB_Z_P_BI_S32,
                    (0b11, 0b10) => return OpCode::LD1RSB_Z_P_BI_S16,
                    (0b11, 0b11) => return OpCode::LD1RD_Z_P_BI_U64,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b101, _, _, _, _, _, _, _) => match ((inst >> 25) & 0b1111111, (inst >> 23) & 0b11, (inst >> 21) & 0b11, (inst >> 20) & 0b1, (inst >> 16) & 0b1111, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, 0b00, 0, _, 0b111, _) => {
                let msz = (inst >> 23) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::LDNT1B_Z_P_BI_Contiguous,
                    0b01 => return OpCode::LDNT1H_Z_P_BI_Contiguous,
                    0b10 => return OpCode::LDNT1W_Z_P_BI_Contiguous,
                    0b11 => return OpCode::LDNT1D_Z_P_BI_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b00, _, _, 0b110, _) => {
                let msz = (inst >> 23) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::LDNT1B_Z_P_BR_Contiguous,
                    0b01 => return OpCode::LDNT1H_Z_P_BR_Contiguous,
                    0b10 => return OpCode::LDNT1W_Z_P_BR_Contiguous,
                    0b11 => return OpCode::LDNT1D_Z_P_BR_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, var0, 0, _, 0b111, _) if var0 != 0b00 => {
                let msz = (inst >> 23) & 0b11;
                let opc = (inst >> 21) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, opc) {
                    (0b00, 0b01) => return OpCode::LD2B_Z_P_BI_Contiguous,
                    (0b00, 0b10) => return OpCode::LD3B_Z_P_BI_Contiguous,
                    (0b00, 0b11) => return OpCode::LD4B_Z_P_BI_Contiguous,
                    (0b01, 0b01) => return OpCode::LD2H_Z_P_BI_Contiguous,
                    (0b01, 0b10) => return OpCode::LD3H_Z_P_BI_Contiguous,
                    (0b01, 0b11) => return OpCode::LD4H_Z_P_BI_Contiguous,
                    (0b10, 0b01) => return OpCode::LD2W_Z_P_BI_Contiguous,
                    (0b10, 0b10) => return OpCode::LD3W_Z_P_BI_Contiguous,
                    (0b10, 0b11) => return OpCode::LD4W_Z_P_BI_Contiguous,
                    (0b11, 0b01) => return OpCode::LD2D_Z_P_BI_Contiguous,
                    (0b11, 0b10) => return OpCode::LD3D_Z_P_BI_Contiguous,
                    (0b11, 0b11) => return OpCode::LD4D_Z_P_BI_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, var0, _, _, 0b110, _) if var0 != 0b00 => {
                let msz = (inst >> 23) & 0b11;
                let opc = (inst >> 21) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, opc) {
                    (0b00, 0b01) => return OpCode::LD2B_Z_P_BR_Contiguous,
                    (0b00, 0b10) => return OpCode::LD3B_Z_P_BR_Contiguous,
                    (0b00, 0b11) => return OpCode::LD4B_Z_P_BR_Contiguous,
                    (0b01, 0b01) => return OpCode::LD2H_Z_P_BR_Contiguous,
                    (0b01, 0b10) => return OpCode::LD3H_Z_P_BR_Contiguous,
                    (0b01, 0b11) => return OpCode::LD4H_Z_P_BR_Contiguous,
                    (0b10, 0b01) => return OpCode::LD2W_Z_P_BR_Contiguous,
                    (0b10, 0b10) => return OpCode::LD3W_Z_P_BR_Contiguous,
                    (0b10, 0b11) => return OpCode::LD4W_Z_P_BR_Contiguous,
                    (0b11, 0b01) => return OpCode::LD2D_Z_P_BR_Contiguous,
                    (0b11, 0b10) => return OpCode::LD3D_Z_P_BR_Contiguous,
                    (0b11, 0b11) => return OpCode::LD4D_Z_P_BR_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, _, 0b001, _) => {
                let msz = (inst >> 23) & 0b11;
                let ssz = (inst >> 21) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, ssz) {
                    (_, 0b10 | 0b11) => return OpCode::Unallocated,
                    (0b00, 0b00) => return OpCode::LD1RQB_Z_P_BI_U8,
                    (0b00, 0b01) => return OpCode::LD1ROB_Z_P_BI_U8,
                    (0b01, 0b00) => return OpCode::LD1RQH_Z_P_BI_U16,
                    (0b01, 0b01) => return OpCode::LD1ROH_Z_P_BI_U16,
                    (0b10, 0b00) => return OpCode::LD1RQW_Z_P_BI_U32,
                    (0b10, 0b01) => return OpCode::LD1ROW_Z_P_BI_U32,
                    (0b11, 0b00) => return OpCode::LD1RQD_Z_P_BI_U64,
                    (0b11, 0b01) => return OpCode::LD1ROD_Z_P_BI_U64,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, _, 0b101, _) => {
                let dtype = (inst >> 21) & 0b1111;
                let imm4 = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match dtype {
                    0b0000 => return OpCode::LD1B_Z_P_BI_U8,
                    0b0001 => return OpCode::LD1B_Z_P_BI_U16,
                    0b0010 => return OpCode::LD1B_Z_P_BI_U32,
                    0b0011 => return OpCode::LD1B_Z_P_BI_U64,
                    0b0100 => return OpCode::LD1SW_Z_P_BI_S64,
                    0b0101 => return OpCode::LD1H_Z_P_BI_U16,
                    0b0110 => return OpCode::LD1H_Z_P_BI_U32,
                    0b0111 => return OpCode::LD1H_Z_P_BI_U64,
                    0b1000 => return OpCode::LD1SH_Z_P_BI_S64,
                    0b1001 => return OpCode::LD1SH_Z_P_BI_S32,
                    0b1010 => return OpCode::LD1W_Z_P_BI_U32,
                    0b1011 => return OpCode::LD1W_Z_P_BI_U64,
                    0b1100 => return OpCode::LD1SB_Z_P_BI_S64,
                    0b1101 => return OpCode::LD1SB_Z_P_BI_S32,
                    0b1110 => return OpCode::LD1SB_Z_P_BI_S16,
                    0b1111 => return OpCode::LD1D_Z_P_BI_U64,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, _, 0b001, _) => return OpCode::Unpredictable,
            (_, _, _, 1, _, 0b101, _) => {
                let dtype = (inst >> 21) & 0b1111;
                let imm4 = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match dtype {
                    0b0000 => return OpCode::LDNF1B_Z_P_BI_U8,
                    0b0001 => return OpCode::LDNF1B_Z_P_BI_U16,
                    0b0010 => return OpCode::LDNF1B_Z_P_BI_U32,
                    0b0011 => return OpCode::LDNF1B_Z_P_BI_U64,
                    0b0100 => return OpCode::LDNF1SW_Z_P_BI_S64,
                    0b0101 => return OpCode::LDNF1H_Z_P_BI_U16,
                    0b0110 => return OpCode::LDNF1H_Z_P_BI_U32,
                    0b0111 => return OpCode::LDNF1H_Z_P_BI_U64,
                    0b1000 => return OpCode::LDNF1SH_Z_P_BI_S64,
                    0b1001 => return OpCode::LDNF1SH_Z_P_BI_S32,
                    0b1010 => return OpCode::LDNF1W_Z_P_BI_U32,
                    0b1011 => return OpCode::LDNF1W_Z_P_BI_U64,
                    0b1100 => return OpCode::LDNF1SB_Z_P_BI_S64,
                    0b1101 => return OpCode::LDNF1SB_Z_P_BI_S32,
                    0b1110 => return OpCode::LDNF1SB_Z_P_BI_S16,
                    0b1111 => return OpCode::LDNF1D_Z_P_BI_U64,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 1, _, 0b111, _) => return OpCode::Unpredictable,
            (_, _, _, _, _, 0b000, _) => {
                let msz = (inst >> 23) & 0b11;
                let ssz = (inst >> 21) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, ssz) {
                    (_, 0b10 | 0b11) => return OpCode::Unallocated,
                    (0b00, 0b00) => return OpCode::LD1RQB_Z_P_BR_Contiguous,
                    (0b00, 0b01) => return OpCode::LD1ROB_Z_P_BR_Contiguous,
                    (0b01, 0b00) => return OpCode::LD1RQH_Z_P_BR_Contiguous,
                    (0b01, 0b01) => return OpCode::LD1ROH_Z_P_BR_Contiguous,
                    (0b10, 0b00) => return OpCode::LD1RQW_Z_P_BR_Contiguous,
                    (0b10, 0b01) => return OpCode::LD1ROW_Z_P_BR_Contiguous,
                    (0b11, 0b00) => return OpCode::LD1RQD_Z_P_BR_Contiguous,
                    (0b11, 0b01) => return OpCode::LD1ROD_Z_P_BR_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 0b010, _) => {
                let dtype = (inst >> 21) & 0b1111;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match dtype {
                    0b0000 => return OpCode::LD1B_Z_P_BR_U8,
                    0b0001 => return OpCode::LD1B_Z_P_BR_U16,
                    0b0010 => return OpCode::LD1B_Z_P_BR_U32,
                    0b0011 => return OpCode::LD1B_Z_P_BR_U64,
                    0b0100 => return OpCode::LD1SW_Z_P_BR_S64,
                    0b0101 => return OpCode::LD1H_Z_P_BR_U16,
                    0b0110 => return OpCode::LD1H_Z_P_BR_U32,
                    0b0111 => return OpCode::LD1H_Z_P_BR_U64,
                    0b1000 => return OpCode::LD1SH_Z_P_BR_S64,
                    0b1001 => return OpCode::LD1SH_Z_P_BR_S32,
                    0b1010 => return OpCode::LD1W_Z_P_BR_U32,
                    0b1011 => return OpCode::LD1W_Z_P_BR_U64,
                    0b1100 => return OpCode::LD1SB_Z_P_BR_S64,
                    0b1101 => return OpCode::LD1SB_Z_P_BR_S32,
                    0b1110 => return OpCode::LD1SB_Z_P_BR_S16,
                    0b1111 => return OpCode::LD1D_Z_P_BR_U64,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 0b011, _) => {
                let dtype = (inst >> 21) & 0b1111;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match dtype {
                    0b0000 => return OpCode::LDFF1B_Z_P_BR_U8,
                    0b0001 => return OpCode::LDFF1B_Z_P_BR_U16,
                    0b0010 => return OpCode::LDFF1B_Z_P_BR_U32,
                    0b0011 => return OpCode::LDFF1B_Z_P_BR_U64,
                    0b0100 => return OpCode::LDFF1SW_Z_P_BR_S64,
                    0b0101 => return OpCode::LDFF1H_Z_P_BR_U16,
                    0b0110 => return OpCode::LDFF1H_Z_P_BR_U32,
                    0b0111 => return OpCode::LDFF1H_Z_P_BR_U64,
                    0b1000 => return OpCode::LDFF1SH_Z_P_BR_S64,
                    0b1001 => return OpCode::LDFF1SH_Z_P_BR_S32,
                    0b1010 => return OpCode::LDFF1W_Z_P_BR_U32,
                    0b1011 => return OpCode::LDFF1W_Z_P_BR_U64,
                    0b1100 => return OpCode::LDFF1SB_Z_P_BR_S64,
                    0b1101 => return OpCode::LDFF1SB_Z_P_BR_S32,
                    0b1110 => return OpCode::LDFF1SB_Z_P_BR_S16,
                    0b1111 => return OpCode::LDFF1D_Z_P_BR_U64,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 0b100, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b110, _, _, _, _, _, _, _) => match ((inst >> 25) & 0b1111111, (inst >> 23) & 0b11, (inst >> 21) & 0b11, (inst >> 16) & 0b11111, (inst >> 13) & 0b111, (inst >> 5) & 0b11111111, (inst >> 4) & 0b1, inst & 0b1111) {
            (_, 0b00, 0b01, _, 0b000 | 0b010 | 0b001 | 0b011, _, 1, _) => return OpCode::Unpredictable,
            (_, 0b00, 0b11, _, 0b100 | 0b110 | 0b101 | 0b111, _, 0, _) => {
                let Zm = (inst >> 16) & 0b11111;
                let msz = (inst >> 13) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let prfop = inst & 0b1111;
                match msz {
                    0b00 => return OpCode::PRFB_I_P_BZ_D_64_scaled,
                    0b01 => return OpCode::PRFH_I_P_BZ_D_64_scaled,
                    0b10 => return OpCode::PRFW_I_P_BZ_D_64_scaled,
                    0b11 => return OpCode::PRFD_I_P_BZ_D_64_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, 0b00, 0b11, _, _, _, 1, _) => return OpCode::Unpredictable,
            (_, 0b00, 0b01 | 0b11, _, 0b000 | 0b010 | 0b001 | 0b011, _, 0, _) => {
                let xs = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let msz = (inst >> 13) & 0b11;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let prfop = inst & 0b1111;
                match msz {
                    0b00 => return OpCode::PRFB_I_P_BZ_D_x32_scaled,
                    0b01 => return OpCode::PRFH_I_P_BZ_D_x32_scaled,
                    0b10 => return OpCode::PRFW_I_P_BZ_D_x32_scaled,
                    0b11 => return OpCode::PRFD_I_P_BZ_D_x32_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, var0, 0b11, _, 0b100 | 0b110 | 0b101 | 0b111, _, _, _) if var0 != 0b00 => {
                let opc = (inst >> 23) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (opc, U, ff) {
                    (0b01, 0, 0) => return OpCode::LD1SH_Z_P_BZ_D_64_scaled,
                    (0b01, 0, 1) => return OpCode::LDFF1SH_Z_P_BZ_D_64_scaled,
                    (0b01, 1, 0) => return OpCode::LD1H_Z_P_BZ_D_64_scaled,
                    (0b01, 1, 1) => return OpCode::LDFF1H_Z_P_BZ_D_64_scaled,
                    (0b10, 0, 0) => return OpCode::LD1SW_Z_P_BZ_D_64_scaled,
                    (0b10, 0, 1) => return OpCode::LDFF1SW_Z_P_BZ_D_64_scaled,
                    (0b10, 1, 0) => return OpCode::LD1W_Z_P_BZ_D_64_scaled,
                    (0b10, 1, 1) => return OpCode::LDFF1W_Z_P_BZ_D_64_scaled,
                    (0b11, 0, _) => return OpCode::Unallocated,
                    (0b11, 1, 0) => return OpCode::LD1D_Z_P_BZ_D_64_scaled,
                    (0b11, 1, 1) => return OpCode::LDFF1D_Z_P_BZ_D_64_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, var0, 0b01 | 0b11, _, 0b000 | 0b010 | 0b001 | 0b011, _, _, _) if var0 != 0b00 => {
                let opc = (inst >> 23) & 0b11;
                let xs = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (opc, U, ff) {
                    (0b01, 0, 0) => return OpCode::LD1SH_Z_P_BZ_D_x32_scaled,
                    (0b01, 0, 1) => return OpCode::LDFF1SH_Z_P_BZ_D_x32_scaled,
                    (0b01, 1, 0) => return OpCode::LD1H_Z_P_BZ_D_x32_scaled,
                    (0b01, 1, 1) => return OpCode::LDFF1H_Z_P_BZ_D_x32_scaled,
                    (0b10, 0, 0) => return OpCode::LD1SW_Z_P_BZ_D_x32_scaled,
                    (0b10, 0, 1) => return OpCode::LDFF1SW_Z_P_BZ_D_x32_scaled,
                    (0b10, 1, 0) => return OpCode::LD1W_Z_P_BZ_D_x32_scaled,
                    (0b10, 1, 1) => return OpCode::LDFF1W_Z_P_BZ_D_x32_scaled,
                    (0b11, 0, _) => return OpCode::Unallocated,
                    (0b11, 1, 0) => return OpCode::LD1D_Z_P_BZ_D_x32_scaled,
                    (0b11, 1, 1) => return OpCode::LDFF1D_Z_P_BZ_D_x32_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b00, _, 0b100 | 0b101, _, _, _) => return OpCode::Unpredictable,
            (_, _, 0b00, _, 0b110, _, _, _) => return OpCode::Unpredictable,
            (_, _, 0b00, _, 0b111, _, 0, _) => {
                let msz = (inst >> 23) & 0b11;
                let imm5 = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let prfop = inst & 0b1111;
                match msz {
                    0b00 => return OpCode::PRFB_I_P_AI_D,
                    0b01 => return OpCode::PRFH_I_P_AI_D,
                    0b10 => return OpCode::PRFW_I_P_AI_D,
                    0b11 => return OpCode::PRFD_I_P_AI_D,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b00, _, 0b111, _, 1, _) => return OpCode::Unpredictable,
            (_, _, 0b01, _, 0b100 | 0b110 | 0b101 | 0b111, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let imm5 = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, U, ff) {
                    (0b00, 0, 0) => return OpCode::LD1SB_Z_P_AI_D,
                    (0b00, 0, 1) => return OpCode::LDFF1SB_Z_P_AI_D,
                    (0b00, 1, 0) => return OpCode::LD1B_Z_P_AI_D,
                    (0b00, 1, 1) => return OpCode::LDFF1B_Z_P_AI_D,
                    (0b01, 0, 0) => return OpCode::LD1SH_Z_P_AI_D,
                    (0b01, 0, 1) => return OpCode::LDFF1SH_Z_P_AI_D,
                    (0b01, 1, 0) => return OpCode::LD1H_Z_P_AI_D,
                    (0b01, 1, 1) => return OpCode::LDFF1H_Z_P_AI_D,
                    (0b10, 0, 0) => return OpCode::LD1SW_Z_P_AI_D,
                    (0b10, 0, 1) => return OpCode::LDFF1SW_Z_P_AI_D,
                    (0b10, 1, 0) => return OpCode::LD1W_Z_P_AI_D,
                    (0b10, 1, 1) => return OpCode::LDFF1W_Z_P_AI_D,
                    (0b11, 0, _) => return OpCode::Unallocated,
                    (0b11, 1, 0) => return OpCode::LD1D_Z_P_AI_D,
                    (0b11, 1, 1) => return OpCode::LDFF1D_Z_P_AI_D,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b10, _, 0b100 | 0b110 | 0b101 | 0b111, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, U, ff) {
                    (0b00, 0, 0) => return OpCode::LD1SB_Z_P_BZ_D_64_unscaled,
                    (0b00, 0, 1) => return OpCode::LDFF1SB_Z_P_BZ_D_64_unscaled,
                    (0b00, 1, 0) => return OpCode::LD1B_Z_P_BZ_D_64_unscaled,
                    (0b00, 1, 1) => return OpCode::LDFF1B_Z_P_BZ_D_64_unscaled,
                    (0b01, 0, 0) => return OpCode::LD1SH_Z_P_BZ_D_64_unscaled,
                    (0b01, 0, 1) => return OpCode::LDFF1SH_Z_P_BZ_D_64_unscaled,
                    (0b01, 1, 0) => return OpCode::LD1H_Z_P_BZ_D_64_unscaled,
                    (0b01, 1, 1) => return OpCode::LDFF1H_Z_P_BZ_D_64_unscaled,
                    (0b10, 0, 0) => return OpCode::LD1SW_Z_P_BZ_D_64_unscaled,
                    (0b10, 0, 1) => return OpCode::LDFF1SW_Z_P_BZ_D_64_unscaled,
                    (0b10, 1, 0) => return OpCode::LD1W_Z_P_BZ_D_64_unscaled,
                    (0b10, 1, 1) => return OpCode::LDFF1W_Z_P_BZ_D_64_unscaled,
                    (0b11, 0, _) => return OpCode::Unallocated,
                    (0b11, 1, 0) => return OpCode::LD1D_Z_P_BZ_D_64_unscaled,
                    (0b11, 1, 1) => return OpCode::LDFF1D_Z_P_BZ_D_64_unscaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b00 | 0b10, _, 0b000 | 0b010 | 0b001 | 0b011, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let xs = (inst >> 22) & 0b1;
                let Zm = (inst >> 16) & 0b11111;
                let U = (inst >> 14) & 0b1;
                let ff = (inst >> 13) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, U, ff) {
                    (0b00, 0, 0) => return OpCode::LD1SB_Z_P_BZ_D_x32_unscaled,
                    (0b00, 0, 1) => return OpCode::LDFF1SB_Z_P_BZ_D_x32_unscaled,
                    (0b00, 1, 0) => return OpCode::LD1B_Z_P_BZ_D_x32_unscaled,
                    (0b00, 1, 1) => return OpCode::LDFF1B_Z_P_BZ_D_x32_unscaled,
                    (0b01, 0, 0) => return OpCode::LD1SH_Z_P_BZ_D_x32_unscaled,
                    (0b01, 0, 1) => return OpCode::LDFF1SH_Z_P_BZ_D_x32_unscaled,
                    (0b01, 1, 0) => return OpCode::LD1H_Z_P_BZ_D_x32_unscaled,
                    (0b01, 1, 1) => return OpCode::LDFF1H_Z_P_BZ_D_x32_unscaled,
                    (0b10, 0, 0) => return OpCode::LD1SW_Z_P_BZ_D_x32_unscaled,
                    (0b10, 0, 1) => return OpCode::LDFF1SW_Z_P_BZ_D_x32_unscaled,
                    (0b10, 1, 0) => return OpCode::LD1W_Z_P_BZ_D_x32_unscaled,
                    (0b10, 1, 1) => return OpCode::LDFF1W_Z_P_BZ_D_x32_unscaled,
                    (0b11, 0, _) => return OpCode::Unallocated,
                    (0b11, 1, 0) => return OpCode::LD1D_Z_P_BZ_D_x32_unscaled,
                    (0b11, 1, 1) => return OpCode::LDFF1D_Z_P_BZ_D_x32_unscaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b111, _, _, _, _, _, 0b000000 | 0b010000 | 0b000100 | 0b010100 | 0b000010 | 0b010010 | 0b000110 | 0b010110 | 0b000001 | 0b010001 | 0b000101 | 0b010101 | 0b000011 | 0b010011 | 0b000111 | 0b010111, _) => match ((inst >> 25) & 0b1111111, (inst >> 22) & 0b111, (inst >> 16) & 0b111111, (inst >> 15) & 0b1, (inst >> 14) & 0b1, (inst >> 13) & 0b1, (inst >> 5) & 0b11111111, (inst >> 4) & 0b1, inst & 0b1111) {
            (_, 0b000 | 0b010 | 0b001 | 0b011, _, _, 0, _, _, _, _) => return OpCode::Unpredictable,
            (_, 0b100 | 0b101, _, _, 0, _, _, _, _) => return OpCode::Unpredictable,
            (_, 0b110, _, _, 0, _, _, 0, _) => {
                let imm9h = (inst >> 16) & 0b111111;
                let imm9l = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Pt = inst & 0b1111;
return OpCode::STR_P_BI__;
            }
            (_, 0b110, _, _, 0, _, _, 1, _) => return OpCode::Unpredictable,
            (_, 0b110, _, _, 1, _, _, _, _) => {
                let imm9h = (inst >> 16) & 0b111111;
                let imm9l = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
return OpCode::STR_Z_BI__;
            }
            (_, 0b111, _, _, 0, _, _, _, _) => return OpCode::Unpredictable,
            (_, var0, _, _, 1, _, _, _, _) if var0 != 0b110 => {
                let opc = (inst >> 22) & 0b111;
                let o2 = (inst >> 21) & 0b1;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (opc, o2) {
                    (0b000 | 0b001, _) => return OpCode::ST1B_Z_P_BR__,
                    (0b010 | 0b011, _) => return OpCode::ST1H_Z_P_BR__,
                    (0b100 | 0b101, _) => return OpCode::ST1W_Z_P_BR__,
                    (0b111, 0) => return OpCode::Unallocated,
                    (0b111, 1) => return OpCode::ST1D_Z_P_BR__,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b111, _, _, _, _, _, 0b001000 | 0b011000 | 0b001100 | 0b011100 | 0b001010 | 0b011010 | 0b001110 | 0b011110 | 0b001001 | 0b011001 | 0b001101 | 0b011101 | 0b001011 | 0b011011 | 0b001111 | 0b011111, _) => match ((inst >> 25) & 0b1111111, (inst >> 23) & 0b11, (inst >> 21) & 0b11, (inst >> 16) & 0b11111, (inst >> 15) & 0b1, (inst >> 14) & 0b1, (inst >> 13) & 0b1, inst & 0b1111111111111) {
            (_, _, 0b00, _, _, 1, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::STNT1B_Z_P_BR_Contiguous,
                    0b01 => return OpCode::STNT1H_Z_P_BR_Contiguous,
                    0b10 => return OpCode::STNT1W_Z_P_BR_Contiguous,
                    0b11 => return OpCode::STNT1D_Z_P_BR_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, var0, _, _, 1, _, _) if var0 != 0b00 => {
                let msz = (inst >> 23) & 0b11;
                let opc = (inst >> 21) & 0b11;
                let Rm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, opc) {
                    (0b00, 0b01) => return OpCode::ST2B_Z_P_BR_Contiguous,
                    (0b00, 0b10) => return OpCode::ST3B_Z_P_BR_Contiguous,
                    (0b00, 0b11) => return OpCode::ST4B_Z_P_BR_Contiguous,
                    (0b01, 0b01) => return OpCode::ST2H_Z_P_BR_Contiguous,
                    (0b01, 0b10) => return OpCode::ST3H_Z_P_BR_Contiguous,
                    (0b01, 0b11) => return OpCode::ST4H_Z_P_BR_Contiguous,
                    (0b10, 0b01) => return OpCode::ST2W_Z_P_BR_Contiguous,
                    (0b10, 0b10) => return OpCode::ST3W_Z_P_BR_Contiguous,
                    (0b10, 0b11) => return OpCode::ST4W_Z_P_BR_Contiguous,
                    (0b11, 0b01) => return OpCode::ST2D_Z_P_BR_Contiguous,
                    (0b11, 0b10) => return OpCode::ST3D_Z_P_BR_Contiguous,
                    (0b11, 0b11) => return OpCode::ST4D_Z_P_BR_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, _, _, 0, _, _) => return OpCode::Unpredictable,
            _ => return OpCode::Unpredictable,
        }
        (0b111, _, _, _, _, _, 0b100000 | 0b110000 | 0b100100 | 0b110100 | 0b100010 | 0b110010 | 0b100110 | 0b110110 | 0b100001 | 0b110001 | 0b100101 | 0b110101 | 0b100011 | 0b110011 | 0b100111 | 0b110111, _) => match ((inst >> 25) & 0b1111111, (inst >> 23) & 0b11, (inst >> 21) & 0b11, (inst >> 16) & 0b11111, (inst >> 15) & 0b1, (inst >> 14) & 0b1, (inst >> 13) & 0b1, inst & 0b1111111111111) {
            (_, _, 0b00, _, _, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let xs = (inst >> 14) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::ST1B_Z_P_BZ_D_x32_unscaled,
                    0b01 => return OpCode::ST1H_Z_P_BZ_D_x32_unscaled,
                    0b10 => return OpCode::ST1W_Z_P_BZ_D_x32_unscaled,
                    0b11 => return OpCode::ST1D_Z_P_BZ_D_x32_unscaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b01, _, _, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let xs = (inst >> 14) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::Unallocated,
                    0b01 => return OpCode::ST1H_Z_P_BZ_D_x32_scaled,
                    0b10 => return OpCode::ST1W_Z_P_BZ_D_x32_scaled,
                    0b11 => return OpCode::ST1D_Z_P_BZ_D_x32_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b10, _, _, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let xs = (inst >> 14) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::ST1B_Z_P_BZ_S_x32_unscaled,
                    0b01 => return OpCode::ST1H_Z_P_BZ_S_x32_unscaled,
                    0b10 => return OpCode::ST1W_Z_P_BZ_S_x32_unscaled,
                    0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b11, _, _, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let xs = (inst >> 14) & 0b1;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::Unallocated,
                    0b01 => return OpCode::ST1H_Z_P_BZ_S_x32_scaled,
                    0b10 => return OpCode::ST1W_Z_P_BZ_S_x32_scaled,
                    0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b111, _, _, _, _, _, 0b101000 | 0b101100 | 0b101010 | 0b101110 | 0b101001 | 0b101101 | 0b101011 | 0b101111, _) => match ((inst >> 25) & 0b1111111, (inst >> 23) & 0b11, (inst >> 21) & 0b11, (inst >> 16) & 0b11111, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, 0b00, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::ST1B_Z_P_BZ_D_64_unscaled,
                    0b01 => return OpCode::ST1H_Z_P_BZ_D_64_unscaled,
                    0b10 => return OpCode::ST1W_Z_P_BZ_D_64_unscaled,
                    0b11 => return OpCode::ST1D_Z_P_BZ_D_64_unscaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b01, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let Zm = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::Unallocated,
                    0b01 => return OpCode::ST1H_Z_P_BZ_D_64_scaled,
                    0b10 => return OpCode::ST1W_Z_P_BZ_D_64_scaled,
                    0b11 => return OpCode::ST1D_Z_P_BZ_D_64_scaled,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b10, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let imm5 = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::ST1B_Z_P_AI_D,
                    0b01 => return OpCode::ST1H_Z_P_AI_D,
                    0b10 => return OpCode::ST1W_Z_P_AI_D,
                    0b11 => return OpCode::ST1D_Z_P_AI_D,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, 0b11, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let imm5 = (inst >> 16) & 0b11111;
                let Pg = (inst >> 10) & 0b111;
                let Zn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::ST1B_Z_P_AI_S,
                    0b01 => return OpCode::ST1H_Z_P_AI_S,
                    0b10 => return OpCode::ST1W_Z_P_AI_S,
                    0b11 => return OpCode::Unallocated,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        (0b111, _, _, _, _, _, 0b111000 | 0b111100 | 0b111010 | 0b111110 | 0b111001 | 0b111101 | 0b111011 | 0b111111, _) => match ((inst >> 25) & 0b1111111, (inst >> 23) & 0b11, (inst >> 21) & 0b11, (inst >> 20) & 0b1, (inst >> 16) & 0b1111, (inst >> 13) & 0b111, inst & 0b1111111111111) {
            (_, _, 0b00, 1, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::STNT1B_Z_P_BI_Contiguous,
                    0b01 => return OpCode::STNT1H_Z_P_BI_Contiguous,
                    0b10 => return OpCode::STNT1W_Z_P_BI_Contiguous,
                    0b11 => return OpCode::STNT1D_Z_P_BI_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, var0, 1, _, _, _) if var0 != 0b00 => {
                let msz = (inst >> 23) & 0b11;
                let opc = (inst >> 21) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match (msz, opc) {
                    (0b00, 0b01) => return OpCode::ST2B_Z_P_BI_Contiguous,
                    (0b00, 0b10) => return OpCode::ST3B_Z_P_BI_Contiguous,
                    (0b00, 0b11) => return OpCode::ST4B_Z_P_BI_Contiguous,
                    (0b01, 0b01) => return OpCode::ST2H_Z_P_BI_Contiguous,
                    (0b01, 0b10) => return OpCode::ST3H_Z_P_BI_Contiguous,
                    (0b01, 0b11) => return OpCode::ST4H_Z_P_BI_Contiguous,
                    (0b10, 0b01) => return OpCode::ST2W_Z_P_BI_Contiguous,
                    (0b10, 0b10) => return OpCode::ST3W_Z_P_BI_Contiguous,
                    (0b10, 0b11) => return OpCode::ST4W_Z_P_BI_Contiguous,
                    (0b11, 0b01) => return OpCode::ST2D_Z_P_BI_Contiguous,
                    (0b11, 0b10) => return OpCode::ST3D_Z_P_BI_Contiguous,
                    (0b11, 0b11) => return OpCode::ST4D_Z_P_BI_Contiguous,
                    _ => return OpCode::Unpredictable,
                }
            }
            (_, _, _, 0, _, _, _) => {
                let msz = (inst >> 23) & 0b11;
                let size = (inst >> 21) & 0b11;
                let imm4 = (inst >> 16) & 0b1111;
                let Pg = (inst >> 10) & 0b111;
                let Rn = (inst >> 5) & 0b11111;
                let Zt = inst & 0b11111;
                match msz {
                    0b00 => return OpCode::ST1B_Z_P_BI__,
                    0b01 => return OpCode::ST1H_Z_P_BI__,
                    0b10 => return OpCode::ST1W_Z_P_BI__,
                    0b11 => return OpCode::ST1D_Z_P_BI__,
                    _ => return OpCode::Unpredictable,
                }
            }
            _ => return OpCode::Unpredictable,
        }
        _ => return OpCode::Unpredictable,
    }
    (_, 0b00110 | 0b00111, _) => return OpCode::Unpredictable,
    (_, 0b10000 | 0b10010 | 0b10001 | 0b10011, _) => match ((inst >> 29) & 0b111, (inst >> 26) & 0b111, (inst >> 23) & 0b111, inst & 0b11111111111111111111111) {
        (_, _, 0b000 | 0b001, _) => {
            let op = (inst >> 31) & 0b1;
            let immlo = (inst >> 29) & 0b11;
            let immhi = (inst >> 5) & 0b1111111111111111111;
            let Rd = inst & 0b11111;
            match op {
                0 => return OpCode::ADR_only_pcreladdr,
                1 => return OpCode::ADRP_only_pcreladdr,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, 0b010, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let sh = (inst >> 22) & 0b1;
            let imm12 = (inst >> 10) & 0b111111111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, op, S) {
                (0, 0, 0) => return OpCode::ADD_32_addsub_imm,
                (0, 0, 1) => return OpCode::ADDS_32S_addsub_imm,
                (0, 1, 0) => return OpCode::SUB_32_addsub_imm,
                (0, 1, 1) => return OpCode::SUBS_32S_addsub_imm,
                (1, 0, 0) => return OpCode::ADD_64_addsub_imm,
                (1, 0, 1) => return OpCode::ADDS_64S_addsub_imm,
                (1, 1, 0) => return OpCode::SUB_64_addsub_imm,
                (1, 1, 1) => return OpCode::SUBS_64S_addsub_imm,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, 0b011, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let o2 = (inst >> 22) & 0b1;
            let uimm6 = (inst >> 16) & 0b111111;
            let op3 = (inst >> 14) & 0b11;
            let uimm4 = (inst >> 10) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, op, S, o2) {
                (_, _, _, 1) => return OpCode::Unallocated,
                (0, _, _, 0) => return OpCode::Unallocated,
                (1, _, 1, 0) => return OpCode::Unallocated,
                (1, 0, 0, 0) => return OpCode::ADDG_64_addsub_immtags,
                (1, 1, 0, 0) => return OpCode::SUBG_64_addsub_immtags,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, 0b100, _) => {
            let sf = (inst >> 31) & 0b1;
            let opc = (inst >> 29) & 0b11;
            let N = (inst >> 22) & 0b1;
            let immr = (inst >> 16) & 0b111111;
            let imms = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, opc, N) {
                (0, _, 1) => return OpCode::Unallocated,
                (0, 0b00, 0) => return OpCode::AND_32_log_imm,
                (0, 0b01, 0) => return OpCode::ORR_32_log_imm,
                (0, 0b10, 0) => return OpCode::EOR_32_log_imm,
                (0, 0b11, 0) => return OpCode::ANDS_32S_log_imm,
                (1, 0b00, _) => return OpCode::AND_64_log_imm,
                (1, 0b01, _) => return OpCode::ORR_64_log_imm,
                (1, 0b10, _) => return OpCode::EOR_64_log_imm,
                (1, 0b11, _) => return OpCode::ANDS_64S_log_imm,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, 0b101, _) => {
            let sf = (inst >> 31) & 0b1;
            let opc = (inst >> 29) & 0b11;
            let hw = (inst >> 21) & 0b11;
            let imm16 = (inst >> 5) & 0b1111111111111111;
            let Rd = inst & 0b11111;
            match (sf, opc, hw) {
                (_, 0b01, _) => return OpCode::Unallocated,
                (0, _, 0b10 | 0b11) => return OpCode::Unallocated,
                (0, 0b00, 0b00 | 0b01) => return OpCode::MOVN_32_movewide,
                (0, 0b10, 0b00 | 0b01) => return OpCode::MOVZ_32_movewide,
                (0, 0b11, 0b00 | 0b01) => return OpCode::MOVK_32_movewide,
                (1, 0b00, _) => return OpCode::MOVN_64_movewide,
                (1, 0b10, _) => return OpCode::MOVZ_64_movewide,
                (1, 0b11, _) => return OpCode::MOVK_64_movewide,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, 0b110, _) => {
            let sf = (inst >> 31) & 0b1;
            let opc = (inst >> 29) & 0b11;
            let N = (inst >> 22) & 0b1;
            let immr = (inst >> 16) & 0b111111;
            let imms = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, opc, N) {
                (_, 0b11, _) => return OpCode::Unallocated,
                (0, _, 1) => return OpCode::Unallocated,
                (0, 0b00, 0) => return OpCode::SBFM_32M_bitfield,
                (0, 0b01, 0) => return OpCode::BFM_32M_bitfield,
                (0, 0b10, 0) => return OpCode::UBFM_32M_bitfield,
                (1, _, 0) => return OpCode::Unallocated,
                (1, 0b00, 1) => return OpCode::SBFM_64M_bitfield,
                (1, 0b01, 1) => return OpCode::BFM_64M_bitfield,
                (1, 0b10, 1) => return OpCode::UBFM_64M_bitfield,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, 0b111, _) => {
            let sf = (inst >> 31) & 0b1;
            let op21 = (inst >> 29) & 0b11;
            let N = (inst >> 22) & 0b1;
            let o0 = (inst >> 21) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let imms = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, op21, N, o0, imms) {
                (_, 0b01 | 0b11, _, _, _) => return OpCode::Unallocated,
                (_, 0b00, _, 1, _) => return OpCode::Unallocated,
                (_, 0b10 | 0b11, _, _, _) => return OpCode::Unallocated,
                (0, _, _, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111) => return OpCode::Unallocated,
                (0, _, 1, _, _) => return OpCode::Unallocated,
                (0, 0b00, 0, 0, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111) => return OpCode::EXTR_32_extract,
                (1, _, 0, _, _) => return OpCode::Unallocated,
                (1, 0b00, 1, 0, _) => return OpCode::EXTR_64_extract,
                _ => return OpCode::Unpredictable,
            }
        }
        _ => return OpCode::Unpredictable,
    }
    (_, 0b10100 | 0b10110 | 0b10101 | 0b10111, _) => match ((inst >> 29) & 0b111, (inst >> 26) & 0b111, (inst >> 12) & 0b11111111111111, (inst >> 5) & 0b1111111, inst & 0b11111) {
        (0b010, _, 0b00000000000000 | 0b01000000000000 | 0b00100000000000 | 0b01100000000000 | 0b00010000000000 | 0b01010000000000 | 0b00110000000000 | 0b01110000000000 | 0b00001000000000 | 0b01001000000000 | 0b00101000000000 | 0b01101000000000 | 0b00011000000000 | 0b01011000000000 | 0b00111000000000 | 0b01111000000000 | 0b00000100000000 | 0b01000100000000 | 0b00100100000000 | 0b01100100000000 | 0b00010100000000 | 0b01010100000000 | 0b00110100000000 | 0b01110100000000 | 0b00001100000000 | 0b01001100000000 | 0b00101100000000 | 0b01101100000000 | 0b00011100000000 | 0b01011100000000 | 0b00111100000000 | 0b01111100000000 | 0b00000010000000 | 0b01000010000000 | 0b00100010000000 | 0b01100010000000 | 0b00010010000000 | 0b01010010000000 | 0b00110010000000 | 0b01110010000000 | 0b00001010000000 | 0b01001010000000 | 0b00101010000000 | 0b01101010000000 | 0b00011010000000 | 0b01011010000000 | 0b00111010000000 | 0b01111010000000 | 0b00000110000000 | 0b01000110000000 | 0b00100110000000 | 0b01100110000000 | 0b00010110000000 | 0b01010110000000 | 0b00110110000000 | 0b01110110000000 | 0b00001110000000 | 0b01001110000000 | 0b00101110000000 | 0b01101110000000 | 0b00011110000000 | 0b01011110000000 | 0b00111110000000 | 0b01111110000000 | 0b00000001000000 | 0b01000001000000 | 0b00100001000000 | 0b01100001000000 | 0b00010001000000 | 0b01010001000000 | 0b00110001000000 | 0b01110001000000 | 0b00001001000000 | 0b01001001000000 | 0b00101001000000 | 0b01101001000000 | 0b00011001000000 | 0b01011001000000 | 0b00111001000000 | 0b01111001000000 | 0b00000101000000 | 0b01000101000000 | 0b00100101000000 | 0b01100101000000 | 0b00010101000000 | 0b01010101000000 | 0b00110101000000 | 0b01110101000000 | 0b00001101000000 | 0b01001101000000 | 0b00101101000000 | 0b01101101000000 | 0b00011101000000 | 0b01011101000000 | 0b00111101000000 | 0b01111101000000 | 0b00000011000000 | 0b01000011000000 | 0b00100011000000 | 0b01100011000000 | 0b00010011000000 | 0b01010011000000 | 0b00110011000000 | 0b01110011000000 | 0b00001011000000 | 0b01001011000000 | 0b00101011000000 | 0b01101011000000 | 0b00011011000000 | 0b01011011000000 | 0b00111011000000 | 0b01111011000000 | 0b00000111000000 | 0b01000111000000 | 0b00100111000000 | 0b01100111000000 | 0b00010111000000 | 0b01010111000000 | 0b00110111000000 | 0b01110111000000 | 0b00001111000000 | 0b01001111000000 | 0b00101111000000 | 0b01101111000000 | 0b00011111000000 | 0b01011111000000 | 0b00111111000000 | 0b01111111000000 | 0b00000000100000 | 0b01000000100000 | 0b00100000100000 | 0b01100000100000 | 0b00010000100000 | 0b01010000100000 | 0b00110000100000 | 0b01110000100000 | 0b00001000100000 | 0b01001000100000 | 0b00101000100000 | 0b01101000100000 | 0b00011000100000 | 0b01011000100000 | 0b00111000100000 | 0b01111000100000 | 0b00000100100000 | 0b01000100100000 | 0b00100100100000 | 0b01100100100000 | 0b00010100100000 | 0b01010100100000 | 0b00110100100000 | 0b01110100100000 | 0b00001100100000 | 0b01001100100000 | 0b00101100100000 | 0b01101100100000 | 0b00011100100000 | 0b01011100100000 | 0b00111100100000 | 0b01111100100000 | 0b00000010100000 | 0b01000010100000 | 0b00100010100000 | 0b01100010100000 | 0b00010010100000 | 0b01010010100000 | 0b00110010100000 | 0b01110010100000 | 0b00001010100000 | 0b01001010100000 | 0b00101010100000 | 0b01101010100000 | 0b00011010100000 | 0b01011010100000 | 0b00111010100000 | 0b01111010100000 | 0b00000110100000 | 0b01000110100000 | 0b00100110100000 | 0b01100110100000 | 0b00010110100000 | 0b01010110100000 | 0b00110110100000 | 0b01110110100000 | 0b00001110100000 | 0b01001110100000 | 0b00101110100000 | 0b01101110100000 | 0b00011110100000 | 0b01011110100000 | 0b00111110100000 | 0b01111110100000 | 0b00000001100000 | 0b01000001100000 | 0b00100001100000 | 0b01100001100000 | 0b00010001100000 | 0b01010001100000 | 0b00110001100000 | 0b01110001100000 | 0b00001001100000 | 0b01001001100000 | 0b00101001100000 | 0b01101001100000 | 0b00011001100000 | 0b01011001100000 | 0b00111001100000 | 0b01111001100000 | 0b00000101100000 | 0b01000101100000 | 0b00100101100000 | 0b01100101100000 | 0b00010101100000 | 0b01010101100000 | 0b00110101100000 | 0b01110101100000 | 0b00001101100000 | 0b01001101100000 | 0b00101101100000 | 0b01101101100000 | 0b00011101100000 | 0b01011101100000 | 0b00111101100000 | 0b01111101100000 | 0b00000011100000 | 0b01000011100000 | 0b00100011100000 | 0b01100011100000 | 0b00010011100000 | 0b01010011100000 | 0b00110011100000 | 0b01110011100000 | 0b00001011100000 | 0b01001011100000 | 0b00101011100000 | 0b01101011100000 | 0b00011011100000 | 0b01011011100000 | 0b00111011100000 | 0b01111011100000 | 0b00000111100000 | 0b01000111100000 | 0b00100111100000 | 0b01100111100000 | 0b00010111100000 | 0b01010111100000 | 0b00110111100000 | 0b01110111100000 | 0b00001111100000 | 0b01001111100000 | 0b00101111100000 | 0b01101111100000 | 0b00011111100000 | 0b01011111100000 | 0b00111111100000 | 0b01111111100000 | 0b00000000010000 | 0b01000000010000 | 0b00100000010000 | 0b01100000010000 | 0b00010000010000 | 0b01010000010000 | 0b00110000010000 | 0b01110000010000 | 0b00001000010000 | 0b01001000010000 | 0b00101000010000 | 0b01101000010000 | 0b00011000010000 | 0b01011000010000 | 0b00111000010000 | 0b01111000010000 | 0b00000100010000 | 0b01000100010000 | 0b00100100010000 | 0b01100100010000 | 0b00010100010000 | 0b01010100010000 | 0b00110100010000 | 0b01110100010000 | 0b00001100010000 | 0b01001100010000 | 0b00101100010000 | 0b01101100010000 | 0b00011100010000 | 0b01011100010000 | 0b00111100010000 | 0b01111100010000 | 0b00000010010000 | 0b01000010010000 | 0b00100010010000 | 0b01100010010000 | 0b00010010010000 | 0b01010010010000 | 0b00110010010000 | 0b01110010010000 | 0b00001010010000 | 0b01001010010000 | 0b00101010010000 | 0b01101010010000 | 0b00011010010000 | 0b01011010010000 | 0b00111010010000 | 0b01111010010000 | 0b00000110010000 | 0b01000110010000 | 0b00100110010000 | 0b01100110010000 | 0b00010110010000 | 0b01010110010000 | 0b00110110010000 | 0b01110110010000 | 0b00001110010000 | 0b01001110010000 | 0b00101110010000 | 0b01101110010000 | 0b00011110010000 | 0b01011110010000 | 0b00111110010000 | 0b01111110010000 | 0b00000001010000 | 0b01000001010000 | 0b00100001010000 | 0b01100001010000 | 0b00010001010000 | 0b01010001010000 | 0b00110001010000 | 0b01110001010000 | 0b00001001010000 | 0b01001001010000 | 0b00101001010000 | 0b01101001010000 | 0b00011001010000 | 0b01011001010000 | 0b00111001010000 | 0b01111001010000 | 0b00000101010000 | 0b01000101010000 | 0b00100101010000 | 0b01100101010000 | 0b00010101010000 | 0b01010101010000 | 0b00110101010000 | 0b01110101010000 | 0b00001101010000 | 0b01001101010000 | 0b00101101010000 | 0b01101101010000 | 0b00011101010000 | 0b01011101010000 | 0b00111101010000 | 0b01111101010000 | 0b00000011010000 | 0b01000011010000 | 0b00100011010000 | 0b01100011010000 | 0b00010011010000 | 0b01010011010000 | 0b00110011010000 | 0b01110011010000 | 0b00001011010000 | 0b01001011010000 | 0b00101011010000 | 0b01101011010000 | 0b00011011010000 | 0b01011011010000 | 0b00111011010000 | 0b01111011010000 | 0b00000111010000 | 0b01000111010000 | 0b00100111010000 | 0b01100111010000 | 0b00010111010000 | 0b01010111010000 | 0b00110111010000 | 0b01110111010000 | 0b00001111010000 | 0b01001111010000 | 0b00101111010000 | 0b01101111010000 | 0b00011111010000 | 0b01011111010000 | 0b00111111010000 | 0b01111111010000 | 0b00000000110000 | 0b01000000110000 | 0b00100000110000 | 0b01100000110000 | 0b00010000110000 | 0b01010000110000 | 0b00110000110000 | 0b01110000110000 | 0b00001000110000 | 0b01001000110000 | 0b00101000110000 | 0b01101000110000 | 0b00011000110000 | 0b01011000110000 | 0b00111000110000 | 0b01111000110000 | 0b00000100110000 | 0b01000100110000 | 0b00100100110000 | 0b01100100110000 | 0b00010100110000 | 0b01010100110000 | 0b00110100110000 | 0b01110100110000 | 0b00001100110000 | 0b01001100110000 | 0b00101100110000 | 0b01101100110000 | 0b00011100110000 | 0b01011100110000 | 0b00111100110000 | 0b01111100110000 | 0b00000010110000 | 0b01000010110000 | 0b00100010110000 | 0b01100010110000 | 0b00010010110000 | 0b01010010110000 | 0b00110010110000 | 0b01110010110000 | 0b00001010110000 | 0b01001010110000 | 0b00101010110000 | 0b01101010110000 | 0b00011010110000 | 0b01011010110000 | 0b00111010110000 | 0b01111010110000 | 0b00000110110000 | 0b01000110110000 | 0b00100110110000 | 0b01100110110000 | 0b00010110110000 | 0b01010110110000 | 0b00110110110000 | 0b01110110110000 | 0b00001110110000 | 0b01001110110000 | 0b00101110110000 | 0b01101110110000 | 0b00011110110000 | 0b01011110110000 | 0b00111110110000 | 0b01111110110000 | 0b00000001110000 | 0b01000001110000 | 0b00100001110000 | 0b01100001110000 | 0b00010001110000 | 0b01010001110000 | 0b00110001110000 | 0b01110001110000 | 0b00001001110000 | 0b01001001110000 | 0b00101001110000 | 0b01101001110000 | 0b00011001110000 | 0b01011001110000 | 0b00111001110000 | 0b01111001110000 | 0b00000101110000 | 0b01000101110000 | 0b00100101110000 | 0b01100101110000 | 0b00010101110000 | 0b01010101110000 | 0b00110101110000 | 0b01110101110000 | 0b00001101110000 | 0b01001101110000 | 0b00101101110000 | 0b01101101110000 | 0b00011101110000 | 0b01011101110000 | 0b00111101110000 | 0b01111101110000 | 0b00000011110000 | 0b01000011110000 | 0b00100011110000 | 0b01100011110000 | 0b00010011110000 | 0b01010011110000 | 0b00110011110000 | 0b01110011110000 | 0b00001011110000 | 0b01001011110000 | 0b00101011110000 | 0b01101011110000 | 0b00011011110000 | 0b01011011110000 | 0b00111011110000 | 0b01111011110000 | 0b00000111110000 | 0b01000111110000 | 0b00100111110000 | 0b01100111110000 | 0b00010111110000 | 0b01010111110000 | 0b00110111110000 | 0b01110111110000 | 0b00001111110000 | 0b01001111110000 | 0b00101111110000 | 0b01101111110000 | 0b00011111110000 | 0b01011111110000 | 0b00111111110000 | 0b01111111110000 | 0b00000000001000 | 0b01000000001000 | 0b00100000001000 | 0b01100000001000 | 0b00010000001000 | 0b01010000001000 | 0b00110000001000 | 0b01110000001000 | 0b00001000001000 | 0b01001000001000 | 0b00101000001000 | 0b01101000001000 | 0b00011000001000 | 0b01011000001000 | 0b00111000001000 | 0b01111000001000 | 0b00000100001000 | 0b01000100001000 | 0b00100100001000 | 0b01100100001000 | 0b00010100001000 | 0b01010100001000 | 0b00110100001000 | 0b01110100001000 | 0b00001100001000 | 0b01001100001000 | 0b00101100001000 | 0b01101100001000 | 0b00011100001000 | 0b01011100001000 | 0b00111100001000 | 0b01111100001000 | 0b00000010001000 | 0b01000010001000 | 0b00100010001000 | 0b01100010001000 | 0b00010010001000 | 0b01010010001000 | 0b00110010001000 | 0b01110010001000 | 0b00001010001000 | 0b01001010001000 | 0b00101010001000 | 0b01101010001000 | 0b00011010001000 | 0b01011010001000 | 0b00111010001000 | 0b01111010001000 | 0b00000110001000 | 0b01000110001000 | 0b00100110001000 | 0b01100110001000 | 0b00010110001000 | 0b01010110001000 | 0b00110110001000 | 0b01110110001000 | 0b00001110001000 | 0b01001110001000 | 0b00101110001000 | 0b01101110001000 | 0b00011110001000 | 0b01011110001000 | 0b00111110001000 | 0b01111110001000 | 0b00000001001000 | 0b01000001001000 | 0b00100001001000 | 0b01100001001000 | 0b00010001001000 | 0b01010001001000 | 0b00110001001000 | 0b01110001001000 | 0b00001001001000 | 0b01001001001000 | 0b00101001001000 | 0b01101001001000 | 0b00011001001000 | 0b01011001001000 | 0b00111001001000 | 0b01111001001000 | 0b00000101001000 | 0b01000101001000 | 0b00100101001000 | 0b01100101001000 | 0b00010101001000 | 0b01010101001000 | 0b00110101001000 | 0b01110101001000 | 0b00001101001000 | 0b01001101001000 | 0b00101101001000 | 0b01101101001000 | 0b00011101001000 | 0b01011101001000 | 0b00111101001000 | 0b01111101001000 | 0b00000011001000 | 0b01000011001000 | 0b00100011001000 | 0b01100011001000 | 0b00010011001000 | 0b01010011001000 | 0b00110011001000 | 0b01110011001000 | 0b00001011001000 | 0b01001011001000 | 0b00101011001000 | 0b01101011001000 | 0b00011011001000 | 0b01011011001000 | 0b00111011001000 | 0b01111011001000 | 0b00000111001000 | 0b01000111001000 | 0b00100111001000 | 0b01100111001000 | 0b00010111001000 | 0b01010111001000 | 0b00110111001000 | 0b01110111001000 | 0b00001111001000 | 0b01001111001000 | 0b00101111001000 | 0b01101111001000 | 0b00011111001000 | 0b01011111001000 | 0b00111111001000 | 0b01111111001000 | 0b00000000101000 | 0b01000000101000 | 0b00100000101000 | 0b01100000101000 | 0b00010000101000 | 0b01010000101000 | 0b00110000101000 | 0b01110000101000 | 0b00001000101000 | 0b01001000101000 | 0b00101000101000 | 0b01101000101000 | 0b00011000101000 | 0b01011000101000 | 0b00111000101000 | 0b01111000101000 | 0b00000100101000 | 0b01000100101000 | 0b00100100101000 | 0b01100100101000 | 0b00010100101000 | 0b01010100101000 | 0b00110100101000 | 0b01110100101000 | 0b00001100101000 | 0b01001100101000 | 0b00101100101000 | 0b01101100101000 | 0b00011100101000 | 0b01011100101000 | 0b00111100101000 | 0b01111100101000 | 0b00000010101000 | 0b01000010101000 | 0b00100010101000 | 0b01100010101000 | 0b00010010101000 | 0b01010010101000 | 0b00110010101000 | 0b01110010101000 | 0b00001010101000 | 0b01001010101000 | 0b00101010101000 | 0b01101010101000 | 0b00011010101000 | 0b01011010101000 | 0b00111010101000 | 0b01111010101000 | 0b00000110101000 | 0b01000110101000 | 0b00100110101000 | 0b01100110101000 | 0b00010110101000 | 0b01010110101000 | 0b00110110101000 | 0b01110110101000 | 0b00001110101000 | 0b01001110101000 | 0b00101110101000 | 0b01101110101000 | 0b00011110101000 | 0b01011110101000 | 0b00111110101000 | 0b01111110101000 | 0b00000001101000 | 0b01000001101000 | 0b00100001101000 | 0b01100001101000 | 0b00010001101000 | 0b01010001101000 | 0b00110001101000 | 0b01110001101000 | 0b00001001101000 | 0b01001001101000 | 0b00101001101000 | 0b01101001101000 | 0b00011001101000 | 0b01011001101000 | 0b00111001101000 | 0b01111001101000 | 0b00000101101000 | 0b01000101101000 | 0b00100101101000 | 0b01100101101000 | 0b00010101101000 | 0b01010101101000 | 0b00110101101000 | 0b01110101101000 | 0b00001101101000 | 0b01001101101000 | 0b00101101101000 | 0b01101101101000 | 0b00011101101000 | 0b01011101101000 | 0b00111101101000 | 0b01111101101000 | 0b00000011101000 | 0b01000011101000 | 0b00100011101000 | 0b01100011101000 | 0b00010011101000 | 0b01010011101000 | 0b00110011101000 | 0b01110011101000 | 0b00001011101000 | 0b01001011101000 | 0b00101011101000 | 0b01101011101000 | 0b00011011101000 | 0b01011011101000 | 0b00111011101000 | 0b01111011101000 | 0b00000111101000 | 0b01000111101000 | 0b00100111101000 | 0b01100111101000 | 0b00010111101000 | 0b01010111101000 | 0b00110111101000 | 0b01110111101000 | 0b00001111101000 | 0b01001111101000 | 0b00101111101000 | 0b01101111101000 | 0b00011111101000 | 0b01011111101000 | 0b00111111101000 | 0b01111111101000 | 0b00000000011000 | 0b01000000011000 | 0b00100000011000 | 0b01100000011000 | 0b00010000011000 | 0b01010000011000 | 0b00110000011000 | 0b01110000011000 | 0b00001000011000 | 0b01001000011000 | 0b00101000011000 | 0b01101000011000 | 0b00011000011000 | 0b01011000011000 | 0b00111000011000 | 0b01111000011000 | 0b00000100011000 | 0b01000100011000 | 0b00100100011000 | 0b01100100011000 | 0b00010100011000 | 0b01010100011000 | 0b00110100011000 | 0b01110100011000 | 0b00001100011000 | 0b01001100011000 | 0b00101100011000 | 0b01101100011000 | 0b00011100011000 | 0b01011100011000 | 0b00111100011000 | 0b01111100011000 | 0b00000010011000 | 0b01000010011000 | 0b00100010011000 | 0b01100010011000 | 0b00010010011000 | 0b01010010011000 | 0b00110010011000 | 0b01110010011000 | 0b00001010011000 | 0b01001010011000 | 0b00101010011000 | 0b01101010011000 | 0b00011010011000 | 0b01011010011000 | 0b00111010011000 | 0b01111010011000 | 0b00000110011000 | 0b01000110011000 | 0b00100110011000 | 0b01100110011000 | 0b00010110011000 | 0b01010110011000 | 0b00110110011000 | 0b01110110011000 | 0b00001110011000 | 0b01001110011000 | 0b00101110011000 | 0b01101110011000 | 0b00011110011000 | 0b01011110011000 | 0b00111110011000 | 0b01111110011000 | 0b00000001011000 | 0b01000001011000 | 0b00100001011000 | 0b01100001011000 | 0b00010001011000 | 0b01010001011000 | 0b00110001011000 | 0b01110001011000 | 0b00001001011000 | 0b01001001011000 | 0b00101001011000 | 0b01101001011000 | 0b00011001011000 | 0b01011001011000 | 0b00111001011000 | 0b01111001011000 | 0b00000101011000 | 0b01000101011000 | 0b00100101011000 | 0b01100101011000 | 0b00010101011000 | 0b01010101011000 | 0b00110101011000 | 0b01110101011000 | 0b00001101011000 | 0b01001101011000 | 0b00101101011000 | 0b01101101011000 | 0b00011101011000 | 0b01011101011000 | 0b00111101011000 | 0b01111101011000 | 0b00000011011000 | 0b01000011011000 | 0b00100011011000 | 0b01100011011000 | 0b00010011011000 | 0b01010011011000 | 0b00110011011000 | 0b01110011011000 | 0b00001011011000 | 0b01001011011000 | 0b00101011011000 | 0b01101011011000 | 0b00011011011000 | 0b01011011011000 | 0b00111011011000 | 0b01111011011000 | 0b00000111011000 | 0b01000111011000 | 0b00100111011000 | 0b01100111011000 | 0b00010111011000 | 0b01010111011000 | 0b00110111011000 | 0b01110111011000 | 0b00001111011000 | 0b01001111011000 | 0b00101111011000 | 0b01101111011000 | 0b00011111011000 | 0b01011111011000 | 0b00111111011000 | 0b01111111011000 | 0b00000000111000 | 0b01000000111000 | 0b00100000111000 | 0b01100000111000 | 0b00010000111000 | 0b01010000111000 | 0b00110000111000 | 0b01110000111000 | 0b00001000111000 | 0b01001000111000 | 0b00101000111000 | 0b01101000111000 | 0b00011000111000 | 0b01011000111000 | 0b00111000111000 | 0b01111000111000 | 0b00000100111000 | 0b01000100111000 | 0b00100100111000 | 0b01100100111000 | 0b00010100111000 | 0b01010100111000 | 0b00110100111000 | 0b01110100111000 | 0b00001100111000 | 0b01001100111000 | 0b00101100111000 | 0b01101100111000 | 0b00011100111000 | 0b01011100111000 | 0b00111100111000 | 0b01111100111000 | 0b00000010111000 | 0b01000010111000 | 0b00100010111000 | 0b01100010111000 | 0b00010010111000 | 0b01010010111000 | 0b00110010111000 | 0b01110010111000 | 0b00001010111000 | 0b01001010111000 | 0b00101010111000 | 0b01101010111000 | 0b00011010111000 | 0b01011010111000 | 0b00111010111000 | 0b01111010111000 | 0b00000110111000 | 0b01000110111000 | 0b00100110111000 | 0b01100110111000 | 0b00010110111000 | 0b01010110111000 | 0b00110110111000 | 0b01110110111000 | 0b00001110111000 | 0b01001110111000 | 0b00101110111000 | 0b01101110111000 | 0b00011110111000 | 0b01011110111000 | 0b00111110111000 | 0b01111110111000 | 0b00000001111000 | 0b01000001111000 | 0b00100001111000 | 0b01100001111000 | 0b00010001111000 | 0b01010001111000 | 0b00110001111000 | 0b01110001111000 | 0b00001001111000 | 0b01001001111000 | 0b00101001111000 | 0b01101001111000 | 0b00011001111000 | 0b01011001111000 | 0b00111001111000 | 0b01111001111000 | 0b00000101111000 | 0b01000101111000 | 0b00100101111000 | 0b01100101111000 | 0b00010101111000 | 0b01010101111000 | 0b00110101111000 | 0b01110101111000 | 0b00001101111000 | 0b01001101111000 | 0b00101101111000 | 0b01101101111000 | 0b00011101111000 | 0b01011101111000 | 0b00111101111000 | 0b01111101111000 | 0b00000011111000 | 0b01000011111000 | 0b00100011111000 | 0b01100011111000 | 0b00010011111000 | 0b01010011111000 | 0b00110011111000 | 0b01110011111000 | 0b00001011111000 | 0b01001011111000 | 0b00101011111000 | 0b01101011111000 | 0b00011011111000 | 0b01011011111000 | 0b00111011111000 | 0b01111011111000 | 0b00000111111000 | 0b01000111111000 | 0b00100111111000 | 0b01100111111000 | 0b00010111111000 | 0b01010111111000 | 0b00110111111000 | 0b01110111111000 | 0b00001111111000 | 0b01001111111000 | 0b00101111111000 | 0b01101111111000 | 0b00011111111000 | 0b01011111111000 | 0b00111111111000 | 0b01111111111000 | 0b00000000000100 | 0b01000000000100 | 0b00100000000100 | 0b01100000000100 | 0b00010000000100 | 0b01010000000100 | 0b00110000000100 | 0b01110000000100 | 0b00001000000100 | 0b01001000000100 | 0b00101000000100 | 0b01101000000100 | 0b00011000000100 | 0b01011000000100 | 0b00111000000100 | 0b01111000000100 | 0b00000100000100 | 0b01000100000100 | 0b00100100000100 | 0b01100100000100 | 0b00010100000100 | 0b01010100000100 | 0b00110100000100 | 0b01110100000100 | 0b00001100000100 | 0b01001100000100 | 0b00101100000100 | 0b01101100000100 | 0b00011100000100 | 0b01011100000100 | 0b00111100000100 | 0b01111100000100 | 0b00000010000100 | 0b01000010000100 | 0b00100010000100 | 0b01100010000100 | 0b00010010000100 | 0b01010010000100 | 0b00110010000100 | 0b01110010000100 | 0b00001010000100 | 0b01001010000100 | 0b00101010000100 | 0b01101010000100 | 0b00011010000100 | 0b01011010000100 | 0b00111010000100 | 0b01111010000100 | 0b00000110000100 | 0b01000110000100 | 0b00100110000100 | 0b01100110000100 | 0b00010110000100 | 0b01010110000100 | 0b00110110000100 | 0b01110110000100 | 0b00001110000100 | 0b01001110000100 | 0b00101110000100 | 0b01101110000100 | 0b00011110000100 | 0b01011110000100 | 0b00111110000100 | 0b01111110000100 | 0b00000001000100 | 0b01000001000100 | 0b00100001000100 | 0b01100001000100 | 0b00010001000100 | 0b01010001000100 | 0b00110001000100 | 0b01110001000100 | 0b00001001000100 | 0b01001001000100 | 0b00101001000100 | 0b01101001000100 | 0b00011001000100 | 0b01011001000100 | 0b00111001000100 | 0b01111001000100 | 0b00000101000100 | 0b01000101000100 | 0b00100101000100 | 0b01100101000100 | 0b00010101000100 | 0b01010101000100 | 0b00110101000100 | 0b01110101000100 | 0b00001101000100 | 0b01001101000100 | 0b00101101000100 | 0b01101101000100 | 0b00011101000100 | 0b01011101000100 | 0b00111101000100 | 0b01111101000100 | 0b00000011000100 | 0b01000011000100 | 0b00100011000100 | 0b01100011000100 | 0b00010011000100 | 0b01010011000100 | 0b00110011000100 | 0b01110011000100 | 0b00001011000100 | 0b01001011000100 | 0b00101011000100 | 0b01101011000100 | 0b00011011000100 | 0b01011011000100 | 0b00111011000100 | 0b01111011000100 | 0b00000111000100 | 0b01000111000100 | 0b00100111000100 | 0b01100111000100 | 0b00010111000100 | 0b01010111000100 | 0b00110111000100 | 0b01110111000100 | 0b00001111000100 | 0b01001111000100 | 0b00101111000100 | 0b01101111000100 | 0b00011111000100 | 0b01011111000100 | 0b00111111000100 | 0b01111111000100 | 0b00000000100100 | 0b01000000100100 | 0b00100000100100 | 0b01100000100100 | 0b00010000100100 | 0b01010000100100 | 0b00110000100100 | 0b01110000100100 | 0b00001000100100 | 0b01001000100100 | 0b00101000100100 | 0b01101000100100 | 0b00011000100100 | 0b01011000100100 | 0b00111000100100 | 0b01111000100100 | 0b00000100100100 | 0b01000100100100 | 0b00100100100100 | 0b01100100100100 | 0b00010100100100 | 0b01010100100100 | 0b00110100100100 | 0b01110100100100 | 0b00001100100100 | 0b01001100100100 | 0b00101100100100 | 0b01101100100100 | 0b00011100100100 | 0b01011100100100 | 0b00111100100100 | 0b01111100100100 | 0b00000010100100 | 0b01000010100100 | 0b00100010100100 | 0b01100010100100 | 0b00010010100100 | 0b01010010100100 | 0b00110010100100 | 0b01110010100100 | 0b00001010100100 | 0b01001010100100 | 0b00101010100100 | 0b01101010100100 | 0b00011010100100 | 0b01011010100100 | 0b00111010100100 | 0b01111010100100 | 0b00000110100100 | 0b01000110100100 | 0b00100110100100 | 0b01100110100100 | 0b00010110100100 | 0b01010110100100 | 0b00110110100100 | 0b01110110100100 | 0b00001110100100 | 0b01001110100100 | 0b00101110100100 | 0b01101110100100 | 0b00011110100100 | 0b01011110100100 | 0b00111110100100 | 0b01111110100100 | 0b00000001100100 | 0b01000001100100 | 0b00100001100100 | 0b01100001100100 | 0b00010001100100 | 0b01010001100100 | 0b00110001100100 | 0b01110001100100 | 0b00001001100100 | 0b01001001100100 | 0b00101001100100 | 0b01101001100100 | 0b00011001100100 | 0b01011001100100 | 0b00111001100100 | 0b01111001100100 | 0b00000101100100 | 0b01000101100100 | 0b00100101100100 | 0b01100101100100 | 0b00010101100100 | 0b01010101100100 | 0b00110101100100 | 0b01110101100100 | 0b00001101100100 | 0b01001101100100 | 0b00101101100100 | 0b01101101100100 | 0b00011101100100 | 0b01011101100100 | 0b00111101100100 | 0b01111101100100 | 0b00000011100100 | 0b01000011100100 | 0b00100011100100 | 0b01100011100100 | 0b00010011100100 | 0b01010011100100 | 0b00110011100100 | 0b01110011100100 | 0b00001011100100 | 0b01001011100100 | 0b00101011100100 | 0b01101011100100 | 0b00011011100100 | 0b01011011100100 | 0b00111011100100 | 0b01111011100100 | 0b00000111100100 | 0b01000111100100 | 0b00100111100100 | 0b01100111100100 | 0b00010111100100 | 0b01010111100100 | 0b00110111100100 | 0b01110111100100 | 0b00001111100100 | 0b01001111100100 | 0b00101111100100 | 0b01101111100100 | 0b00011111100100 | 0b01011111100100 | 0b00111111100100 | 0b01111111100100 | 0b00000000010100 | 0b01000000010100 | 0b00100000010100 | 0b01100000010100 | 0b00010000010100 | 0b01010000010100 | 0b00110000010100 | 0b01110000010100 | 0b00001000010100 | 0b01001000010100 | 0b00101000010100 | 0b01101000010100 | 0b00011000010100 | 0b01011000010100 | 0b00111000010100 | 0b01111000010100 | 0b00000100010100 | 0b01000100010100 | 0b00100100010100 | 0b01100100010100 | 0b00010100010100 | 0b01010100010100 | 0b00110100010100 | 0b01110100010100 | 0b00001100010100 | 0b01001100010100 | 0b00101100010100 | 0b01101100010100 | 0b00011100010100 | 0b01011100010100 | 0b00111100010100 | 0b01111100010100 | 0b00000010010100 | 0b01000010010100 | 0b00100010010100 | 0b01100010010100 | 0b00010010010100 | 0b01010010010100 | 0b00110010010100 | 0b01110010010100 | 0b00001010010100 | 0b01001010010100 | 0b00101010010100 | 0b01101010010100 | 0b00011010010100 | 0b01011010010100 | 0b00111010010100 | 0b01111010010100 | 0b00000110010100 | 0b01000110010100 | 0b00100110010100 | 0b01100110010100 | 0b00010110010100 | 0b01010110010100 | 0b00110110010100 | 0b01110110010100 | 0b00001110010100 | 0b01001110010100 | 0b00101110010100 | 0b01101110010100 | 0b00011110010100 | 0b01011110010100 | 0b00111110010100 | 0b01111110010100 | 0b00000001010100 | 0b01000001010100 | 0b00100001010100 | 0b01100001010100 | 0b00010001010100 | 0b01010001010100 | 0b00110001010100 | 0b01110001010100 | 0b00001001010100 | 0b01001001010100 | 0b00101001010100 | 0b01101001010100 | 0b00011001010100 | 0b01011001010100 | 0b00111001010100 | 0b01111001010100 | 0b00000101010100 | 0b01000101010100 | 0b00100101010100 | 0b01100101010100 | 0b00010101010100 | 0b01010101010100 | 0b00110101010100 | 0b01110101010100 | 0b00001101010100 | 0b01001101010100 | 0b00101101010100 | 0b01101101010100 | 0b00011101010100 | 0b01011101010100 | 0b00111101010100 | 0b01111101010100 | 0b00000011010100 | 0b01000011010100 | 0b00100011010100 | 0b01100011010100 | 0b00010011010100 | 0b01010011010100 | 0b00110011010100 | 0b01110011010100 | 0b00001011010100 | 0b01001011010100 | 0b00101011010100 | 0b01101011010100 | 0b00011011010100 | 0b01011011010100 | 0b00111011010100 | 0b01111011010100 | 0b00000111010100 | 0b01000111010100 | 0b00100111010100 | 0b01100111010100 | 0b00010111010100 | 0b01010111010100 | 0b00110111010100 | 0b01110111010100 | 0b00001111010100 | 0b01001111010100 | 0b00101111010100 | 0b01101111010100 | 0b00011111010100 | 0b01011111010100 | 0b00111111010100 | 0b01111111010100 | 0b00000000110100 | 0b01000000110100 | 0b00100000110100 | 0b01100000110100 | 0b00010000110100 | 0b01010000110100 | 0b00110000110100 | 0b01110000110100 | 0b00001000110100 | 0b01001000110100 | 0b00101000110100 | 0b01101000110100 | 0b00011000110100 | 0b01011000110100 | 0b00111000110100 | 0b01111000110100 | 0b00000100110100 | 0b01000100110100 | 0b00100100110100 | 0b01100100110100 | 0b00010100110100 | 0b01010100110100 | 0b00110100110100 | 0b01110100110100 | 0b00001100110100 | 0b01001100110100 | 0b00101100110100 | 0b01101100110100 | 0b00011100110100 | 0b01011100110100 | 0b00111100110100 | 0b01111100110100 | 0b00000010110100 | 0b01000010110100 | 0b00100010110100 | 0b01100010110100 | 0b00010010110100 | 0b01010010110100 | 0b00110010110100 | 0b01110010110100 | 0b00001010110100 | 0b01001010110100 | 0b00101010110100 | 0b01101010110100 | 0b00011010110100 | 0b01011010110100 | 0b00111010110100 | 0b01111010110100 | 0b00000110110100 | 0b01000110110100 | 0b00100110110100 | 0b01100110110100 | 0b00010110110100 | 0b01010110110100 | 0b00110110110100 | 0b01110110110100 | 0b00001110110100 | 0b01001110110100 | 0b00101110110100 | 0b01101110110100 | 0b00011110110100 | 0b01011110110100 | 0b00111110110100 | 0b01111110110100 | 0b00000001110100 | 0b01000001110100 | 0b00100001110100 | 0b01100001110100 | 0b00010001110100 | 0b01010001110100 | 0b00110001110100 | 0b01110001110100 | 0b00001001110100 | 0b01001001110100 | 0b00101001110100 | 0b01101001110100 | 0b00011001110100 | 0b01011001110100 | 0b00111001110100 | 0b01111001110100 | 0b00000101110100 | 0b01000101110100 | 0b00100101110100 | 0b01100101110100 | 0b00010101110100 | 0b01010101110100 | 0b00110101110100 | 0b01110101110100 | 0b00001101110100 | 0b01001101110100 | 0b00101101110100 | 0b01101101110100 | 0b00011101110100 | 0b01011101110100 | 0b00111101110100 | 0b01111101110100 | 0b00000011110100 | 0b01000011110100 | 0b00100011110100 | 0b01100011110100 | 0b00010011110100 | 0b01010011110100 | 0b00110011110100 | 0b01110011110100 | 0b00001011110100 | 0b01001011110100 | 0b00101011110100 | 0b01101011110100 | 0b00011011110100 | 0b01011011110100 | 0b00111011110100 | 0b01111011110100 | 0b00000111110100 | 0b01000111110100 | 0b00100111110100 | 0b01100111110100 | 0b00010111110100 | 0b01010111110100 | 0b00110111110100 | 0b01110111110100 | 0b00001111110100 | 0b01001111110100 | 0b00101111110100 | 0b01101111110100 | 0b00011111110100 | 0b01011111110100 | 0b00111111110100 | 0b01111111110100 | 0b00000000001100 | 0b01000000001100 | 0b00100000001100 | 0b01100000001100 | 0b00010000001100 | 0b01010000001100 | 0b00110000001100 | 0b01110000001100 | 0b00001000001100 | 0b01001000001100 | 0b00101000001100 | 0b01101000001100 | 0b00011000001100 | 0b01011000001100 | 0b00111000001100 | 0b01111000001100 | 0b00000100001100 | 0b01000100001100 | 0b00100100001100 | 0b01100100001100 | 0b00010100001100 | 0b01010100001100 | 0b00110100001100 | 0b01110100001100 | 0b00001100001100 | 0b01001100001100 | 0b00101100001100 | 0b01101100001100 | 0b00011100001100 | 0b01011100001100 | 0b00111100001100 | 0b01111100001100 | 0b00000010001100 | 0b01000010001100 | 0b00100010001100 | 0b01100010001100 | 0b00010010001100 | 0b01010010001100 | 0b00110010001100 | 0b01110010001100 | 0b00001010001100 | 0b01001010001100 | 0b00101010001100 | 0b01101010001100 | 0b00011010001100 | 0b01011010001100 | 0b00111010001100 | 0b01111010001100 | 0b00000110001100 | 0b01000110001100 | 0b00100110001100 | 0b01100110001100 | 0b00010110001100 | 0b01010110001100 | 0b00110110001100 | 0b01110110001100 | 0b00001110001100 | 0b01001110001100 | 0b00101110001100 | 0b01101110001100 | 0b00011110001100 | 0b01011110001100 | 0b00111110001100 | 0b01111110001100 | 0b00000001001100 | 0b01000001001100 | 0b00100001001100 | 0b01100001001100 | 0b00010001001100 | 0b01010001001100 | 0b00110001001100 | 0b01110001001100 | 0b00001001001100 | 0b01001001001100 | 0b00101001001100 | 0b01101001001100 | 0b00011001001100 | 0b01011001001100 | 0b00111001001100 | 0b01111001001100 | 0b00000101001100 | 0b01000101001100 | 0b00100101001100 | 0b01100101001100 | 0b00010101001100 | 0b01010101001100 | 0b00110101001100 | 0b01110101001100 | 0b00001101001100 | 0b01001101001100 | 0b00101101001100 | 0b01101101001100 | 0b00011101001100 | 0b01011101001100 | 0b00111101001100 | 0b01111101001100 | 0b00000011001100 | 0b01000011001100 | 0b00100011001100 | 0b01100011001100 | 0b00010011001100 | 0b01010011001100 | 0b00110011001100 | 0b01110011001100 | 0b00001011001100 | 0b01001011001100 | 0b00101011001100 | 0b01101011001100 | 0b00011011001100 | 0b01011011001100 | 0b00111011001100 | 0b01111011001100 | 0b00000111001100 | 0b01000111001100 | 0b00100111001100 | 0b01100111001100 | 0b00010111001100 | 0b01010111001100 | 0b00110111001100 | 0b01110111001100 | 0b00001111001100 | 0b01001111001100 | 0b00101111001100 | 0b01101111001100 | 0b00011111001100 | 0b01011111001100 | 0b00111111001100 | 0b01111111001100 | 0b00000000101100 | 0b01000000101100 | 0b00100000101100 | 0b01100000101100 | 0b00010000101100 | 0b01010000101100 | 0b00110000101100 | 0b01110000101100 | 0b00001000101100 | 0b01001000101100 | 0b00101000101100 | 0b01101000101100 | 0b00011000101100 | 0b01011000101100 | 0b00111000101100 | 0b01111000101100 | 0b00000100101100 | 0b01000100101100 | 0b00100100101100 | 0b01100100101100 | 0b00010100101100 | 0b01010100101100 | 0b00110100101100 | 0b01110100101100 | 0b00001100101100 | 0b01001100101100 | 0b00101100101100 | 0b01101100101100 | 0b00011100101100 | 0b01011100101100 | 0b00111100101100 | 0b01111100101100 | 0b00000010101100 | 0b01000010101100 | 0b00100010101100 | 0b01100010101100 | 0b00010010101100 | 0b01010010101100 | 0b00110010101100 | 0b01110010101100 | 0b00001010101100 | 0b01001010101100 | 0b00101010101100 | 0b01101010101100 | 0b00011010101100 | 0b01011010101100 | 0b00111010101100 | 0b01111010101100 | 0b00000110101100 | 0b01000110101100 | 0b00100110101100 | 0b01100110101100 | 0b00010110101100 | 0b01010110101100 | 0b00110110101100 | 0b01110110101100 | 0b00001110101100 | 0b01001110101100 | 0b00101110101100 | 0b01101110101100 | 0b00011110101100 | 0b01011110101100 | 0b00111110101100 | 0b01111110101100 | 0b00000001101100 | 0b01000001101100 | 0b00100001101100 | 0b01100001101100 | 0b00010001101100 | 0b01010001101100 | 0b00110001101100 | 0b01110001101100 | 0b00001001101100 | 0b01001001101100 | 0b00101001101100 | 0b01101001101100 | 0b00011001101100 | 0b01011001101100 | 0b00111001101100 | 0b01111001101100 | 0b00000101101100 | 0b01000101101100 | 0b00100101101100 | 0b01100101101100 | 0b00010101101100 | 0b01010101101100 | 0b00110101101100 | 0b01110101101100 | 0b00001101101100 | 0b01001101101100 | 0b00101101101100 | 0b01101101101100 | 0b00011101101100 | 0b01011101101100 | 0b00111101101100 | 0b01111101101100 | 0b00000011101100 | 0b01000011101100 | 0b00100011101100 | 0b01100011101100 | 0b00010011101100 | 0b01010011101100 | 0b00110011101100 | 0b01110011101100 | 0b00001011101100 | 0b01001011101100 | 0b00101011101100 | 0b01101011101100 | 0b00011011101100 | 0b01011011101100 | 0b00111011101100 | 0b01111011101100 | 0b00000111101100 | 0b01000111101100 | 0b00100111101100 | 0b01100111101100 | 0b00010111101100 | 0b01010111101100 | 0b00110111101100 | 0b01110111101100 | 0b00001111101100 | 0b01001111101100 | 0b00101111101100 | 0b01101111101100 | 0b00011111101100 | 0b01011111101100 | 0b00111111101100 | 0b01111111101100 | 0b00000000011100 | 0b01000000011100 | 0b00100000011100 | 0b01100000011100 | 0b00010000011100 | 0b01010000011100 | 0b00110000011100 | 0b01110000011100 | 0b00001000011100 | 0b01001000011100 | 0b00101000011100 | 0b01101000011100 | 0b00011000011100 | 0b01011000011100 | 0b00111000011100 | 0b01111000011100 | 0b00000100011100 | 0b01000100011100 | 0b00100100011100 | 0b01100100011100 | 0b00010100011100 | 0b01010100011100 | 0b00110100011100 | 0b01110100011100 | 0b00001100011100 | 0b01001100011100 | 0b00101100011100 | 0b01101100011100 | 0b00011100011100 | 0b01011100011100 | 0b00111100011100 | 0b01111100011100 | 0b00000010011100 | 0b01000010011100 | 0b00100010011100 | 0b01100010011100 | 0b00010010011100 | 0b01010010011100 | 0b00110010011100 | 0b01110010011100 | 0b00001010011100 | 0b01001010011100 | 0b00101010011100 | 0b01101010011100 | 0b00011010011100 | 0b01011010011100 | 0b00111010011100 | 0b01111010011100 | 0b00000110011100 | 0b01000110011100 | 0b00100110011100 | 0b01100110011100 | 0b00010110011100 | 0b01010110011100 | 0b00110110011100 | 0b01110110011100 | 0b00001110011100 | 0b01001110011100 | 0b00101110011100 | 0b01101110011100 | 0b00011110011100 | 0b01011110011100 | 0b00111110011100 | 0b01111110011100 | 0b00000001011100 | 0b01000001011100 | 0b00100001011100 | 0b01100001011100 | 0b00010001011100 | 0b01010001011100 | 0b00110001011100 | 0b01110001011100 | 0b00001001011100 | 0b01001001011100 | 0b00101001011100 | 0b01101001011100 | 0b00011001011100 | 0b01011001011100 | 0b00111001011100 | 0b01111001011100 | 0b00000101011100 | 0b01000101011100 | 0b00100101011100 | 0b01100101011100 | 0b00010101011100 | 0b01010101011100 | 0b00110101011100 | 0b01110101011100 | 0b00001101011100 | 0b01001101011100 | 0b00101101011100 | 0b01101101011100 | 0b00011101011100 | 0b01011101011100 | 0b00111101011100 | 0b01111101011100 | 0b00000011011100 | 0b01000011011100 | 0b00100011011100 | 0b01100011011100 | 0b00010011011100 | 0b01010011011100 | 0b00110011011100 | 0b01110011011100 | 0b00001011011100 | 0b01001011011100 | 0b00101011011100 | 0b01101011011100 | 0b00011011011100 | 0b01011011011100 | 0b00111011011100 | 0b01111011011100 | 0b00000111011100 | 0b01000111011100 | 0b00100111011100 | 0b01100111011100 | 0b00010111011100 | 0b01010111011100 | 0b00110111011100 | 0b01110111011100 | 0b00001111011100 | 0b01001111011100 | 0b00101111011100 | 0b01101111011100 | 0b00011111011100 | 0b01011111011100 | 0b00111111011100 | 0b01111111011100 | 0b00000000111100 | 0b01000000111100 | 0b00100000111100 | 0b01100000111100 | 0b00010000111100 | 0b01010000111100 | 0b00110000111100 | 0b01110000111100 | 0b00001000111100 | 0b01001000111100 | 0b00101000111100 | 0b01101000111100 | 0b00011000111100 | 0b01011000111100 | 0b00111000111100 | 0b01111000111100 | 0b00000100111100 | 0b01000100111100 | 0b00100100111100 | 0b01100100111100 | 0b00010100111100 | 0b01010100111100 | 0b00110100111100 | 0b01110100111100 | 0b00001100111100 | 0b01001100111100 | 0b00101100111100 | 0b01101100111100 | 0b00011100111100 | 0b01011100111100 | 0b00111100111100 | 0b01111100111100 | 0b00000010111100 | 0b01000010111100 | 0b00100010111100 | 0b01100010111100 | 0b00010010111100 | 0b01010010111100 | 0b00110010111100 | 0b01110010111100 | 0b00001010111100 | 0b01001010111100 | 0b00101010111100 | 0b01101010111100 | 0b00011010111100 | 0b01011010111100 | 0b00111010111100 | 0b01111010111100 | 0b00000110111100 | 0b01000110111100 | 0b00100110111100 | 0b01100110111100 | 0b00010110111100 | 0b01010110111100 | 0b00110110111100 | 0b01110110111100 | 0b00001110111100 | 0b01001110111100 | 0b00101110111100 | 0b01101110111100 | 0b00011110111100 | 0b01011110111100 | 0b00111110111100 | 0b01111110111100 | 0b00000001111100 | 0b01000001111100 | 0b00100001111100 | 0b01100001111100 | 0b00010001111100 | 0b01010001111100 | 0b00110001111100 | 0b01110001111100 | 0b00001001111100 | 0b01001001111100 | 0b00101001111100 | 0b01101001111100 | 0b00011001111100 | 0b01011001111100 | 0b00111001111100 | 0b01111001111100 | 0b00000101111100 | 0b01000101111100 | 0b00100101111100 | 0b01100101111100 | 0b00010101111100 | 0b01010101111100 | 0b00110101111100 | 0b01110101111100 | 0b00001101111100 | 0b01001101111100 | 0b00101101111100 | 0b01101101111100 | 0b00011101111100 | 0b01011101111100 | 0b00111101111100 | 0b01111101111100 | 0b00000011111100 | 0b01000011111100 | 0b00100011111100 | 0b01100011111100 | 0b00010011111100 | 0b01010011111100 | 0b00110011111100 | 0b01110011111100 | 0b00001011111100 | 0b01001011111100 | 0b00101011111100 | 0b01101011111100 | 0b00011011111100 | 0b01011011111100 | 0b00111011111100 | 0b01111011111100 | 0b00000111111100 | 0b01000111111100 | 0b00100111111100 | 0b01100111111100 | 0b00010111111100 | 0b01010111111100 | 0b00110111111100 | 0b01110111111100 | 0b00001111111100 | 0b01001111111100 | 0b00101111111100 | 0b01101111111100 | 0b00011111111100 | 0b01011111111100 | 0b00111111111100 | 0b01111111111100 | 0b00000000000010 | 0b01000000000010 | 0b00100000000010 | 0b01100000000010 | 0b00010000000010 | 0b01010000000010 | 0b00110000000010 | 0b01110000000010 | 0b00001000000010 | 0b01001000000010 | 0b00101000000010 | 0b01101000000010 | 0b00011000000010 | 0b01011000000010 | 0b00111000000010 | 0b01111000000010 | 0b00000100000010 | 0b01000100000010 | 0b00100100000010 | 0b01100100000010 | 0b00010100000010 | 0b01010100000010 | 0b00110100000010 | 0b01110100000010 | 0b00001100000010 | 0b01001100000010 | 0b00101100000010 | 0b01101100000010 | 0b00011100000010 | 0b01011100000010 | 0b00111100000010 | 0b01111100000010 | 0b00000010000010 | 0b01000010000010 | 0b00100010000010 | 0b01100010000010 | 0b00010010000010 | 0b01010010000010 | 0b00110010000010 | 0b01110010000010 | 0b00001010000010 | 0b01001010000010 | 0b00101010000010 | 0b01101010000010 | 0b00011010000010 | 0b01011010000010 | 0b00111010000010 | 0b01111010000010 | 0b00000110000010 | 0b01000110000010 | 0b00100110000010 | 0b01100110000010 | 0b00010110000010 | 0b01010110000010 | 0b00110110000010 | 0b01110110000010 | 0b00001110000010 | 0b01001110000010 | 0b00101110000010 | 0b01101110000010 | 0b00011110000010 | 0b01011110000010 | 0b00111110000010 | 0b01111110000010 | 0b00000001000010 | 0b01000001000010 | 0b00100001000010 | 0b01100001000010 | 0b00010001000010 | 0b01010001000010 | 0b00110001000010 | 0b01110001000010 | 0b00001001000010 | 0b01001001000010 | 0b00101001000010 | 0b01101001000010 | 0b00011001000010 | 0b01011001000010 | 0b00111001000010 | 0b01111001000010 | 0b00000101000010 | 0b01000101000010 | 0b00100101000010 | 0b01100101000010 | 0b00010101000010 | 0b01010101000010 | 0b00110101000010 | 0b01110101000010 | 0b00001101000010 | 0b01001101000010 | 0b00101101000010 | 0b01101101000010 | 0b00011101000010 | 0b01011101000010 | 0b00111101000010 | 0b01111101000010 | 0b00000011000010 | 0b01000011000010 | 0b00100011000010 | 0b01100011000010 | 0b00010011000010 | 0b01010011000010 | 0b00110011000010 | 0b01110011000010 | 0b00001011000010 | 0b01001011000010 | 0b00101011000010 | 0b01101011000010 | 0b00011011000010 | 0b01011011000010 | 0b00111011000010 | 0b01111011000010 | 0b00000111000010 | 0b01000111000010 | 0b00100111000010 | 0b01100111000010 | 0b00010111000010 | 0b01010111000010 | 0b00110111000010 | 0b01110111000010 | 0b00001111000010 | 0b01001111000010 | 0b00101111000010 | 0b01101111000010 | 0b00011111000010 | 0b01011111000010 | 0b00111111000010 | 0b01111111000010 | 0b00000000100010 | 0b01000000100010 | 0b00100000100010 | 0b01100000100010 | 0b00010000100010 | 0b01010000100010 | 0b00110000100010 | 0b01110000100010 | 0b00001000100010 | 0b01001000100010 | 0b00101000100010 | 0b01101000100010 | 0b00011000100010 | 0b01011000100010 | 0b00111000100010 | 0b01111000100010 | 0b00000100100010 | 0b01000100100010 | 0b00100100100010 | 0b01100100100010 | 0b00010100100010 | 0b01010100100010 | 0b00110100100010 | 0b01110100100010 | 0b00001100100010 | 0b01001100100010 | 0b00101100100010 | 0b01101100100010 | 0b00011100100010 | 0b01011100100010 | 0b00111100100010 | 0b01111100100010 | 0b00000010100010 | 0b01000010100010 | 0b00100010100010 | 0b01100010100010 | 0b00010010100010 | 0b01010010100010 | 0b00110010100010 | 0b01110010100010 | 0b00001010100010 | 0b01001010100010 | 0b00101010100010 | 0b01101010100010 | 0b00011010100010 | 0b01011010100010 | 0b00111010100010 | 0b01111010100010 | 0b00000110100010 | 0b01000110100010 | 0b00100110100010 | 0b01100110100010 | 0b00010110100010 | 0b01010110100010 | 0b00110110100010 | 0b01110110100010 | 0b00001110100010 | 0b01001110100010 | 0b00101110100010 | 0b01101110100010 | 0b00011110100010 | 0b01011110100010 | 0b00111110100010 | 0b01111110100010 | 0b00000001100010 | 0b01000001100010 | 0b00100001100010 | 0b01100001100010 | 0b00010001100010 | 0b01010001100010 | 0b00110001100010 | 0b01110001100010 | 0b00001001100010 | 0b01001001100010 | 0b00101001100010 | 0b01101001100010 | 0b00011001100010 | 0b01011001100010 | 0b00111001100010 | 0b01111001100010 | 0b00000101100010 | 0b01000101100010 | 0b00100101100010 | 0b01100101100010 | 0b00010101100010 | 0b01010101100010 | 0b00110101100010 | 0b01110101100010 | 0b00001101100010 | 0b01001101100010 | 0b00101101100010 | 0b01101101100010 | 0b00011101100010 | 0b01011101100010 | 0b00111101100010 | 0b01111101100010 | 0b00000011100010 | 0b01000011100010 | 0b00100011100010 | 0b01100011100010 | 0b00010011100010 | 0b01010011100010 | 0b00110011100010 | 0b01110011100010 | 0b00001011100010 | 0b01001011100010 | 0b00101011100010 | 0b01101011100010 | 0b00011011100010 | 0b01011011100010 | 0b00111011100010 | 0b01111011100010 | 0b00000111100010 | 0b01000111100010 | 0b00100111100010 | 0b01100111100010 | 0b00010111100010 | 0b01010111100010 | 0b00110111100010 | 0b01110111100010 | 0b00001111100010 | 0b01001111100010 | 0b00101111100010 | 0b01101111100010 | 0b00011111100010 | 0b01011111100010 | 0b00111111100010 | 0b01111111100010 | 0b00000000010010 | 0b01000000010010 | 0b00100000010010 | 0b01100000010010 | 0b00010000010010 | 0b01010000010010 | 0b00110000010010 | 0b01110000010010 | 0b00001000010010 | 0b01001000010010 | 0b00101000010010 | 0b01101000010010 | 0b00011000010010 | 0b01011000010010 | 0b00111000010010 | 0b01111000010010 | 0b00000100010010 | 0b01000100010010 | 0b00100100010010 | 0b01100100010010 | 0b00010100010010 | 0b01010100010010 | 0b00110100010010 | 0b01110100010010 | 0b00001100010010 | 0b01001100010010 | 0b00101100010010 | 0b01101100010010 | 0b00011100010010 | 0b01011100010010 | 0b00111100010010 | 0b01111100010010 | 0b00000010010010 | 0b01000010010010 | 0b00100010010010 | 0b01100010010010 | 0b00010010010010 | 0b01010010010010 | 0b00110010010010 | 0b01110010010010 | 0b00001010010010 | 0b01001010010010 | 0b00101010010010 | 0b01101010010010 | 0b00011010010010 | 0b01011010010010 | 0b00111010010010 | 0b01111010010010 | 0b00000110010010 | 0b01000110010010 | 0b00100110010010 | 0b01100110010010 | 0b00010110010010 | 0b01010110010010 | 0b00110110010010 | 0b01110110010010 | 0b00001110010010 | 0b01001110010010 | 0b00101110010010 | 0b01101110010010 | 0b00011110010010 | 0b01011110010010 | 0b00111110010010 | 0b01111110010010 | 0b00000001010010 | 0b01000001010010 | 0b00100001010010 | 0b01100001010010 | 0b00010001010010 | 0b01010001010010 | 0b00110001010010 | 0b01110001010010 | 0b00001001010010 | 0b01001001010010 | 0b00101001010010 | 0b01101001010010 | 0b00011001010010 | 0b01011001010010 | 0b00111001010010 | 0b01111001010010 | 0b00000101010010 | 0b01000101010010 | 0b00100101010010 | 0b01100101010010 | 0b00010101010010 | 0b01010101010010 | 0b00110101010010 | 0b01110101010010 | 0b00001101010010 | 0b01001101010010 | 0b00101101010010 | 0b01101101010010 | 0b00011101010010 | 0b01011101010010 | 0b00111101010010 | 0b01111101010010 | 0b00000011010010 | 0b01000011010010 | 0b00100011010010 | 0b01100011010010 | 0b00010011010010 | 0b01010011010010 | 0b00110011010010 | 0b01110011010010 | 0b00001011010010 | 0b01001011010010 | 0b00101011010010 | 0b01101011010010 | 0b00011011010010 | 0b01011011010010 | 0b00111011010010 | 0b01111011010010 | 0b00000111010010 | 0b01000111010010 | 0b00100111010010 | 0b01100111010010 | 0b00010111010010 | 0b01010111010010 | 0b00110111010010 | 0b01110111010010 | 0b00001111010010 | 0b01001111010010 | 0b00101111010010 | 0b01101111010010 | 0b00011111010010 | 0b01011111010010 | 0b00111111010010 | 0b01111111010010 | 0b00000000110010 | 0b01000000110010 | 0b00100000110010 | 0b01100000110010 | 0b00010000110010 | 0b01010000110010 | 0b00110000110010 | 0b01110000110010 | 0b00001000110010 | 0b01001000110010 | 0b00101000110010 | 0b01101000110010 | 0b00011000110010 | 0b01011000110010 | 0b00111000110010 | 0b01111000110010 | 0b00000100110010 | 0b01000100110010 | 0b00100100110010 | 0b01100100110010 | 0b00010100110010 | 0b01010100110010 | 0b00110100110010 | 0b01110100110010 | 0b00001100110010 | 0b01001100110010 | 0b00101100110010 | 0b01101100110010 | 0b00011100110010 | 0b01011100110010 | 0b00111100110010 | 0b01111100110010 | 0b00000010110010 | 0b01000010110010 | 0b00100010110010 | 0b01100010110010 | 0b00010010110010 | 0b01010010110010 | 0b00110010110010 | 0b01110010110010 | 0b00001010110010 | 0b01001010110010 | 0b00101010110010 | 0b01101010110010 | 0b00011010110010 | 0b01011010110010 | 0b00111010110010 | 0b01111010110010 | 0b00000110110010 | 0b01000110110010 | 0b00100110110010 | 0b01100110110010 | 0b00010110110010 | 0b01010110110010 | 0b00110110110010 | 0b01110110110010 | 0b00001110110010 | 0b01001110110010 | 0b00101110110010 | 0b01101110110010 | 0b00011110110010 | 0b01011110110010 | 0b00111110110010 | 0b01111110110010 | 0b00000001110010 | 0b01000001110010 | 0b00100001110010 | 0b01100001110010 | 0b00010001110010 | 0b01010001110010 | 0b00110001110010 | 0b01110001110010 | 0b00001001110010 | 0b01001001110010 | 0b00101001110010 | 0b01101001110010 | 0b00011001110010 | 0b01011001110010 | 0b00111001110010 | 0b01111001110010 | 0b00000101110010 | 0b01000101110010 | 0b00100101110010 | 0b01100101110010 | 0b00010101110010 | 0b01010101110010 | 0b00110101110010 | 0b01110101110010 | 0b00001101110010 | 0b01001101110010 | 0b00101101110010 | 0b01101101110010 | 0b00011101110010 | 0b01011101110010 | 0b00111101110010 | 0b01111101110010 | 0b00000011110010 | 0b01000011110010 | 0b00100011110010 | 0b01100011110010 | 0b00010011110010 | 0b01010011110010 | 0b00110011110010 | 0b01110011110010 | 0b00001011110010 | 0b01001011110010 | 0b00101011110010 | 0b01101011110010 | 0b00011011110010 | 0b01011011110010 | 0b00111011110010 | 0b01111011110010 | 0b00000111110010 | 0b01000111110010 | 0b00100111110010 | 0b01100111110010 | 0b00010111110010 | 0b01010111110010 | 0b00110111110010 | 0b01110111110010 | 0b00001111110010 | 0b01001111110010 | 0b00101111110010 | 0b01101111110010 | 0b00011111110010 | 0b01011111110010 | 0b00111111110010 | 0b01111111110010 | 0b00000000001010 | 0b01000000001010 | 0b00100000001010 | 0b01100000001010 | 0b00010000001010 | 0b01010000001010 | 0b00110000001010 | 0b01110000001010 | 0b00001000001010 | 0b01001000001010 | 0b00101000001010 | 0b01101000001010 | 0b00011000001010 | 0b01011000001010 | 0b00111000001010 | 0b01111000001010 | 0b00000100001010 | 0b01000100001010 | 0b00100100001010 | 0b01100100001010 | 0b00010100001010 | 0b01010100001010 | 0b00110100001010 | 0b01110100001010 | 0b00001100001010 | 0b01001100001010 | 0b00101100001010 | 0b01101100001010 | 0b00011100001010 | 0b01011100001010 | 0b00111100001010 | 0b01111100001010 | 0b00000010001010 | 0b01000010001010 | 0b00100010001010 | 0b01100010001010 | 0b00010010001010 | 0b01010010001010 | 0b00110010001010 | 0b01110010001010 | 0b00001010001010 | 0b01001010001010 | 0b00101010001010 | 0b01101010001010 | 0b00011010001010 | 0b01011010001010 | 0b00111010001010 | 0b01111010001010 | 0b00000110001010 | 0b01000110001010 | 0b00100110001010 | 0b01100110001010 | 0b00010110001010 | 0b01010110001010 | 0b00110110001010 | 0b01110110001010 | 0b00001110001010 | 0b01001110001010 | 0b00101110001010 | 0b01101110001010 | 0b00011110001010 | 0b01011110001010 | 0b00111110001010 | 0b01111110001010 | 0b00000001001010 | 0b01000001001010 | 0b00100001001010 | 0b01100001001010 | 0b00010001001010 | 0b01010001001010 | 0b00110001001010 | 0b01110001001010 | 0b00001001001010 | 0b01001001001010 | 0b00101001001010 | 0b01101001001010 | 0b00011001001010 | 0b01011001001010 | 0b00111001001010 | 0b01111001001010 | 0b00000101001010 | 0b01000101001010 | 0b00100101001010 | 0b01100101001010 | 0b00010101001010 | 0b01010101001010 | 0b00110101001010 | 0b01110101001010 | 0b00001101001010 | 0b01001101001010 | 0b00101101001010 | 0b01101101001010 | 0b00011101001010 | 0b01011101001010 | 0b00111101001010 | 0b01111101001010 | 0b00000011001010 | 0b01000011001010 | 0b00100011001010 | 0b01100011001010 | 0b00010011001010 | 0b01010011001010 | 0b00110011001010 | 0b01110011001010 | 0b00001011001010 | 0b01001011001010 | 0b00101011001010 | 0b01101011001010 | 0b00011011001010 | 0b01011011001010 | 0b00111011001010 | 0b01111011001010 | 0b00000111001010 | 0b01000111001010 | 0b00100111001010 | 0b01100111001010 | 0b00010111001010 | 0b01010111001010 | 0b00110111001010 | 0b01110111001010 | 0b00001111001010 | 0b01001111001010 | 0b00101111001010 | 0b01101111001010 | 0b00011111001010 | 0b01011111001010 | 0b00111111001010 | 0b01111111001010 | 0b00000000101010 | 0b01000000101010 | 0b00100000101010 | 0b01100000101010 | 0b00010000101010 | 0b01010000101010 | 0b00110000101010 | 0b01110000101010 | 0b00001000101010 | 0b01001000101010 | 0b00101000101010 | 0b01101000101010 | 0b00011000101010 | 0b01011000101010 | 0b00111000101010 | 0b01111000101010 | 0b00000100101010 | 0b01000100101010 | 0b00100100101010 | 0b01100100101010 | 0b00010100101010 | 0b01010100101010 | 0b00110100101010 | 0b01110100101010 | 0b00001100101010 | 0b01001100101010 | 0b00101100101010 | 0b01101100101010 | 0b00011100101010 | 0b01011100101010 | 0b00111100101010 | 0b01111100101010 | 0b00000010101010 | 0b01000010101010 | 0b00100010101010 | 0b01100010101010 | 0b00010010101010 | 0b01010010101010 | 0b00110010101010 | 0b01110010101010 | 0b00001010101010 | 0b01001010101010 | 0b00101010101010 | 0b01101010101010 | 0b00011010101010 | 0b01011010101010 | 0b00111010101010 | 0b01111010101010 | 0b00000110101010 | 0b01000110101010 | 0b00100110101010 | 0b01100110101010 | 0b00010110101010 | 0b01010110101010 | 0b00110110101010 | 0b01110110101010 | 0b00001110101010 | 0b01001110101010 | 0b00101110101010 | 0b01101110101010 | 0b00011110101010 | 0b01011110101010 | 0b00111110101010 | 0b01111110101010 | 0b00000001101010 | 0b01000001101010 | 0b00100001101010 | 0b01100001101010 | 0b00010001101010 | 0b01010001101010 | 0b00110001101010 | 0b01110001101010 | 0b00001001101010 | 0b01001001101010 | 0b00101001101010 | 0b01101001101010 | 0b00011001101010 | 0b01011001101010 | 0b00111001101010 | 0b01111001101010 | 0b00000101101010 | 0b01000101101010 | 0b00100101101010 | 0b01100101101010 | 0b00010101101010 | 0b01010101101010 | 0b00110101101010 | 0b01110101101010 | 0b00001101101010 | 0b01001101101010 | 0b00101101101010 | 0b01101101101010 | 0b00011101101010 | 0b01011101101010 | 0b00111101101010 | 0b01111101101010 | 0b00000011101010 | 0b01000011101010 | 0b00100011101010 | 0b01100011101010 | 0b00010011101010 | 0b01010011101010 | 0b00110011101010 | 0b01110011101010 | 0b00001011101010 | 0b01001011101010 | 0b00101011101010 | 0b01101011101010 | 0b00011011101010 | 0b01011011101010 | 0b00111011101010 | 0b01111011101010 | 0b00000111101010 | 0b01000111101010 | 0b00100111101010 | 0b01100111101010 | 0b00010111101010 | 0b01010111101010 | 0b00110111101010 | 0b01110111101010 | 0b00001111101010 | 0b01001111101010 | 0b00101111101010 | 0b01101111101010 | 0b00011111101010 | 0b01011111101010 | 0b00111111101010 | 0b01111111101010 | 0b00000000011010 | 0b01000000011010 | 0b00100000011010 | 0b01100000011010 | 0b00010000011010 | 0b01010000011010 | 0b00110000011010 | 0b01110000011010 | 0b00001000011010 | 0b01001000011010 | 0b00101000011010 | 0b01101000011010 | 0b00011000011010 | 0b01011000011010 | 0b00111000011010 | 0b01111000011010 | 0b00000100011010 | 0b01000100011010 | 0b00100100011010 | 0b01100100011010 | 0b00010100011010 | 0b01010100011010 | 0b00110100011010 | 0b01110100011010 | 0b00001100011010 | 0b01001100011010 | 0b00101100011010 | 0b01101100011010 | 0b00011100011010 | 0b01011100011010 | 0b00111100011010 | 0b01111100011010 | 0b00000010011010 | 0b01000010011010 | 0b00100010011010 | 0b01100010011010 | 0b00010010011010 | 0b01010010011010 | 0b00110010011010 | 0b01110010011010 | 0b00001010011010 | 0b01001010011010 | 0b00101010011010 | 0b01101010011010 | 0b00011010011010 | 0b01011010011010 | 0b00111010011010 | 0b01111010011010 | 0b00000110011010 | 0b01000110011010 | 0b00100110011010 | 0b01100110011010 | 0b00010110011010 | 0b01010110011010 | 0b00110110011010 | 0b01110110011010 | 0b00001110011010 | 0b01001110011010 | 0b00101110011010 | 0b01101110011010 | 0b00011110011010 | 0b01011110011010 | 0b00111110011010 | 0b01111110011010 | 0b00000001011010 | 0b01000001011010 | 0b00100001011010 | 0b01100001011010 | 0b00010001011010 | 0b01010001011010 | 0b00110001011010 | 0b01110001011010 | 0b00001001011010 | 0b01001001011010 | 0b00101001011010 | 0b01101001011010 | 0b00011001011010 | 0b01011001011010 | 0b00111001011010 | 0b01111001011010 | 0b00000101011010 | 0b01000101011010 | 0b00100101011010 | 0b01100101011010 | 0b00010101011010 | 0b01010101011010 | 0b00110101011010 | 0b01110101011010 | 0b00001101011010 | 0b01001101011010 | 0b00101101011010 | 0b01101101011010 | 0b00011101011010 | 0b01011101011010 | 0b00111101011010 | 0b01111101011010 | 0b00000011011010 | 0b01000011011010 | 0b00100011011010 | 0b01100011011010 | 0b00010011011010 | 0b01010011011010 | 0b00110011011010 | 0b01110011011010 | 0b00001011011010 | 0b01001011011010 | 0b00101011011010 | 0b01101011011010 | 0b00011011011010 | 0b01011011011010 | 0b00111011011010 | 0b01111011011010 | 0b00000111011010 | 0b01000111011010 | 0b00100111011010 | 0b01100111011010 | 0b00010111011010 | 0b01010111011010 | 0b00110111011010 | 0b01110111011010 | 0b00001111011010 | 0b01001111011010 | 0b00101111011010 | 0b01101111011010 | 0b00011111011010 | 0b01011111011010 | 0b00111111011010 | 0b01111111011010 | 0b00000000111010 | 0b01000000111010 | 0b00100000111010 | 0b01100000111010 | 0b00010000111010 | 0b01010000111010 | 0b00110000111010 | 0b01110000111010 | 0b00001000111010 | 0b01001000111010 | 0b00101000111010 | 0b01101000111010 | 0b00011000111010 | 0b01011000111010 | 0b00111000111010 | 0b01111000111010 | 0b00000100111010 | 0b01000100111010 | 0b00100100111010 | 0b01100100111010 | 0b00010100111010 | 0b01010100111010 | 0b00110100111010 | 0b01110100111010 | 0b00001100111010 | 0b01001100111010 | 0b00101100111010 | 0b01101100111010 | 0b00011100111010 | 0b01011100111010 | 0b00111100111010 | 0b01111100111010 | 0b00000010111010 | 0b01000010111010 | 0b00100010111010 | 0b01100010111010 | 0b00010010111010 | 0b01010010111010 | 0b00110010111010 | 0b01110010111010 | 0b00001010111010 | 0b01001010111010 | 0b00101010111010 | 0b01101010111010 | 0b00011010111010 | 0b01011010111010 | 0b00111010111010 | 0b01111010111010 | 0b00000110111010 | 0b01000110111010 | 0b00100110111010 | 0b01100110111010 | 0b00010110111010 | 0b01010110111010 | 0b00110110111010 | 0b01110110111010 | 0b00001110111010 | 0b01001110111010 | 0b00101110111010 | 0b01101110111010 | 0b00011110111010 | 0b01011110111010 | 0b00111110111010 | 0b01111110111010 | 0b00000001111010 | 0b01000001111010 | 0b00100001111010 | 0b01100001111010 | 0b00010001111010 | 0b01010001111010 | 0b00110001111010 | 0b01110001111010 | 0b00001001111010 | 0b01001001111010 | 0b00101001111010 | 0b01101001111010 | 0b00011001111010 | 0b01011001111010 | 0b00111001111010 | 0b01111001111010 | 0b00000101111010 | 0b01000101111010 | 0b00100101111010 | 0b01100101111010 | 0b00010101111010 | 0b01010101111010 | 0b00110101111010 | 0b01110101111010 | 0b00001101111010 | 0b01001101111010 | 0b00101101111010 | 0b01101101111010 | 0b00011101111010 | 0b01011101111010 | 0b00111101111010 | 0b01111101111010 | 0b00000011111010 | 0b01000011111010 | 0b00100011111010 | 0b01100011111010 | 0b00010011111010 | 0b01010011111010 | 0b00110011111010 | 0b01110011111010 | 0b00001011111010 | 0b01001011111010 | 0b00101011111010 | 0b01101011111010 | 0b00011011111010 | 0b01011011111010 | 0b00111011111010 | 0b01111011111010 | 0b00000111111010 | 0b01000111111010 | 0b00100111111010 | 0b01100111111010 | 0b00010111111010 | 0b01010111111010 | 0b00110111111010 | 0b01110111111010 | 0b00001111111010 | 0b01001111111010 | 0b00101111111010 | 0b01101111111010 | 0b00011111111010 | 0b01011111111010 | 0b00111111111010 | 0b01111111111010 | 0b00000000000110 | 0b01000000000110 | 0b00100000000110 | 0b01100000000110 | 0b00010000000110 | 0b01010000000110 | 0b00110000000110 | 0b01110000000110 | 0b00001000000110 | 0b01001000000110 | 0b00101000000110 | 0b01101000000110 | 0b00011000000110 | 0b01011000000110 | 0b00111000000110 | 0b01111000000110 | 0b00000100000110 | 0b01000100000110 | 0b00100100000110 | 0b01100100000110 | 0b00010100000110 | 0b01010100000110 | 0b00110100000110 | 0b01110100000110 | 0b00001100000110 | 0b01001100000110 | 0b00101100000110 | 0b01101100000110 | 0b00011100000110 | 0b01011100000110 | 0b00111100000110 | 0b01111100000110 | 0b00000010000110 | 0b01000010000110 | 0b00100010000110 | 0b01100010000110 | 0b00010010000110 | 0b01010010000110 | 0b00110010000110 | 0b01110010000110 | 0b00001010000110 | 0b01001010000110 | 0b00101010000110 | 0b01101010000110 | 0b00011010000110 | 0b01011010000110 | 0b00111010000110 | 0b01111010000110 | 0b00000110000110 | 0b01000110000110 | 0b00100110000110 | 0b01100110000110 | 0b00010110000110 | 0b01010110000110 | 0b00110110000110 | 0b01110110000110 | 0b00001110000110 | 0b01001110000110 | 0b00101110000110 | 0b01101110000110 | 0b00011110000110 | 0b01011110000110 | 0b00111110000110 | 0b01111110000110 | 0b00000001000110 | 0b01000001000110 | 0b00100001000110 | 0b01100001000110 | 0b00010001000110 | 0b01010001000110 | 0b00110001000110 | 0b01110001000110 | 0b00001001000110 | 0b01001001000110 | 0b00101001000110 | 0b01101001000110 | 0b00011001000110 | 0b01011001000110 | 0b00111001000110 | 0b01111001000110 | 0b00000101000110 | 0b01000101000110 | 0b00100101000110 | 0b01100101000110 | 0b00010101000110 | 0b01010101000110 | 0b00110101000110 | 0b01110101000110 | 0b00001101000110 | 0b01001101000110 | 0b00101101000110 | 0b01101101000110 | 0b00011101000110 | 0b01011101000110 | 0b00111101000110 | 0b01111101000110 | 0b00000011000110 | 0b01000011000110 | 0b00100011000110 | 0b01100011000110 | 0b00010011000110 | 0b01010011000110 | 0b00110011000110 | 0b01110011000110 | 0b00001011000110 | 0b01001011000110 | 0b00101011000110 | 0b01101011000110 | 0b00011011000110 | 0b01011011000110 | 0b00111011000110 | 0b01111011000110 | 0b00000111000110 | 0b01000111000110 | 0b00100111000110 | 0b01100111000110 | 0b00010111000110 | 0b01010111000110 | 0b00110111000110 | 0b01110111000110 | 0b00001111000110 | 0b01001111000110 | 0b00101111000110 | 0b01101111000110 | 0b00011111000110 | 0b01011111000110 | 0b00111111000110 | 0b01111111000110 | 0b00000000100110 | 0b01000000100110 | 0b00100000100110 | 0b01100000100110 | 0b00010000100110 | 0b01010000100110 | 0b00110000100110 | 0b01110000100110 | 0b00001000100110 | 0b01001000100110 | 0b00101000100110 | 0b01101000100110 | 0b00011000100110 | 0b01011000100110 | 0b00111000100110 | 0b01111000100110 | 0b00000100100110 | 0b01000100100110 | 0b00100100100110 | 0b01100100100110 | 0b00010100100110 | 0b01010100100110 | 0b00110100100110 | 0b01110100100110 | 0b00001100100110 | 0b01001100100110 | 0b00101100100110 | 0b01101100100110 | 0b00011100100110 | 0b01011100100110 | 0b00111100100110 | 0b01111100100110 | 0b00000010100110 | 0b01000010100110 | 0b00100010100110 | 0b01100010100110 | 0b00010010100110 | 0b01010010100110 | 0b00110010100110 | 0b01110010100110 | 0b00001010100110 | 0b01001010100110 | 0b00101010100110 | 0b01101010100110 | 0b00011010100110 | 0b01011010100110 | 0b00111010100110 | 0b01111010100110 | 0b00000110100110 | 0b01000110100110 | 0b00100110100110 | 0b01100110100110 | 0b00010110100110 | 0b01010110100110 | 0b00110110100110 | 0b01110110100110 | 0b00001110100110 | 0b01001110100110 | 0b00101110100110 | 0b01101110100110 | 0b00011110100110 | 0b01011110100110 | 0b00111110100110 | 0b01111110100110 | 0b00000001100110 | 0b01000001100110 | 0b00100001100110 | 0b01100001100110 | 0b00010001100110 | 0b01010001100110 | 0b00110001100110 | 0b01110001100110 | 0b00001001100110 | 0b01001001100110 | 0b00101001100110 | 0b01101001100110 | 0b00011001100110 | 0b01011001100110 | 0b00111001100110 | 0b01111001100110 | 0b00000101100110 | 0b01000101100110 | 0b00100101100110 | 0b01100101100110 | 0b00010101100110 | 0b01010101100110 | 0b00110101100110 | 0b01110101100110 | 0b00001101100110 | 0b01001101100110 | 0b00101101100110 | 0b01101101100110 | 0b00011101100110 | 0b01011101100110 | 0b00111101100110 | 0b01111101100110 | 0b00000011100110 | 0b01000011100110 | 0b00100011100110 | 0b01100011100110 | 0b00010011100110 | 0b01010011100110 | 0b00110011100110 | 0b01110011100110 | 0b00001011100110 | 0b01001011100110 | 0b00101011100110 | 0b01101011100110 | 0b00011011100110 | 0b01011011100110 | 0b00111011100110 | 0b01111011100110 | 0b00000111100110 | 0b01000111100110 | 0b00100111100110 | 0b01100111100110 | 0b00010111100110 | 0b01010111100110 | 0b00110111100110 | 0b01110111100110 | 0b00001111100110 | 0b01001111100110 | 0b00101111100110 | 0b01101111100110 | 0b00011111100110 | 0b01011111100110 | 0b00111111100110 | 0b01111111100110 | 0b00000000010110 | 0b01000000010110 | 0b00100000010110 | 0b01100000010110 | 0b00010000010110 | 0b01010000010110 | 0b00110000010110 | 0b01110000010110 | 0b00001000010110 | 0b01001000010110 | 0b00101000010110 | 0b01101000010110 | 0b00011000010110 | 0b01011000010110 | 0b00111000010110 | 0b01111000010110 | 0b00000100010110 | 0b01000100010110 | 0b00100100010110 | 0b01100100010110 | 0b00010100010110 | 0b01010100010110 | 0b00110100010110 | 0b01110100010110 | 0b00001100010110 | 0b01001100010110 | 0b00101100010110 | 0b01101100010110 | 0b00011100010110 | 0b01011100010110 | 0b00111100010110 | 0b01111100010110 | 0b00000010010110 | 0b01000010010110 | 0b00100010010110 | 0b01100010010110 | 0b00010010010110 | 0b01010010010110 | 0b00110010010110 | 0b01110010010110 | 0b00001010010110 | 0b01001010010110 | 0b00101010010110 | 0b01101010010110 | 0b00011010010110 | 0b01011010010110 | 0b00111010010110 | 0b01111010010110 | 0b00000110010110 | 0b01000110010110 | 0b00100110010110 | 0b01100110010110 | 0b00010110010110 | 0b01010110010110 | 0b00110110010110 | 0b01110110010110 | 0b00001110010110 | 0b01001110010110 | 0b00101110010110 | 0b01101110010110 | 0b00011110010110 | 0b01011110010110 | 0b00111110010110 | 0b01111110010110 | 0b00000001010110 | 0b01000001010110 | 0b00100001010110 | 0b01100001010110 | 0b00010001010110 | 0b01010001010110 | 0b00110001010110 | 0b01110001010110 | 0b00001001010110 | 0b01001001010110 | 0b00101001010110 | 0b01101001010110 | 0b00011001010110 | 0b01011001010110 | 0b00111001010110 | 0b01111001010110 | 0b00000101010110 | 0b01000101010110 | 0b00100101010110 | 0b01100101010110 | 0b00010101010110 | 0b01010101010110 | 0b00110101010110 | 0b01110101010110 | 0b00001101010110 | 0b01001101010110 | 0b00101101010110 | 0b01101101010110 | 0b00011101010110 | 0b01011101010110 | 0b00111101010110 | 0b01111101010110 | 0b00000011010110 | 0b01000011010110 | 0b00100011010110 | 0b01100011010110 | 0b00010011010110 | 0b01010011010110 | 0b00110011010110 | 0b01110011010110 | 0b00001011010110 | 0b01001011010110 | 0b00101011010110 | 0b01101011010110 | 0b00011011010110 | 0b01011011010110 | 0b00111011010110 | 0b01111011010110 | 0b00000111010110 | 0b01000111010110 | 0b00100111010110 | 0b01100111010110 | 0b00010111010110 | 0b01010111010110 | 0b00110111010110 | 0b01110111010110 | 0b00001111010110 | 0b01001111010110 | 0b00101111010110 | 0b01101111010110 | 0b00011111010110 | 0b01011111010110 | 0b00111111010110 | 0b01111111010110 | 0b00000000110110 | 0b01000000110110 | 0b00100000110110 | 0b01100000110110 | 0b00010000110110 | 0b01010000110110 | 0b00110000110110 | 0b01110000110110 | 0b00001000110110 | 0b01001000110110 | 0b00101000110110 | 0b01101000110110 | 0b00011000110110 | 0b01011000110110 | 0b00111000110110 | 0b01111000110110 | 0b00000100110110 | 0b01000100110110 | 0b00100100110110 | 0b01100100110110 | 0b00010100110110 | 0b01010100110110 | 0b00110100110110 | 0b01110100110110 | 0b00001100110110 | 0b01001100110110 | 0b00101100110110 | 0b01101100110110 | 0b00011100110110 | 0b01011100110110 | 0b00111100110110 | 0b01111100110110 | 0b00000010110110 | 0b01000010110110 | 0b00100010110110 | 0b01100010110110 | 0b00010010110110 | 0b01010010110110 | 0b00110010110110 | 0b01110010110110 | 0b00001010110110 | 0b01001010110110 | 0b00101010110110 | 0b01101010110110 | 0b00011010110110 | 0b01011010110110 | 0b00111010110110 | 0b01111010110110 | 0b00000110110110 | 0b01000110110110 | 0b00100110110110 | 0b01100110110110 | 0b00010110110110 | 0b01010110110110 | 0b00110110110110 | 0b01110110110110 | 0b00001110110110 | 0b01001110110110 | 0b00101110110110 | 0b01101110110110 | 0b00011110110110 | 0b01011110110110 | 0b00111110110110 | 0b01111110110110 | 0b00000001110110 | 0b01000001110110 | 0b00100001110110 | 0b01100001110110 | 0b00010001110110 | 0b01010001110110 | 0b00110001110110 | 0b01110001110110 | 0b00001001110110 | 0b01001001110110 | 0b00101001110110 | 0b01101001110110 | 0b00011001110110 | 0b01011001110110 | 0b00111001110110 | 0b01111001110110 | 0b00000101110110 | 0b01000101110110 | 0b00100101110110 | 0b01100101110110 | 0b00010101110110 | 0b01010101110110 | 0b00110101110110 | 0b01110101110110 | 0b00001101110110 | 0b01001101110110 | 0b00101101110110 | 0b01101101110110 | 0b00011101110110 | 0b01011101110110 | 0b00111101110110 | 0b01111101110110 | 0b00000011110110 | 0b01000011110110 | 0b00100011110110 | 0b01100011110110 | 0b00010011110110 | 0b01010011110110 | 0b00110011110110 | 0b01110011110110 | 0b00001011110110 | 0b01001011110110 | 0b00101011110110 | 0b01101011110110 | 0b00011011110110 | 0b01011011110110 | 0b00111011110110 | 0b01111011110110 | 0b00000111110110 | 0b01000111110110 | 0b00100111110110 | 0b01100111110110 | 0b00010111110110 | 0b01010111110110 | 0b00110111110110 | 0b01110111110110 | 0b00001111110110 | 0b01001111110110 | 0b00101111110110 | 0b01101111110110 | 0b00011111110110 | 0b01011111110110 | 0b00111111110110 | 0b01111111110110 | 0b00000000001110 | 0b01000000001110 | 0b00100000001110 | 0b01100000001110 | 0b00010000001110 | 0b01010000001110 | 0b00110000001110 | 0b01110000001110 | 0b00001000001110 | 0b01001000001110 | 0b00101000001110 | 0b01101000001110 | 0b00011000001110 | 0b01011000001110 | 0b00111000001110 | 0b01111000001110 | 0b00000100001110 | 0b01000100001110 | 0b00100100001110 | 0b01100100001110 | 0b00010100001110 | 0b01010100001110 | 0b00110100001110 | 0b01110100001110 | 0b00001100001110 | 0b01001100001110 | 0b00101100001110 | 0b01101100001110 | 0b00011100001110 | 0b01011100001110 | 0b00111100001110 | 0b01111100001110 | 0b00000010001110 | 0b01000010001110 | 0b00100010001110 | 0b01100010001110 | 0b00010010001110 | 0b01010010001110 | 0b00110010001110 | 0b01110010001110 | 0b00001010001110 | 0b01001010001110 | 0b00101010001110 | 0b01101010001110 | 0b00011010001110 | 0b01011010001110 | 0b00111010001110 | 0b01111010001110 | 0b00000110001110 | 0b01000110001110 | 0b00100110001110 | 0b01100110001110 | 0b00010110001110 | 0b01010110001110 | 0b00110110001110 | 0b01110110001110 | 0b00001110001110 | 0b01001110001110 | 0b00101110001110 | 0b01101110001110 | 0b00011110001110 | 0b01011110001110 | 0b00111110001110 | 0b01111110001110 | 0b00000001001110 | 0b01000001001110 | 0b00100001001110 | 0b01100001001110 | 0b00010001001110 | 0b01010001001110 | 0b00110001001110 | 0b01110001001110 | 0b00001001001110 | 0b01001001001110 | 0b00101001001110 | 0b01101001001110 | 0b00011001001110 | 0b01011001001110 | 0b00111001001110 | 0b01111001001110 | 0b00000101001110 | 0b01000101001110 | 0b00100101001110 | 0b01100101001110 | 0b00010101001110 | 0b01010101001110 | 0b00110101001110 | 0b01110101001110 | 0b00001101001110 | 0b01001101001110 | 0b00101101001110 | 0b01101101001110 | 0b00011101001110 | 0b01011101001110 | 0b00111101001110 | 0b01111101001110 | 0b00000011001110 | 0b01000011001110 | 0b00100011001110 | 0b01100011001110 | 0b00010011001110 | 0b01010011001110 | 0b00110011001110 | 0b01110011001110 | 0b00001011001110 | 0b01001011001110 | 0b00101011001110 | 0b01101011001110 | 0b00011011001110 | 0b01011011001110 | 0b00111011001110 | 0b01111011001110 | 0b00000111001110 | 0b01000111001110 | 0b00100111001110 | 0b01100111001110 | 0b00010111001110 | 0b01010111001110 | 0b00110111001110 | 0b01110111001110 | 0b00001111001110 | 0b01001111001110 | 0b00101111001110 | 0b01101111001110 | 0b00011111001110 | 0b01011111001110 | 0b00111111001110 | 0b01111111001110 | 0b00000000101110 | 0b01000000101110 | 0b00100000101110 | 0b01100000101110 | 0b00010000101110 | 0b01010000101110 | 0b00110000101110 | 0b01110000101110 | 0b00001000101110 | 0b01001000101110 | 0b00101000101110 | 0b01101000101110 | 0b00011000101110 | 0b01011000101110 | 0b00111000101110 | 0b01111000101110 | 0b00000100101110 | 0b01000100101110 | 0b00100100101110 | 0b01100100101110 | 0b00010100101110 | 0b01010100101110 | 0b00110100101110 | 0b01110100101110 | 0b00001100101110 | 0b01001100101110 | 0b00101100101110 | 0b01101100101110 | 0b00011100101110 | 0b01011100101110 | 0b00111100101110 | 0b01111100101110 | 0b00000010101110 | 0b01000010101110 | 0b00100010101110 | 0b01100010101110 | 0b00010010101110 | 0b01010010101110 | 0b00110010101110 | 0b01110010101110 | 0b00001010101110 | 0b01001010101110 | 0b00101010101110 | 0b01101010101110 | 0b00011010101110 | 0b01011010101110 | 0b00111010101110 | 0b01111010101110 | 0b00000110101110 | 0b01000110101110 | 0b00100110101110 | 0b01100110101110 | 0b00010110101110 | 0b01010110101110 | 0b00110110101110 | 0b01110110101110 | 0b00001110101110 | 0b01001110101110 | 0b00101110101110 | 0b01101110101110 | 0b00011110101110 | 0b01011110101110 | 0b00111110101110 | 0b01111110101110 | 0b00000001101110 | 0b01000001101110 | 0b00100001101110 | 0b01100001101110 | 0b00010001101110 | 0b01010001101110 | 0b00110001101110 | 0b01110001101110 | 0b00001001101110 | 0b01001001101110 | 0b00101001101110 | 0b01101001101110 | 0b00011001101110 | 0b01011001101110 | 0b00111001101110 | 0b01111001101110 | 0b00000101101110 | 0b01000101101110 | 0b00100101101110 | 0b01100101101110 | 0b00010101101110 | 0b01010101101110 | 0b00110101101110 | 0b01110101101110 | 0b00001101101110 | 0b01001101101110 | 0b00101101101110 | 0b01101101101110 | 0b00011101101110 | 0b01011101101110 | 0b00111101101110 | 0b01111101101110 | 0b00000011101110 | 0b01000011101110 | 0b00100011101110 | 0b01100011101110 | 0b00010011101110 | 0b01010011101110 | 0b00110011101110 | 0b01110011101110 | 0b00001011101110 | 0b01001011101110 | 0b00101011101110 | 0b01101011101110 | 0b00011011101110 | 0b01011011101110 | 0b00111011101110 | 0b01111011101110 | 0b00000111101110 | 0b01000111101110 | 0b00100111101110 | 0b01100111101110 | 0b00010111101110 | 0b01010111101110 | 0b00110111101110 | 0b01110111101110 | 0b00001111101110 | 0b01001111101110 | 0b00101111101110 | 0b01101111101110 | 0b00011111101110 | 0b01011111101110 | 0b00111111101110 | 0b01111111101110 | 0b00000000011110 | 0b01000000011110 | 0b00100000011110 | 0b01100000011110 | 0b00010000011110 | 0b01010000011110 | 0b00110000011110 | 0b01110000011110 | 0b00001000011110 | 0b01001000011110 | 0b00101000011110 | 0b01101000011110 | 0b00011000011110 | 0b01011000011110 | 0b00111000011110 | 0b01111000011110 | 0b00000100011110 | 0b01000100011110 | 0b00100100011110 | 0b01100100011110 | 0b00010100011110 | 0b01010100011110 | 0b00110100011110 | 0b01110100011110 | 0b00001100011110 | 0b01001100011110 | 0b00101100011110 | 0b01101100011110 | 0b00011100011110 | 0b01011100011110 | 0b00111100011110 | 0b01111100011110 | 0b00000010011110 | 0b01000010011110 | 0b00100010011110 | 0b01100010011110 | 0b00010010011110 | 0b01010010011110 | 0b00110010011110 | 0b01110010011110 | 0b00001010011110 | 0b01001010011110 | 0b00101010011110 | 0b01101010011110 | 0b00011010011110 | 0b01011010011110 | 0b00111010011110 | 0b01111010011110 | 0b00000110011110 | 0b01000110011110 | 0b00100110011110 | 0b01100110011110 | 0b00010110011110 | 0b01010110011110 | 0b00110110011110 | 0b01110110011110 | 0b00001110011110 | 0b01001110011110 | 0b00101110011110 | 0b01101110011110 | 0b00011110011110 | 0b01011110011110 | 0b00111110011110 | 0b01111110011110 | 0b00000001011110 | 0b01000001011110 | 0b00100001011110 | 0b01100001011110 | 0b00010001011110 | 0b01010001011110 | 0b00110001011110 | 0b01110001011110 | 0b00001001011110 | 0b01001001011110 | 0b00101001011110 | 0b01101001011110 | 0b00011001011110 | 0b01011001011110 | 0b00111001011110 | 0b01111001011110 | 0b00000101011110 | 0b01000101011110 | 0b00100101011110 | 0b01100101011110 | 0b00010101011110 | 0b01010101011110 | 0b00110101011110 | 0b01110101011110 | 0b00001101011110 | 0b01001101011110 | 0b00101101011110 | 0b01101101011110 | 0b00011101011110 | 0b01011101011110 | 0b00111101011110 | 0b01111101011110 | 0b00000011011110 | 0b01000011011110 | 0b00100011011110 | 0b01100011011110 | 0b00010011011110 | 0b01010011011110 | 0b00110011011110 | 0b01110011011110 | 0b00001011011110 | 0b01001011011110 | 0b00101011011110 | 0b01101011011110 | 0b00011011011110 | 0b01011011011110 | 0b00111011011110 | 0b01111011011110 | 0b00000111011110 | 0b01000111011110 | 0b00100111011110 | 0b01100111011110 | 0b00010111011110 | 0b01010111011110 | 0b00110111011110 | 0b01110111011110 | 0b00001111011110 | 0b01001111011110 | 0b00101111011110 | 0b01101111011110 | 0b00011111011110 | 0b01011111011110 | 0b00111111011110 | 0b01111111011110 | 0b00000000111110 | 0b01000000111110 | 0b00100000111110 | 0b01100000111110 | 0b00010000111110 | 0b01010000111110 | 0b00110000111110 | 0b01110000111110 | 0b00001000111110 | 0b01001000111110 | 0b00101000111110 | 0b01101000111110 | 0b00011000111110 | 0b01011000111110 | 0b00111000111110 | 0b01111000111110 | 0b00000100111110 | 0b01000100111110 | 0b00100100111110 | 0b01100100111110 | 0b00010100111110 | 0b01010100111110 | 0b00110100111110 | 0b01110100111110 | 0b00001100111110 | 0b01001100111110 | 0b00101100111110 | 0b01101100111110 | 0b00011100111110 | 0b01011100111110 | 0b00111100111110 | 0b01111100111110 | 0b00000010111110 | 0b01000010111110 | 0b00100010111110 | 0b01100010111110 | 0b00010010111110 | 0b01010010111110 | 0b00110010111110 | 0b01110010111110 | 0b00001010111110 | 0b01001010111110 | 0b00101010111110 | 0b01101010111110 | 0b00011010111110 | 0b01011010111110 | 0b00111010111110 | 0b01111010111110 | 0b00000110111110 | 0b01000110111110 | 0b00100110111110 | 0b01100110111110 | 0b00010110111110 | 0b01010110111110 | 0b00110110111110 | 0b01110110111110 | 0b00001110111110 | 0b01001110111110 | 0b00101110111110 | 0b01101110111110 | 0b00011110111110 | 0b01011110111110 | 0b00111110111110 | 0b01111110111110 | 0b00000001111110 | 0b01000001111110 | 0b00100001111110 | 0b01100001111110 | 0b00010001111110 | 0b01010001111110 | 0b00110001111110 | 0b01110001111110 | 0b00001001111110 | 0b01001001111110 | 0b00101001111110 | 0b01101001111110 | 0b00011001111110 | 0b01011001111110 | 0b00111001111110 | 0b01111001111110 | 0b00000101111110 | 0b01000101111110 | 0b00100101111110 | 0b01100101111110 | 0b00010101111110 | 0b01010101111110 | 0b00110101111110 | 0b01110101111110 | 0b00001101111110 | 0b01001101111110 | 0b00101101111110 | 0b01101101111110 | 0b00011101111110 | 0b01011101111110 | 0b00111101111110 | 0b01111101111110 | 0b00000011111110 | 0b01000011111110 | 0b00100011111110 | 0b01100011111110 | 0b00010011111110 | 0b01010011111110 | 0b00110011111110 | 0b01110011111110 | 0b00001011111110 | 0b01001011111110 | 0b00101011111110 | 0b01101011111110 | 0b00011011111110 | 0b01011011111110 | 0b00111011111110 | 0b01111011111110 | 0b00000111111110 | 0b01000111111110 | 0b00100111111110 | 0b01100111111110 | 0b00010111111110 | 0b01010111111110 | 0b00110111111110 | 0b01110111111110 | 0b00001111111110 | 0b01001111111110 | 0b00101111111110 | 0b01101111111110 | 0b00011111111110 | 0b01011111111110 | 0b00111111111110 | 0b01111111111110 | 0b00000000000001 | 0b01000000000001 | 0b00100000000001 | 0b01100000000001 | 0b00010000000001 | 0b01010000000001 | 0b00110000000001 | 0b01110000000001 | 0b00001000000001 | 0b01001000000001 | 0b00101000000001 | 0b01101000000001 | 0b00011000000001 | 0b01011000000001 | 0b00111000000001 | 0b01111000000001 | 0b00000100000001 | 0b01000100000001 | 0b00100100000001 | 0b01100100000001 | 0b00010100000001 | 0b01010100000001 | 0b00110100000001 | 0b01110100000001 | 0b00001100000001 | 0b01001100000001 | 0b00101100000001 | 0b01101100000001 | 0b00011100000001 | 0b01011100000001 | 0b00111100000001 | 0b01111100000001 | 0b00000010000001 | 0b01000010000001 | 0b00100010000001 | 0b01100010000001 | 0b00010010000001 | 0b01010010000001 | 0b00110010000001 | 0b01110010000001 | 0b00001010000001 | 0b01001010000001 | 0b00101010000001 | 0b01101010000001 | 0b00011010000001 | 0b01011010000001 | 0b00111010000001 | 0b01111010000001 | 0b00000110000001 | 0b01000110000001 | 0b00100110000001 | 0b01100110000001 | 0b00010110000001 | 0b01010110000001 | 0b00110110000001 | 0b01110110000001 | 0b00001110000001 | 0b01001110000001 | 0b00101110000001 | 0b01101110000001 | 0b00011110000001 | 0b01011110000001 | 0b00111110000001 | 0b01111110000001 | 0b00000001000001 | 0b01000001000001 | 0b00100001000001 | 0b01100001000001 | 0b00010001000001 | 0b01010001000001 | 0b00110001000001 | 0b01110001000001 | 0b00001001000001 | 0b01001001000001 | 0b00101001000001 | 0b01101001000001 | 0b00011001000001 | 0b01011001000001 | 0b00111001000001 | 0b01111001000001 | 0b00000101000001 | 0b01000101000001 | 0b00100101000001 | 0b01100101000001 | 0b00010101000001 | 0b01010101000001 | 0b00110101000001 | 0b01110101000001 | 0b00001101000001 | 0b01001101000001 | 0b00101101000001 | 0b01101101000001 | 0b00011101000001 | 0b01011101000001 | 0b00111101000001 | 0b01111101000001 | 0b00000011000001 | 0b01000011000001 | 0b00100011000001 | 0b01100011000001 | 0b00010011000001 | 0b01010011000001 | 0b00110011000001 | 0b01110011000001 | 0b00001011000001 | 0b01001011000001 | 0b00101011000001 | 0b01101011000001 | 0b00011011000001 | 0b01011011000001 | 0b00111011000001 | 0b01111011000001 | 0b00000111000001 | 0b01000111000001 | 0b00100111000001 | 0b01100111000001 | 0b00010111000001 | 0b01010111000001 | 0b00110111000001 | 0b01110111000001 | 0b00001111000001 | 0b01001111000001 | 0b00101111000001 | 0b01101111000001 | 0b00011111000001 | 0b01011111000001 | 0b00111111000001 | 0b01111111000001 | 0b00000000100001 | 0b01000000100001 | 0b00100000100001 | 0b01100000100001 | 0b00010000100001 | 0b01010000100001 | 0b00110000100001 | 0b01110000100001 | 0b00001000100001 | 0b01001000100001 | 0b00101000100001 | 0b01101000100001 | 0b00011000100001 | 0b01011000100001 | 0b00111000100001 | 0b01111000100001 | 0b00000100100001 | 0b01000100100001 | 0b00100100100001 | 0b01100100100001 | 0b00010100100001 | 0b01010100100001 | 0b00110100100001 | 0b01110100100001 | 0b00001100100001 | 0b01001100100001 | 0b00101100100001 | 0b01101100100001 | 0b00011100100001 | 0b01011100100001 | 0b00111100100001 | 0b01111100100001 | 0b00000010100001 | 0b01000010100001 | 0b00100010100001 | 0b01100010100001 | 0b00010010100001 | 0b01010010100001 | 0b00110010100001 | 0b01110010100001 | 0b00001010100001 | 0b01001010100001 | 0b00101010100001 | 0b01101010100001 | 0b00011010100001 | 0b01011010100001 | 0b00111010100001 | 0b01111010100001 | 0b00000110100001 | 0b01000110100001 | 0b00100110100001 | 0b01100110100001 | 0b00010110100001 | 0b01010110100001 | 0b00110110100001 | 0b01110110100001 | 0b00001110100001 | 0b01001110100001 | 0b00101110100001 | 0b01101110100001 | 0b00011110100001 | 0b01011110100001 | 0b00111110100001 | 0b01111110100001 | 0b00000001100001 | 0b01000001100001 | 0b00100001100001 | 0b01100001100001 | 0b00010001100001 | 0b01010001100001 | 0b00110001100001 | 0b01110001100001 | 0b00001001100001 | 0b01001001100001 | 0b00101001100001 | 0b01101001100001 | 0b00011001100001 | 0b01011001100001 | 0b00111001100001 | 0b01111001100001 | 0b00000101100001 | 0b01000101100001 | 0b00100101100001 | 0b01100101100001 | 0b00010101100001 | 0b01010101100001 | 0b00110101100001 | 0b01110101100001 | 0b00001101100001 | 0b01001101100001 | 0b00101101100001 | 0b01101101100001 | 0b00011101100001 | 0b01011101100001 | 0b00111101100001 | 0b01111101100001 | 0b00000011100001 | 0b01000011100001 | 0b00100011100001 | 0b01100011100001 | 0b00010011100001 | 0b01010011100001 | 0b00110011100001 | 0b01110011100001 | 0b00001011100001 | 0b01001011100001 | 0b00101011100001 | 0b01101011100001 | 0b00011011100001 | 0b01011011100001 | 0b00111011100001 | 0b01111011100001 | 0b00000111100001 | 0b01000111100001 | 0b00100111100001 | 0b01100111100001 | 0b00010111100001 | 0b01010111100001 | 0b00110111100001 | 0b01110111100001 | 0b00001111100001 | 0b01001111100001 | 0b00101111100001 | 0b01101111100001 | 0b00011111100001 | 0b01011111100001 | 0b00111111100001 | 0b01111111100001 | 0b00000000010001 | 0b01000000010001 | 0b00100000010001 | 0b01100000010001 | 0b00010000010001 | 0b01010000010001 | 0b00110000010001 | 0b01110000010001 | 0b00001000010001 | 0b01001000010001 | 0b00101000010001 | 0b01101000010001 | 0b00011000010001 | 0b01011000010001 | 0b00111000010001 | 0b01111000010001 | 0b00000100010001 | 0b01000100010001 | 0b00100100010001 | 0b01100100010001 | 0b00010100010001 | 0b01010100010001 | 0b00110100010001 | 0b01110100010001 | 0b00001100010001 | 0b01001100010001 | 0b00101100010001 | 0b01101100010001 | 0b00011100010001 | 0b01011100010001 | 0b00111100010001 | 0b01111100010001 | 0b00000010010001 | 0b01000010010001 | 0b00100010010001 | 0b01100010010001 | 0b00010010010001 | 0b01010010010001 | 0b00110010010001 | 0b01110010010001 | 0b00001010010001 | 0b01001010010001 | 0b00101010010001 | 0b01101010010001 | 0b00011010010001 | 0b01011010010001 | 0b00111010010001 | 0b01111010010001 | 0b00000110010001 | 0b01000110010001 | 0b00100110010001 | 0b01100110010001 | 0b00010110010001 | 0b01010110010001 | 0b00110110010001 | 0b01110110010001 | 0b00001110010001 | 0b01001110010001 | 0b00101110010001 | 0b01101110010001 | 0b00011110010001 | 0b01011110010001 | 0b00111110010001 | 0b01111110010001 | 0b00000001010001 | 0b01000001010001 | 0b00100001010001 | 0b01100001010001 | 0b00010001010001 | 0b01010001010001 | 0b00110001010001 | 0b01110001010001 | 0b00001001010001 | 0b01001001010001 | 0b00101001010001 | 0b01101001010001 | 0b00011001010001 | 0b01011001010001 | 0b00111001010001 | 0b01111001010001 | 0b00000101010001 | 0b01000101010001 | 0b00100101010001 | 0b01100101010001 | 0b00010101010001 | 0b01010101010001 | 0b00110101010001 | 0b01110101010001 | 0b00001101010001 | 0b01001101010001 | 0b00101101010001 | 0b01101101010001 | 0b00011101010001 | 0b01011101010001 | 0b00111101010001 | 0b01111101010001 | 0b00000011010001 | 0b01000011010001 | 0b00100011010001 | 0b01100011010001 | 0b00010011010001 | 0b01010011010001 | 0b00110011010001 | 0b01110011010001 | 0b00001011010001 | 0b01001011010001 | 0b00101011010001 | 0b01101011010001 | 0b00011011010001 | 0b01011011010001 | 0b00111011010001 | 0b01111011010001 | 0b00000111010001 | 0b01000111010001 | 0b00100111010001 | 0b01100111010001 | 0b00010111010001 | 0b01010111010001 | 0b00110111010001 | 0b01110111010001 | 0b00001111010001 | 0b01001111010001 | 0b00101111010001 | 0b01101111010001 | 0b00011111010001 | 0b01011111010001 | 0b00111111010001 | 0b01111111010001 | 0b00000000110001 | 0b01000000110001 | 0b00100000110001 | 0b01100000110001 | 0b00010000110001 | 0b01010000110001 | 0b00110000110001 | 0b01110000110001 | 0b00001000110001 | 0b01001000110001 | 0b00101000110001 | 0b01101000110001 | 0b00011000110001 | 0b01011000110001 | 0b00111000110001 | 0b01111000110001 | 0b00000100110001 | 0b01000100110001 | 0b00100100110001 | 0b01100100110001 | 0b00010100110001 | 0b01010100110001 | 0b00110100110001 | 0b01110100110001 | 0b00001100110001 | 0b01001100110001 | 0b00101100110001 | 0b01101100110001 | 0b00011100110001 | 0b01011100110001 | 0b00111100110001 | 0b01111100110001 | 0b00000010110001 | 0b01000010110001 | 0b00100010110001 | 0b01100010110001 | 0b00010010110001 | 0b01010010110001 | 0b00110010110001 | 0b01110010110001 | 0b00001010110001 | 0b01001010110001 | 0b00101010110001 | 0b01101010110001 | 0b00011010110001 | 0b01011010110001 | 0b00111010110001 | 0b01111010110001 | 0b00000110110001 | 0b01000110110001 | 0b00100110110001 | 0b01100110110001 | 0b00010110110001 | 0b01010110110001 | 0b00110110110001 | 0b01110110110001 | 0b00001110110001 | 0b01001110110001 | 0b00101110110001 | 0b01101110110001 | 0b00011110110001 | 0b01011110110001 | 0b00111110110001 | 0b01111110110001 | 0b00000001110001 | 0b01000001110001 | 0b00100001110001 | 0b01100001110001 | 0b00010001110001 | 0b01010001110001 | 0b00110001110001 | 0b01110001110001 | 0b00001001110001 | 0b01001001110001 | 0b00101001110001 | 0b01101001110001 | 0b00011001110001 | 0b01011001110001 | 0b00111001110001 | 0b01111001110001 | 0b00000101110001 | 0b01000101110001 | 0b00100101110001 | 0b01100101110001 | 0b00010101110001 | 0b01010101110001 | 0b00110101110001 | 0b01110101110001 | 0b00001101110001 | 0b01001101110001 | 0b00101101110001 | 0b01101101110001 | 0b00011101110001 | 0b01011101110001 | 0b00111101110001 | 0b01111101110001 | 0b00000011110001 | 0b01000011110001 | 0b00100011110001 | 0b01100011110001 | 0b00010011110001 | 0b01010011110001 | 0b00110011110001 | 0b01110011110001 | 0b00001011110001 | 0b01001011110001 | 0b00101011110001 | 0b01101011110001 | 0b00011011110001 | 0b01011011110001 | 0b00111011110001 | 0b01111011110001 | 0b00000111110001 | 0b01000111110001 | 0b00100111110001 | 0b01100111110001 | 0b00010111110001 | 0b01010111110001 | 0b00110111110001 | 0b01110111110001 | 0b00001111110001 | 0b01001111110001 | 0b00101111110001 | 0b01101111110001 | 0b00011111110001 | 0b01011111110001 | 0b00111111110001 | 0b01111111110001 | 0b00000000001001 | 0b01000000001001 | 0b00100000001001 | 0b01100000001001 | 0b00010000001001 | 0b01010000001001 | 0b00110000001001 | 0b01110000001001 | 0b00001000001001 | 0b01001000001001 | 0b00101000001001 | 0b01101000001001 | 0b00011000001001 | 0b01011000001001 | 0b00111000001001 | 0b01111000001001 | 0b00000100001001 | 0b01000100001001 | 0b00100100001001 | 0b01100100001001 | 0b00010100001001 | 0b01010100001001 | 0b00110100001001 | 0b01110100001001 | 0b00001100001001 | 0b01001100001001 | 0b00101100001001 | 0b01101100001001 | 0b00011100001001 | 0b01011100001001 | 0b00111100001001 | 0b01111100001001 | 0b00000010001001 | 0b01000010001001 | 0b00100010001001 | 0b01100010001001 | 0b00010010001001 | 0b01010010001001 | 0b00110010001001 | 0b01110010001001 | 0b00001010001001 | 0b01001010001001 | 0b00101010001001 | 0b01101010001001 | 0b00011010001001 | 0b01011010001001 | 0b00111010001001 | 0b01111010001001 | 0b00000110001001 | 0b01000110001001 | 0b00100110001001 | 0b01100110001001 | 0b00010110001001 | 0b01010110001001 | 0b00110110001001 | 0b01110110001001 | 0b00001110001001 | 0b01001110001001 | 0b00101110001001 | 0b01101110001001 | 0b00011110001001 | 0b01011110001001 | 0b00111110001001 | 0b01111110001001 | 0b00000001001001 | 0b01000001001001 | 0b00100001001001 | 0b01100001001001 | 0b00010001001001 | 0b01010001001001 | 0b00110001001001 | 0b01110001001001 | 0b00001001001001 | 0b01001001001001 | 0b00101001001001 | 0b01101001001001 | 0b00011001001001 | 0b01011001001001 | 0b00111001001001 | 0b01111001001001 | 0b00000101001001 | 0b01000101001001 | 0b00100101001001 | 0b01100101001001 | 0b00010101001001 | 0b01010101001001 | 0b00110101001001 | 0b01110101001001 | 0b00001101001001 | 0b01001101001001 | 0b00101101001001 | 0b01101101001001 | 0b00011101001001 | 0b01011101001001 | 0b00111101001001 | 0b01111101001001 | 0b00000011001001 | 0b01000011001001 | 0b00100011001001 | 0b01100011001001 | 0b00010011001001 | 0b01010011001001 | 0b00110011001001 | 0b01110011001001 | 0b00001011001001 | 0b01001011001001 | 0b00101011001001 | 0b01101011001001 | 0b00011011001001 | 0b01011011001001 | 0b00111011001001 | 0b01111011001001 | 0b00000111001001 | 0b01000111001001 | 0b00100111001001 | 0b01100111001001 | 0b00010111001001 | 0b01010111001001 | 0b00110111001001 | 0b01110111001001 | 0b00001111001001 | 0b01001111001001 | 0b00101111001001 | 0b01101111001001 | 0b00011111001001 | 0b01011111001001 | 0b00111111001001 | 0b01111111001001 | 0b00000000101001 | 0b01000000101001 | 0b00100000101001 | 0b01100000101001 | 0b00010000101001 | 0b01010000101001 | 0b00110000101001 | 0b01110000101001 | 0b00001000101001 | 0b01001000101001 | 0b00101000101001 | 0b01101000101001 | 0b00011000101001 | 0b01011000101001 | 0b00111000101001 | 0b01111000101001 | 0b00000100101001 | 0b01000100101001 | 0b00100100101001 | 0b01100100101001 | 0b00010100101001 | 0b01010100101001 | 0b00110100101001 | 0b01110100101001 | 0b00001100101001 | 0b01001100101001 | 0b00101100101001 | 0b01101100101001 | 0b00011100101001 | 0b01011100101001 | 0b00111100101001 | 0b01111100101001 | 0b00000010101001 | 0b01000010101001 | 0b00100010101001 | 0b01100010101001 | 0b00010010101001 | 0b01010010101001 | 0b00110010101001 | 0b01110010101001 | 0b00001010101001 | 0b01001010101001 | 0b00101010101001 | 0b01101010101001 | 0b00011010101001 | 0b01011010101001 | 0b00111010101001 | 0b01111010101001 | 0b00000110101001 | 0b01000110101001 | 0b00100110101001 | 0b01100110101001 | 0b00010110101001 | 0b01010110101001 | 0b00110110101001 | 0b01110110101001 | 0b00001110101001 | 0b01001110101001 | 0b00101110101001 | 0b01101110101001 | 0b00011110101001 | 0b01011110101001 | 0b00111110101001 | 0b01111110101001 | 0b00000001101001 | 0b01000001101001 | 0b00100001101001 | 0b01100001101001 | 0b00010001101001 | 0b01010001101001 | 0b00110001101001 | 0b01110001101001 | 0b00001001101001 | 0b01001001101001 | 0b00101001101001 | 0b01101001101001 | 0b00011001101001 | 0b01011001101001 | 0b00111001101001 | 0b01111001101001 | 0b00000101101001 | 0b01000101101001 | 0b00100101101001 | 0b01100101101001 | 0b00010101101001 | 0b01010101101001 | 0b00110101101001 | 0b01110101101001 | 0b00001101101001 | 0b01001101101001 | 0b00101101101001 | 0b01101101101001 | 0b00011101101001 | 0b01011101101001 | 0b00111101101001 | 0b01111101101001 | 0b00000011101001 | 0b01000011101001 | 0b00100011101001 | 0b01100011101001 | 0b00010011101001 | 0b01010011101001 | 0b00110011101001 | 0b01110011101001 | 0b00001011101001 | 0b01001011101001 | 0b00101011101001 | 0b01101011101001 | 0b00011011101001 | 0b01011011101001 | 0b00111011101001 | 0b01111011101001 | 0b00000111101001 | 0b01000111101001 | 0b00100111101001 | 0b01100111101001 | 0b00010111101001 | 0b01010111101001 | 0b00110111101001 | 0b01110111101001 | 0b00001111101001 | 0b01001111101001 | 0b00101111101001 | 0b01101111101001 | 0b00011111101001 | 0b01011111101001 | 0b00111111101001 | 0b01111111101001 | 0b00000000011001 | 0b01000000011001 | 0b00100000011001 | 0b01100000011001 | 0b00010000011001 | 0b01010000011001 | 0b00110000011001 | 0b01110000011001 | 0b00001000011001 | 0b01001000011001 | 0b00101000011001 | 0b01101000011001 | 0b00011000011001 | 0b01011000011001 | 0b00111000011001 | 0b01111000011001 | 0b00000100011001 | 0b01000100011001 | 0b00100100011001 | 0b01100100011001 | 0b00010100011001 | 0b01010100011001 | 0b00110100011001 | 0b01110100011001 | 0b00001100011001 | 0b01001100011001 | 0b00101100011001 | 0b01101100011001 | 0b00011100011001 | 0b01011100011001 | 0b00111100011001 | 0b01111100011001 | 0b00000010011001 | 0b01000010011001 | 0b00100010011001 | 0b01100010011001 | 0b00010010011001 | 0b01010010011001 | 0b00110010011001 | 0b01110010011001 | 0b00001010011001 | 0b01001010011001 | 0b00101010011001 | 0b01101010011001 | 0b00011010011001 | 0b01011010011001 | 0b00111010011001 | 0b01111010011001 | 0b00000110011001 | 0b01000110011001 | 0b00100110011001 | 0b01100110011001 | 0b00010110011001 | 0b01010110011001 | 0b00110110011001 | 0b01110110011001 | 0b00001110011001 | 0b01001110011001 | 0b00101110011001 | 0b01101110011001 | 0b00011110011001 | 0b01011110011001 | 0b00111110011001 | 0b01111110011001 | 0b00000001011001 | 0b01000001011001 | 0b00100001011001 | 0b01100001011001 | 0b00010001011001 | 0b01010001011001 | 0b00110001011001 | 0b01110001011001 | 0b00001001011001 | 0b01001001011001 | 0b00101001011001 | 0b01101001011001 | 0b00011001011001 | 0b01011001011001 | 0b00111001011001 | 0b01111001011001 | 0b00000101011001 | 0b01000101011001 | 0b00100101011001 | 0b01100101011001 | 0b00010101011001 | 0b01010101011001 | 0b00110101011001 | 0b01110101011001 | 0b00001101011001 | 0b01001101011001 | 0b00101101011001 | 0b01101101011001 | 0b00011101011001 | 0b01011101011001 | 0b00111101011001 | 0b01111101011001 | 0b00000011011001 | 0b01000011011001 | 0b00100011011001 | 0b01100011011001 | 0b00010011011001 | 0b01010011011001 | 0b00110011011001 | 0b01110011011001 | 0b00001011011001 | 0b01001011011001 | 0b00101011011001 | 0b01101011011001 | 0b00011011011001 | 0b01011011011001 | 0b00111011011001 | 0b01111011011001 | 0b00000111011001 | 0b01000111011001 | 0b00100111011001 | 0b01100111011001 | 0b00010111011001 | 0b01010111011001 | 0b00110111011001 | 0b01110111011001 | 0b00001111011001 | 0b01001111011001 | 0b00101111011001 | 0b01101111011001 | 0b00011111011001 | 0b01011111011001 | 0b00111111011001 | 0b01111111011001 | 0b00000000111001 | 0b01000000111001 | 0b00100000111001 | 0b01100000111001 | 0b00010000111001 | 0b01010000111001 | 0b00110000111001 | 0b01110000111001 | 0b00001000111001 | 0b01001000111001 | 0b00101000111001 | 0b01101000111001 | 0b00011000111001 | 0b01011000111001 | 0b00111000111001 | 0b01111000111001 | 0b00000100111001 | 0b01000100111001 | 0b00100100111001 | 0b01100100111001 | 0b00010100111001 | 0b01010100111001 | 0b00110100111001 | 0b01110100111001 | 0b00001100111001 | 0b01001100111001 | 0b00101100111001 | 0b01101100111001 | 0b00011100111001 | 0b01011100111001 | 0b00111100111001 | 0b01111100111001 | 0b00000010111001 | 0b01000010111001 | 0b00100010111001 | 0b01100010111001 | 0b00010010111001 | 0b01010010111001 | 0b00110010111001 | 0b01110010111001 | 0b00001010111001 | 0b01001010111001 | 0b00101010111001 | 0b01101010111001 | 0b00011010111001 | 0b01011010111001 | 0b00111010111001 | 0b01111010111001 | 0b00000110111001 | 0b01000110111001 | 0b00100110111001 | 0b01100110111001 | 0b00010110111001 | 0b01010110111001 | 0b00110110111001 | 0b01110110111001 | 0b00001110111001 | 0b01001110111001 | 0b00101110111001 | 0b01101110111001 | 0b00011110111001 | 0b01011110111001 | 0b00111110111001 | 0b01111110111001 | 0b00000001111001 | 0b01000001111001 | 0b00100001111001 | 0b01100001111001 | 0b00010001111001 | 0b01010001111001 | 0b00110001111001 | 0b01110001111001 | 0b00001001111001 | 0b01001001111001 | 0b00101001111001 | 0b01101001111001 | 0b00011001111001 | 0b01011001111001 | 0b00111001111001 | 0b01111001111001 | 0b00000101111001 | 0b01000101111001 | 0b00100101111001 | 0b01100101111001 | 0b00010101111001 | 0b01010101111001 | 0b00110101111001 | 0b01110101111001 | 0b00001101111001 | 0b01001101111001 | 0b00101101111001 | 0b01101101111001 | 0b00011101111001 | 0b01011101111001 | 0b00111101111001 | 0b01111101111001 | 0b00000011111001 | 0b01000011111001 | 0b00100011111001 | 0b01100011111001 | 0b00010011111001 | 0b01010011111001 | 0b00110011111001 | 0b01110011111001 | 0b00001011111001 | 0b01001011111001 | 0b00101011111001 | 0b01101011111001 | 0b00011011111001 | 0b01011011111001 | 0b00111011111001 | 0b01111011111001 | 0b00000111111001 | 0b01000111111001 | 0b00100111111001 | 0b01100111111001 | 0b00010111111001 | 0b01010111111001 | 0b00110111111001 | 0b01110111111001 | 0b00001111111001 | 0b01001111111001 | 0b00101111111001 | 0b01101111111001 | 0b00011111111001 | 0b01011111111001 | 0b00111111111001 | 0b01111111111001 | 0b00000000000101 | 0b01000000000101 | 0b00100000000101 | 0b01100000000101 | 0b00010000000101 | 0b01010000000101 | 0b00110000000101 | 0b01110000000101 | 0b00001000000101 | 0b01001000000101 | 0b00101000000101 | 0b01101000000101 | 0b00011000000101 | 0b01011000000101 | 0b00111000000101 | 0b01111000000101 | 0b00000100000101 | 0b01000100000101 | 0b00100100000101 | 0b01100100000101 | 0b00010100000101 | 0b01010100000101 | 0b00110100000101 | 0b01110100000101 | 0b00001100000101 | 0b01001100000101 | 0b00101100000101 | 0b01101100000101 | 0b00011100000101 | 0b01011100000101 | 0b00111100000101 | 0b01111100000101 | 0b00000010000101 | 0b01000010000101 | 0b00100010000101 | 0b01100010000101 | 0b00010010000101 | 0b01010010000101 | 0b00110010000101 | 0b01110010000101 | 0b00001010000101 | 0b01001010000101 | 0b00101010000101 | 0b01101010000101 | 0b00011010000101 | 0b01011010000101 | 0b00111010000101 | 0b01111010000101 | 0b00000110000101 | 0b01000110000101 | 0b00100110000101 | 0b01100110000101 | 0b00010110000101 | 0b01010110000101 | 0b00110110000101 | 0b01110110000101 | 0b00001110000101 | 0b01001110000101 | 0b00101110000101 | 0b01101110000101 | 0b00011110000101 | 0b01011110000101 | 0b00111110000101 | 0b01111110000101 | 0b00000001000101 | 0b01000001000101 | 0b00100001000101 | 0b01100001000101 | 0b00010001000101 | 0b01010001000101 | 0b00110001000101 | 0b01110001000101 | 0b00001001000101 | 0b01001001000101 | 0b00101001000101 | 0b01101001000101 | 0b00011001000101 | 0b01011001000101 | 0b00111001000101 | 0b01111001000101 | 0b00000101000101 | 0b01000101000101 | 0b00100101000101 | 0b01100101000101 | 0b00010101000101 | 0b01010101000101 | 0b00110101000101 | 0b01110101000101 | 0b00001101000101 | 0b01001101000101 | 0b00101101000101 | 0b01101101000101 | 0b00011101000101 | 0b01011101000101 | 0b00111101000101 | 0b01111101000101 | 0b00000011000101 | 0b01000011000101 | 0b00100011000101 | 0b01100011000101 | 0b00010011000101 | 0b01010011000101 | 0b00110011000101 | 0b01110011000101 | 0b00001011000101 | 0b01001011000101 | 0b00101011000101 | 0b01101011000101 | 0b00011011000101 | 0b01011011000101 | 0b00111011000101 | 0b01111011000101 | 0b00000111000101 | 0b01000111000101 | 0b00100111000101 | 0b01100111000101 | 0b00010111000101 | 0b01010111000101 | 0b00110111000101 | 0b01110111000101 | 0b00001111000101 | 0b01001111000101 | 0b00101111000101 | 0b01101111000101 | 0b00011111000101 | 0b01011111000101 | 0b00111111000101 | 0b01111111000101 | 0b00000000100101 | 0b01000000100101 | 0b00100000100101 | 0b01100000100101 | 0b00010000100101 | 0b01010000100101 | 0b00110000100101 | 0b01110000100101 | 0b00001000100101 | 0b01001000100101 | 0b00101000100101 | 0b01101000100101 | 0b00011000100101 | 0b01011000100101 | 0b00111000100101 | 0b01111000100101 | 0b00000100100101 | 0b01000100100101 | 0b00100100100101 | 0b01100100100101 | 0b00010100100101 | 0b01010100100101 | 0b00110100100101 | 0b01110100100101 | 0b00001100100101 | 0b01001100100101 | 0b00101100100101 | 0b01101100100101 | 0b00011100100101 | 0b01011100100101 | 0b00111100100101 | 0b01111100100101 | 0b00000010100101 | 0b01000010100101 | 0b00100010100101 | 0b01100010100101 | 0b00010010100101 | 0b01010010100101 | 0b00110010100101 | 0b01110010100101 | 0b00001010100101 | 0b01001010100101 | 0b00101010100101 | 0b01101010100101 | 0b00011010100101 | 0b01011010100101 | 0b00111010100101 | 0b01111010100101 | 0b00000110100101 | 0b01000110100101 | 0b00100110100101 | 0b01100110100101 | 0b00010110100101 | 0b01010110100101 | 0b00110110100101 | 0b01110110100101 | 0b00001110100101 | 0b01001110100101 | 0b00101110100101 | 0b01101110100101 | 0b00011110100101 | 0b01011110100101 | 0b00111110100101 | 0b01111110100101 | 0b00000001100101 | 0b01000001100101 | 0b00100001100101 | 0b01100001100101 | 0b00010001100101 | 0b01010001100101 | 0b00110001100101 | 0b01110001100101 | 0b00001001100101 | 0b01001001100101 | 0b00101001100101 | 0b01101001100101 | 0b00011001100101 | 0b01011001100101 | 0b00111001100101 | 0b01111001100101 | 0b00000101100101 | 0b01000101100101 | 0b00100101100101 | 0b01100101100101 | 0b00010101100101 | 0b01010101100101 | 0b00110101100101 | 0b01110101100101 | 0b00001101100101 | 0b01001101100101 | 0b00101101100101 | 0b01101101100101 | 0b00011101100101 | 0b01011101100101 | 0b00111101100101 | 0b01111101100101 | 0b00000011100101 | 0b01000011100101 | 0b00100011100101 | 0b01100011100101 | 0b00010011100101 | 0b01010011100101 | 0b00110011100101 | 0b01110011100101 | 0b00001011100101 | 0b01001011100101 | 0b00101011100101 | 0b01101011100101 | 0b00011011100101 | 0b01011011100101 | 0b00111011100101 | 0b01111011100101 | 0b00000111100101 | 0b01000111100101 | 0b00100111100101 | 0b01100111100101 | 0b00010111100101 | 0b01010111100101 | 0b00110111100101 | 0b01110111100101 | 0b00001111100101 | 0b01001111100101 | 0b00101111100101 | 0b01101111100101 | 0b00011111100101 | 0b01011111100101 | 0b00111111100101 | 0b01111111100101 | 0b00000000010101 | 0b01000000010101 | 0b00100000010101 | 0b01100000010101 | 0b00010000010101 | 0b01010000010101 | 0b00110000010101 | 0b01110000010101 | 0b00001000010101 | 0b01001000010101 | 0b00101000010101 | 0b01101000010101 | 0b00011000010101 | 0b01011000010101 | 0b00111000010101 | 0b01111000010101 | 0b00000100010101 | 0b01000100010101 | 0b00100100010101 | 0b01100100010101 | 0b00010100010101 | 0b01010100010101 | 0b00110100010101 | 0b01110100010101 | 0b00001100010101 | 0b01001100010101 | 0b00101100010101 | 0b01101100010101 | 0b00011100010101 | 0b01011100010101 | 0b00111100010101 | 0b01111100010101 | 0b00000010010101 | 0b01000010010101 | 0b00100010010101 | 0b01100010010101 | 0b00010010010101 | 0b01010010010101 | 0b00110010010101 | 0b01110010010101 | 0b00001010010101 | 0b01001010010101 | 0b00101010010101 | 0b01101010010101 | 0b00011010010101 | 0b01011010010101 | 0b00111010010101 | 0b01111010010101 | 0b00000110010101 | 0b01000110010101 | 0b00100110010101 | 0b01100110010101 | 0b00010110010101 | 0b01010110010101 | 0b00110110010101 | 0b01110110010101 | 0b00001110010101 | 0b01001110010101 | 0b00101110010101 | 0b01101110010101 | 0b00011110010101 | 0b01011110010101 | 0b00111110010101 | 0b01111110010101 | 0b00000001010101 | 0b01000001010101 | 0b00100001010101 | 0b01100001010101 | 0b00010001010101 | 0b01010001010101 | 0b00110001010101 | 0b01110001010101 | 0b00001001010101 | 0b01001001010101 | 0b00101001010101 | 0b01101001010101 | 0b00011001010101 | 0b01011001010101 | 0b00111001010101 | 0b01111001010101 | 0b00000101010101 | 0b01000101010101 | 0b00100101010101 | 0b01100101010101 | 0b00010101010101 | 0b01010101010101 | 0b00110101010101 | 0b01110101010101 | 0b00001101010101 | 0b01001101010101 | 0b00101101010101 | 0b01101101010101 | 0b00011101010101 | 0b01011101010101 | 0b00111101010101 | 0b01111101010101 | 0b00000011010101 | 0b01000011010101 | 0b00100011010101 | 0b01100011010101 | 0b00010011010101 | 0b01010011010101 | 0b00110011010101 | 0b01110011010101 | 0b00001011010101 | 0b01001011010101 | 0b00101011010101 | 0b01101011010101 | 0b00011011010101 | 0b01011011010101 | 0b00111011010101 | 0b01111011010101 | 0b00000111010101 | 0b01000111010101 | 0b00100111010101 | 0b01100111010101 | 0b00010111010101 | 0b01010111010101 | 0b00110111010101 | 0b01110111010101 | 0b00001111010101 | 0b01001111010101 | 0b00101111010101 | 0b01101111010101 | 0b00011111010101 | 0b01011111010101 | 0b00111111010101 | 0b01111111010101 | 0b00000000110101 | 0b01000000110101 | 0b00100000110101 | 0b01100000110101 | 0b00010000110101 | 0b01010000110101 | 0b00110000110101 | 0b01110000110101 | 0b00001000110101 | 0b01001000110101 | 0b00101000110101 | 0b01101000110101 | 0b00011000110101 | 0b01011000110101 | 0b00111000110101 | 0b01111000110101 | 0b00000100110101 | 0b01000100110101 | 0b00100100110101 | 0b01100100110101 | 0b00010100110101 | 0b01010100110101 | 0b00110100110101 | 0b01110100110101 | 0b00001100110101 | 0b01001100110101 | 0b00101100110101 | 0b01101100110101 | 0b00011100110101 | 0b01011100110101 | 0b00111100110101 | 0b01111100110101 | 0b00000010110101 | 0b01000010110101 | 0b00100010110101 | 0b01100010110101 | 0b00010010110101 | 0b01010010110101 | 0b00110010110101 | 0b01110010110101 | 0b00001010110101 | 0b01001010110101 | 0b00101010110101 | 0b01101010110101 | 0b00011010110101 | 0b01011010110101 | 0b00111010110101 | 0b01111010110101 | 0b00000110110101 | 0b01000110110101 | 0b00100110110101 | 0b01100110110101 | 0b00010110110101 | 0b01010110110101 | 0b00110110110101 | 0b01110110110101 | 0b00001110110101 | 0b01001110110101 | 0b00101110110101 | 0b01101110110101 | 0b00011110110101 | 0b01011110110101 | 0b00111110110101 | 0b01111110110101 | 0b00000001110101 | 0b01000001110101 | 0b00100001110101 | 0b01100001110101 | 0b00010001110101 | 0b01010001110101 | 0b00110001110101 | 0b01110001110101 | 0b00001001110101 | 0b01001001110101 | 0b00101001110101 | 0b01101001110101 | 0b00011001110101 | 0b01011001110101 | 0b00111001110101 | 0b01111001110101 | 0b00000101110101 | 0b01000101110101 | 0b00100101110101 | 0b01100101110101 | 0b00010101110101 | 0b01010101110101 | 0b00110101110101 | 0b01110101110101 | 0b00001101110101 | 0b01001101110101 | 0b00101101110101 | 0b01101101110101 | 0b00011101110101 | 0b01011101110101 | 0b00111101110101 | 0b01111101110101 | 0b00000011110101 | 0b01000011110101 | 0b00100011110101 | 0b01100011110101 | 0b00010011110101 | 0b01010011110101 | 0b00110011110101 | 0b01110011110101 | 0b00001011110101 | 0b01001011110101 | 0b00101011110101 | 0b01101011110101 | 0b00011011110101 | 0b01011011110101 | 0b00111011110101 | 0b01111011110101 | 0b00000111110101 | 0b01000111110101 | 0b00100111110101 | 0b01100111110101 | 0b00010111110101 | 0b01010111110101 | 0b00110111110101 | 0b01110111110101 | 0b00001111110101 | 0b01001111110101 | 0b00101111110101 | 0b01101111110101 | 0b00011111110101 | 0b01011111110101 | 0b00111111110101 | 0b01111111110101 | 0b00000000001101 | 0b01000000001101 | 0b00100000001101 | 0b01100000001101 | 0b00010000001101 | 0b01010000001101 | 0b00110000001101 | 0b01110000001101 | 0b00001000001101 | 0b01001000001101 | 0b00101000001101 | 0b01101000001101 | 0b00011000001101 | 0b01011000001101 | 0b00111000001101 | 0b01111000001101 | 0b00000100001101 | 0b01000100001101 | 0b00100100001101 | 0b01100100001101 | 0b00010100001101 | 0b01010100001101 | 0b00110100001101 | 0b01110100001101 | 0b00001100001101 | 0b01001100001101 | 0b00101100001101 | 0b01101100001101 | 0b00011100001101 | 0b01011100001101 | 0b00111100001101 | 0b01111100001101 | 0b00000010001101 | 0b01000010001101 | 0b00100010001101 | 0b01100010001101 | 0b00010010001101 | 0b01010010001101 | 0b00110010001101 | 0b01110010001101 | 0b00001010001101 | 0b01001010001101 | 0b00101010001101 | 0b01101010001101 | 0b00011010001101 | 0b01011010001101 | 0b00111010001101 | 0b01111010001101 | 0b00000110001101 | 0b01000110001101 | 0b00100110001101 | 0b01100110001101 | 0b00010110001101 | 0b01010110001101 | 0b00110110001101 | 0b01110110001101 | 0b00001110001101 | 0b01001110001101 | 0b00101110001101 | 0b01101110001101 | 0b00011110001101 | 0b01011110001101 | 0b00111110001101 | 0b01111110001101 | 0b00000001001101 | 0b01000001001101 | 0b00100001001101 | 0b01100001001101 | 0b00010001001101 | 0b01010001001101 | 0b00110001001101 | 0b01110001001101 | 0b00001001001101 | 0b01001001001101 | 0b00101001001101 | 0b01101001001101 | 0b00011001001101 | 0b01011001001101 | 0b00111001001101 | 0b01111001001101 | 0b00000101001101 | 0b01000101001101 | 0b00100101001101 | 0b01100101001101 | 0b00010101001101 | 0b01010101001101 | 0b00110101001101 | 0b01110101001101 | 0b00001101001101 | 0b01001101001101 | 0b00101101001101 | 0b01101101001101 | 0b00011101001101 | 0b01011101001101 | 0b00111101001101 | 0b01111101001101 | 0b00000011001101 | 0b01000011001101 | 0b00100011001101 | 0b01100011001101 | 0b00010011001101 | 0b01010011001101 | 0b00110011001101 | 0b01110011001101 | 0b00001011001101 | 0b01001011001101 | 0b00101011001101 | 0b01101011001101 | 0b00011011001101 | 0b01011011001101 | 0b00111011001101 | 0b01111011001101 | 0b00000111001101 | 0b01000111001101 | 0b00100111001101 | 0b01100111001101 | 0b00010111001101 | 0b01010111001101 | 0b00110111001101 | 0b01110111001101 | 0b00001111001101 | 0b01001111001101 | 0b00101111001101 | 0b01101111001101 | 0b00011111001101 | 0b01011111001101 | 0b00111111001101 | 0b01111111001101 | 0b00000000101101 | 0b01000000101101 | 0b00100000101101 | 0b01100000101101 | 0b00010000101101 | 0b01010000101101 | 0b00110000101101 | 0b01110000101101 | 0b00001000101101 | 0b01001000101101 | 0b00101000101101 | 0b01101000101101 | 0b00011000101101 | 0b01011000101101 | 0b00111000101101 | 0b01111000101101 | 0b00000100101101 | 0b01000100101101 | 0b00100100101101 | 0b01100100101101 | 0b00010100101101 | 0b01010100101101 | 0b00110100101101 | 0b01110100101101 | 0b00001100101101 | 0b01001100101101 | 0b00101100101101 | 0b01101100101101 | 0b00011100101101 | 0b01011100101101 | 0b00111100101101 | 0b01111100101101 | 0b00000010101101 | 0b01000010101101 | 0b00100010101101 | 0b01100010101101 | 0b00010010101101 | 0b01010010101101 | 0b00110010101101 | 0b01110010101101 | 0b00001010101101 | 0b01001010101101 | 0b00101010101101 | 0b01101010101101 | 0b00011010101101 | 0b01011010101101 | 0b00111010101101 | 0b01111010101101 | 0b00000110101101 | 0b01000110101101 | 0b00100110101101 | 0b01100110101101 | 0b00010110101101 | 0b01010110101101 | 0b00110110101101 | 0b01110110101101 | 0b00001110101101 | 0b01001110101101 | 0b00101110101101 | 0b01101110101101 | 0b00011110101101 | 0b01011110101101 | 0b00111110101101 | 0b01111110101101 | 0b00000001101101 | 0b01000001101101 | 0b00100001101101 | 0b01100001101101 | 0b00010001101101 | 0b01010001101101 | 0b00110001101101 | 0b01110001101101 | 0b00001001101101 | 0b01001001101101 | 0b00101001101101 | 0b01101001101101 | 0b00011001101101 | 0b01011001101101 | 0b00111001101101 | 0b01111001101101 | 0b00000101101101 | 0b01000101101101 | 0b00100101101101 | 0b01100101101101 | 0b00010101101101 | 0b01010101101101 | 0b00110101101101 | 0b01110101101101 | 0b00001101101101 | 0b01001101101101 | 0b00101101101101 | 0b01101101101101 | 0b00011101101101 | 0b01011101101101 | 0b00111101101101 | 0b01111101101101 | 0b00000011101101 | 0b01000011101101 | 0b00100011101101 | 0b01100011101101 | 0b00010011101101 | 0b01010011101101 | 0b00110011101101 | 0b01110011101101 | 0b00001011101101 | 0b01001011101101 | 0b00101011101101 | 0b01101011101101 | 0b00011011101101 | 0b01011011101101 | 0b00111011101101 | 0b01111011101101 | 0b00000111101101 | 0b01000111101101 | 0b00100111101101 | 0b01100111101101 | 0b00010111101101 | 0b01010111101101 | 0b00110111101101 | 0b01110111101101 | 0b00001111101101 | 0b01001111101101 | 0b00101111101101 | 0b01101111101101 | 0b00011111101101 | 0b01011111101101 | 0b00111111101101 | 0b01111111101101 | 0b00000000011101 | 0b01000000011101 | 0b00100000011101 | 0b01100000011101 | 0b00010000011101 | 0b01010000011101 | 0b00110000011101 | 0b01110000011101 | 0b00001000011101 | 0b01001000011101 | 0b00101000011101 | 0b01101000011101 | 0b00011000011101 | 0b01011000011101 | 0b00111000011101 | 0b01111000011101 | 0b00000100011101 | 0b01000100011101 | 0b00100100011101 | 0b01100100011101 | 0b00010100011101 | 0b01010100011101 | 0b00110100011101 | 0b01110100011101 | 0b00001100011101 | 0b01001100011101 | 0b00101100011101 | 0b01101100011101 | 0b00011100011101 | 0b01011100011101 | 0b00111100011101 | 0b01111100011101 | 0b00000010011101 | 0b01000010011101 | 0b00100010011101 | 0b01100010011101 | 0b00010010011101 | 0b01010010011101 | 0b00110010011101 | 0b01110010011101 | 0b00001010011101 | 0b01001010011101 | 0b00101010011101 | 0b01101010011101 | 0b00011010011101 | 0b01011010011101 | 0b00111010011101 | 0b01111010011101 | 0b00000110011101 | 0b01000110011101 | 0b00100110011101 | 0b01100110011101 | 0b00010110011101 | 0b01010110011101 | 0b00110110011101 | 0b01110110011101 | 0b00001110011101 | 0b01001110011101 | 0b00101110011101 | 0b01101110011101 | 0b00011110011101 | 0b01011110011101 | 0b00111110011101 | 0b01111110011101 | 0b00000001011101 | 0b01000001011101 | 0b00100001011101 | 0b01100001011101 | 0b00010001011101 | 0b01010001011101 | 0b00110001011101 | 0b01110001011101 | 0b00001001011101 | 0b01001001011101 | 0b00101001011101 | 0b01101001011101 | 0b00011001011101 | 0b01011001011101 | 0b00111001011101 | 0b01111001011101 | 0b00000101011101 | 0b01000101011101 | 0b00100101011101 | 0b01100101011101 | 0b00010101011101 | 0b01010101011101 | 0b00110101011101 | 0b01110101011101 | 0b00001101011101 | 0b01001101011101 | 0b00101101011101 | 0b01101101011101 | 0b00011101011101 | 0b01011101011101 | 0b00111101011101 | 0b01111101011101 | 0b00000011011101 | 0b01000011011101 | 0b00100011011101 | 0b01100011011101 | 0b00010011011101 | 0b01010011011101 | 0b00110011011101 | 0b01110011011101 | 0b00001011011101 | 0b01001011011101 | 0b00101011011101 | 0b01101011011101 | 0b00011011011101 | 0b01011011011101 | 0b00111011011101 | 0b01111011011101 | 0b00000111011101 | 0b01000111011101 | 0b00100111011101 | 0b01100111011101 | 0b00010111011101 | 0b01010111011101 | 0b00110111011101 | 0b01110111011101 | 0b00001111011101 | 0b01001111011101 | 0b00101111011101 | 0b01101111011101 | 0b00011111011101 | 0b01011111011101 | 0b00111111011101 | 0b01111111011101 | 0b00000000111101 | 0b01000000111101 | 0b00100000111101 | 0b01100000111101 | 0b00010000111101 | 0b01010000111101 | 0b00110000111101 | 0b01110000111101 | 0b00001000111101 | 0b01001000111101 | 0b00101000111101 | 0b01101000111101 | 0b00011000111101 | 0b01011000111101 | 0b00111000111101 | 0b01111000111101 | 0b00000100111101 | 0b01000100111101 | 0b00100100111101 | 0b01100100111101 | 0b00010100111101 | 0b01010100111101 | 0b00110100111101 | 0b01110100111101 | 0b00001100111101 | 0b01001100111101 | 0b00101100111101 | 0b01101100111101 | 0b00011100111101 | 0b01011100111101 | 0b00111100111101 | 0b01111100111101 | 0b00000010111101 | 0b01000010111101 | 0b00100010111101 | 0b01100010111101 | 0b00010010111101 | 0b01010010111101 | 0b00110010111101 | 0b01110010111101 | 0b00001010111101 | 0b01001010111101 | 0b00101010111101 | 0b01101010111101 | 0b00011010111101 | 0b01011010111101 | 0b00111010111101 | 0b01111010111101 | 0b00000110111101 | 0b01000110111101 | 0b00100110111101 | 0b01100110111101 | 0b00010110111101 | 0b01010110111101 | 0b00110110111101 | 0b01110110111101 | 0b00001110111101 | 0b01001110111101 | 0b00101110111101 | 0b01101110111101 | 0b00011110111101 | 0b01011110111101 | 0b00111110111101 | 0b01111110111101 | 0b00000001111101 | 0b01000001111101 | 0b00100001111101 | 0b01100001111101 | 0b00010001111101 | 0b01010001111101 | 0b00110001111101 | 0b01110001111101 | 0b00001001111101 | 0b01001001111101 | 0b00101001111101 | 0b01101001111101 | 0b00011001111101 | 0b01011001111101 | 0b00111001111101 | 0b01111001111101 | 0b00000101111101 | 0b01000101111101 | 0b00100101111101 | 0b01100101111101 | 0b00010101111101 | 0b01010101111101 | 0b00110101111101 | 0b01110101111101 | 0b00001101111101 | 0b01001101111101 | 0b00101101111101 | 0b01101101111101 | 0b00011101111101 | 0b01011101111101 | 0b00111101111101 | 0b01111101111101 | 0b00000011111101 | 0b01000011111101 | 0b00100011111101 | 0b01100011111101 | 0b00010011111101 | 0b01010011111101 | 0b00110011111101 | 0b01110011111101 | 0b00001011111101 | 0b01001011111101 | 0b00101011111101 | 0b01101011111101 | 0b00011011111101 | 0b01011011111101 | 0b00111011111101 | 0b01111011111101 | 0b00000111111101 | 0b01000111111101 | 0b00100111111101 | 0b01100111111101 | 0b00010111111101 | 0b01010111111101 | 0b00110111111101 | 0b01110111111101 | 0b00001111111101 | 0b01001111111101 | 0b00101111111101 | 0b01101111111101 | 0b00011111111101 | 0b01011111111101 | 0b00111111111101 | 0b01111111111101 | 0b00000000000011 | 0b01000000000011 | 0b00100000000011 | 0b01100000000011 | 0b00010000000011 | 0b01010000000011 | 0b00110000000011 | 0b01110000000011 | 0b00001000000011 | 0b01001000000011 | 0b00101000000011 | 0b01101000000011 | 0b00011000000011 | 0b01011000000011 | 0b00111000000011 | 0b01111000000011 | 0b00000100000011 | 0b01000100000011 | 0b00100100000011 | 0b01100100000011 | 0b00010100000011 | 0b01010100000011 | 0b00110100000011 | 0b01110100000011 | 0b00001100000011 | 0b01001100000011 | 0b00101100000011 | 0b01101100000011 | 0b00011100000011 | 0b01011100000011 | 0b00111100000011 | 0b01111100000011 | 0b00000010000011 | 0b01000010000011 | 0b00100010000011 | 0b01100010000011 | 0b00010010000011 | 0b01010010000011 | 0b00110010000011 | 0b01110010000011 | 0b00001010000011 | 0b01001010000011 | 0b00101010000011 | 0b01101010000011 | 0b00011010000011 | 0b01011010000011 | 0b00111010000011 | 0b01111010000011 | 0b00000110000011 | 0b01000110000011 | 0b00100110000011 | 0b01100110000011 | 0b00010110000011 | 0b01010110000011 | 0b00110110000011 | 0b01110110000011 | 0b00001110000011 | 0b01001110000011 | 0b00101110000011 | 0b01101110000011 | 0b00011110000011 | 0b01011110000011 | 0b00111110000011 | 0b01111110000011 | 0b00000001000011 | 0b01000001000011 | 0b00100001000011 | 0b01100001000011 | 0b00010001000011 | 0b01010001000011 | 0b00110001000011 | 0b01110001000011 | 0b00001001000011 | 0b01001001000011 | 0b00101001000011 | 0b01101001000011 | 0b00011001000011 | 0b01011001000011 | 0b00111001000011 | 0b01111001000011 | 0b00000101000011 | 0b01000101000011 | 0b00100101000011 | 0b01100101000011 | 0b00010101000011 | 0b01010101000011 | 0b00110101000011 | 0b01110101000011 | 0b00001101000011 | 0b01001101000011 | 0b00101101000011 | 0b01101101000011 | 0b00011101000011 | 0b01011101000011 | 0b00111101000011 | 0b01111101000011 | 0b00000011000011 | 0b01000011000011 | 0b00100011000011 | 0b01100011000011 | 0b00010011000011 | 0b01010011000011 | 0b00110011000011 | 0b01110011000011 | 0b00001011000011 | 0b01001011000011 | 0b00101011000011 | 0b01101011000011 | 0b00011011000011 | 0b01011011000011 | 0b00111011000011 | 0b01111011000011 | 0b00000111000011 | 0b01000111000011 | 0b00100111000011 | 0b01100111000011 | 0b00010111000011 | 0b01010111000011 | 0b00110111000011 | 0b01110111000011 | 0b00001111000011 | 0b01001111000011 | 0b00101111000011 | 0b01101111000011 | 0b00011111000011 | 0b01011111000011 | 0b00111111000011 | 0b01111111000011 | 0b00000000100011 | 0b01000000100011 | 0b00100000100011 | 0b01100000100011 | 0b00010000100011 | 0b01010000100011 | 0b00110000100011 | 0b01110000100011 | 0b00001000100011 | 0b01001000100011 | 0b00101000100011 | 0b01101000100011 | 0b00011000100011 | 0b01011000100011 | 0b00111000100011 | 0b01111000100011 | 0b00000100100011 | 0b01000100100011 | 0b00100100100011 | 0b01100100100011 | 0b00010100100011 | 0b01010100100011 | 0b00110100100011 | 0b01110100100011 | 0b00001100100011 | 0b01001100100011 | 0b00101100100011 | 0b01101100100011 | 0b00011100100011 | 0b01011100100011 | 0b00111100100011 | 0b01111100100011 | 0b00000010100011 | 0b01000010100011 | 0b00100010100011 | 0b01100010100011 | 0b00010010100011 | 0b01010010100011 | 0b00110010100011 | 0b01110010100011 | 0b00001010100011 | 0b01001010100011 | 0b00101010100011 | 0b01101010100011 | 0b00011010100011 | 0b01011010100011 | 0b00111010100011 | 0b01111010100011 | 0b00000110100011 | 0b01000110100011 | 0b00100110100011 | 0b01100110100011 | 0b00010110100011 | 0b01010110100011 | 0b00110110100011 | 0b01110110100011 | 0b00001110100011 | 0b01001110100011 | 0b00101110100011 | 0b01101110100011 | 0b00011110100011 | 0b01011110100011 | 0b00111110100011 | 0b01111110100011 | 0b00000001100011 | 0b01000001100011 | 0b00100001100011 | 0b01100001100011 | 0b00010001100011 | 0b01010001100011 | 0b00110001100011 | 0b01110001100011 | 0b00001001100011 | 0b01001001100011 | 0b00101001100011 | 0b01101001100011 | 0b00011001100011 | 0b01011001100011 | 0b00111001100011 | 0b01111001100011 | 0b00000101100011 | 0b01000101100011 | 0b00100101100011 | 0b01100101100011 | 0b00010101100011 | 0b01010101100011 | 0b00110101100011 | 0b01110101100011 | 0b00001101100011 | 0b01001101100011 | 0b00101101100011 | 0b01101101100011 | 0b00011101100011 | 0b01011101100011 | 0b00111101100011 | 0b01111101100011 | 0b00000011100011 | 0b01000011100011 | 0b00100011100011 | 0b01100011100011 | 0b00010011100011 | 0b01010011100011 | 0b00110011100011 | 0b01110011100011 | 0b00001011100011 | 0b01001011100011 | 0b00101011100011 | 0b01101011100011 | 0b00011011100011 | 0b01011011100011 | 0b00111011100011 | 0b01111011100011 | 0b00000111100011 | 0b01000111100011 | 0b00100111100011 | 0b01100111100011 | 0b00010111100011 | 0b01010111100011 | 0b00110111100011 | 0b01110111100011 | 0b00001111100011 | 0b01001111100011 | 0b00101111100011 | 0b01101111100011 | 0b00011111100011 | 0b01011111100011 | 0b00111111100011 | 0b01111111100011 | 0b00000000010011 | 0b01000000010011 | 0b00100000010011 | 0b01100000010011 | 0b00010000010011 | 0b01010000010011 | 0b00110000010011 | 0b01110000010011 | 0b00001000010011 | 0b01001000010011 | 0b00101000010011 | 0b01101000010011 | 0b00011000010011 | 0b01011000010011 | 0b00111000010011 | 0b01111000010011 | 0b00000100010011 | 0b01000100010011 | 0b00100100010011 | 0b01100100010011 | 0b00010100010011 | 0b01010100010011 | 0b00110100010011 | 0b01110100010011 | 0b00001100010011 | 0b01001100010011 | 0b00101100010011 | 0b01101100010011 | 0b00011100010011 | 0b01011100010011 | 0b00111100010011 | 0b01111100010011 | 0b00000010010011 | 0b01000010010011 | 0b00100010010011 | 0b01100010010011 | 0b00010010010011 | 0b01010010010011 | 0b00110010010011 | 0b01110010010011 | 0b00001010010011 | 0b01001010010011 | 0b00101010010011 | 0b01101010010011 | 0b00011010010011 | 0b01011010010011 | 0b00111010010011 | 0b01111010010011 | 0b00000110010011 | 0b01000110010011 | 0b00100110010011 | 0b01100110010011 | 0b00010110010011 | 0b01010110010011 | 0b00110110010011 | 0b01110110010011 | 0b00001110010011 | 0b01001110010011 | 0b00101110010011 | 0b01101110010011 | 0b00011110010011 | 0b01011110010011 | 0b00111110010011 | 0b01111110010011 | 0b00000001010011 | 0b01000001010011 | 0b00100001010011 | 0b01100001010011 | 0b00010001010011 | 0b01010001010011 | 0b00110001010011 | 0b01110001010011 | 0b00001001010011 | 0b01001001010011 | 0b00101001010011 | 0b01101001010011 | 0b00011001010011 | 0b01011001010011 | 0b00111001010011 | 0b01111001010011 | 0b00000101010011 | 0b01000101010011 | 0b00100101010011 | 0b01100101010011 | 0b00010101010011 | 0b01010101010011 | 0b00110101010011 | 0b01110101010011 | 0b00001101010011 | 0b01001101010011 | 0b00101101010011 | 0b01101101010011 | 0b00011101010011 | 0b01011101010011 | 0b00111101010011 | 0b01111101010011 | 0b00000011010011 | 0b01000011010011 | 0b00100011010011 | 0b01100011010011 | 0b00010011010011 | 0b01010011010011 | 0b00110011010011 | 0b01110011010011 | 0b00001011010011 | 0b01001011010011 | 0b00101011010011 | 0b01101011010011 | 0b00011011010011 | 0b01011011010011 | 0b00111011010011 | 0b01111011010011 | 0b00000111010011 | 0b01000111010011 | 0b00100111010011 | 0b01100111010011 | 0b00010111010011 | 0b01010111010011 | 0b00110111010011 | 0b01110111010011 | 0b00001111010011 | 0b01001111010011 | 0b00101111010011 | 0b01101111010011 | 0b00011111010011 | 0b01011111010011 | 0b00111111010011 | 0b01111111010011 | 0b00000000110011 | 0b01000000110011 | 0b00100000110011 | 0b01100000110011 | 0b00010000110011 | 0b01010000110011 | 0b00110000110011 | 0b01110000110011 | 0b00001000110011 | 0b01001000110011 | 0b00101000110011 | 0b01101000110011 | 0b00011000110011 | 0b01011000110011 | 0b00111000110011 | 0b01111000110011 | 0b00000100110011 | 0b01000100110011 | 0b00100100110011 | 0b01100100110011 | 0b00010100110011 | 0b01010100110011 | 0b00110100110011 | 0b01110100110011 | 0b00001100110011 | 0b01001100110011 | 0b00101100110011 | 0b01101100110011 | 0b00011100110011 | 0b01011100110011 | 0b00111100110011 | 0b01111100110011 | 0b00000010110011 | 0b01000010110011 | 0b00100010110011 | 0b01100010110011 | 0b00010010110011 | 0b01010010110011 | 0b00110010110011 | 0b01110010110011 | 0b00001010110011 | 0b01001010110011 | 0b00101010110011 | 0b01101010110011 | 0b00011010110011 | 0b01011010110011 | 0b00111010110011 | 0b01111010110011 | 0b00000110110011 | 0b01000110110011 | 0b00100110110011 | 0b01100110110011 | 0b00010110110011 | 0b01010110110011 | 0b00110110110011 | 0b01110110110011 | 0b00001110110011 | 0b01001110110011 | 0b00101110110011 | 0b01101110110011 | 0b00011110110011 | 0b01011110110011 | 0b00111110110011 | 0b01111110110011 | 0b00000001110011 | 0b01000001110011 | 0b00100001110011 | 0b01100001110011 | 0b00010001110011 | 0b01010001110011 | 0b00110001110011 | 0b01110001110011 | 0b00001001110011 | 0b01001001110011 | 0b00101001110011 | 0b01101001110011 | 0b00011001110011 | 0b01011001110011 | 0b00111001110011 | 0b01111001110011 | 0b00000101110011 | 0b01000101110011 | 0b00100101110011 | 0b01100101110011 | 0b00010101110011 | 0b01010101110011 | 0b00110101110011 | 0b01110101110011 | 0b00001101110011 | 0b01001101110011 | 0b00101101110011 | 0b01101101110011 | 0b00011101110011 | 0b01011101110011 | 0b00111101110011 | 0b01111101110011 | 0b00000011110011 | 0b01000011110011 | 0b00100011110011 | 0b01100011110011 | 0b00010011110011 | 0b01010011110011 | 0b00110011110011 | 0b01110011110011 | 0b00001011110011 | 0b01001011110011 | 0b00101011110011 | 0b01101011110011 | 0b00011011110011 | 0b01011011110011 | 0b00111011110011 | 0b01111011110011 | 0b00000111110011 | 0b01000111110011 | 0b00100111110011 | 0b01100111110011 | 0b00010111110011 | 0b01010111110011 | 0b00110111110011 | 0b01110111110011 | 0b00001111110011 | 0b01001111110011 | 0b00101111110011 | 0b01101111110011 | 0b00011111110011 | 0b01011111110011 | 0b00111111110011 | 0b01111111110011 | 0b00000000001011 | 0b01000000001011 | 0b00100000001011 | 0b01100000001011 | 0b00010000001011 | 0b01010000001011 | 0b00110000001011 | 0b01110000001011 | 0b00001000001011 | 0b01001000001011 | 0b00101000001011 | 0b01101000001011 | 0b00011000001011 | 0b01011000001011 | 0b00111000001011 | 0b01111000001011 | 0b00000100001011 | 0b01000100001011 | 0b00100100001011 | 0b01100100001011 | 0b00010100001011 | 0b01010100001011 | 0b00110100001011 | 0b01110100001011 | 0b00001100001011 | 0b01001100001011 | 0b00101100001011 | 0b01101100001011 | 0b00011100001011 | 0b01011100001011 | 0b00111100001011 | 0b01111100001011 | 0b00000010001011 | 0b01000010001011 | 0b00100010001011 | 0b01100010001011 | 0b00010010001011 | 0b01010010001011 | 0b00110010001011 | 0b01110010001011 | 0b00001010001011 | 0b01001010001011 | 0b00101010001011 | 0b01101010001011 | 0b00011010001011 | 0b01011010001011 | 0b00111010001011 | 0b01111010001011 | 0b00000110001011 | 0b01000110001011 | 0b00100110001011 | 0b01100110001011 | 0b00010110001011 | 0b01010110001011 | 0b00110110001011 | 0b01110110001011 | 0b00001110001011 | 0b01001110001011 | 0b00101110001011 | 0b01101110001011 | 0b00011110001011 | 0b01011110001011 | 0b00111110001011 | 0b01111110001011 | 0b00000001001011 | 0b01000001001011 | 0b00100001001011 | 0b01100001001011 | 0b00010001001011 | 0b01010001001011 | 0b00110001001011 | 0b01110001001011 | 0b00001001001011 | 0b01001001001011 | 0b00101001001011 | 0b01101001001011 | 0b00011001001011 | 0b01011001001011 | 0b00111001001011 | 0b01111001001011 | 0b00000101001011 | 0b01000101001011 | 0b00100101001011 | 0b01100101001011 | 0b00010101001011 | 0b01010101001011 | 0b00110101001011 | 0b01110101001011 | 0b00001101001011 | 0b01001101001011 | 0b00101101001011 | 0b01101101001011 | 0b00011101001011 | 0b01011101001011 | 0b00111101001011 | 0b01111101001011 | 0b00000011001011 | 0b01000011001011 | 0b00100011001011 | 0b01100011001011 | 0b00010011001011 | 0b01010011001011 | 0b00110011001011 | 0b01110011001011 | 0b00001011001011 | 0b01001011001011 | 0b00101011001011 | 0b01101011001011 | 0b00011011001011 | 0b01011011001011 | 0b00111011001011 | 0b01111011001011 | 0b00000111001011 | 0b01000111001011 | 0b00100111001011 | 0b01100111001011 | 0b00010111001011 | 0b01010111001011 | 0b00110111001011 | 0b01110111001011 | 0b00001111001011 | 0b01001111001011 | 0b00101111001011 | 0b01101111001011 | 0b00011111001011 | 0b01011111001011 | 0b00111111001011 | 0b01111111001011 | 0b00000000101011 | 0b01000000101011 | 0b00100000101011 | 0b01100000101011 | 0b00010000101011 | 0b01010000101011 | 0b00110000101011 | 0b01110000101011 | 0b00001000101011 | 0b01001000101011 | 0b00101000101011 | 0b01101000101011 | 0b00011000101011 | 0b01011000101011 | 0b00111000101011 | 0b01111000101011 | 0b00000100101011 | 0b01000100101011 | 0b00100100101011 | 0b01100100101011 | 0b00010100101011 | 0b01010100101011 | 0b00110100101011 | 0b01110100101011 | 0b00001100101011 | 0b01001100101011 | 0b00101100101011 | 0b01101100101011 | 0b00011100101011 | 0b01011100101011 | 0b00111100101011 | 0b01111100101011 | 0b00000010101011 | 0b01000010101011 | 0b00100010101011 | 0b01100010101011 | 0b00010010101011 | 0b01010010101011 | 0b00110010101011 | 0b01110010101011 | 0b00001010101011 | 0b01001010101011 | 0b00101010101011 | 0b01101010101011 | 0b00011010101011 | 0b01011010101011 | 0b00111010101011 | 0b01111010101011 | 0b00000110101011 | 0b01000110101011 | 0b00100110101011 | 0b01100110101011 | 0b00010110101011 | 0b01010110101011 | 0b00110110101011 | 0b01110110101011 | 0b00001110101011 | 0b01001110101011 | 0b00101110101011 | 0b01101110101011 | 0b00011110101011 | 0b01011110101011 | 0b00111110101011 | 0b01111110101011 | 0b00000001101011 | 0b01000001101011 | 0b00100001101011 | 0b01100001101011 | 0b00010001101011 | 0b01010001101011 | 0b00110001101011 | 0b01110001101011 | 0b00001001101011 | 0b01001001101011 | 0b00101001101011 | 0b01101001101011 | 0b00011001101011 | 0b01011001101011 | 0b00111001101011 | 0b01111001101011 | 0b00000101101011 | 0b01000101101011 | 0b00100101101011 | 0b01100101101011 | 0b00010101101011 | 0b01010101101011 | 0b00110101101011 | 0b01110101101011 | 0b00001101101011 | 0b01001101101011 | 0b00101101101011 | 0b01101101101011 | 0b00011101101011 | 0b01011101101011 | 0b00111101101011 | 0b01111101101011 | 0b00000011101011 | 0b01000011101011 | 0b00100011101011 | 0b01100011101011 | 0b00010011101011 | 0b01010011101011 | 0b00110011101011 | 0b01110011101011 | 0b00001011101011 | 0b01001011101011 | 0b00101011101011 | 0b01101011101011 | 0b00011011101011 | 0b01011011101011 | 0b00111011101011 | 0b01111011101011 | 0b00000111101011 | 0b01000111101011 | 0b00100111101011 | 0b01100111101011 | 0b00010111101011 | 0b01010111101011 | 0b00110111101011 | 0b01110111101011 | 0b00001111101011 | 0b01001111101011 | 0b00101111101011 | 0b01101111101011 | 0b00011111101011 | 0b01011111101011 | 0b00111111101011 | 0b01111111101011 | 0b00000000011011 | 0b01000000011011 | 0b00100000011011 | 0b01100000011011 | 0b00010000011011 | 0b01010000011011 | 0b00110000011011 | 0b01110000011011 | 0b00001000011011 | 0b01001000011011 | 0b00101000011011 | 0b01101000011011 | 0b00011000011011 | 0b01011000011011 | 0b00111000011011 | 0b01111000011011 | 0b00000100011011 | 0b01000100011011 | 0b00100100011011 | 0b01100100011011 | 0b00010100011011 | 0b01010100011011 | 0b00110100011011 | 0b01110100011011 | 0b00001100011011 | 0b01001100011011 | 0b00101100011011 | 0b01101100011011 | 0b00011100011011 | 0b01011100011011 | 0b00111100011011 | 0b01111100011011 | 0b00000010011011 | 0b01000010011011 | 0b00100010011011 | 0b01100010011011 | 0b00010010011011 | 0b01010010011011 | 0b00110010011011 | 0b01110010011011 | 0b00001010011011 | 0b01001010011011 | 0b00101010011011 | 0b01101010011011 | 0b00011010011011 | 0b01011010011011 | 0b00111010011011 | 0b01111010011011 | 0b00000110011011 | 0b01000110011011 | 0b00100110011011 | 0b01100110011011 | 0b00010110011011 | 0b01010110011011 | 0b00110110011011 | 0b01110110011011 | 0b00001110011011 | 0b01001110011011 | 0b00101110011011 | 0b01101110011011 | 0b00011110011011 | 0b01011110011011 | 0b00111110011011 | 0b01111110011011 | 0b00000001011011 | 0b01000001011011 | 0b00100001011011 | 0b01100001011011 | 0b00010001011011 | 0b01010001011011 | 0b00110001011011 | 0b01110001011011 | 0b00001001011011 | 0b01001001011011 | 0b00101001011011 | 0b01101001011011 | 0b00011001011011 | 0b01011001011011 | 0b00111001011011 | 0b01111001011011 | 0b00000101011011 | 0b01000101011011 | 0b00100101011011 | 0b01100101011011 | 0b00010101011011 | 0b01010101011011 | 0b00110101011011 | 0b01110101011011 | 0b00001101011011 | 0b01001101011011 | 0b00101101011011 | 0b01101101011011 | 0b00011101011011 | 0b01011101011011 | 0b00111101011011 | 0b01111101011011 | 0b00000011011011 | 0b01000011011011 | 0b00100011011011 | 0b01100011011011 | 0b00010011011011 | 0b01010011011011 | 0b00110011011011 | 0b01110011011011 | 0b00001011011011 | 0b01001011011011 | 0b00101011011011 | 0b01101011011011 | 0b00011011011011 | 0b01011011011011 | 0b00111011011011 | 0b01111011011011 | 0b00000111011011 | 0b01000111011011 | 0b00100111011011 | 0b01100111011011 | 0b00010111011011 | 0b01010111011011 | 0b00110111011011 | 0b01110111011011 | 0b00001111011011 | 0b01001111011011 | 0b00101111011011 | 0b01101111011011 | 0b00011111011011 | 0b01011111011011 | 0b00111111011011 | 0b01111111011011 | 0b00000000111011 | 0b01000000111011 | 0b00100000111011 | 0b01100000111011 | 0b00010000111011 | 0b01010000111011 | 0b00110000111011 | 0b01110000111011 | 0b00001000111011 | 0b01001000111011 | 0b00101000111011 | 0b01101000111011 | 0b00011000111011 | 0b01011000111011 | 0b00111000111011 | 0b01111000111011 | 0b00000100111011 | 0b01000100111011 | 0b00100100111011 | 0b01100100111011 | 0b00010100111011 | 0b01010100111011 | 0b00110100111011 | 0b01110100111011 | 0b00001100111011 | 0b01001100111011 | 0b00101100111011 | 0b01101100111011 | 0b00011100111011 | 0b01011100111011 | 0b00111100111011 | 0b01111100111011 | 0b00000010111011 | 0b01000010111011 | 0b00100010111011 | 0b01100010111011 | 0b00010010111011 | 0b01010010111011 | 0b00110010111011 | 0b01110010111011 | 0b00001010111011 | 0b01001010111011 | 0b00101010111011 | 0b01101010111011 | 0b00011010111011 | 0b01011010111011 | 0b00111010111011 | 0b01111010111011 | 0b00000110111011 | 0b01000110111011 | 0b00100110111011 | 0b01100110111011 | 0b00010110111011 | 0b01010110111011 | 0b00110110111011 | 0b01110110111011 | 0b00001110111011 | 0b01001110111011 | 0b00101110111011 | 0b01101110111011 | 0b00011110111011 | 0b01011110111011 | 0b00111110111011 | 0b01111110111011 | 0b00000001111011 | 0b01000001111011 | 0b00100001111011 | 0b01100001111011 | 0b00010001111011 | 0b01010001111011 | 0b00110001111011 | 0b01110001111011 | 0b00001001111011 | 0b01001001111011 | 0b00101001111011 | 0b01101001111011 | 0b00011001111011 | 0b01011001111011 | 0b00111001111011 | 0b01111001111011 | 0b00000101111011 | 0b01000101111011 | 0b00100101111011 | 0b01100101111011 | 0b00010101111011 | 0b01010101111011 | 0b00110101111011 | 0b01110101111011 | 0b00001101111011 | 0b01001101111011 | 0b00101101111011 | 0b01101101111011 | 0b00011101111011 | 0b01011101111011 | 0b00111101111011 | 0b01111101111011 | 0b00000011111011 | 0b01000011111011 | 0b00100011111011 | 0b01100011111011 | 0b00010011111011 | 0b01010011111011 | 0b00110011111011 | 0b01110011111011 | 0b00001011111011 | 0b01001011111011 | 0b00101011111011 | 0b01101011111011 | 0b00011011111011 | 0b01011011111011 | 0b00111011111011 | 0b01111011111011 | 0b00000111111011 | 0b01000111111011 | 0b00100111111011 | 0b01100111111011 | 0b00010111111011 | 0b01010111111011 | 0b00110111111011 | 0b01110111111011 | 0b00001111111011 | 0b01001111111011 | 0b00101111111011 | 0b01101111111011 | 0b00011111111011 | 0b01011111111011 | 0b00111111111011 | 0b01111111111011 | 0b00000000000111 | 0b01000000000111 | 0b00100000000111 | 0b01100000000111 | 0b00010000000111 | 0b01010000000111 | 0b00110000000111 | 0b01110000000111 | 0b00001000000111 | 0b01001000000111 | 0b00101000000111 | 0b01101000000111 | 0b00011000000111 | 0b01011000000111 | 0b00111000000111 | 0b01111000000111 | 0b00000100000111 | 0b01000100000111 | 0b00100100000111 | 0b01100100000111 | 0b00010100000111 | 0b01010100000111 | 0b00110100000111 | 0b01110100000111 | 0b00001100000111 | 0b01001100000111 | 0b00101100000111 | 0b01101100000111 | 0b00011100000111 | 0b01011100000111 | 0b00111100000111 | 0b01111100000111 | 0b00000010000111 | 0b01000010000111 | 0b00100010000111 | 0b01100010000111 | 0b00010010000111 | 0b01010010000111 | 0b00110010000111 | 0b01110010000111 | 0b00001010000111 | 0b01001010000111 | 0b00101010000111 | 0b01101010000111 | 0b00011010000111 | 0b01011010000111 | 0b00111010000111 | 0b01111010000111 | 0b00000110000111 | 0b01000110000111 | 0b00100110000111 | 0b01100110000111 | 0b00010110000111 | 0b01010110000111 | 0b00110110000111 | 0b01110110000111 | 0b00001110000111 | 0b01001110000111 | 0b00101110000111 | 0b01101110000111 | 0b00011110000111 | 0b01011110000111 | 0b00111110000111 | 0b01111110000111 | 0b00000001000111 | 0b01000001000111 | 0b00100001000111 | 0b01100001000111 | 0b00010001000111 | 0b01010001000111 | 0b00110001000111 | 0b01110001000111 | 0b00001001000111 | 0b01001001000111 | 0b00101001000111 | 0b01101001000111 | 0b00011001000111 | 0b01011001000111 | 0b00111001000111 | 0b01111001000111 | 0b00000101000111 | 0b01000101000111 | 0b00100101000111 | 0b01100101000111 | 0b00010101000111 | 0b01010101000111 | 0b00110101000111 | 0b01110101000111 | 0b00001101000111 | 0b01001101000111 | 0b00101101000111 | 0b01101101000111 | 0b00011101000111 | 0b01011101000111 | 0b00111101000111 | 0b01111101000111 | 0b00000011000111 | 0b01000011000111 | 0b00100011000111 | 0b01100011000111 | 0b00010011000111 | 0b01010011000111 | 0b00110011000111 | 0b01110011000111 | 0b00001011000111 | 0b01001011000111 | 0b00101011000111 | 0b01101011000111 | 0b00011011000111 | 0b01011011000111 | 0b00111011000111 | 0b01111011000111 | 0b00000111000111 | 0b01000111000111 | 0b00100111000111 | 0b01100111000111 | 0b00010111000111 | 0b01010111000111 | 0b00110111000111 | 0b01110111000111 | 0b00001111000111 | 0b01001111000111 | 0b00101111000111 | 0b01101111000111 | 0b00011111000111 | 0b01011111000111 | 0b00111111000111 | 0b01111111000111 | 0b00000000100111 | 0b01000000100111 | 0b00100000100111 | 0b01100000100111 | 0b00010000100111 | 0b01010000100111 | 0b00110000100111 | 0b01110000100111 | 0b00001000100111 | 0b01001000100111 | 0b00101000100111 | 0b01101000100111 | 0b00011000100111 | 0b01011000100111 | 0b00111000100111 | 0b01111000100111 | 0b00000100100111 | 0b01000100100111 | 0b00100100100111 | 0b01100100100111 | 0b00010100100111 | 0b01010100100111 | 0b00110100100111 | 0b01110100100111 | 0b00001100100111 | 0b01001100100111 | 0b00101100100111 | 0b01101100100111 | 0b00011100100111 | 0b01011100100111 | 0b00111100100111 | 0b01111100100111 | 0b00000010100111 | 0b01000010100111 | 0b00100010100111 | 0b01100010100111 | 0b00010010100111 | 0b01010010100111 | 0b00110010100111 | 0b01110010100111 | 0b00001010100111 | 0b01001010100111 | 0b00101010100111 | 0b01101010100111 | 0b00011010100111 | 0b01011010100111 | 0b00111010100111 | 0b01111010100111 | 0b00000110100111 | 0b01000110100111 | 0b00100110100111 | 0b01100110100111 | 0b00010110100111 | 0b01010110100111 | 0b00110110100111 | 0b01110110100111 | 0b00001110100111 | 0b01001110100111 | 0b00101110100111 | 0b01101110100111 | 0b00011110100111 | 0b01011110100111 | 0b00111110100111 | 0b01111110100111 | 0b00000001100111 | 0b01000001100111 | 0b00100001100111 | 0b01100001100111 | 0b00010001100111 | 0b01010001100111 | 0b00110001100111 | 0b01110001100111 | 0b00001001100111 | 0b01001001100111 | 0b00101001100111 | 0b01101001100111 | 0b00011001100111 | 0b01011001100111 | 0b00111001100111 | 0b01111001100111 | 0b00000101100111 | 0b01000101100111 | 0b00100101100111 | 0b01100101100111 | 0b00010101100111 | 0b01010101100111 | 0b00110101100111 | 0b01110101100111 | 0b00001101100111 | 0b01001101100111 | 0b00101101100111 | 0b01101101100111 | 0b00011101100111 | 0b01011101100111 | 0b00111101100111 | 0b01111101100111 | 0b00000011100111 | 0b01000011100111 | 0b00100011100111 | 0b01100011100111 | 0b00010011100111 | 0b01010011100111 | 0b00110011100111 | 0b01110011100111 | 0b00001011100111 | 0b01001011100111 | 0b00101011100111 | 0b01101011100111 | 0b00011011100111 | 0b01011011100111 | 0b00111011100111 | 0b01111011100111 | 0b00000111100111 | 0b01000111100111 | 0b00100111100111 | 0b01100111100111 | 0b00010111100111 | 0b01010111100111 | 0b00110111100111 | 0b01110111100111 | 0b00001111100111 | 0b01001111100111 | 0b00101111100111 | 0b01101111100111 | 0b00011111100111 | 0b01011111100111 | 0b00111111100111 | 0b01111111100111 | 0b00000000010111 | 0b01000000010111 | 0b00100000010111 | 0b01100000010111 | 0b00010000010111 | 0b01010000010111 | 0b00110000010111 | 0b01110000010111 | 0b00001000010111 | 0b01001000010111 | 0b00101000010111 | 0b01101000010111 | 0b00011000010111 | 0b01011000010111 | 0b00111000010111 | 0b01111000010111 | 0b00000100010111 | 0b01000100010111 | 0b00100100010111 | 0b01100100010111 | 0b00010100010111 | 0b01010100010111 | 0b00110100010111 | 0b01110100010111 | 0b00001100010111 | 0b01001100010111 | 0b00101100010111 | 0b01101100010111 | 0b00011100010111 | 0b01011100010111 | 0b00111100010111 | 0b01111100010111 | 0b00000010010111 | 0b01000010010111 | 0b00100010010111 | 0b01100010010111 | 0b00010010010111 | 0b01010010010111 | 0b00110010010111 | 0b01110010010111 | 0b00001010010111 | 0b01001010010111 | 0b00101010010111 | 0b01101010010111 | 0b00011010010111 | 0b01011010010111 | 0b00111010010111 | 0b01111010010111 | 0b00000110010111 | 0b01000110010111 | 0b00100110010111 | 0b01100110010111 | 0b00010110010111 | 0b01010110010111 | 0b00110110010111 | 0b01110110010111 | 0b00001110010111 | 0b01001110010111 | 0b00101110010111 | 0b01101110010111 | 0b00011110010111 | 0b01011110010111 | 0b00111110010111 | 0b01111110010111 | 0b00000001010111 | 0b01000001010111 | 0b00100001010111 | 0b01100001010111 | 0b00010001010111 | 0b01010001010111 | 0b00110001010111 | 0b01110001010111 | 0b00001001010111 | 0b01001001010111 | 0b00101001010111 | 0b01101001010111 | 0b00011001010111 | 0b01011001010111 | 0b00111001010111 | 0b01111001010111 | 0b00000101010111 | 0b01000101010111 | 0b00100101010111 | 0b01100101010111 | 0b00010101010111 | 0b01010101010111 | 0b00110101010111 | 0b01110101010111 | 0b00001101010111 | 0b01001101010111 | 0b00101101010111 | 0b01101101010111 | 0b00011101010111 | 0b01011101010111 | 0b00111101010111 | 0b01111101010111 | 0b00000011010111 | 0b01000011010111 | 0b00100011010111 | 0b01100011010111 | 0b00010011010111 | 0b01010011010111 | 0b00110011010111 | 0b01110011010111 | 0b00001011010111 | 0b01001011010111 | 0b00101011010111 | 0b01101011010111 | 0b00011011010111 | 0b01011011010111 | 0b00111011010111 | 0b01111011010111 | 0b00000111010111 | 0b01000111010111 | 0b00100111010111 | 0b01100111010111 | 0b00010111010111 | 0b01010111010111 | 0b00110111010111 | 0b01110111010111 | 0b00001111010111 | 0b01001111010111 | 0b00101111010111 | 0b01101111010111 | 0b00011111010111 | 0b01011111010111 | 0b00111111010111 | 0b01111111010111 | 0b00000000110111 | 0b01000000110111 | 0b00100000110111 | 0b01100000110111 | 0b00010000110111 | 0b01010000110111 | 0b00110000110111 | 0b01110000110111 | 0b00001000110111 | 0b01001000110111 | 0b00101000110111 | 0b01101000110111 | 0b00011000110111 | 0b01011000110111 | 0b00111000110111 | 0b01111000110111 | 0b00000100110111 | 0b01000100110111 | 0b00100100110111 | 0b01100100110111 | 0b00010100110111 | 0b01010100110111 | 0b00110100110111 | 0b01110100110111 | 0b00001100110111 | 0b01001100110111 | 0b00101100110111 | 0b01101100110111 | 0b00011100110111 | 0b01011100110111 | 0b00111100110111 | 0b01111100110111 | 0b00000010110111 | 0b01000010110111 | 0b00100010110111 | 0b01100010110111 | 0b00010010110111 | 0b01010010110111 | 0b00110010110111 | 0b01110010110111 | 0b00001010110111 | 0b01001010110111 | 0b00101010110111 | 0b01101010110111 | 0b00011010110111 | 0b01011010110111 | 0b00111010110111 | 0b01111010110111 | 0b00000110110111 | 0b01000110110111 | 0b00100110110111 | 0b01100110110111 | 0b00010110110111 | 0b01010110110111 | 0b00110110110111 | 0b01110110110111 | 0b00001110110111 | 0b01001110110111 | 0b00101110110111 | 0b01101110110111 | 0b00011110110111 | 0b01011110110111 | 0b00111110110111 | 0b01111110110111 | 0b00000001110111 | 0b01000001110111 | 0b00100001110111 | 0b01100001110111 | 0b00010001110111 | 0b01010001110111 | 0b00110001110111 | 0b01110001110111 | 0b00001001110111 | 0b01001001110111 | 0b00101001110111 | 0b01101001110111 | 0b00011001110111 | 0b01011001110111 | 0b00111001110111 | 0b01111001110111 | 0b00000101110111 | 0b01000101110111 | 0b00100101110111 | 0b01100101110111 | 0b00010101110111 | 0b01010101110111 | 0b00110101110111 | 0b01110101110111 | 0b00001101110111 | 0b01001101110111 | 0b00101101110111 | 0b01101101110111 | 0b00011101110111 | 0b01011101110111 | 0b00111101110111 | 0b01111101110111 | 0b00000011110111 | 0b01000011110111 | 0b00100011110111 | 0b01100011110111 | 0b00010011110111 | 0b01010011110111 | 0b00110011110111 | 0b01110011110111 | 0b00001011110111 | 0b01001011110111 | 0b00101011110111 | 0b01101011110111 | 0b00011011110111 | 0b01011011110111 | 0b00111011110111 | 0b01111011110111 | 0b00000111110111 | 0b01000111110111 | 0b00100111110111 | 0b01100111110111 | 0b00010111110111 | 0b01010111110111 | 0b00110111110111 | 0b01110111110111 | 0b00001111110111 | 0b01001111110111 | 0b00101111110111 | 0b01101111110111 | 0b00011111110111 | 0b01011111110111 | 0b00111111110111 | 0b01111111110111 | 0b00000000001111 | 0b01000000001111 | 0b00100000001111 | 0b01100000001111 | 0b00010000001111 | 0b01010000001111 | 0b00110000001111 | 0b01110000001111 | 0b00001000001111 | 0b01001000001111 | 0b00101000001111 | 0b01101000001111 | 0b00011000001111 | 0b01011000001111 | 0b00111000001111 | 0b01111000001111 | 0b00000100001111 | 0b01000100001111 | 0b00100100001111 | 0b01100100001111 | 0b00010100001111 | 0b01010100001111 | 0b00110100001111 | 0b01110100001111 | 0b00001100001111 | 0b01001100001111 | 0b00101100001111 | 0b01101100001111 | 0b00011100001111 | 0b01011100001111 | 0b00111100001111 | 0b01111100001111 | 0b00000010001111 | 0b01000010001111 | 0b00100010001111 | 0b01100010001111 | 0b00010010001111 | 0b01010010001111 | 0b00110010001111 | 0b01110010001111 | 0b00001010001111 | 0b01001010001111 | 0b00101010001111 | 0b01101010001111 | 0b00011010001111 | 0b01011010001111 | 0b00111010001111 | 0b01111010001111 | 0b00000110001111 | 0b01000110001111 | 0b00100110001111 | 0b01100110001111 | 0b00010110001111 | 0b01010110001111 | 0b00110110001111 | 0b01110110001111 | 0b00001110001111 | 0b01001110001111 | 0b00101110001111 | 0b01101110001111 | 0b00011110001111 | 0b01011110001111 | 0b00111110001111 | 0b01111110001111 | 0b00000001001111 | 0b01000001001111 | 0b00100001001111 | 0b01100001001111 | 0b00010001001111 | 0b01010001001111 | 0b00110001001111 | 0b01110001001111 | 0b00001001001111 | 0b01001001001111 | 0b00101001001111 | 0b01101001001111 | 0b00011001001111 | 0b01011001001111 | 0b00111001001111 | 0b01111001001111 | 0b00000101001111 | 0b01000101001111 | 0b00100101001111 | 0b01100101001111 | 0b00010101001111 | 0b01010101001111 | 0b00110101001111 | 0b01110101001111 | 0b00001101001111 | 0b01001101001111 | 0b00101101001111 | 0b01101101001111 | 0b00011101001111 | 0b01011101001111 | 0b00111101001111 | 0b01111101001111 | 0b00000011001111 | 0b01000011001111 | 0b00100011001111 | 0b01100011001111 | 0b00010011001111 | 0b01010011001111 | 0b00110011001111 | 0b01110011001111 | 0b00001011001111 | 0b01001011001111 | 0b00101011001111 | 0b01101011001111 | 0b00011011001111 | 0b01011011001111 | 0b00111011001111 | 0b01111011001111 | 0b00000111001111 | 0b01000111001111 | 0b00100111001111 | 0b01100111001111 | 0b00010111001111 | 0b01010111001111 | 0b00110111001111 | 0b01110111001111 | 0b00001111001111 | 0b01001111001111 | 0b00101111001111 | 0b01101111001111 | 0b00011111001111 | 0b01011111001111 | 0b00111111001111 | 0b01111111001111 | 0b00000000101111 | 0b01000000101111 | 0b00100000101111 | 0b01100000101111 | 0b00010000101111 | 0b01010000101111 | 0b00110000101111 | 0b01110000101111 | 0b00001000101111 | 0b01001000101111 | 0b00101000101111 | 0b01101000101111 | 0b00011000101111 | 0b01011000101111 | 0b00111000101111 | 0b01111000101111 | 0b00000100101111 | 0b01000100101111 | 0b00100100101111 | 0b01100100101111 | 0b00010100101111 | 0b01010100101111 | 0b00110100101111 | 0b01110100101111 | 0b00001100101111 | 0b01001100101111 | 0b00101100101111 | 0b01101100101111 | 0b00011100101111 | 0b01011100101111 | 0b00111100101111 | 0b01111100101111 | 0b00000010101111 | 0b01000010101111 | 0b00100010101111 | 0b01100010101111 | 0b00010010101111 | 0b01010010101111 | 0b00110010101111 | 0b01110010101111 | 0b00001010101111 | 0b01001010101111 | 0b00101010101111 | 0b01101010101111 | 0b00011010101111 | 0b01011010101111 | 0b00111010101111 | 0b01111010101111 | 0b00000110101111 | 0b01000110101111 | 0b00100110101111 | 0b01100110101111 | 0b00010110101111 | 0b01010110101111 | 0b00110110101111 | 0b01110110101111 | 0b00001110101111 | 0b01001110101111 | 0b00101110101111 | 0b01101110101111 | 0b00011110101111 | 0b01011110101111 | 0b00111110101111 | 0b01111110101111 | 0b00000001101111 | 0b01000001101111 | 0b00100001101111 | 0b01100001101111 | 0b00010001101111 | 0b01010001101111 | 0b00110001101111 | 0b01110001101111 | 0b00001001101111 | 0b01001001101111 | 0b00101001101111 | 0b01101001101111 | 0b00011001101111 | 0b01011001101111 | 0b00111001101111 | 0b01111001101111 | 0b00000101101111 | 0b01000101101111 | 0b00100101101111 | 0b01100101101111 | 0b00010101101111 | 0b01010101101111 | 0b00110101101111 | 0b01110101101111 | 0b00001101101111 | 0b01001101101111 | 0b00101101101111 | 0b01101101101111 | 0b00011101101111 | 0b01011101101111 | 0b00111101101111 | 0b01111101101111 | 0b00000011101111 | 0b01000011101111 | 0b00100011101111 | 0b01100011101111 | 0b00010011101111 | 0b01010011101111 | 0b00110011101111 | 0b01110011101111 | 0b00001011101111 | 0b01001011101111 | 0b00101011101111 | 0b01101011101111 | 0b00011011101111 | 0b01011011101111 | 0b00111011101111 | 0b01111011101111 | 0b00000111101111 | 0b01000111101111 | 0b00100111101111 | 0b01100111101111 | 0b00010111101111 | 0b01010111101111 | 0b00110111101111 | 0b01110111101111 | 0b00001111101111 | 0b01001111101111 | 0b00101111101111 | 0b01101111101111 | 0b00011111101111 | 0b01011111101111 | 0b00111111101111 | 0b01111111101111 | 0b00000000011111 | 0b01000000011111 | 0b00100000011111 | 0b01100000011111 | 0b00010000011111 | 0b01010000011111 | 0b00110000011111 | 0b01110000011111 | 0b00001000011111 | 0b01001000011111 | 0b00101000011111 | 0b01101000011111 | 0b00011000011111 | 0b01011000011111 | 0b00111000011111 | 0b01111000011111 | 0b00000100011111 | 0b01000100011111 | 0b00100100011111 | 0b01100100011111 | 0b00010100011111 | 0b01010100011111 | 0b00110100011111 | 0b01110100011111 | 0b00001100011111 | 0b01001100011111 | 0b00101100011111 | 0b01101100011111 | 0b00011100011111 | 0b01011100011111 | 0b00111100011111 | 0b01111100011111 | 0b00000010011111 | 0b01000010011111 | 0b00100010011111 | 0b01100010011111 | 0b00010010011111 | 0b01010010011111 | 0b00110010011111 | 0b01110010011111 | 0b00001010011111 | 0b01001010011111 | 0b00101010011111 | 0b01101010011111 | 0b00011010011111 | 0b01011010011111 | 0b00111010011111 | 0b01111010011111 | 0b00000110011111 | 0b01000110011111 | 0b00100110011111 | 0b01100110011111 | 0b00010110011111 | 0b01010110011111 | 0b00110110011111 | 0b01110110011111 | 0b00001110011111 | 0b01001110011111 | 0b00101110011111 | 0b01101110011111 | 0b00011110011111 | 0b01011110011111 | 0b00111110011111 | 0b01111110011111 | 0b00000001011111 | 0b01000001011111 | 0b00100001011111 | 0b01100001011111 | 0b00010001011111 | 0b01010001011111 | 0b00110001011111 | 0b01110001011111 | 0b00001001011111 | 0b01001001011111 | 0b00101001011111 | 0b01101001011111 | 0b00011001011111 | 0b01011001011111 | 0b00111001011111 | 0b01111001011111 | 0b00000101011111 | 0b01000101011111 | 0b00100101011111 | 0b01100101011111 | 0b00010101011111 | 0b01010101011111 | 0b00110101011111 | 0b01110101011111 | 0b00001101011111 | 0b01001101011111 | 0b00101101011111 | 0b01101101011111 | 0b00011101011111 | 0b01011101011111 | 0b00111101011111 | 0b01111101011111 | 0b00000011011111 | 0b01000011011111 | 0b00100011011111 | 0b01100011011111 | 0b00010011011111 | 0b01010011011111 | 0b00110011011111 | 0b01110011011111 | 0b00001011011111 | 0b01001011011111 | 0b00101011011111 | 0b01101011011111 | 0b00011011011111 | 0b01011011011111 | 0b00111011011111 | 0b01111011011111 | 0b00000111011111 | 0b01000111011111 | 0b00100111011111 | 0b01100111011111 | 0b00010111011111 | 0b01010111011111 | 0b00110111011111 | 0b01110111011111 | 0b00001111011111 | 0b01001111011111 | 0b00101111011111 | 0b01101111011111 | 0b00011111011111 | 0b01011111011111 | 0b00111111011111 | 0b01111111011111 | 0b00000000111111 | 0b01000000111111 | 0b00100000111111 | 0b01100000111111 | 0b00010000111111 | 0b01010000111111 | 0b00110000111111 | 0b01110000111111 | 0b00001000111111 | 0b01001000111111 | 0b00101000111111 | 0b01101000111111 | 0b00011000111111 | 0b01011000111111 | 0b00111000111111 | 0b01111000111111 | 0b00000100111111 | 0b01000100111111 | 0b00100100111111 | 0b01100100111111 | 0b00010100111111 | 0b01010100111111 | 0b00110100111111 | 0b01110100111111 | 0b00001100111111 | 0b01001100111111 | 0b00101100111111 | 0b01101100111111 | 0b00011100111111 | 0b01011100111111 | 0b00111100111111 | 0b01111100111111 | 0b00000010111111 | 0b01000010111111 | 0b00100010111111 | 0b01100010111111 | 0b00010010111111 | 0b01010010111111 | 0b00110010111111 | 0b01110010111111 | 0b00001010111111 | 0b01001010111111 | 0b00101010111111 | 0b01101010111111 | 0b00011010111111 | 0b01011010111111 | 0b00111010111111 | 0b01111010111111 | 0b00000110111111 | 0b01000110111111 | 0b00100110111111 | 0b01100110111111 | 0b00010110111111 | 0b01010110111111 | 0b00110110111111 | 0b01110110111111 | 0b00001110111111 | 0b01001110111111 | 0b00101110111111 | 0b01101110111111 | 0b00011110111111 | 0b01011110111111 | 0b00111110111111 | 0b01111110111111 | 0b00000001111111 | 0b01000001111111 | 0b00100001111111 | 0b01100001111111 | 0b00010001111111 | 0b01010001111111 | 0b00110001111111 | 0b01110001111111 | 0b00001001111111 | 0b01001001111111 | 0b00101001111111 | 0b01101001111111 | 0b00011001111111 | 0b01011001111111 | 0b00111001111111 | 0b01111001111111 | 0b00000101111111 | 0b01000101111111 | 0b00100101111111 | 0b01100101111111 | 0b00010101111111 | 0b01010101111111 | 0b00110101111111 | 0b01110101111111 | 0b00001101111111 | 0b01001101111111 | 0b00101101111111 | 0b01101101111111 | 0b00011101111111 | 0b01011101111111 | 0b00111101111111 | 0b01111101111111 | 0b00000011111111 | 0b01000011111111 | 0b00100011111111 | 0b01100011111111 | 0b00010011111111 | 0b01010011111111 | 0b00110011111111 | 0b01110011111111 | 0b00001011111111 | 0b01001011111111 | 0b00101011111111 | 0b01101011111111 | 0b00011011111111 | 0b01011011111111 | 0b00111011111111 | 0b01111011111111 | 0b00000111111111 | 0b01000111111111 | 0b00100111111111 | 0b01100111111111 | 0b00010111111111 | 0b01010111111111 | 0b00110111111111 | 0b01110111111111 | 0b00001111111111 | 0b01001111111111 | 0b00101111111111 | 0b01101111111111 | 0b00011111111111 | 0b01011111111111 | 0b00111111111111 | 0b01111111111111, _, _) => {
            let o1 = (inst >> 24) & 0b1;
            let imm19 = (inst >> 5) & 0b1111111111111111111;
            let o0 = (inst >> 4) & 0b1;
            let cond = inst & 0b1111;
            match (o1, o0) {
                (0, 0) => return OpCode::B_only_condbranch,
                (0, 1) => return OpCode::Unallocated,
                (1, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b110, _, 0b00000000000000 | 0b00100000000000 | 0b00010000000000 | 0b00110000000000 | 0b00001000000000 | 0b00101000000000 | 0b00011000000000 | 0b00111000000000 | 0b00000100000000 | 0b00100100000000 | 0b00010100000000 | 0b00110100000000 | 0b00001100000000 | 0b00101100000000 | 0b00011100000000 | 0b00111100000000 | 0b00000010000000 | 0b00100010000000 | 0b00010010000000 | 0b00110010000000 | 0b00001010000000 | 0b00101010000000 | 0b00011010000000 | 0b00111010000000 | 0b00000110000000 | 0b00100110000000 | 0b00010110000000 | 0b00110110000000 | 0b00001110000000 | 0b00101110000000 | 0b00011110000000 | 0b00111110000000 | 0b00000001000000 | 0b00100001000000 | 0b00010001000000 | 0b00110001000000 | 0b00001001000000 | 0b00101001000000 | 0b00011001000000 | 0b00111001000000 | 0b00000101000000 | 0b00100101000000 | 0b00010101000000 | 0b00110101000000 | 0b00001101000000 | 0b00101101000000 | 0b00011101000000 | 0b00111101000000 | 0b00000011000000 | 0b00100011000000 | 0b00010011000000 | 0b00110011000000 | 0b00001011000000 | 0b00101011000000 | 0b00011011000000 | 0b00111011000000 | 0b00000111000000 | 0b00100111000000 | 0b00010111000000 | 0b00110111000000 | 0b00001111000000 | 0b00101111000000 | 0b00011111000000 | 0b00111111000000 | 0b00000000100000 | 0b00100000100000 | 0b00010000100000 | 0b00110000100000 | 0b00001000100000 | 0b00101000100000 | 0b00011000100000 | 0b00111000100000 | 0b00000100100000 | 0b00100100100000 | 0b00010100100000 | 0b00110100100000 | 0b00001100100000 | 0b00101100100000 | 0b00011100100000 | 0b00111100100000 | 0b00000010100000 | 0b00100010100000 | 0b00010010100000 | 0b00110010100000 | 0b00001010100000 | 0b00101010100000 | 0b00011010100000 | 0b00111010100000 | 0b00000110100000 | 0b00100110100000 | 0b00010110100000 | 0b00110110100000 | 0b00001110100000 | 0b00101110100000 | 0b00011110100000 | 0b00111110100000 | 0b00000001100000 | 0b00100001100000 | 0b00010001100000 | 0b00110001100000 | 0b00001001100000 | 0b00101001100000 | 0b00011001100000 | 0b00111001100000 | 0b00000101100000 | 0b00100101100000 | 0b00010101100000 | 0b00110101100000 | 0b00001101100000 | 0b00101101100000 | 0b00011101100000 | 0b00111101100000 | 0b00000011100000 | 0b00100011100000 | 0b00010011100000 | 0b00110011100000 | 0b00001011100000 | 0b00101011100000 | 0b00011011100000 | 0b00111011100000 | 0b00000111100000 | 0b00100111100000 | 0b00010111100000 | 0b00110111100000 | 0b00001111100000 | 0b00101111100000 | 0b00011111100000 | 0b00111111100000 | 0b00000000010000 | 0b00100000010000 | 0b00010000010000 | 0b00110000010000 | 0b00001000010000 | 0b00101000010000 | 0b00011000010000 | 0b00111000010000 | 0b00000100010000 | 0b00100100010000 | 0b00010100010000 | 0b00110100010000 | 0b00001100010000 | 0b00101100010000 | 0b00011100010000 | 0b00111100010000 | 0b00000010010000 | 0b00100010010000 | 0b00010010010000 | 0b00110010010000 | 0b00001010010000 | 0b00101010010000 | 0b00011010010000 | 0b00111010010000 | 0b00000110010000 | 0b00100110010000 | 0b00010110010000 | 0b00110110010000 | 0b00001110010000 | 0b00101110010000 | 0b00011110010000 | 0b00111110010000 | 0b00000001010000 | 0b00100001010000 | 0b00010001010000 | 0b00110001010000 | 0b00001001010000 | 0b00101001010000 | 0b00011001010000 | 0b00111001010000 | 0b00000101010000 | 0b00100101010000 | 0b00010101010000 | 0b00110101010000 | 0b00001101010000 | 0b00101101010000 | 0b00011101010000 | 0b00111101010000 | 0b00000011010000 | 0b00100011010000 | 0b00010011010000 | 0b00110011010000 | 0b00001011010000 | 0b00101011010000 | 0b00011011010000 | 0b00111011010000 | 0b00000111010000 | 0b00100111010000 | 0b00010111010000 | 0b00110111010000 | 0b00001111010000 | 0b00101111010000 | 0b00011111010000 | 0b00111111010000 | 0b00000000110000 | 0b00100000110000 | 0b00010000110000 | 0b00110000110000 | 0b00001000110000 | 0b00101000110000 | 0b00011000110000 | 0b00111000110000 | 0b00000100110000 | 0b00100100110000 | 0b00010100110000 | 0b00110100110000 | 0b00001100110000 | 0b00101100110000 | 0b00011100110000 | 0b00111100110000 | 0b00000010110000 | 0b00100010110000 | 0b00010010110000 | 0b00110010110000 | 0b00001010110000 | 0b00101010110000 | 0b00011010110000 | 0b00111010110000 | 0b00000110110000 | 0b00100110110000 | 0b00010110110000 | 0b00110110110000 | 0b00001110110000 | 0b00101110110000 | 0b00011110110000 | 0b00111110110000 | 0b00000001110000 | 0b00100001110000 | 0b00010001110000 | 0b00110001110000 | 0b00001001110000 | 0b00101001110000 | 0b00011001110000 | 0b00111001110000 | 0b00000101110000 | 0b00100101110000 | 0b00010101110000 | 0b00110101110000 | 0b00001101110000 | 0b00101101110000 | 0b00011101110000 | 0b00111101110000 | 0b00000011110000 | 0b00100011110000 | 0b00010011110000 | 0b00110011110000 | 0b00001011110000 | 0b00101011110000 | 0b00011011110000 | 0b00111011110000 | 0b00000111110000 | 0b00100111110000 | 0b00010111110000 | 0b00110111110000 | 0b00001111110000 | 0b00101111110000 | 0b00011111110000 | 0b00111111110000 | 0b00000000001000 | 0b00100000001000 | 0b00010000001000 | 0b00110000001000 | 0b00001000001000 | 0b00101000001000 | 0b00011000001000 | 0b00111000001000 | 0b00000100001000 | 0b00100100001000 | 0b00010100001000 | 0b00110100001000 | 0b00001100001000 | 0b00101100001000 | 0b00011100001000 | 0b00111100001000 | 0b00000010001000 | 0b00100010001000 | 0b00010010001000 | 0b00110010001000 | 0b00001010001000 | 0b00101010001000 | 0b00011010001000 | 0b00111010001000 | 0b00000110001000 | 0b00100110001000 | 0b00010110001000 | 0b00110110001000 | 0b00001110001000 | 0b00101110001000 | 0b00011110001000 | 0b00111110001000 | 0b00000001001000 | 0b00100001001000 | 0b00010001001000 | 0b00110001001000 | 0b00001001001000 | 0b00101001001000 | 0b00011001001000 | 0b00111001001000 | 0b00000101001000 | 0b00100101001000 | 0b00010101001000 | 0b00110101001000 | 0b00001101001000 | 0b00101101001000 | 0b00011101001000 | 0b00111101001000 | 0b00000011001000 | 0b00100011001000 | 0b00010011001000 | 0b00110011001000 | 0b00001011001000 | 0b00101011001000 | 0b00011011001000 | 0b00111011001000 | 0b00000111001000 | 0b00100111001000 | 0b00010111001000 | 0b00110111001000 | 0b00001111001000 | 0b00101111001000 | 0b00011111001000 | 0b00111111001000 | 0b00000000101000 | 0b00100000101000 | 0b00010000101000 | 0b00110000101000 | 0b00001000101000 | 0b00101000101000 | 0b00011000101000 | 0b00111000101000 | 0b00000100101000 | 0b00100100101000 | 0b00010100101000 | 0b00110100101000 | 0b00001100101000 | 0b00101100101000 | 0b00011100101000 | 0b00111100101000 | 0b00000010101000 | 0b00100010101000 | 0b00010010101000 | 0b00110010101000 | 0b00001010101000 | 0b00101010101000 | 0b00011010101000 | 0b00111010101000 | 0b00000110101000 | 0b00100110101000 | 0b00010110101000 | 0b00110110101000 | 0b00001110101000 | 0b00101110101000 | 0b00011110101000 | 0b00111110101000 | 0b00000001101000 | 0b00100001101000 | 0b00010001101000 | 0b00110001101000 | 0b00001001101000 | 0b00101001101000 | 0b00011001101000 | 0b00111001101000 | 0b00000101101000 | 0b00100101101000 | 0b00010101101000 | 0b00110101101000 | 0b00001101101000 | 0b00101101101000 | 0b00011101101000 | 0b00111101101000 | 0b00000011101000 | 0b00100011101000 | 0b00010011101000 | 0b00110011101000 | 0b00001011101000 | 0b00101011101000 | 0b00011011101000 | 0b00111011101000 | 0b00000111101000 | 0b00100111101000 | 0b00010111101000 | 0b00110111101000 | 0b00001111101000 | 0b00101111101000 | 0b00011111101000 | 0b00111111101000 | 0b00000000011000 | 0b00100000011000 | 0b00010000011000 | 0b00110000011000 | 0b00001000011000 | 0b00101000011000 | 0b00011000011000 | 0b00111000011000 | 0b00000100011000 | 0b00100100011000 | 0b00010100011000 | 0b00110100011000 | 0b00001100011000 | 0b00101100011000 | 0b00011100011000 | 0b00111100011000 | 0b00000010011000 | 0b00100010011000 | 0b00010010011000 | 0b00110010011000 | 0b00001010011000 | 0b00101010011000 | 0b00011010011000 | 0b00111010011000 | 0b00000110011000 | 0b00100110011000 | 0b00010110011000 | 0b00110110011000 | 0b00001110011000 | 0b00101110011000 | 0b00011110011000 | 0b00111110011000 | 0b00000001011000 | 0b00100001011000 | 0b00010001011000 | 0b00110001011000 | 0b00001001011000 | 0b00101001011000 | 0b00011001011000 | 0b00111001011000 | 0b00000101011000 | 0b00100101011000 | 0b00010101011000 | 0b00110101011000 | 0b00001101011000 | 0b00101101011000 | 0b00011101011000 | 0b00111101011000 | 0b00000011011000 | 0b00100011011000 | 0b00010011011000 | 0b00110011011000 | 0b00001011011000 | 0b00101011011000 | 0b00011011011000 | 0b00111011011000 | 0b00000111011000 | 0b00100111011000 | 0b00010111011000 | 0b00110111011000 | 0b00001111011000 | 0b00101111011000 | 0b00011111011000 | 0b00111111011000 | 0b00000000111000 | 0b00100000111000 | 0b00010000111000 | 0b00110000111000 | 0b00001000111000 | 0b00101000111000 | 0b00011000111000 | 0b00111000111000 | 0b00000100111000 | 0b00100100111000 | 0b00010100111000 | 0b00110100111000 | 0b00001100111000 | 0b00101100111000 | 0b00011100111000 | 0b00111100111000 | 0b00000010111000 | 0b00100010111000 | 0b00010010111000 | 0b00110010111000 | 0b00001010111000 | 0b00101010111000 | 0b00011010111000 | 0b00111010111000 | 0b00000110111000 | 0b00100110111000 | 0b00010110111000 | 0b00110110111000 | 0b00001110111000 | 0b00101110111000 | 0b00011110111000 | 0b00111110111000 | 0b00000001111000 | 0b00100001111000 | 0b00010001111000 | 0b00110001111000 | 0b00001001111000 | 0b00101001111000 | 0b00011001111000 | 0b00111001111000 | 0b00000101111000 | 0b00100101111000 | 0b00010101111000 | 0b00110101111000 | 0b00001101111000 | 0b00101101111000 | 0b00011101111000 | 0b00111101111000 | 0b00000011111000 | 0b00100011111000 | 0b00010011111000 | 0b00110011111000 | 0b00001011111000 | 0b00101011111000 | 0b00011011111000 | 0b00111011111000 | 0b00000111111000 | 0b00100111111000 | 0b00010111111000 | 0b00110111111000 | 0b00001111111000 | 0b00101111111000 | 0b00011111111000 | 0b00111111111000 | 0b00000000000100 | 0b00100000000100 | 0b00010000000100 | 0b00110000000100 | 0b00001000000100 | 0b00101000000100 | 0b00011000000100 | 0b00111000000100 | 0b00000100000100 | 0b00100100000100 | 0b00010100000100 | 0b00110100000100 | 0b00001100000100 | 0b00101100000100 | 0b00011100000100 | 0b00111100000100 | 0b00000010000100 | 0b00100010000100 | 0b00010010000100 | 0b00110010000100 | 0b00001010000100 | 0b00101010000100 | 0b00011010000100 | 0b00111010000100 | 0b00000110000100 | 0b00100110000100 | 0b00010110000100 | 0b00110110000100 | 0b00001110000100 | 0b00101110000100 | 0b00011110000100 | 0b00111110000100 | 0b00000001000100 | 0b00100001000100 | 0b00010001000100 | 0b00110001000100 | 0b00001001000100 | 0b00101001000100 | 0b00011001000100 | 0b00111001000100 | 0b00000101000100 | 0b00100101000100 | 0b00010101000100 | 0b00110101000100 | 0b00001101000100 | 0b00101101000100 | 0b00011101000100 | 0b00111101000100 | 0b00000011000100 | 0b00100011000100 | 0b00010011000100 | 0b00110011000100 | 0b00001011000100 | 0b00101011000100 | 0b00011011000100 | 0b00111011000100 | 0b00000111000100 | 0b00100111000100 | 0b00010111000100 | 0b00110111000100 | 0b00001111000100 | 0b00101111000100 | 0b00011111000100 | 0b00111111000100 | 0b00000000100100 | 0b00100000100100 | 0b00010000100100 | 0b00110000100100 | 0b00001000100100 | 0b00101000100100 | 0b00011000100100 | 0b00111000100100 | 0b00000100100100 | 0b00100100100100 | 0b00010100100100 | 0b00110100100100 | 0b00001100100100 | 0b00101100100100 | 0b00011100100100 | 0b00111100100100 | 0b00000010100100 | 0b00100010100100 | 0b00010010100100 | 0b00110010100100 | 0b00001010100100 | 0b00101010100100 | 0b00011010100100 | 0b00111010100100 | 0b00000110100100 | 0b00100110100100 | 0b00010110100100 | 0b00110110100100 | 0b00001110100100 | 0b00101110100100 | 0b00011110100100 | 0b00111110100100 | 0b00000001100100 | 0b00100001100100 | 0b00010001100100 | 0b00110001100100 | 0b00001001100100 | 0b00101001100100 | 0b00011001100100 | 0b00111001100100 | 0b00000101100100 | 0b00100101100100 | 0b00010101100100 | 0b00110101100100 | 0b00001101100100 | 0b00101101100100 | 0b00011101100100 | 0b00111101100100 | 0b00000011100100 | 0b00100011100100 | 0b00010011100100 | 0b00110011100100 | 0b00001011100100 | 0b00101011100100 | 0b00011011100100 | 0b00111011100100 | 0b00000111100100 | 0b00100111100100 | 0b00010111100100 | 0b00110111100100 | 0b00001111100100 | 0b00101111100100 | 0b00011111100100 | 0b00111111100100 | 0b00000000010100 | 0b00100000010100 | 0b00010000010100 | 0b00110000010100 | 0b00001000010100 | 0b00101000010100 | 0b00011000010100 | 0b00111000010100 | 0b00000100010100 | 0b00100100010100 | 0b00010100010100 | 0b00110100010100 | 0b00001100010100 | 0b00101100010100 | 0b00011100010100 | 0b00111100010100 | 0b00000010010100 | 0b00100010010100 | 0b00010010010100 | 0b00110010010100 | 0b00001010010100 | 0b00101010010100 | 0b00011010010100 | 0b00111010010100 | 0b00000110010100 | 0b00100110010100 | 0b00010110010100 | 0b00110110010100 | 0b00001110010100 | 0b00101110010100 | 0b00011110010100 | 0b00111110010100 | 0b00000001010100 | 0b00100001010100 | 0b00010001010100 | 0b00110001010100 | 0b00001001010100 | 0b00101001010100 | 0b00011001010100 | 0b00111001010100 | 0b00000101010100 | 0b00100101010100 | 0b00010101010100 | 0b00110101010100 | 0b00001101010100 | 0b00101101010100 | 0b00011101010100 | 0b00111101010100 | 0b00000011010100 | 0b00100011010100 | 0b00010011010100 | 0b00110011010100 | 0b00001011010100 | 0b00101011010100 | 0b00011011010100 | 0b00111011010100 | 0b00000111010100 | 0b00100111010100 | 0b00010111010100 | 0b00110111010100 | 0b00001111010100 | 0b00101111010100 | 0b00011111010100 | 0b00111111010100 | 0b00000000110100 | 0b00100000110100 | 0b00010000110100 | 0b00110000110100 | 0b00001000110100 | 0b00101000110100 | 0b00011000110100 | 0b00111000110100 | 0b00000100110100 | 0b00100100110100 | 0b00010100110100 | 0b00110100110100 | 0b00001100110100 | 0b00101100110100 | 0b00011100110100 | 0b00111100110100 | 0b00000010110100 | 0b00100010110100 | 0b00010010110100 | 0b00110010110100 | 0b00001010110100 | 0b00101010110100 | 0b00011010110100 | 0b00111010110100 | 0b00000110110100 | 0b00100110110100 | 0b00010110110100 | 0b00110110110100 | 0b00001110110100 | 0b00101110110100 | 0b00011110110100 | 0b00111110110100 | 0b00000001110100 | 0b00100001110100 | 0b00010001110100 | 0b00110001110100 | 0b00001001110100 | 0b00101001110100 | 0b00011001110100 | 0b00111001110100 | 0b00000101110100 | 0b00100101110100 | 0b00010101110100 | 0b00110101110100 | 0b00001101110100 | 0b00101101110100 | 0b00011101110100 | 0b00111101110100 | 0b00000011110100 | 0b00100011110100 | 0b00010011110100 | 0b00110011110100 | 0b00001011110100 | 0b00101011110100 | 0b00011011110100 | 0b00111011110100 | 0b00000111110100 | 0b00100111110100 | 0b00010111110100 | 0b00110111110100 | 0b00001111110100 | 0b00101111110100 | 0b00011111110100 | 0b00111111110100 | 0b00000000001100 | 0b00100000001100 | 0b00010000001100 | 0b00110000001100 | 0b00001000001100 | 0b00101000001100 | 0b00011000001100 | 0b00111000001100 | 0b00000100001100 | 0b00100100001100 | 0b00010100001100 | 0b00110100001100 | 0b00001100001100 | 0b00101100001100 | 0b00011100001100 | 0b00111100001100 | 0b00000010001100 | 0b00100010001100 | 0b00010010001100 | 0b00110010001100 | 0b00001010001100 | 0b00101010001100 | 0b00011010001100 | 0b00111010001100 | 0b00000110001100 | 0b00100110001100 | 0b00010110001100 | 0b00110110001100 | 0b00001110001100 | 0b00101110001100 | 0b00011110001100 | 0b00111110001100 | 0b00000001001100 | 0b00100001001100 | 0b00010001001100 | 0b00110001001100 | 0b00001001001100 | 0b00101001001100 | 0b00011001001100 | 0b00111001001100 | 0b00000101001100 | 0b00100101001100 | 0b00010101001100 | 0b00110101001100 | 0b00001101001100 | 0b00101101001100 | 0b00011101001100 | 0b00111101001100 | 0b00000011001100 | 0b00100011001100 | 0b00010011001100 | 0b00110011001100 | 0b00001011001100 | 0b00101011001100 | 0b00011011001100 | 0b00111011001100 | 0b00000111001100 | 0b00100111001100 | 0b00010111001100 | 0b00110111001100 | 0b00001111001100 | 0b00101111001100 | 0b00011111001100 | 0b00111111001100 | 0b00000000101100 | 0b00100000101100 | 0b00010000101100 | 0b00110000101100 | 0b00001000101100 | 0b00101000101100 | 0b00011000101100 | 0b00111000101100 | 0b00000100101100 | 0b00100100101100 | 0b00010100101100 | 0b00110100101100 | 0b00001100101100 | 0b00101100101100 | 0b00011100101100 | 0b00111100101100 | 0b00000010101100 | 0b00100010101100 | 0b00010010101100 | 0b00110010101100 | 0b00001010101100 | 0b00101010101100 | 0b00011010101100 | 0b00111010101100 | 0b00000110101100 | 0b00100110101100 | 0b00010110101100 | 0b00110110101100 | 0b00001110101100 | 0b00101110101100 | 0b00011110101100 | 0b00111110101100 | 0b00000001101100 | 0b00100001101100 | 0b00010001101100 | 0b00110001101100 | 0b00001001101100 | 0b00101001101100 | 0b00011001101100 | 0b00111001101100 | 0b00000101101100 | 0b00100101101100 | 0b00010101101100 | 0b00110101101100 | 0b00001101101100 | 0b00101101101100 | 0b00011101101100 | 0b00111101101100 | 0b00000011101100 | 0b00100011101100 | 0b00010011101100 | 0b00110011101100 | 0b00001011101100 | 0b00101011101100 | 0b00011011101100 | 0b00111011101100 | 0b00000111101100 | 0b00100111101100 | 0b00010111101100 | 0b00110111101100 | 0b00001111101100 | 0b00101111101100 | 0b00011111101100 | 0b00111111101100 | 0b00000000011100 | 0b00100000011100 | 0b00010000011100 | 0b00110000011100 | 0b00001000011100 | 0b00101000011100 | 0b00011000011100 | 0b00111000011100 | 0b00000100011100 | 0b00100100011100 | 0b00010100011100 | 0b00110100011100 | 0b00001100011100 | 0b00101100011100 | 0b00011100011100 | 0b00111100011100 | 0b00000010011100 | 0b00100010011100 | 0b00010010011100 | 0b00110010011100 | 0b00001010011100 | 0b00101010011100 | 0b00011010011100 | 0b00111010011100 | 0b00000110011100 | 0b00100110011100 | 0b00010110011100 | 0b00110110011100 | 0b00001110011100 | 0b00101110011100 | 0b00011110011100 | 0b00111110011100 | 0b00000001011100 | 0b00100001011100 | 0b00010001011100 | 0b00110001011100 | 0b00001001011100 | 0b00101001011100 | 0b00011001011100 | 0b00111001011100 | 0b00000101011100 | 0b00100101011100 | 0b00010101011100 | 0b00110101011100 | 0b00001101011100 | 0b00101101011100 | 0b00011101011100 | 0b00111101011100 | 0b00000011011100 | 0b00100011011100 | 0b00010011011100 | 0b00110011011100 | 0b00001011011100 | 0b00101011011100 | 0b00011011011100 | 0b00111011011100 | 0b00000111011100 | 0b00100111011100 | 0b00010111011100 | 0b00110111011100 | 0b00001111011100 | 0b00101111011100 | 0b00011111011100 | 0b00111111011100 | 0b00000000111100 | 0b00100000111100 | 0b00010000111100 | 0b00110000111100 | 0b00001000111100 | 0b00101000111100 | 0b00011000111100 | 0b00111000111100 | 0b00000100111100 | 0b00100100111100 | 0b00010100111100 | 0b00110100111100 | 0b00001100111100 | 0b00101100111100 | 0b00011100111100 | 0b00111100111100 | 0b00000010111100 | 0b00100010111100 | 0b00010010111100 | 0b00110010111100 | 0b00001010111100 | 0b00101010111100 | 0b00011010111100 | 0b00111010111100 | 0b00000110111100 | 0b00100110111100 | 0b00010110111100 | 0b00110110111100 | 0b00001110111100 | 0b00101110111100 | 0b00011110111100 | 0b00111110111100 | 0b00000001111100 | 0b00100001111100 | 0b00010001111100 | 0b00110001111100 | 0b00001001111100 | 0b00101001111100 | 0b00011001111100 | 0b00111001111100 | 0b00000101111100 | 0b00100101111100 | 0b00010101111100 | 0b00110101111100 | 0b00001101111100 | 0b00101101111100 | 0b00011101111100 | 0b00111101111100 | 0b00000011111100 | 0b00100011111100 | 0b00010011111100 | 0b00110011111100 | 0b00001011111100 | 0b00101011111100 | 0b00011011111100 | 0b00111011111100 | 0b00000111111100 | 0b00100111111100 | 0b00010111111100 | 0b00110111111100 | 0b00001111111100 | 0b00101111111100 | 0b00011111111100 | 0b00111111111100 | 0b00000000000010 | 0b00100000000010 | 0b00010000000010 | 0b00110000000010 | 0b00001000000010 | 0b00101000000010 | 0b00011000000010 | 0b00111000000010 | 0b00000100000010 | 0b00100100000010 | 0b00010100000010 | 0b00110100000010 | 0b00001100000010 | 0b00101100000010 | 0b00011100000010 | 0b00111100000010 | 0b00000010000010 | 0b00100010000010 | 0b00010010000010 | 0b00110010000010 | 0b00001010000010 | 0b00101010000010 | 0b00011010000010 | 0b00111010000010 | 0b00000110000010 | 0b00100110000010 | 0b00010110000010 | 0b00110110000010 | 0b00001110000010 | 0b00101110000010 | 0b00011110000010 | 0b00111110000010 | 0b00000001000010 | 0b00100001000010 | 0b00010001000010 | 0b00110001000010 | 0b00001001000010 | 0b00101001000010 | 0b00011001000010 | 0b00111001000010 | 0b00000101000010 | 0b00100101000010 | 0b00010101000010 | 0b00110101000010 | 0b00001101000010 | 0b00101101000010 | 0b00011101000010 | 0b00111101000010 | 0b00000011000010 | 0b00100011000010 | 0b00010011000010 | 0b00110011000010 | 0b00001011000010 | 0b00101011000010 | 0b00011011000010 | 0b00111011000010 | 0b00000111000010 | 0b00100111000010 | 0b00010111000010 | 0b00110111000010 | 0b00001111000010 | 0b00101111000010 | 0b00011111000010 | 0b00111111000010 | 0b00000000100010 | 0b00100000100010 | 0b00010000100010 | 0b00110000100010 | 0b00001000100010 | 0b00101000100010 | 0b00011000100010 | 0b00111000100010 | 0b00000100100010 | 0b00100100100010 | 0b00010100100010 | 0b00110100100010 | 0b00001100100010 | 0b00101100100010 | 0b00011100100010 | 0b00111100100010 | 0b00000010100010 | 0b00100010100010 | 0b00010010100010 | 0b00110010100010 | 0b00001010100010 | 0b00101010100010 | 0b00011010100010 | 0b00111010100010 | 0b00000110100010 | 0b00100110100010 | 0b00010110100010 | 0b00110110100010 | 0b00001110100010 | 0b00101110100010 | 0b00011110100010 | 0b00111110100010 | 0b00000001100010 | 0b00100001100010 | 0b00010001100010 | 0b00110001100010 | 0b00001001100010 | 0b00101001100010 | 0b00011001100010 | 0b00111001100010 | 0b00000101100010 | 0b00100101100010 | 0b00010101100010 | 0b00110101100010 | 0b00001101100010 | 0b00101101100010 | 0b00011101100010 | 0b00111101100010 | 0b00000011100010 | 0b00100011100010 | 0b00010011100010 | 0b00110011100010 | 0b00001011100010 | 0b00101011100010 | 0b00011011100010 | 0b00111011100010 | 0b00000111100010 | 0b00100111100010 | 0b00010111100010 | 0b00110111100010 | 0b00001111100010 | 0b00101111100010 | 0b00011111100010 | 0b00111111100010 | 0b00000000010010 | 0b00100000010010 | 0b00010000010010 | 0b00110000010010 | 0b00001000010010 | 0b00101000010010 | 0b00011000010010 | 0b00111000010010 | 0b00000100010010 | 0b00100100010010 | 0b00010100010010 | 0b00110100010010 | 0b00001100010010 | 0b00101100010010 | 0b00011100010010 | 0b00111100010010 | 0b00000010010010 | 0b00100010010010 | 0b00010010010010 | 0b00110010010010 | 0b00001010010010 | 0b00101010010010 | 0b00011010010010 | 0b00111010010010 | 0b00000110010010 | 0b00100110010010 | 0b00010110010010 | 0b00110110010010 | 0b00001110010010 | 0b00101110010010 | 0b00011110010010 | 0b00111110010010 | 0b00000001010010 | 0b00100001010010 | 0b00010001010010 | 0b00110001010010 | 0b00001001010010 | 0b00101001010010 | 0b00011001010010 | 0b00111001010010 | 0b00000101010010 | 0b00100101010010 | 0b00010101010010 | 0b00110101010010 | 0b00001101010010 | 0b00101101010010 | 0b00011101010010 | 0b00111101010010 | 0b00000011010010 | 0b00100011010010 | 0b00010011010010 | 0b00110011010010 | 0b00001011010010 | 0b00101011010010 | 0b00011011010010 | 0b00111011010010 | 0b00000111010010 | 0b00100111010010 | 0b00010111010010 | 0b00110111010010 | 0b00001111010010 | 0b00101111010010 | 0b00011111010010 | 0b00111111010010 | 0b00000000110010 | 0b00100000110010 | 0b00010000110010 | 0b00110000110010 | 0b00001000110010 | 0b00101000110010 | 0b00011000110010 | 0b00111000110010 | 0b00000100110010 | 0b00100100110010 | 0b00010100110010 | 0b00110100110010 | 0b00001100110010 | 0b00101100110010 | 0b00011100110010 | 0b00111100110010 | 0b00000010110010 | 0b00100010110010 | 0b00010010110010 | 0b00110010110010 | 0b00001010110010 | 0b00101010110010 | 0b00011010110010 | 0b00111010110010 | 0b00000110110010 | 0b00100110110010 | 0b00010110110010 | 0b00110110110010 | 0b00001110110010 | 0b00101110110010 | 0b00011110110010 | 0b00111110110010 | 0b00000001110010 | 0b00100001110010 | 0b00010001110010 | 0b00110001110010 | 0b00001001110010 | 0b00101001110010 | 0b00011001110010 | 0b00111001110010 | 0b00000101110010 | 0b00100101110010 | 0b00010101110010 | 0b00110101110010 | 0b00001101110010 | 0b00101101110010 | 0b00011101110010 | 0b00111101110010 | 0b00000011110010 | 0b00100011110010 | 0b00010011110010 | 0b00110011110010 | 0b00001011110010 | 0b00101011110010 | 0b00011011110010 | 0b00111011110010 | 0b00000111110010 | 0b00100111110010 | 0b00010111110010 | 0b00110111110010 | 0b00001111110010 | 0b00101111110010 | 0b00011111110010 | 0b00111111110010 | 0b00000000001010 | 0b00100000001010 | 0b00010000001010 | 0b00110000001010 | 0b00001000001010 | 0b00101000001010 | 0b00011000001010 | 0b00111000001010 | 0b00000100001010 | 0b00100100001010 | 0b00010100001010 | 0b00110100001010 | 0b00001100001010 | 0b00101100001010 | 0b00011100001010 | 0b00111100001010 | 0b00000010001010 | 0b00100010001010 | 0b00010010001010 | 0b00110010001010 | 0b00001010001010 | 0b00101010001010 | 0b00011010001010 | 0b00111010001010 | 0b00000110001010 | 0b00100110001010 | 0b00010110001010 | 0b00110110001010 | 0b00001110001010 | 0b00101110001010 | 0b00011110001010 | 0b00111110001010 | 0b00000001001010 | 0b00100001001010 | 0b00010001001010 | 0b00110001001010 | 0b00001001001010 | 0b00101001001010 | 0b00011001001010 | 0b00111001001010 | 0b00000101001010 | 0b00100101001010 | 0b00010101001010 | 0b00110101001010 | 0b00001101001010 | 0b00101101001010 | 0b00011101001010 | 0b00111101001010 | 0b00000011001010 | 0b00100011001010 | 0b00010011001010 | 0b00110011001010 | 0b00001011001010 | 0b00101011001010 | 0b00011011001010 | 0b00111011001010 | 0b00000111001010 | 0b00100111001010 | 0b00010111001010 | 0b00110111001010 | 0b00001111001010 | 0b00101111001010 | 0b00011111001010 | 0b00111111001010 | 0b00000000101010 | 0b00100000101010 | 0b00010000101010 | 0b00110000101010 | 0b00001000101010 | 0b00101000101010 | 0b00011000101010 | 0b00111000101010 | 0b00000100101010 | 0b00100100101010 | 0b00010100101010 | 0b00110100101010 | 0b00001100101010 | 0b00101100101010 | 0b00011100101010 | 0b00111100101010 | 0b00000010101010 | 0b00100010101010 | 0b00010010101010 | 0b00110010101010 | 0b00001010101010 | 0b00101010101010 | 0b00011010101010 | 0b00111010101010 | 0b00000110101010 | 0b00100110101010 | 0b00010110101010 | 0b00110110101010 | 0b00001110101010 | 0b00101110101010 | 0b00011110101010 | 0b00111110101010 | 0b00000001101010 | 0b00100001101010 | 0b00010001101010 | 0b00110001101010 | 0b00001001101010 | 0b00101001101010 | 0b00011001101010 | 0b00111001101010 | 0b00000101101010 | 0b00100101101010 | 0b00010101101010 | 0b00110101101010 | 0b00001101101010 | 0b00101101101010 | 0b00011101101010 | 0b00111101101010 | 0b00000011101010 | 0b00100011101010 | 0b00010011101010 | 0b00110011101010 | 0b00001011101010 | 0b00101011101010 | 0b00011011101010 | 0b00111011101010 | 0b00000111101010 | 0b00100111101010 | 0b00010111101010 | 0b00110111101010 | 0b00001111101010 | 0b00101111101010 | 0b00011111101010 | 0b00111111101010 | 0b00000000011010 | 0b00100000011010 | 0b00010000011010 | 0b00110000011010 | 0b00001000011010 | 0b00101000011010 | 0b00011000011010 | 0b00111000011010 | 0b00000100011010 | 0b00100100011010 | 0b00010100011010 | 0b00110100011010 | 0b00001100011010 | 0b00101100011010 | 0b00011100011010 | 0b00111100011010 | 0b00000010011010 | 0b00100010011010 | 0b00010010011010 | 0b00110010011010 | 0b00001010011010 | 0b00101010011010 | 0b00011010011010 | 0b00111010011010 | 0b00000110011010 | 0b00100110011010 | 0b00010110011010 | 0b00110110011010 | 0b00001110011010 | 0b00101110011010 | 0b00011110011010 | 0b00111110011010 | 0b00000001011010 | 0b00100001011010 | 0b00010001011010 | 0b00110001011010 | 0b00001001011010 | 0b00101001011010 | 0b00011001011010 | 0b00111001011010 | 0b00000101011010 | 0b00100101011010 | 0b00010101011010 | 0b00110101011010 | 0b00001101011010 | 0b00101101011010 | 0b00011101011010 | 0b00111101011010 | 0b00000011011010 | 0b00100011011010 | 0b00010011011010 | 0b00110011011010 | 0b00001011011010 | 0b00101011011010 | 0b00011011011010 | 0b00111011011010 | 0b00000111011010 | 0b00100111011010 | 0b00010111011010 | 0b00110111011010 | 0b00001111011010 | 0b00101111011010 | 0b00011111011010 | 0b00111111011010 | 0b00000000111010 | 0b00100000111010 | 0b00010000111010 | 0b00110000111010 | 0b00001000111010 | 0b00101000111010 | 0b00011000111010 | 0b00111000111010 | 0b00000100111010 | 0b00100100111010 | 0b00010100111010 | 0b00110100111010 | 0b00001100111010 | 0b00101100111010 | 0b00011100111010 | 0b00111100111010 | 0b00000010111010 | 0b00100010111010 | 0b00010010111010 | 0b00110010111010 | 0b00001010111010 | 0b00101010111010 | 0b00011010111010 | 0b00111010111010 | 0b00000110111010 | 0b00100110111010 | 0b00010110111010 | 0b00110110111010 | 0b00001110111010 | 0b00101110111010 | 0b00011110111010 | 0b00111110111010 | 0b00000001111010 | 0b00100001111010 | 0b00010001111010 | 0b00110001111010 | 0b00001001111010 | 0b00101001111010 | 0b00011001111010 | 0b00111001111010 | 0b00000101111010 | 0b00100101111010 | 0b00010101111010 | 0b00110101111010 | 0b00001101111010 | 0b00101101111010 | 0b00011101111010 | 0b00111101111010 | 0b00000011111010 | 0b00100011111010 | 0b00010011111010 | 0b00110011111010 | 0b00001011111010 | 0b00101011111010 | 0b00011011111010 | 0b00111011111010 | 0b00000111111010 | 0b00100111111010 | 0b00010111111010 | 0b00110111111010 | 0b00001111111010 | 0b00101111111010 | 0b00011111111010 | 0b00111111111010 | 0b00000000000110 | 0b00100000000110 | 0b00010000000110 | 0b00110000000110 | 0b00001000000110 | 0b00101000000110 | 0b00011000000110 | 0b00111000000110 | 0b00000100000110 | 0b00100100000110 | 0b00010100000110 | 0b00110100000110 | 0b00001100000110 | 0b00101100000110 | 0b00011100000110 | 0b00111100000110 | 0b00000010000110 | 0b00100010000110 | 0b00010010000110 | 0b00110010000110 | 0b00001010000110 | 0b00101010000110 | 0b00011010000110 | 0b00111010000110 | 0b00000110000110 | 0b00100110000110 | 0b00010110000110 | 0b00110110000110 | 0b00001110000110 | 0b00101110000110 | 0b00011110000110 | 0b00111110000110 | 0b00000001000110 | 0b00100001000110 | 0b00010001000110 | 0b00110001000110 | 0b00001001000110 | 0b00101001000110 | 0b00011001000110 | 0b00111001000110 | 0b00000101000110 | 0b00100101000110 | 0b00010101000110 | 0b00110101000110 | 0b00001101000110 | 0b00101101000110 | 0b00011101000110 | 0b00111101000110 | 0b00000011000110 | 0b00100011000110 | 0b00010011000110 | 0b00110011000110 | 0b00001011000110 | 0b00101011000110 | 0b00011011000110 | 0b00111011000110 | 0b00000111000110 | 0b00100111000110 | 0b00010111000110 | 0b00110111000110 | 0b00001111000110 | 0b00101111000110 | 0b00011111000110 | 0b00111111000110 | 0b00000000100110 | 0b00100000100110 | 0b00010000100110 | 0b00110000100110 | 0b00001000100110 | 0b00101000100110 | 0b00011000100110 | 0b00111000100110 | 0b00000100100110 | 0b00100100100110 | 0b00010100100110 | 0b00110100100110 | 0b00001100100110 | 0b00101100100110 | 0b00011100100110 | 0b00111100100110 | 0b00000010100110 | 0b00100010100110 | 0b00010010100110 | 0b00110010100110 | 0b00001010100110 | 0b00101010100110 | 0b00011010100110 | 0b00111010100110 | 0b00000110100110 | 0b00100110100110 | 0b00010110100110 | 0b00110110100110 | 0b00001110100110 | 0b00101110100110 | 0b00011110100110 | 0b00111110100110 | 0b00000001100110 | 0b00100001100110 | 0b00010001100110 | 0b00110001100110 | 0b00001001100110 | 0b00101001100110 | 0b00011001100110 | 0b00111001100110 | 0b00000101100110 | 0b00100101100110 | 0b00010101100110 | 0b00110101100110 | 0b00001101100110 | 0b00101101100110 | 0b00011101100110 | 0b00111101100110 | 0b00000011100110 | 0b00100011100110 | 0b00010011100110 | 0b00110011100110 | 0b00001011100110 | 0b00101011100110 | 0b00011011100110 | 0b00111011100110 | 0b00000111100110 | 0b00100111100110 | 0b00010111100110 | 0b00110111100110 | 0b00001111100110 | 0b00101111100110 | 0b00011111100110 | 0b00111111100110 | 0b00000000010110 | 0b00100000010110 | 0b00010000010110 | 0b00110000010110 | 0b00001000010110 | 0b00101000010110 | 0b00011000010110 | 0b00111000010110 | 0b00000100010110 | 0b00100100010110 | 0b00010100010110 | 0b00110100010110 | 0b00001100010110 | 0b00101100010110 | 0b00011100010110 | 0b00111100010110 | 0b00000010010110 | 0b00100010010110 | 0b00010010010110 | 0b00110010010110 | 0b00001010010110 | 0b00101010010110 | 0b00011010010110 | 0b00111010010110 | 0b00000110010110 | 0b00100110010110 | 0b00010110010110 | 0b00110110010110 | 0b00001110010110 | 0b00101110010110 | 0b00011110010110 | 0b00111110010110 | 0b00000001010110 | 0b00100001010110 | 0b00010001010110 | 0b00110001010110 | 0b00001001010110 | 0b00101001010110 | 0b00011001010110 | 0b00111001010110 | 0b00000101010110 | 0b00100101010110 | 0b00010101010110 | 0b00110101010110 | 0b00001101010110 | 0b00101101010110 | 0b00011101010110 | 0b00111101010110 | 0b00000011010110 | 0b00100011010110 | 0b00010011010110 | 0b00110011010110 | 0b00001011010110 | 0b00101011010110 | 0b00011011010110 | 0b00111011010110 | 0b00000111010110 | 0b00100111010110 | 0b00010111010110 | 0b00110111010110 | 0b00001111010110 | 0b00101111010110 | 0b00011111010110 | 0b00111111010110 | 0b00000000110110 | 0b00100000110110 | 0b00010000110110 | 0b00110000110110 | 0b00001000110110 | 0b00101000110110 | 0b00011000110110 | 0b00111000110110 | 0b00000100110110 | 0b00100100110110 | 0b00010100110110 | 0b00110100110110 | 0b00001100110110 | 0b00101100110110 | 0b00011100110110 | 0b00111100110110 | 0b00000010110110 | 0b00100010110110 | 0b00010010110110 | 0b00110010110110 | 0b00001010110110 | 0b00101010110110 | 0b00011010110110 | 0b00111010110110 | 0b00000110110110 | 0b00100110110110 | 0b00010110110110 | 0b00110110110110 | 0b00001110110110 | 0b00101110110110 | 0b00011110110110 | 0b00111110110110 | 0b00000001110110 | 0b00100001110110 | 0b00010001110110 | 0b00110001110110 | 0b00001001110110 | 0b00101001110110 | 0b00011001110110 | 0b00111001110110 | 0b00000101110110 | 0b00100101110110 | 0b00010101110110 | 0b00110101110110 | 0b00001101110110 | 0b00101101110110 | 0b00011101110110 | 0b00111101110110 | 0b00000011110110 | 0b00100011110110 | 0b00010011110110 | 0b00110011110110 | 0b00001011110110 | 0b00101011110110 | 0b00011011110110 | 0b00111011110110 | 0b00000111110110 | 0b00100111110110 | 0b00010111110110 | 0b00110111110110 | 0b00001111110110 | 0b00101111110110 | 0b00011111110110 | 0b00111111110110 | 0b00000000001110 | 0b00100000001110 | 0b00010000001110 | 0b00110000001110 | 0b00001000001110 | 0b00101000001110 | 0b00011000001110 | 0b00111000001110 | 0b00000100001110 | 0b00100100001110 | 0b00010100001110 | 0b00110100001110 | 0b00001100001110 | 0b00101100001110 | 0b00011100001110 | 0b00111100001110 | 0b00000010001110 | 0b00100010001110 | 0b00010010001110 | 0b00110010001110 | 0b00001010001110 | 0b00101010001110 | 0b00011010001110 | 0b00111010001110 | 0b00000110001110 | 0b00100110001110 | 0b00010110001110 | 0b00110110001110 | 0b00001110001110 | 0b00101110001110 | 0b00011110001110 | 0b00111110001110 | 0b00000001001110 | 0b00100001001110 | 0b00010001001110 | 0b00110001001110 | 0b00001001001110 | 0b00101001001110 | 0b00011001001110 | 0b00111001001110 | 0b00000101001110 | 0b00100101001110 | 0b00010101001110 | 0b00110101001110 | 0b00001101001110 | 0b00101101001110 | 0b00011101001110 | 0b00111101001110 | 0b00000011001110 | 0b00100011001110 | 0b00010011001110 | 0b00110011001110 | 0b00001011001110 | 0b00101011001110 | 0b00011011001110 | 0b00111011001110 | 0b00000111001110 | 0b00100111001110 | 0b00010111001110 | 0b00110111001110 | 0b00001111001110 | 0b00101111001110 | 0b00011111001110 | 0b00111111001110 | 0b00000000101110 | 0b00100000101110 | 0b00010000101110 | 0b00110000101110 | 0b00001000101110 | 0b00101000101110 | 0b00011000101110 | 0b00111000101110 | 0b00000100101110 | 0b00100100101110 | 0b00010100101110 | 0b00110100101110 | 0b00001100101110 | 0b00101100101110 | 0b00011100101110 | 0b00111100101110 | 0b00000010101110 | 0b00100010101110 | 0b00010010101110 | 0b00110010101110 | 0b00001010101110 | 0b00101010101110 | 0b00011010101110 | 0b00111010101110 | 0b00000110101110 | 0b00100110101110 | 0b00010110101110 | 0b00110110101110 | 0b00001110101110 | 0b00101110101110 | 0b00011110101110 | 0b00111110101110 | 0b00000001101110 | 0b00100001101110 | 0b00010001101110 | 0b00110001101110 | 0b00001001101110 | 0b00101001101110 | 0b00011001101110 | 0b00111001101110 | 0b00000101101110 | 0b00100101101110 | 0b00010101101110 | 0b00110101101110 | 0b00001101101110 | 0b00101101101110 | 0b00011101101110 | 0b00111101101110 | 0b00000011101110 | 0b00100011101110 | 0b00010011101110 | 0b00110011101110 | 0b00001011101110 | 0b00101011101110 | 0b00011011101110 | 0b00111011101110 | 0b00000111101110 | 0b00100111101110 | 0b00010111101110 | 0b00110111101110 | 0b00001111101110 | 0b00101111101110 | 0b00011111101110 | 0b00111111101110 | 0b00000000011110 | 0b00100000011110 | 0b00010000011110 | 0b00110000011110 | 0b00001000011110 | 0b00101000011110 | 0b00011000011110 | 0b00111000011110 | 0b00000100011110 | 0b00100100011110 | 0b00010100011110 | 0b00110100011110 | 0b00001100011110 | 0b00101100011110 | 0b00011100011110 | 0b00111100011110 | 0b00000010011110 | 0b00100010011110 | 0b00010010011110 | 0b00110010011110 | 0b00001010011110 | 0b00101010011110 | 0b00011010011110 | 0b00111010011110 | 0b00000110011110 | 0b00100110011110 | 0b00010110011110 | 0b00110110011110 | 0b00001110011110 | 0b00101110011110 | 0b00011110011110 | 0b00111110011110 | 0b00000001011110 | 0b00100001011110 | 0b00010001011110 | 0b00110001011110 | 0b00001001011110 | 0b00101001011110 | 0b00011001011110 | 0b00111001011110 | 0b00000101011110 | 0b00100101011110 | 0b00010101011110 | 0b00110101011110 | 0b00001101011110 | 0b00101101011110 | 0b00011101011110 | 0b00111101011110 | 0b00000011011110 | 0b00100011011110 | 0b00010011011110 | 0b00110011011110 | 0b00001011011110 | 0b00101011011110 | 0b00011011011110 | 0b00111011011110 | 0b00000111011110 | 0b00100111011110 | 0b00010111011110 | 0b00110111011110 | 0b00001111011110 | 0b00101111011110 | 0b00011111011110 | 0b00111111011110 | 0b00000000111110 | 0b00100000111110 | 0b00010000111110 | 0b00110000111110 | 0b00001000111110 | 0b00101000111110 | 0b00011000111110 | 0b00111000111110 | 0b00000100111110 | 0b00100100111110 | 0b00010100111110 | 0b00110100111110 | 0b00001100111110 | 0b00101100111110 | 0b00011100111110 | 0b00111100111110 | 0b00000010111110 | 0b00100010111110 | 0b00010010111110 | 0b00110010111110 | 0b00001010111110 | 0b00101010111110 | 0b00011010111110 | 0b00111010111110 | 0b00000110111110 | 0b00100110111110 | 0b00010110111110 | 0b00110110111110 | 0b00001110111110 | 0b00101110111110 | 0b00011110111110 | 0b00111110111110 | 0b00000001111110 | 0b00100001111110 | 0b00010001111110 | 0b00110001111110 | 0b00001001111110 | 0b00101001111110 | 0b00011001111110 | 0b00111001111110 | 0b00000101111110 | 0b00100101111110 | 0b00010101111110 | 0b00110101111110 | 0b00001101111110 | 0b00101101111110 | 0b00011101111110 | 0b00111101111110 | 0b00000011111110 | 0b00100011111110 | 0b00010011111110 | 0b00110011111110 | 0b00001011111110 | 0b00101011111110 | 0b00011011111110 | 0b00111011111110 | 0b00000111111110 | 0b00100111111110 | 0b00010111111110 | 0b00110111111110 | 0b00001111111110 | 0b00101111111110 | 0b00011111111110 | 0b00111111111110 | 0b00000000000001 | 0b00100000000001 | 0b00010000000001 | 0b00110000000001 | 0b00001000000001 | 0b00101000000001 | 0b00011000000001 | 0b00111000000001 | 0b00000100000001 | 0b00100100000001 | 0b00010100000001 | 0b00110100000001 | 0b00001100000001 | 0b00101100000001 | 0b00011100000001 | 0b00111100000001 | 0b00000010000001 | 0b00100010000001 | 0b00010010000001 | 0b00110010000001 | 0b00001010000001 | 0b00101010000001 | 0b00011010000001 | 0b00111010000001 | 0b00000110000001 | 0b00100110000001 | 0b00010110000001 | 0b00110110000001 | 0b00001110000001 | 0b00101110000001 | 0b00011110000001 | 0b00111110000001 | 0b00000001000001 | 0b00100001000001 | 0b00010001000001 | 0b00110001000001 | 0b00001001000001 | 0b00101001000001 | 0b00011001000001 | 0b00111001000001 | 0b00000101000001 | 0b00100101000001 | 0b00010101000001 | 0b00110101000001 | 0b00001101000001 | 0b00101101000001 | 0b00011101000001 | 0b00111101000001 | 0b00000011000001 | 0b00100011000001 | 0b00010011000001 | 0b00110011000001 | 0b00001011000001 | 0b00101011000001 | 0b00011011000001 | 0b00111011000001 | 0b00000111000001 | 0b00100111000001 | 0b00010111000001 | 0b00110111000001 | 0b00001111000001 | 0b00101111000001 | 0b00011111000001 | 0b00111111000001 | 0b00000000100001 | 0b00100000100001 | 0b00010000100001 | 0b00110000100001 | 0b00001000100001 | 0b00101000100001 | 0b00011000100001 | 0b00111000100001 | 0b00000100100001 | 0b00100100100001 | 0b00010100100001 | 0b00110100100001 | 0b00001100100001 | 0b00101100100001 | 0b00011100100001 | 0b00111100100001 | 0b00000010100001 | 0b00100010100001 | 0b00010010100001 | 0b00110010100001 | 0b00001010100001 | 0b00101010100001 | 0b00011010100001 | 0b00111010100001 | 0b00000110100001 | 0b00100110100001 | 0b00010110100001 | 0b00110110100001 | 0b00001110100001 | 0b00101110100001 | 0b00011110100001 | 0b00111110100001 | 0b00000001100001 | 0b00100001100001 | 0b00010001100001 | 0b00110001100001 | 0b00001001100001 | 0b00101001100001 | 0b00011001100001 | 0b00111001100001 | 0b00000101100001 | 0b00100101100001 | 0b00010101100001 | 0b00110101100001 | 0b00001101100001 | 0b00101101100001 | 0b00011101100001 | 0b00111101100001 | 0b00000011100001 | 0b00100011100001 | 0b00010011100001 | 0b00110011100001 | 0b00001011100001 | 0b00101011100001 | 0b00011011100001 | 0b00111011100001 | 0b00000111100001 | 0b00100111100001 | 0b00010111100001 | 0b00110111100001 | 0b00001111100001 | 0b00101111100001 | 0b00011111100001 | 0b00111111100001 | 0b00000000010001 | 0b00100000010001 | 0b00010000010001 | 0b00110000010001 | 0b00001000010001 | 0b00101000010001 | 0b00011000010001 | 0b00111000010001 | 0b00000100010001 | 0b00100100010001 | 0b00010100010001 | 0b00110100010001 | 0b00001100010001 | 0b00101100010001 | 0b00011100010001 | 0b00111100010001 | 0b00000010010001 | 0b00100010010001 | 0b00010010010001 | 0b00110010010001 | 0b00001010010001 | 0b00101010010001 | 0b00011010010001 | 0b00111010010001 | 0b00000110010001 | 0b00100110010001 | 0b00010110010001 | 0b00110110010001 | 0b00001110010001 | 0b00101110010001 | 0b00011110010001 | 0b00111110010001 | 0b00000001010001 | 0b00100001010001 | 0b00010001010001 | 0b00110001010001 | 0b00001001010001 | 0b00101001010001 | 0b00011001010001 | 0b00111001010001 | 0b00000101010001 | 0b00100101010001 | 0b00010101010001 | 0b00110101010001 | 0b00001101010001 | 0b00101101010001 | 0b00011101010001 | 0b00111101010001 | 0b00000011010001 | 0b00100011010001 | 0b00010011010001 | 0b00110011010001 | 0b00001011010001 | 0b00101011010001 | 0b00011011010001 | 0b00111011010001 | 0b00000111010001 | 0b00100111010001 | 0b00010111010001 | 0b00110111010001 | 0b00001111010001 | 0b00101111010001 | 0b00011111010001 | 0b00111111010001 | 0b00000000110001 | 0b00100000110001 | 0b00010000110001 | 0b00110000110001 | 0b00001000110001 | 0b00101000110001 | 0b00011000110001 | 0b00111000110001 | 0b00000100110001 | 0b00100100110001 | 0b00010100110001 | 0b00110100110001 | 0b00001100110001 | 0b00101100110001 | 0b00011100110001 | 0b00111100110001 | 0b00000010110001 | 0b00100010110001 | 0b00010010110001 | 0b00110010110001 | 0b00001010110001 | 0b00101010110001 | 0b00011010110001 | 0b00111010110001 | 0b00000110110001 | 0b00100110110001 | 0b00010110110001 | 0b00110110110001 | 0b00001110110001 | 0b00101110110001 | 0b00011110110001 | 0b00111110110001 | 0b00000001110001 | 0b00100001110001 | 0b00010001110001 | 0b00110001110001 | 0b00001001110001 | 0b00101001110001 | 0b00011001110001 | 0b00111001110001 | 0b00000101110001 | 0b00100101110001 | 0b00010101110001 | 0b00110101110001 | 0b00001101110001 | 0b00101101110001 | 0b00011101110001 | 0b00111101110001 | 0b00000011110001 | 0b00100011110001 | 0b00010011110001 | 0b00110011110001 | 0b00001011110001 | 0b00101011110001 | 0b00011011110001 | 0b00111011110001 | 0b00000111110001 | 0b00100111110001 | 0b00010111110001 | 0b00110111110001 | 0b00001111110001 | 0b00101111110001 | 0b00011111110001 | 0b00111111110001 | 0b00000000001001 | 0b00100000001001 | 0b00010000001001 | 0b00110000001001 | 0b00001000001001 | 0b00101000001001 | 0b00011000001001 | 0b00111000001001 | 0b00000100001001 | 0b00100100001001 | 0b00010100001001 | 0b00110100001001 | 0b00001100001001 | 0b00101100001001 | 0b00011100001001 | 0b00111100001001 | 0b00000010001001 | 0b00100010001001 | 0b00010010001001 | 0b00110010001001 | 0b00001010001001 | 0b00101010001001 | 0b00011010001001 | 0b00111010001001 | 0b00000110001001 | 0b00100110001001 | 0b00010110001001 | 0b00110110001001 | 0b00001110001001 | 0b00101110001001 | 0b00011110001001 | 0b00111110001001 | 0b00000001001001 | 0b00100001001001 | 0b00010001001001 | 0b00110001001001 | 0b00001001001001 | 0b00101001001001 | 0b00011001001001 | 0b00111001001001 | 0b00000101001001 | 0b00100101001001 | 0b00010101001001 | 0b00110101001001 | 0b00001101001001 | 0b00101101001001 | 0b00011101001001 | 0b00111101001001 | 0b00000011001001 | 0b00100011001001 | 0b00010011001001 | 0b00110011001001 | 0b00001011001001 | 0b00101011001001 | 0b00011011001001 | 0b00111011001001 | 0b00000111001001 | 0b00100111001001 | 0b00010111001001 | 0b00110111001001 | 0b00001111001001 | 0b00101111001001 | 0b00011111001001 | 0b00111111001001 | 0b00000000101001 | 0b00100000101001 | 0b00010000101001 | 0b00110000101001 | 0b00001000101001 | 0b00101000101001 | 0b00011000101001 | 0b00111000101001 | 0b00000100101001 | 0b00100100101001 | 0b00010100101001 | 0b00110100101001 | 0b00001100101001 | 0b00101100101001 | 0b00011100101001 | 0b00111100101001 | 0b00000010101001 | 0b00100010101001 | 0b00010010101001 | 0b00110010101001 | 0b00001010101001 | 0b00101010101001 | 0b00011010101001 | 0b00111010101001 | 0b00000110101001 | 0b00100110101001 | 0b00010110101001 | 0b00110110101001 | 0b00001110101001 | 0b00101110101001 | 0b00011110101001 | 0b00111110101001 | 0b00000001101001 | 0b00100001101001 | 0b00010001101001 | 0b00110001101001 | 0b00001001101001 | 0b00101001101001 | 0b00011001101001 | 0b00111001101001 | 0b00000101101001 | 0b00100101101001 | 0b00010101101001 | 0b00110101101001 | 0b00001101101001 | 0b00101101101001 | 0b00011101101001 | 0b00111101101001 | 0b00000011101001 | 0b00100011101001 | 0b00010011101001 | 0b00110011101001 | 0b00001011101001 | 0b00101011101001 | 0b00011011101001 | 0b00111011101001 | 0b00000111101001 | 0b00100111101001 | 0b00010111101001 | 0b00110111101001 | 0b00001111101001 | 0b00101111101001 | 0b00011111101001 | 0b00111111101001 | 0b00000000011001 | 0b00100000011001 | 0b00010000011001 | 0b00110000011001 | 0b00001000011001 | 0b00101000011001 | 0b00011000011001 | 0b00111000011001 | 0b00000100011001 | 0b00100100011001 | 0b00010100011001 | 0b00110100011001 | 0b00001100011001 | 0b00101100011001 | 0b00011100011001 | 0b00111100011001 | 0b00000010011001 | 0b00100010011001 | 0b00010010011001 | 0b00110010011001 | 0b00001010011001 | 0b00101010011001 | 0b00011010011001 | 0b00111010011001 | 0b00000110011001 | 0b00100110011001 | 0b00010110011001 | 0b00110110011001 | 0b00001110011001 | 0b00101110011001 | 0b00011110011001 | 0b00111110011001 | 0b00000001011001 | 0b00100001011001 | 0b00010001011001 | 0b00110001011001 | 0b00001001011001 | 0b00101001011001 | 0b00011001011001 | 0b00111001011001 | 0b00000101011001 | 0b00100101011001 | 0b00010101011001 | 0b00110101011001 | 0b00001101011001 | 0b00101101011001 | 0b00011101011001 | 0b00111101011001 | 0b00000011011001 | 0b00100011011001 | 0b00010011011001 | 0b00110011011001 | 0b00001011011001 | 0b00101011011001 | 0b00011011011001 | 0b00111011011001 | 0b00000111011001 | 0b00100111011001 | 0b00010111011001 | 0b00110111011001 | 0b00001111011001 | 0b00101111011001 | 0b00011111011001 | 0b00111111011001 | 0b00000000111001 | 0b00100000111001 | 0b00010000111001 | 0b00110000111001 | 0b00001000111001 | 0b00101000111001 | 0b00011000111001 | 0b00111000111001 | 0b00000100111001 | 0b00100100111001 | 0b00010100111001 | 0b00110100111001 | 0b00001100111001 | 0b00101100111001 | 0b00011100111001 | 0b00111100111001 | 0b00000010111001 | 0b00100010111001 | 0b00010010111001 | 0b00110010111001 | 0b00001010111001 | 0b00101010111001 | 0b00011010111001 | 0b00111010111001 | 0b00000110111001 | 0b00100110111001 | 0b00010110111001 | 0b00110110111001 | 0b00001110111001 | 0b00101110111001 | 0b00011110111001 | 0b00111110111001 | 0b00000001111001 | 0b00100001111001 | 0b00010001111001 | 0b00110001111001 | 0b00001001111001 | 0b00101001111001 | 0b00011001111001 | 0b00111001111001 | 0b00000101111001 | 0b00100101111001 | 0b00010101111001 | 0b00110101111001 | 0b00001101111001 | 0b00101101111001 | 0b00011101111001 | 0b00111101111001 | 0b00000011111001 | 0b00100011111001 | 0b00010011111001 | 0b00110011111001 | 0b00001011111001 | 0b00101011111001 | 0b00011011111001 | 0b00111011111001 | 0b00000111111001 | 0b00100111111001 | 0b00010111111001 | 0b00110111111001 | 0b00001111111001 | 0b00101111111001 | 0b00011111111001 | 0b00111111111001 | 0b00000000000101 | 0b00100000000101 | 0b00010000000101 | 0b00110000000101 | 0b00001000000101 | 0b00101000000101 | 0b00011000000101 | 0b00111000000101 | 0b00000100000101 | 0b00100100000101 | 0b00010100000101 | 0b00110100000101 | 0b00001100000101 | 0b00101100000101 | 0b00011100000101 | 0b00111100000101 | 0b00000010000101 | 0b00100010000101 | 0b00010010000101 | 0b00110010000101 | 0b00001010000101 | 0b00101010000101 | 0b00011010000101 | 0b00111010000101 | 0b00000110000101 | 0b00100110000101 | 0b00010110000101 | 0b00110110000101 | 0b00001110000101 | 0b00101110000101 | 0b00011110000101 | 0b00111110000101 | 0b00000001000101 | 0b00100001000101 | 0b00010001000101 | 0b00110001000101 | 0b00001001000101 | 0b00101001000101 | 0b00011001000101 | 0b00111001000101 | 0b00000101000101 | 0b00100101000101 | 0b00010101000101 | 0b00110101000101 | 0b00001101000101 | 0b00101101000101 | 0b00011101000101 | 0b00111101000101 | 0b00000011000101 | 0b00100011000101 | 0b00010011000101 | 0b00110011000101 | 0b00001011000101 | 0b00101011000101 | 0b00011011000101 | 0b00111011000101 | 0b00000111000101 | 0b00100111000101 | 0b00010111000101 | 0b00110111000101 | 0b00001111000101 | 0b00101111000101 | 0b00011111000101 | 0b00111111000101 | 0b00000000100101 | 0b00100000100101 | 0b00010000100101 | 0b00110000100101 | 0b00001000100101 | 0b00101000100101 | 0b00011000100101 | 0b00111000100101 | 0b00000100100101 | 0b00100100100101 | 0b00010100100101 | 0b00110100100101 | 0b00001100100101 | 0b00101100100101 | 0b00011100100101 | 0b00111100100101 | 0b00000010100101 | 0b00100010100101 | 0b00010010100101 | 0b00110010100101 | 0b00001010100101 | 0b00101010100101 | 0b00011010100101 | 0b00111010100101 | 0b00000110100101 | 0b00100110100101 | 0b00010110100101 | 0b00110110100101 | 0b00001110100101 | 0b00101110100101 | 0b00011110100101 | 0b00111110100101 | 0b00000001100101 | 0b00100001100101 | 0b00010001100101 | 0b00110001100101 | 0b00001001100101 | 0b00101001100101 | 0b00011001100101 | 0b00111001100101 | 0b00000101100101 | 0b00100101100101 | 0b00010101100101 | 0b00110101100101 | 0b00001101100101 | 0b00101101100101 | 0b00011101100101 | 0b00111101100101 | 0b00000011100101 | 0b00100011100101 | 0b00010011100101 | 0b00110011100101 | 0b00001011100101 | 0b00101011100101 | 0b00011011100101 | 0b00111011100101 | 0b00000111100101 | 0b00100111100101 | 0b00010111100101 | 0b00110111100101 | 0b00001111100101 | 0b00101111100101 | 0b00011111100101 | 0b00111111100101 | 0b00000000010101 | 0b00100000010101 | 0b00010000010101 | 0b00110000010101 | 0b00001000010101 | 0b00101000010101 | 0b00011000010101 | 0b00111000010101 | 0b00000100010101 | 0b00100100010101 | 0b00010100010101 | 0b00110100010101 | 0b00001100010101 | 0b00101100010101 | 0b00011100010101 | 0b00111100010101 | 0b00000010010101 | 0b00100010010101 | 0b00010010010101 | 0b00110010010101 | 0b00001010010101 | 0b00101010010101 | 0b00011010010101 | 0b00111010010101 | 0b00000110010101 | 0b00100110010101 | 0b00010110010101 | 0b00110110010101 | 0b00001110010101 | 0b00101110010101 | 0b00011110010101 | 0b00111110010101 | 0b00000001010101 | 0b00100001010101 | 0b00010001010101 | 0b00110001010101 | 0b00001001010101 | 0b00101001010101 | 0b00011001010101 | 0b00111001010101 | 0b00000101010101 | 0b00100101010101 | 0b00010101010101 | 0b00110101010101 | 0b00001101010101 | 0b00101101010101 | 0b00011101010101 | 0b00111101010101 | 0b00000011010101 | 0b00100011010101 | 0b00010011010101 | 0b00110011010101 | 0b00001011010101 | 0b00101011010101 | 0b00011011010101 | 0b00111011010101 | 0b00000111010101 | 0b00100111010101 | 0b00010111010101 | 0b00110111010101 | 0b00001111010101 | 0b00101111010101 | 0b00011111010101 | 0b00111111010101 | 0b00000000110101 | 0b00100000110101 | 0b00010000110101 | 0b00110000110101 | 0b00001000110101 | 0b00101000110101 | 0b00011000110101 | 0b00111000110101 | 0b00000100110101 | 0b00100100110101 | 0b00010100110101 | 0b00110100110101 | 0b00001100110101 | 0b00101100110101 | 0b00011100110101 | 0b00111100110101 | 0b00000010110101 | 0b00100010110101 | 0b00010010110101 | 0b00110010110101 | 0b00001010110101 | 0b00101010110101 | 0b00011010110101 | 0b00111010110101 | 0b00000110110101 | 0b00100110110101 | 0b00010110110101 | 0b00110110110101 | 0b00001110110101 | 0b00101110110101 | 0b00011110110101 | 0b00111110110101 | 0b00000001110101 | 0b00100001110101 | 0b00010001110101 | 0b00110001110101 | 0b00001001110101 | 0b00101001110101 | 0b00011001110101 | 0b00111001110101 | 0b00000101110101 | 0b00100101110101 | 0b00010101110101 | 0b00110101110101 | 0b00001101110101 | 0b00101101110101 | 0b00011101110101 | 0b00111101110101 | 0b00000011110101 | 0b00100011110101 | 0b00010011110101 | 0b00110011110101 | 0b00001011110101 | 0b00101011110101 | 0b00011011110101 | 0b00111011110101 | 0b00000111110101 | 0b00100111110101 | 0b00010111110101 | 0b00110111110101 | 0b00001111110101 | 0b00101111110101 | 0b00011111110101 | 0b00111111110101 | 0b00000000001101 | 0b00100000001101 | 0b00010000001101 | 0b00110000001101 | 0b00001000001101 | 0b00101000001101 | 0b00011000001101 | 0b00111000001101 | 0b00000100001101 | 0b00100100001101 | 0b00010100001101 | 0b00110100001101 | 0b00001100001101 | 0b00101100001101 | 0b00011100001101 | 0b00111100001101 | 0b00000010001101 | 0b00100010001101 | 0b00010010001101 | 0b00110010001101 | 0b00001010001101 | 0b00101010001101 | 0b00011010001101 | 0b00111010001101 | 0b00000110001101 | 0b00100110001101 | 0b00010110001101 | 0b00110110001101 | 0b00001110001101 | 0b00101110001101 | 0b00011110001101 | 0b00111110001101 | 0b00000001001101 | 0b00100001001101 | 0b00010001001101 | 0b00110001001101 | 0b00001001001101 | 0b00101001001101 | 0b00011001001101 | 0b00111001001101 | 0b00000101001101 | 0b00100101001101 | 0b00010101001101 | 0b00110101001101 | 0b00001101001101 | 0b00101101001101 | 0b00011101001101 | 0b00111101001101 | 0b00000011001101 | 0b00100011001101 | 0b00010011001101 | 0b00110011001101 | 0b00001011001101 | 0b00101011001101 | 0b00011011001101 | 0b00111011001101 | 0b00000111001101 | 0b00100111001101 | 0b00010111001101 | 0b00110111001101 | 0b00001111001101 | 0b00101111001101 | 0b00011111001101 | 0b00111111001101 | 0b00000000101101 | 0b00100000101101 | 0b00010000101101 | 0b00110000101101 | 0b00001000101101 | 0b00101000101101 | 0b00011000101101 | 0b00111000101101 | 0b00000100101101 | 0b00100100101101 | 0b00010100101101 | 0b00110100101101 | 0b00001100101101 | 0b00101100101101 | 0b00011100101101 | 0b00111100101101 | 0b00000010101101 | 0b00100010101101 | 0b00010010101101 | 0b00110010101101 | 0b00001010101101 | 0b00101010101101 | 0b00011010101101 | 0b00111010101101 | 0b00000110101101 | 0b00100110101101 | 0b00010110101101 | 0b00110110101101 | 0b00001110101101 | 0b00101110101101 | 0b00011110101101 | 0b00111110101101 | 0b00000001101101 | 0b00100001101101 | 0b00010001101101 | 0b00110001101101 | 0b00001001101101 | 0b00101001101101 | 0b00011001101101 | 0b00111001101101 | 0b00000101101101 | 0b00100101101101 | 0b00010101101101 | 0b00110101101101 | 0b00001101101101 | 0b00101101101101 | 0b00011101101101 | 0b00111101101101 | 0b00000011101101 | 0b00100011101101 | 0b00010011101101 | 0b00110011101101 | 0b00001011101101 | 0b00101011101101 | 0b00011011101101 | 0b00111011101101 | 0b00000111101101 | 0b00100111101101 | 0b00010111101101 | 0b00110111101101 | 0b00001111101101 | 0b00101111101101 | 0b00011111101101 | 0b00111111101101 | 0b00000000011101 | 0b00100000011101 | 0b00010000011101 | 0b00110000011101 | 0b00001000011101 | 0b00101000011101 | 0b00011000011101 | 0b00111000011101 | 0b00000100011101 | 0b00100100011101 | 0b00010100011101 | 0b00110100011101 | 0b00001100011101 | 0b00101100011101 | 0b00011100011101 | 0b00111100011101 | 0b00000010011101 | 0b00100010011101 | 0b00010010011101 | 0b00110010011101 | 0b00001010011101 | 0b00101010011101 | 0b00011010011101 | 0b00111010011101 | 0b00000110011101 | 0b00100110011101 | 0b00010110011101 | 0b00110110011101 | 0b00001110011101 | 0b00101110011101 | 0b00011110011101 | 0b00111110011101 | 0b00000001011101 | 0b00100001011101 | 0b00010001011101 | 0b00110001011101 | 0b00001001011101 | 0b00101001011101 | 0b00011001011101 | 0b00111001011101 | 0b00000101011101 | 0b00100101011101 | 0b00010101011101 | 0b00110101011101 | 0b00001101011101 | 0b00101101011101 | 0b00011101011101 | 0b00111101011101 | 0b00000011011101 | 0b00100011011101 | 0b00010011011101 | 0b00110011011101 | 0b00001011011101 | 0b00101011011101 | 0b00011011011101 | 0b00111011011101 | 0b00000111011101 | 0b00100111011101 | 0b00010111011101 | 0b00110111011101 | 0b00001111011101 | 0b00101111011101 | 0b00011111011101 | 0b00111111011101 | 0b00000000111101 | 0b00100000111101 | 0b00010000111101 | 0b00110000111101 | 0b00001000111101 | 0b00101000111101 | 0b00011000111101 | 0b00111000111101 | 0b00000100111101 | 0b00100100111101 | 0b00010100111101 | 0b00110100111101 | 0b00001100111101 | 0b00101100111101 | 0b00011100111101 | 0b00111100111101 | 0b00000010111101 | 0b00100010111101 | 0b00010010111101 | 0b00110010111101 | 0b00001010111101 | 0b00101010111101 | 0b00011010111101 | 0b00111010111101 | 0b00000110111101 | 0b00100110111101 | 0b00010110111101 | 0b00110110111101 | 0b00001110111101 | 0b00101110111101 | 0b00011110111101 | 0b00111110111101 | 0b00000001111101 | 0b00100001111101 | 0b00010001111101 | 0b00110001111101 | 0b00001001111101 | 0b00101001111101 | 0b00011001111101 | 0b00111001111101 | 0b00000101111101 | 0b00100101111101 | 0b00010101111101 | 0b00110101111101 | 0b00001101111101 | 0b00101101111101 | 0b00011101111101 | 0b00111101111101 | 0b00000011111101 | 0b00100011111101 | 0b00010011111101 | 0b00110011111101 | 0b00001011111101 | 0b00101011111101 | 0b00011011111101 | 0b00111011111101 | 0b00000111111101 | 0b00100111111101 | 0b00010111111101 | 0b00110111111101 | 0b00001111111101 | 0b00101111111101 | 0b00011111111101 | 0b00111111111101 | 0b00000000000011 | 0b00100000000011 | 0b00010000000011 | 0b00110000000011 | 0b00001000000011 | 0b00101000000011 | 0b00011000000011 | 0b00111000000011 | 0b00000100000011 | 0b00100100000011 | 0b00010100000011 | 0b00110100000011 | 0b00001100000011 | 0b00101100000011 | 0b00011100000011 | 0b00111100000011 | 0b00000010000011 | 0b00100010000011 | 0b00010010000011 | 0b00110010000011 | 0b00001010000011 | 0b00101010000011 | 0b00011010000011 | 0b00111010000011 | 0b00000110000011 | 0b00100110000011 | 0b00010110000011 | 0b00110110000011 | 0b00001110000011 | 0b00101110000011 | 0b00011110000011 | 0b00111110000011 | 0b00000001000011 | 0b00100001000011 | 0b00010001000011 | 0b00110001000011 | 0b00001001000011 | 0b00101001000011 | 0b00011001000011 | 0b00111001000011 | 0b00000101000011 | 0b00100101000011 | 0b00010101000011 | 0b00110101000011 | 0b00001101000011 | 0b00101101000011 | 0b00011101000011 | 0b00111101000011 | 0b00000011000011 | 0b00100011000011 | 0b00010011000011 | 0b00110011000011 | 0b00001011000011 | 0b00101011000011 | 0b00011011000011 | 0b00111011000011 | 0b00000111000011 | 0b00100111000011 | 0b00010111000011 | 0b00110111000011 | 0b00001111000011 | 0b00101111000011 | 0b00011111000011 | 0b00111111000011 | 0b00000000100011 | 0b00100000100011 | 0b00010000100011 | 0b00110000100011 | 0b00001000100011 | 0b00101000100011 | 0b00011000100011 | 0b00111000100011 | 0b00000100100011 | 0b00100100100011 | 0b00010100100011 | 0b00110100100011 | 0b00001100100011 | 0b00101100100011 | 0b00011100100011 | 0b00111100100011 | 0b00000010100011 | 0b00100010100011 | 0b00010010100011 | 0b00110010100011 | 0b00001010100011 | 0b00101010100011 | 0b00011010100011 | 0b00111010100011 | 0b00000110100011 | 0b00100110100011 | 0b00010110100011 | 0b00110110100011 | 0b00001110100011 | 0b00101110100011 | 0b00011110100011 | 0b00111110100011 | 0b00000001100011 | 0b00100001100011 | 0b00010001100011 | 0b00110001100011 | 0b00001001100011 | 0b00101001100011 | 0b00011001100011 | 0b00111001100011 | 0b00000101100011 | 0b00100101100011 | 0b00010101100011 | 0b00110101100011 | 0b00001101100011 | 0b00101101100011 | 0b00011101100011 | 0b00111101100011 | 0b00000011100011 | 0b00100011100011 | 0b00010011100011 | 0b00110011100011 | 0b00001011100011 | 0b00101011100011 | 0b00011011100011 | 0b00111011100011 | 0b00000111100011 | 0b00100111100011 | 0b00010111100011 | 0b00110111100011 | 0b00001111100011 | 0b00101111100011 | 0b00011111100011 | 0b00111111100011 | 0b00000000010011 | 0b00100000010011 | 0b00010000010011 | 0b00110000010011 | 0b00001000010011 | 0b00101000010011 | 0b00011000010011 | 0b00111000010011 | 0b00000100010011 | 0b00100100010011 | 0b00010100010011 | 0b00110100010011 | 0b00001100010011 | 0b00101100010011 | 0b00011100010011 | 0b00111100010011 | 0b00000010010011 | 0b00100010010011 | 0b00010010010011 | 0b00110010010011 | 0b00001010010011 | 0b00101010010011 | 0b00011010010011 | 0b00111010010011 | 0b00000110010011 | 0b00100110010011 | 0b00010110010011 | 0b00110110010011 | 0b00001110010011 | 0b00101110010011 | 0b00011110010011 | 0b00111110010011 | 0b00000001010011 | 0b00100001010011 | 0b00010001010011 | 0b00110001010011 | 0b00001001010011 | 0b00101001010011 | 0b00011001010011 | 0b00111001010011 | 0b00000101010011 | 0b00100101010011 | 0b00010101010011 | 0b00110101010011 | 0b00001101010011 | 0b00101101010011 | 0b00011101010011 | 0b00111101010011 | 0b00000011010011 | 0b00100011010011 | 0b00010011010011 | 0b00110011010011 | 0b00001011010011 | 0b00101011010011 | 0b00011011010011 | 0b00111011010011 | 0b00000111010011 | 0b00100111010011 | 0b00010111010011 | 0b00110111010011 | 0b00001111010011 | 0b00101111010011 | 0b00011111010011 | 0b00111111010011 | 0b00000000110011 | 0b00100000110011 | 0b00010000110011 | 0b00110000110011 | 0b00001000110011 | 0b00101000110011 | 0b00011000110011 | 0b00111000110011 | 0b00000100110011 | 0b00100100110011 | 0b00010100110011 | 0b00110100110011 | 0b00001100110011 | 0b00101100110011 | 0b00011100110011 | 0b00111100110011 | 0b00000010110011 | 0b00100010110011 | 0b00010010110011 | 0b00110010110011 | 0b00001010110011 | 0b00101010110011 | 0b00011010110011 | 0b00111010110011 | 0b00000110110011 | 0b00100110110011 | 0b00010110110011 | 0b00110110110011 | 0b00001110110011 | 0b00101110110011 | 0b00011110110011 | 0b00111110110011 | 0b00000001110011 | 0b00100001110011 | 0b00010001110011 | 0b00110001110011 | 0b00001001110011 | 0b00101001110011 | 0b00011001110011 | 0b00111001110011 | 0b00000101110011 | 0b00100101110011 | 0b00010101110011 | 0b00110101110011 | 0b00001101110011 | 0b00101101110011 | 0b00011101110011 | 0b00111101110011 | 0b00000011110011 | 0b00100011110011 | 0b00010011110011 | 0b00110011110011 | 0b00001011110011 | 0b00101011110011 | 0b00011011110011 | 0b00111011110011 | 0b00000111110011 | 0b00100111110011 | 0b00010111110011 | 0b00110111110011 | 0b00001111110011 | 0b00101111110011 | 0b00011111110011 | 0b00111111110011 | 0b00000000001011 | 0b00100000001011 | 0b00010000001011 | 0b00110000001011 | 0b00001000001011 | 0b00101000001011 | 0b00011000001011 | 0b00111000001011 | 0b00000100001011 | 0b00100100001011 | 0b00010100001011 | 0b00110100001011 | 0b00001100001011 | 0b00101100001011 | 0b00011100001011 | 0b00111100001011 | 0b00000010001011 | 0b00100010001011 | 0b00010010001011 | 0b00110010001011 | 0b00001010001011 | 0b00101010001011 | 0b00011010001011 | 0b00111010001011 | 0b00000110001011 | 0b00100110001011 | 0b00010110001011 | 0b00110110001011 | 0b00001110001011 | 0b00101110001011 | 0b00011110001011 | 0b00111110001011 | 0b00000001001011 | 0b00100001001011 | 0b00010001001011 | 0b00110001001011 | 0b00001001001011 | 0b00101001001011 | 0b00011001001011 | 0b00111001001011 | 0b00000101001011 | 0b00100101001011 | 0b00010101001011 | 0b00110101001011 | 0b00001101001011 | 0b00101101001011 | 0b00011101001011 | 0b00111101001011 | 0b00000011001011 | 0b00100011001011 | 0b00010011001011 | 0b00110011001011 | 0b00001011001011 | 0b00101011001011 | 0b00011011001011 | 0b00111011001011 | 0b00000111001011 | 0b00100111001011 | 0b00010111001011 | 0b00110111001011 | 0b00001111001011 | 0b00101111001011 | 0b00011111001011 | 0b00111111001011 | 0b00000000101011 | 0b00100000101011 | 0b00010000101011 | 0b00110000101011 | 0b00001000101011 | 0b00101000101011 | 0b00011000101011 | 0b00111000101011 | 0b00000100101011 | 0b00100100101011 | 0b00010100101011 | 0b00110100101011 | 0b00001100101011 | 0b00101100101011 | 0b00011100101011 | 0b00111100101011 | 0b00000010101011 | 0b00100010101011 | 0b00010010101011 | 0b00110010101011 | 0b00001010101011 | 0b00101010101011 | 0b00011010101011 | 0b00111010101011 | 0b00000110101011 | 0b00100110101011 | 0b00010110101011 | 0b00110110101011 | 0b00001110101011 | 0b00101110101011 | 0b00011110101011 | 0b00111110101011 | 0b00000001101011 | 0b00100001101011 | 0b00010001101011 | 0b00110001101011 | 0b00001001101011 | 0b00101001101011 | 0b00011001101011 | 0b00111001101011 | 0b00000101101011 | 0b00100101101011 | 0b00010101101011 | 0b00110101101011 | 0b00001101101011 | 0b00101101101011 | 0b00011101101011 | 0b00111101101011 | 0b00000011101011 | 0b00100011101011 | 0b00010011101011 | 0b00110011101011 | 0b00001011101011 | 0b00101011101011 | 0b00011011101011 | 0b00111011101011 | 0b00000111101011 | 0b00100111101011 | 0b00010111101011 | 0b00110111101011 | 0b00001111101011 | 0b00101111101011 | 0b00011111101011 | 0b00111111101011 | 0b00000000011011 | 0b00100000011011 | 0b00010000011011 | 0b00110000011011 | 0b00001000011011 | 0b00101000011011 | 0b00011000011011 | 0b00111000011011 | 0b00000100011011 | 0b00100100011011 | 0b00010100011011 | 0b00110100011011 | 0b00001100011011 | 0b00101100011011 | 0b00011100011011 | 0b00111100011011 | 0b00000010011011 | 0b00100010011011 | 0b00010010011011 | 0b00110010011011 | 0b00001010011011 | 0b00101010011011 | 0b00011010011011 | 0b00111010011011 | 0b00000110011011 | 0b00100110011011 | 0b00010110011011 | 0b00110110011011 | 0b00001110011011 | 0b00101110011011 | 0b00011110011011 | 0b00111110011011 | 0b00000001011011 | 0b00100001011011 | 0b00010001011011 | 0b00110001011011 | 0b00001001011011 | 0b00101001011011 | 0b00011001011011 | 0b00111001011011 | 0b00000101011011 | 0b00100101011011 | 0b00010101011011 | 0b00110101011011 | 0b00001101011011 | 0b00101101011011 | 0b00011101011011 | 0b00111101011011 | 0b00000011011011 | 0b00100011011011 | 0b00010011011011 | 0b00110011011011 | 0b00001011011011 | 0b00101011011011 | 0b00011011011011 | 0b00111011011011 | 0b00000111011011 | 0b00100111011011 | 0b00010111011011 | 0b00110111011011 | 0b00001111011011 | 0b00101111011011 | 0b00011111011011 | 0b00111111011011 | 0b00000000111011 | 0b00100000111011 | 0b00010000111011 | 0b00110000111011 | 0b00001000111011 | 0b00101000111011 | 0b00011000111011 | 0b00111000111011 | 0b00000100111011 | 0b00100100111011 | 0b00010100111011 | 0b00110100111011 | 0b00001100111011 | 0b00101100111011 | 0b00011100111011 | 0b00111100111011 | 0b00000010111011 | 0b00100010111011 | 0b00010010111011 | 0b00110010111011 | 0b00001010111011 | 0b00101010111011 | 0b00011010111011 | 0b00111010111011 | 0b00000110111011 | 0b00100110111011 | 0b00010110111011 | 0b00110110111011 | 0b00001110111011 | 0b00101110111011 | 0b00011110111011 | 0b00111110111011 | 0b00000001111011 | 0b00100001111011 | 0b00010001111011 | 0b00110001111011 | 0b00001001111011 | 0b00101001111011 | 0b00011001111011 | 0b00111001111011 | 0b00000101111011 | 0b00100101111011 | 0b00010101111011 | 0b00110101111011 | 0b00001101111011 | 0b00101101111011 | 0b00011101111011 | 0b00111101111011 | 0b00000011111011 | 0b00100011111011 | 0b00010011111011 | 0b00110011111011 | 0b00001011111011 | 0b00101011111011 | 0b00011011111011 | 0b00111011111011 | 0b00000111111011 | 0b00100111111011 | 0b00010111111011 | 0b00110111111011 | 0b00001111111011 | 0b00101111111011 | 0b00011111111011 | 0b00111111111011 | 0b00000000000111 | 0b00100000000111 | 0b00010000000111 | 0b00110000000111 | 0b00001000000111 | 0b00101000000111 | 0b00011000000111 | 0b00111000000111 | 0b00000100000111 | 0b00100100000111 | 0b00010100000111 | 0b00110100000111 | 0b00001100000111 | 0b00101100000111 | 0b00011100000111 | 0b00111100000111 | 0b00000010000111 | 0b00100010000111 | 0b00010010000111 | 0b00110010000111 | 0b00001010000111 | 0b00101010000111 | 0b00011010000111 | 0b00111010000111 | 0b00000110000111 | 0b00100110000111 | 0b00010110000111 | 0b00110110000111 | 0b00001110000111 | 0b00101110000111 | 0b00011110000111 | 0b00111110000111 | 0b00000001000111 | 0b00100001000111 | 0b00010001000111 | 0b00110001000111 | 0b00001001000111 | 0b00101001000111 | 0b00011001000111 | 0b00111001000111 | 0b00000101000111 | 0b00100101000111 | 0b00010101000111 | 0b00110101000111 | 0b00001101000111 | 0b00101101000111 | 0b00011101000111 | 0b00111101000111 | 0b00000011000111 | 0b00100011000111 | 0b00010011000111 | 0b00110011000111 | 0b00001011000111 | 0b00101011000111 | 0b00011011000111 | 0b00111011000111 | 0b00000111000111 | 0b00100111000111 | 0b00010111000111 | 0b00110111000111 | 0b00001111000111 | 0b00101111000111 | 0b00011111000111 | 0b00111111000111 | 0b00000000100111 | 0b00100000100111 | 0b00010000100111 | 0b00110000100111 | 0b00001000100111 | 0b00101000100111 | 0b00011000100111 | 0b00111000100111 | 0b00000100100111 | 0b00100100100111 | 0b00010100100111 | 0b00110100100111 | 0b00001100100111 | 0b00101100100111 | 0b00011100100111 | 0b00111100100111 | 0b00000010100111 | 0b00100010100111 | 0b00010010100111 | 0b00110010100111 | 0b00001010100111 | 0b00101010100111 | 0b00011010100111 | 0b00111010100111 | 0b00000110100111 | 0b00100110100111 | 0b00010110100111 | 0b00110110100111 | 0b00001110100111 | 0b00101110100111 | 0b00011110100111 | 0b00111110100111 | 0b00000001100111 | 0b00100001100111 | 0b00010001100111 | 0b00110001100111 | 0b00001001100111 | 0b00101001100111 | 0b00011001100111 | 0b00111001100111 | 0b00000101100111 | 0b00100101100111 | 0b00010101100111 | 0b00110101100111 | 0b00001101100111 | 0b00101101100111 | 0b00011101100111 | 0b00111101100111 | 0b00000011100111 | 0b00100011100111 | 0b00010011100111 | 0b00110011100111 | 0b00001011100111 | 0b00101011100111 | 0b00011011100111 | 0b00111011100111 | 0b00000111100111 | 0b00100111100111 | 0b00010111100111 | 0b00110111100111 | 0b00001111100111 | 0b00101111100111 | 0b00011111100111 | 0b00111111100111 | 0b00000000010111 | 0b00100000010111 | 0b00010000010111 | 0b00110000010111 | 0b00001000010111 | 0b00101000010111 | 0b00011000010111 | 0b00111000010111 | 0b00000100010111 | 0b00100100010111 | 0b00010100010111 | 0b00110100010111 | 0b00001100010111 | 0b00101100010111 | 0b00011100010111 | 0b00111100010111 | 0b00000010010111 | 0b00100010010111 | 0b00010010010111 | 0b00110010010111 | 0b00001010010111 | 0b00101010010111 | 0b00011010010111 | 0b00111010010111 | 0b00000110010111 | 0b00100110010111 | 0b00010110010111 | 0b00110110010111 | 0b00001110010111 | 0b00101110010111 | 0b00011110010111 | 0b00111110010111 | 0b00000001010111 | 0b00100001010111 | 0b00010001010111 | 0b00110001010111 | 0b00001001010111 | 0b00101001010111 | 0b00011001010111 | 0b00111001010111 | 0b00000101010111 | 0b00100101010111 | 0b00010101010111 | 0b00110101010111 | 0b00001101010111 | 0b00101101010111 | 0b00011101010111 | 0b00111101010111 | 0b00000011010111 | 0b00100011010111 | 0b00010011010111 | 0b00110011010111 | 0b00001011010111 | 0b00101011010111 | 0b00011011010111 | 0b00111011010111 | 0b00000111010111 | 0b00100111010111 | 0b00010111010111 | 0b00110111010111 | 0b00001111010111 | 0b00101111010111 | 0b00011111010111 | 0b00111111010111 | 0b00000000110111 | 0b00100000110111 | 0b00010000110111 | 0b00110000110111 | 0b00001000110111 | 0b00101000110111 | 0b00011000110111 | 0b00111000110111 | 0b00000100110111 | 0b00100100110111 | 0b00010100110111 | 0b00110100110111 | 0b00001100110111 | 0b00101100110111 | 0b00011100110111 | 0b00111100110111 | 0b00000010110111 | 0b00100010110111 | 0b00010010110111 | 0b00110010110111 | 0b00001010110111 | 0b00101010110111 | 0b00011010110111 | 0b00111010110111 | 0b00000110110111 | 0b00100110110111 | 0b00010110110111 | 0b00110110110111 | 0b00001110110111 | 0b00101110110111 | 0b00011110110111 | 0b00111110110111 | 0b00000001110111 | 0b00100001110111 | 0b00010001110111 | 0b00110001110111 | 0b00001001110111 | 0b00101001110111 | 0b00011001110111 | 0b00111001110111 | 0b00000101110111 | 0b00100101110111 | 0b00010101110111 | 0b00110101110111 | 0b00001101110111 | 0b00101101110111 | 0b00011101110111 | 0b00111101110111 | 0b00000011110111 | 0b00100011110111 | 0b00010011110111 | 0b00110011110111 | 0b00001011110111 | 0b00101011110111 | 0b00011011110111 | 0b00111011110111 | 0b00000111110111 | 0b00100111110111 | 0b00010111110111 | 0b00110111110111 | 0b00001111110111 | 0b00101111110111 | 0b00011111110111 | 0b00111111110111 | 0b00000000001111 | 0b00100000001111 | 0b00010000001111 | 0b00110000001111 | 0b00001000001111 | 0b00101000001111 | 0b00011000001111 | 0b00111000001111 | 0b00000100001111 | 0b00100100001111 | 0b00010100001111 | 0b00110100001111 | 0b00001100001111 | 0b00101100001111 | 0b00011100001111 | 0b00111100001111 | 0b00000010001111 | 0b00100010001111 | 0b00010010001111 | 0b00110010001111 | 0b00001010001111 | 0b00101010001111 | 0b00011010001111 | 0b00111010001111 | 0b00000110001111 | 0b00100110001111 | 0b00010110001111 | 0b00110110001111 | 0b00001110001111 | 0b00101110001111 | 0b00011110001111 | 0b00111110001111 | 0b00000001001111 | 0b00100001001111 | 0b00010001001111 | 0b00110001001111 | 0b00001001001111 | 0b00101001001111 | 0b00011001001111 | 0b00111001001111 | 0b00000101001111 | 0b00100101001111 | 0b00010101001111 | 0b00110101001111 | 0b00001101001111 | 0b00101101001111 | 0b00011101001111 | 0b00111101001111 | 0b00000011001111 | 0b00100011001111 | 0b00010011001111 | 0b00110011001111 | 0b00001011001111 | 0b00101011001111 | 0b00011011001111 | 0b00111011001111 | 0b00000111001111 | 0b00100111001111 | 0b00010111001111 | 0b00110111001111 | 0b00001111001111 | 0b00101111001111 | 0b00011111001111 | 0b00111111001111 | 0b00000000101111 | 0b00100000101111 | 0b00010000101111 | 0b00110000101111 | 0b00001000101111 | 0b00101000101111 | 0b00011000101111 | 0b00111000101111 | 0b00000100101111 | 0b00100100101111 | 0b00010100101111 | 0b00110100101111 | 0b00001100101111 | 0b00101100101111 | 0b00011100101111 | 0b00111100101111 | 0b00000010101111 | 0b00100010101111 | 0b00010010101111 | 0b00110010101111 | 0b00001010101111 | 0b00101010101111 | 0b00011010101111 | 0b00111010101111 | 0b00000110101111 | 0b00100110101111 | 0b00010110101111 | 0b00110110101111 | 0b00001110101111 | 0b00101110101111 | 0b00011110101111 | 0b00111110101111 | 0b00000001101111 | 0b00100001101111 | 0b00010001101111 | 0b00110001101111 | 0b00001001101111 | 0b00101001101111 | 0b00011001101111 | 0b00111001101111 | 0b00000101101111 | 0b00100101101111 | 0b00010101101111 | 0b00110101101111 | 0b00001101101111 | 0b00101101101111 | 0b00011101101111 | 0b00111101101111 | 0b00000011101111 | 0b00100011101111 | 0b00010011101111 | 0b00110011101111 | 0b00001011101111 | 0b00101011101111 | 0b00011011101111 | 0b00111011101111 | 0b00000111101111 | 0b00100111101111 | 0b00010111101111 | 0b00110111101111 | 0b00001111101111 | 0b00101111101111 | 0b00011111101111 | 0b00111111101111 | 0b00000000011111 | 0b00100000011111 | 0b00010000011111 | 0b00110000011111 | 0b00001000011111 | 0b00101000011111 | 0b00011000011111 | 0b00111000011111 | 0b00000100011111 | 0b00100100011111 | 0b00010100011111 | 0b00110100011111 | 0b00001100011111 | 0b00101100011111 | 0b00011100011111 | 0b00111100011111 | 0b00000010011111 | 0b00100010011111 | 0b00010010011111 | 0b00110010011111 | 0b00001010011111 | 0b00101010011111 | 0b00011010011111 | 0b00111010011111 | 0b00000110011111 | 0b00100110011111 | 0b00010110011111 | 0b00110110011111 | 0b00001110011111 | 0b00101110011111 | 0b00011110011111 | 0b00111110011111 | 0b00000001011111 | 0b00100001011111 | 0b00010001011111 | 0b00110001011111 | 0b00001001011111 | 0b00101001011111 | 0b00011001011111 | 0b00111001011111 | 0b00000101011111 | 0b00100101011111 | 0b00010101011111 | 0b00110101011111 | 0b00001101011111 | 0b00101101011111 | 0b00011101011111 | 0b00111101011111 | 0b00000011011111 | 0b00100011011111 | 0b00010011011111 | 0b00110011011111 | 0b00001011011111 | 0b00101011011111 | 0b00011011011111 | 0b00111011011111 | 0b00000111011111 | 0b00100111011111 | 0b00010111011111 | 0b00110111011111 | 0b00001111011111 | 0b00101111011111 | 0b00011111011111 | 0b00111111011111 | 0b00000000111111 | 0b00100000111111 | 0b00010000111111 | 0b00110000111111 | 0b00001000111111 | 0b00101000111111 | 0b00011000111111 | 0b00111000111111 | 0b00000100111111 | 0b00100100111111 | 0b00010100111111 | 0b00110100111111 | 0b00001100111111 | 0b00101100111111 | 0b00011100111111 | 0b00111100111111 | 0b00000010111111 | 0b00100010111111 | 0b00010010111111 | 0b00110010111111 | 0b00001010111111 | 0b00101010111111 | 0b00011010111111 | 0b00111010111111 | 0b00000110111111 | 0b00100110111111 | 0b00010110111111 | 0b00110110111111 | 0b00001110111111 | 0b00101110111111 | 0b00011110111111 | 0b00111110111111 | 0b00000001111111 | 0b00100001111111 | 0b00010001111111 | 0b00110001111111 | 0b00001001111111 | 0b00101001111111 | 0b00011001111111 | 0b00111001111111 | 0b00000101111111 | 0b00100101111111 | 0b00010101111111 | 0b00110101111111 | 0b00001101111111 | 0b00101101111111 | 0b00011101111111 | 0b00111101111111 | 0b00000011111111 | 0b00100011111111 | 0b00010011111111 | 0b00110011111111 | 0b00001011111111 | 0b00101011111111 | 0b00011011111111 | 0b00111011111111 | 0b00000111111111 | 0b00100111111111 | 0b00010111111111 | 0b00110111111111 | 0b00001111111111 | 0b00101111111111 | 0b00011111111111 | 0b00111111111111, _, _) => {
            let opc = (inst >> 21) & 0b111;
            let imm16 = (inst >> 5) & 0b1111111111111111;
            let op2 = (inst >> 2) & 0b111;
            let LL = inst & 0b11;
            match (opc, op2, LL) {
                (_, 0b001, _) => return OpCode::Unallocated,
                (_, 0b010 | 0b011, _) => return OpCode::Unallocated,
                (_, 0b100 | 0b110 | 0b101 | 0b111, _) => return OpCode::Unallocated,
                (0b000, 0b000, 0b00) => return OpCode::Unallocated,
                (0b000, 0b000, 0b01) => return OpCode::SVC_EX_exception,
                (0b000, 0b000, 0b10) => return OpCode::HVC_EX_exception,
                (0b000, 0b000, 0b11) => return OpCode::SMC_EX_exception,
                (0b001, 0b000, 0b01 | 0b11) => return OpCode::Unallocated,
                (0b001, 0b000, 0b00) => return OpCode::BRK_EX_exception,
                (0b001, 0b000, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b010, 0b000, 0b01 | 0b11) => return OpCode::Unallocated,
                (0b010, 0b000, 0b00) => return OpCode::HLT_EX_exception,
                (0b010, 0b000, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b011, 0b000, 0b01) => return OpCode::Unallocated,
                (0b011, 0b000, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b100, 0b000, _) => return OpCode::Unallocated,
                (0b101, 0b000, 0b00) => return OpCode::Unallocated,
                (0b101, 0b000, 0b01) => return OpCode::DCPS1_DC_exception,
                (0b101, 0b000, 0b10) => return OpCode::DCPS2_DC_exception,
                (0b101, 0b000, 0b11) => return OpCode::DCPS3_DC_exception,
                (0b110, 0b000, _) => return OpCode::Unallocated,
                (0b111, 0b000, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b110, _, 0b01000000110010, _, 0b11111) => {
            let CRm = (inst >> 8) & 0b1111;
            let op2 = (inst >> 5) & 0b111;
            match (CRm, op2) {
                (_, _) => return OpCode::HINT_HM_hints,
                (0b0000, 0b000) => return OpCode::NOP_HI_hints,
                (0b0000, 0b001) => return OpCode::YIELD_HI_hints,
                (0b0000, 0b010) => return OpCode::WFE_HI_hints,
                (0b0000, 0b011) => return OpCode::WFI_HI_hints,
                (0b0000, 0b100) => return OpCode::SEV_HI_hints,
                (0b0000, 0b101) => return OpCode::SEVL_HI_hints,
                (0b0000, 0b110) => return OpCode::DGH_HI_hints,
                (0b0000, 0b111) => return OpCode::XPACLRI_HI_hints,
                (0b0001, 0b000) => return OpCode::PACIA1716_HI_hints,
                (0b0001, 0b010) => return OpCode::PACIB1716_HI_hints,
                (0b0001, 0b100) => return OpCode::AUTIA1716_HI_hints,
                (0b0001, 0b110) => return OpCode::AUTIB1716_HI_hints,
                (0b0010, 0b000) => return OpCode::ESB_HI_hints,
                (0b0010, 0b001) => return OpCode::PSB_HC_hints,
                (0b0010, 0b010) => return OpCode::TSB_HC_hints,
                (0b0010, 0b100) => return OpCode::CSDB_HI_hints,
                (0b0011, 0b000) => return OpCode::PACIAZ_HI_hints,
                (0b0011, 0b001) => return OpCode::PACIASP_HI_hints,
                (0b0011, 0b010) => return OpCode::PACIBZ_HI_hints,
                (0b0011, 0b011) => return OpCode::PACIBSP_HI_hints,
                (0b0011, 0b100) => return OpCode::AUTIAZ_HI_hints,
                (0b0011, 0b101) => return OpCode::AUTIASP_HI_hints,
                (0b0011, 0b110) => return OpCode::AUTIBZ_HI_hints,
                (0b0011, 0b111) => return OpCode::AUTIBSP_HI_hints,
                (0b0100, 0b000 | 0b100 | 0b010 | 0b110) => return OpCode::BTI_HB_hints,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b110, _, 0b01000000110011, _, _) => {
            let CRm = (inst >> 8) & 0b1111;
            let op2 = (inst >> 5) & 0b111;
            let Rt = inst & 0b11111;
            match (CRm, op2, Rt) {
                (_, 0b000, _) => return OpCode::Unallocated,
                (_, 0b001, _) => return OpCode::Unallocated,
                (_, 0b010, 0b11111) => return OpCode::CLREX_BN_barriers,
                (_, 0b101, 0b11111) => return OpCode::DMB_BO_barriers,
                (_, 0b110, 0b11111) => return OpCode::ISB_BI_barriers,
                (_, 0b111, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (_, 0b111, 0b11111) => return OpCode::SB_only_barriers,
                (var0, 0b100, 0b11111) if var0 != 0b0000 && var0 != 0b0100 => return OpCode::DSB_BO_barriers,
                (0b0000, 0b100, 0b11111) => return OpCode::SSBB_only_barriers,
                (0b0001, 0b011, _) => return OpCode::Unallocated,
                (0b0010 | 0b0011, 0b011, _) => return OpCode::Unallocated,
                (0b0100 | 0b0110 | 0b0101 | 0b0111, 0b011, _) => return OpCode::Unallocated,
                (0b0100, 0b100, 0b11111) => return OpCode::PSSBB_only_barriers,
                (0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111, 0b011, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b110, _, 0b01000000000100 | 0b01000001000100 | 0b01000000100100 | 0b01000001100100 | 0b01000000010100 | 0b01000001010100 | 0b01000000110100 | 0b01000001110100, _, _) => {
            let op1 = (inst >> 16) & 0b111;
            let CRm = (inst >> 8) & 0b1111;
            let op2 = (inst >> 5) & 0b111;
            let Rt = inst & 0b11111;
            match (op1, op2, Rt) {
                (_, _, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (_, _, 0b11111) => return OpCode::MSR_SI_pstate,
                (0b000, 0b000, 0b11111) => return OpCode::CFINV_M_pstate,
                (0b000, 0b001, 0b11111) => return OpCode::XAFLAG_M_pstate,
                (0b000, 0b010, 0b11111) => return OpCode::AXFLAG_M_pstate,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b110, _, 0b01000010000000 | 0b01001010000000 | 0b01000011000000 | 0b01001011000000 | 0b01000010100000 | 0b01001010100000 | 0b01000011100000 | 0b01001011100000 | 0b01000010010000 | 0b01001010010000 | 0b01000011010000 | 0b01001011010000 | 0b01000010110000 | 0b01001010110000 | 0b01000011110000 | 0b01001011110000 | 0b01000010001000 | 0b01001010001000 | 0b01000011001000 | 0b01001011001000 | 0b01000010101000 | 0b01001010101000 | 0b01000011101000 | 0b01001011101000 | 0b01000010011000 | 0b01001010011000 | 0b01000011011000 | 0b01001011011000 | 0b01000010111000 | 0b01001010111000 | 0b01000011111000 | 0b01001011111000 | 0b01000010000100 | 0b01001010000100 | 0b01000011000100 | 0b01001011000100 | 0b01000010100100 | 0b01001010100100 | 0b01000011100100 | 0b01001011100100 | 0b01000010010100 | 0b01001010010100 | 0b01000011010100 | 0b01001011010100 | 0b01000010110100 | 0b01001010110100 | 0b01000011110100 | 0b01001011110100 | 0b01000010001100 | 0b01001010001100 | 0b01000011001100 | 0b01001011001100 | 0b01000010101100 | 0b01001010101100 | 0b01000011101100 | 0b01001011101100 | 0b01000010011100 | 0b01001010011100 | 0b01000011011100 | 0b01001011011100 | 0b01000010111100 | 0b01001010111100 | 0b01000011111100 | 0b01001011111100 | 0b01000010000010 | 0b01001010000010 | 0b01000011000010 | 0b01001011000010 | 0b01000010100010 | 0b01001010100010 | 0b01000011100010 | 0b01001011100010 | 0b01000010010010 | 0b01001010010010 | 0b01000011010010 | 0b01001011010010 | 0b01000010110010 | 0b01001010110010 | 0b01000011110010 | 0b01001011110010 | 0b01000010001010 | 0b01001010001010 | 0b01000011001010 | 0b01001011001010 | 0b01000010101010 | 0b01001010101010 | 0b01000011101010 | 0b01001011101010 | 0b01000010011010 | 0b01001010011010 | 0b01000011011010 | 0b01001011011010 | 0b01000010111010 | 0b01001010111010 | 0b01000011111010 | 0b01001011111010 | 0b01000010000110 | 0b01001010000110 | 0b01000011000110 | 0b01001011000110 | 0b01000010100110 | 0b01001010100110 | 0b01000011100110 | 0b01001011100110 | 0b01000010010110 | 0b01001010010110 | 0b01000011010110 | 0b01001011010110 | 0b01000010110110 | 0b01001010110110 | 0b01000011110110 | 0b01001011110110 | 0b01000010001110 | 0b01001010001110 | 0b01000011001110 | 0b01001011001110 | 0b01000010101110 | 0b01001010101110 | 0b01000011101110 | 0b01001011101110 | 0b01000010011110 | 0b01001010011110 | 0b01000011011110 | 0b01001011011110 | 0b01000010111110 | 0b01001010111110 | 0b01000011111110 | 0b01001011111110 | 0b01000010000001 | 0b01001010000001 | 0b01000011000001 | 0b01001011000001 | 0b01000010100001 | 0b01001010100001 | 0b01000011100001 | 0b01001011100001 | 0b01000010010001 | 0b01001010010001 | 0b01000011010001 | 0b01001011010001 | 0b01000010110001 | 0b01001010110001 | 0b01000011110001 | 0b01001011110001 | 0b01000010001001 | 0b01001010001001 | 0b01000011001001 | 0b01001011001001 | 0b01000010101001 | 0b01001010101001 | 0b01000011101001 | 0b01001011101001 | 0b01000010011001 | 0b01001010011001 | 0b01000011011001 | 0b01001011011001 | 0b01000010111001 | 0b01001010111001 | 0b01000011111001 | 0b01001011111001 | 0b01000010000101 | 0b01001010000101 | 0b01000011000101 | 0b01001011000101 | 0b01000010100101 | 0b01001010100101 | 0b01000011100101 | 0b01001011100101 | 0b01000010010101 | 0b01001010010101 | 0b01000011010101 | 0b01001011010101 | 0b01000010110101 | 0b01001010110101 | 0b01000011110101 | 0b01001011110101 | 0b01000010001101 | 0b01001010001101 | 0b01000011001101 | 0b01001011001101 | 0b01000010101101 | 0b01001010101101 | 0b01000011101101 | 0b01001011101101 | 0b01000010011101 | 0b01001010011101 | 0b01000011011101 | 0b01001011011101 | 0b01000010111101 | 0b01001010111101 | 0b01000011111101 | 0b01001011111101 | 0b01000010000011 | 0b01001010000011 | 0b01000011000011 | 0b01001011000011 | 0b01000010100011 | 0b01001010100011 | 0b01000011100011 | 0b01001011100011 | 0b01000010010011 | 0b01001010010011 | 0b01000011010011 | 0b01001011010011 | 0b01000010110011 | 0b01001010110011 | 0b01000011110011 | 0b01001011110011 | 0b01000010001011 | 0b01001010001011 | 0b01000011001011 | 0b01001011001011 | 0b01000010101011 | 0b01001010101011 | 0b01000011101011 | 0b01001011101011 | 0b01000010011011 | 0b01001010011011 | 0b01000011011011 | 0b01001011011011 | 0b01000010111011 | 0b01001010111011 | 0b01000011111011 | 0b01001011111011 | 0b01000010000111 | 0b01001010000111 | 0b01000011000111 | 0b01001011000111 | 0b01000010100111 | 0b01001010100111 | 0b01000011100111 | 0b01001011100111 | 0b01000010010111 | 0b01001010010111 | 0b01000011010111 | 0b01001011010111 | 0b01000010110111 | 0b01001010110111 | 0b01000011110111 | 0b01001011110111 | 0b01000010001111 | 0b01001010001111 | 0b01000011001111 | 0b01001011001111 | 0b01000010101111 | 0b01001010101111 | 0b01000011101111 | 0b01001011101111 | 0b01000010011111 | 0b01001010011111 | 0b01000011011111 | 0b01001011011111 | 0b01000010111111 | 0b01001010111111 | 0b01000011111111 | 0b01001011111111, _, _) => {
            let L = (inst >> 21) & 0b1;
            let op1 = (inst >> 16) & 0b111;
            let CRn = (inst >> 12) & 0b1111;
            let CRm = (inst >> 8) & 0b1111;
            let op2 = (inst >> 5) & 0b111;
            let Rt = inst & 0b11111;
            match L {
                0 => return OpCode::SYS_CR_systeminstrs,
                1 => return OpCode::SYSL_RC_systeminstrs,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b110, _, 0b01000100000000 | 0b01001100000000 | 0b01000110000000 | 0b01001110000000 | 0b01000101000000 | 0b01001101000000 | 0b01000111000000 | 0b01001111000000 | 0b01000100100000 | 0b01001100100000 | 0b01000110100000 | 0b01001110100000 | 0b01000101100000 | 0b01001101100000 | 0b01000111100000 | 0b01001111100000 | 0b01000100010000 | 0b01001100010000 | 0b01000110010000 | 0b01001110010000 | 0b01000101010000 | 0b01001101010000 | 0b01000111010000 | 0b01001111010000 | 0b01000100110000 | 0b01001100110000 | 0b01000110110000 | 0b01001110110000 | 0b01000101110000 | 0b01001101110000 | 0b01000111110000 | 0b01001111110000 | 0b01000100001000 | 0b01001100001000 | 0b01000110001000 | 0b01001110001000 | 0b01000101001000 | 0b01001101001000 | 0b01000111001000 | 0b01001111001000 | 0b01000100101000 | 0b01001100101000 | 0b01000110101000 | 0b01001110101000 | 0b01000101101000 | 0b01001101101000 | 0b01000111101000 | 0b01001111101000 | 0b01000100011000 | 0b01001100011000 | 0b01000110011000 | 0b01001110011000 | 0b01000101011000 | 0b01001101011000 | 0b01000111011000 | 0b01001111011000 | 0b01000100111000 | 0b01001100111000 | 0b01000110111000 | 0b01001110111000 | 0b01000101111000 | 0b01001101111000 | 0b01000111111000 | 0b01001111111000 | 0b01000100000100 | 0b01001100000100 | 0b01000110000100 | 0b01001110000100 | 0b01000101000100 | 0b01001101000100 | 0b01000111000100 | 0b01001111000100 | 0b01000100100100 | 0b01001100100100 | 0b01000110100100 | 0b01001110100100 | 0b01000101100100 | 0b01001101100100 | 0b01000111100100 | 0b01001111100100 | 0b01000100010100 | 0b01001100010100 | 0b01000110010100 | 0b01001110010100 | 0b01000101010100 | 0b01001101010100 | 0b01000111010100 | 0b01001111010100 | 0b01000100110100 | 0b01001100110100 | 0b01000110110100 | 0b01001110110100 | 0b01000101110100 | 0b01001101110100 | 0b01000111110100 | 0b01001111110100 | 0b01000100001100 | 0b01001100001100 | 0b01000110001100 | 0b01001110001100 | 0b01000101001100 | 0b01001101001100 | 0b01000111001100 | 0b01001111001100 | 0b01000100101100 | 0b01001100101100 | 0b01000110101100 | 0b01001110101100 | 0b01000101101100 | 0b01001101101100 | 0b01000111101100 | 0b01001111101100 | 0b01000100011100 | 0b01001100011100 | 0b01000110011100 | 0b01001110011100 | 0b01000101011100 | 0b01001101011100 | 0b01000111011100 | 0b01001111011100 | 0b01000100111100 | 0b01001100111100 | 0b01000110111100 | 0b01001110111100 | 0b01000101111100 | 0b01001101111100 | 0b01000111111100 | 0b01001111111100 | 0b01000100000010 | 0b01001100000010 | 0b01000110000010 | 0b01001110000010 | 0b01000101000010 | 0b01001101000010 | 0b01000111000010 | 0b01001111000010 | 0b01000100100010 | 0b01001100100010 | 0b01000110100010 | 0b01001110100010 | 0b01000101100010 | 0b01001101100010 | 0b01000111100010 | 0b01001111100010 | 0b01000100010010 | 0b01001100010010 | 0b01000110010010 | 0b01001110010010 | 0b01000101010010 | 0b01001101010010 | 0b01000111010010 | 0b01001111010010 | 0b01000100110010 | 0b01001100110010 | 0b01000110110010 | 0b01001110110010 | 0b01000101110010 | 0b01001101110010 | 0b01000111110010 | 0b01001111110010 | 0b01000100001010 | 0b01001100001010 | 0b01000110001010 | 0b01001110001010 | 0b01000101001010 | 0b01001101001010 | 0b01000111001010 | 0b01001111001010 | 0b01000100101010 | 0b01001100101010 | 0b01000110101010 | 0b01001110101010 | 0b01000101101010 | 0b01001101101010 | 0b01000111101010 | 0b01001111101010 | 0b01000100011010 | 0b01001100011010 | 0b01000110011010 | 0b01001110011010 | 0b01000101011010 | 0b01001101011010 | 0b01000111011010 | 0b01001111011010 | 0b01000100111010 | 0b01001100111010 | 0b01000110111010 | 0b01001110111010 | 0b01000101111010 | 0b01001101111010 | 0b01000111111010 | 0b01001111111010 | 0b01000100000110 | 0b01001100000110 | 0b01000110000110 | 0b01001110000110 | 0b01000101000110 | 0b01001101000110 | 0b01000111000110 | 0b01001111000110 | 0b01000100100110 | 0b01001100100110 | 0b01000110100110 | 0b01001110100110 | 0b01000101100110 | 0b01001101100110 | 0b01000111100110 | 0b01001111100110 | 0b01000100010110 | 0b01001100010110 | 0b01000110010110 | 0b01001110010110 | 0b01000101010110 | 0b01001101010110 | 0b01000111010110 | 0b01001111010110 | 0b01000100110110 | 0b01001100110110 | 0b01000110110110 | 0b01001110110110 | 0b01000101110110 | 0b01001101110110 | 0b01000111110110 | 0b01001111110110 | 0b01000100001110 | 0b01001100001110 | 0b01000110001110 | 0b01001110001110 | 0b01000101001110 | 0b01001101001110 | 0b01000111001110 | 0b01001111001110 | 0b01000100101110 | 0b01001100101110 | 0b01000110101110 | 0b01001110101110 | 0b01000101101110 | 0b01001101101110 | 0b01000111101110 | 0b01001111101110 | 0b01000100011110 | 0b01001100011110 | 0b01000110011110 | 0b01001110011110 | 0b01000101011110 | 0b01001101011110 | 0b01000111011110 | 0b01001111011110 | 0b01000100111110 | 0b01001100111110 | 0b01000110111110 | 0b01001110111110 | 0b01000101111110 | 0b01001101111110 | 0b01000111111110 | 0b01001111111110 | 0b01000100000001 | 0b01001100000001 | 0b01000110000001 | 0b01001110000001 | 0b01000101000001 | 0b01001101000001 | 0b01000111000001 | 0b01001111000001 | 0b01000100100001 | 0b01001100100001 | 0b01000110100001 | 0b01001110100001 | 0b01000101100001 | 0b01001101100001 | 0b01000111100001 | 0b01001111100001 | 0b01000100010001 | 0b01001100010001 | 0b01000110010001 | 0b01001110010001 | 0b01000101010001 | 0b01001101010001 | 0b01000111010001 | 0b01001111010001 | 0b01000100110001 | 0b01001100110001 | 0b01000110110001 | 0b01001110110001 | 0b01000101110001 | 0b01001101110001 | 0b01000111110001 | 0b01001111110001 | 0b01000100001001 | 0b01001100001001 | 0b01000110001001 | 0b01001110001001 | 0b01000101001001 | 0b01001101001001 | 0b01000111001001 | 0b01001111001001 | 0b01000100101001 | 0b01001100101001 | 0b01000110101001 | 0b01001110101001 | 0b01000101101001 | 0b01001101101001 | 0b01000111101001 | 0b01001111101001 | 0b01000100011001 | 0b01001100011001 | 0b01000110011001 | 0b01001110011001 | 0b01000101011001 | 0b01001101011001 | 0b01000111011001 | 0b01001111011001 | 0b01000100111001 | 0b01001100111001 | 0b01000110111001 | 0b01001110111001 | 0b01000101111001 | 0b01001101111001 | 0b01000111111001 | 0b01001111111001 | 0b01000100000101 | 0b01001100000101 | 0b01000110000101 | 0b01001110000101 | 0b01000101000101 | 0b01001101000101 | 0b01000111000101 | 0b01001111000101 | 0b01000100100101 | 0b01001100100101 | 0b01000110100101 | 0b01001110100101 | 0b01000101100101 | 0b01001101100101 | 0b01000111100101 | 0b01001111100101 | 0b01000100010101 | 0b01001100010101 | 0b01000110010101 | 0b01001110010101 | 0b01000101010101 | 0b01001101010101 | 0b01000111010101 | 0b01001111010101 | 0b01000100110101 | 0b01001100110101 | 0b01000110110101 | 0b01001110110101 | 0b01000101110101 | 0b01001101110101 | 0b01000111110101 | 0b01001111110101 | 0b01000100001101 | 0b01001100001101 | 0b01000110001101 | 0b01001110001101 | 0b01000101001101 | 0b01001101001101 | 0b01000111001101 | 0b01001111001101 | 0b01000100101101 | 0b01001100101101 | 0b01000110101101 | 0b01001110101101 | 0b01000101101101 | 0b01001101101101 | 0b01000111101101 | 0b01001111101101 | 0b01000100011101 | 0b01001100011101 | 0b01000110011101 | 0b01001110011101 | 0b01000101011101 | 0b01001101011101 | 0b01000111011101 | 0b01001111011101 | 0b01000100111101 | 0b01001100111101 | 0b01000110111101 | 0b01001110111101 | 0b01000101111101 | 0b01001101111101 | 0b01000111111101 | 0b01001111111101 | 0b01000100000011 | 0b01001100000011 | 0b01000110000011 | 0b01001110000011 | 0b01000101000011 | 0b01001101000011 | 0b01000111000011 | 0b01001111000011 | 0b01000100100011 | 0b01001100100011 | 0b01000110100011 | 0b01001110100011 | 0b01000101100011 | 0b01001101100011 | 0b01000111100011 | 0b01001111100011 | 0b01000100010011 | 0b01001100010011 | 0b01000110010011 | 0b01001110010011 | 0b01000101010011 | 0b01001101010011 | 0b01000111010011 | 0b01001111010011 | 0b01000100110011 | 0b01001100110011 | 0b01000110110011 | 0b01001110110011 | 0b01000101110011 | 0b01001101110011 | 0b01000111110011 | 0b01001111110011 | 0b01000100001011 | 0b01001100001011 | 0b01000110001011 | 0b01001110001011 | 0b01000101001011 | 0b01001101001011 | 0b01000111001011 | 0b01001111001011 | 0b01000100101011 | 0b01001100101011 | 0b01000110101011 | 0b01001110101011 | 0b01000101101011 | 0b01001101101011 | 0b01000111101011 | 0b01001111101011 | 0b01000100011011 | 0b01001100011011 | 0b01000110011011 | 0b01001110011011 | 0b01000101011011 | 0b01001101011011 | 0b01000111011011 | 0b01001111011011 | 0b01000100111011 | 0b01001100111011 | 0b01000110111011 | 0b01001110111011 | 0b01000101111011 | 0b01001101111011 | 0b01000111111011 | 0b01001111111011 | 0b01000100000111 | 0b01001100000111 | 0b01000110000111 | 0b01001110000111 | 0b01000101000111 | 0b01001101000111 | 0b01000111000111 | 0b01001111000111 | 0b01000100100111 | 0b01001100100111 | 0b01000110100111 | 0b01001110100111 | 0b01000101100111 | 0b01001101100111 | 0b01000111100111 | 0b01001111100111 | 0b01000100010111 | 0b01001100010111 | 0b01000110010111 | 0b01001110010111 | 0b01000101010111 | 0b01001101010111 | 0b01000111010111 | 0b01001111010111 | 0b01000100110111 | 0b01001100110111 | 0b01000110110111 | 0b01001110110111 | 0b01000101110111 | 0b01001101110111 | 0b01000111110111 | 0b01001111110111 | 0b01000100001111 | 0b01001100001111 | 0b01000110001111 | 0b01001110001111 | 0b01000101001111 | 0b01001101001111 | 0b01000111001111 | 0b01001111001111 | 0b01000100101111 | 0b01001100101111 | 0b01000110101111 | 0b01001110101111 | 0b01000101101111 | 0b01001101101111 | 0b01000111101111 | 0b01001111101111 | 0b01000100011111 | 0b01001100011111 | 0b01000110011111 | 0b01001110011111 | 0b01000101011111 | 0b01001101011111 | 0b01000111011111 | 0b01001111011111 | 0b01000100111111 | 0b01001100111111 | 0b01000110111111 | 0b01001110111111 | 0b01000101111111 | 0b01001101111111 | 0b01000111111111 | 0b01001111111111, _, _) => {
            let L = (inst >> 21) & 0b1;
            let o0 = (inst >> 19) & 0b1;
            let op1 = (inst >> 16) & 0b111;
            let CRn = (inst >> 12) & 0b1111;
            let CRm = (inst >> 8) & 0b1111;
            let op2 = (inst >> 5) & 0b111;
            let Rt = inst & 0b11111;
            match L {
                0 => return OpCode::MSR_SR_systemmove,
                1 => return OpCode::MRS_RS_systemmove,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b110, _, 0b10000000000000 | 0b11000000000000 | 0b10100000000000 | 0b11100000000000 | 0b10010000000000 | 0b11010000000000 | 0b10110000000000 | 0b11110000000000 | 0b10001000000000 | 0b11001000000000 | 0b10101000000000 | 0b11101000000000 | 0b10011000000000 | 0b11011000000000 | 0b10111000000000 | 0b11111000000000 | 0b10000100000000 | 0b11000100000000 | 0b10100100000000 | 0b11100100000000 | 0b10010100000000 | 0b11010100000000 | 0b10110100000000 | 0b11110100000000 | 0b10001100000000 | 0b11001100000000 | 0b10101100000000 | 0b11101100000000 | 0b10011100000000 | 0b11011100000000 | 0b10111100000000 | 0b11111100000000 | 0b10000010000000 | 0b11000010000000 | 0b10100010000000 | 0b11100010000000 | 0b10010010000000 | 0b11010010000000 | 0b10110010000000 | 0b11110010000000 | 0b10001010000000 | 0b11001010000000 | 0b10101010000000 | 0b11101010000000 | 0b10011010000000 | 0b11011010000000 | 0b10111010000000 | 0b11111010000000 | 0b10000110000000 | 0b11000110000000 | 0b10100110000000 | 0b11100110000000 | 0b10010110000000 | 0b11010110000000 | 0b10110110000000 | 0b11110110000000 | 0b10001110000000 | 0b11001110000000 | 0b10101110000000 | 0b11101110000000 | 0b10011110000000 | 0b11011110000000 | 0b10111110000000 | 0b11111110000000 | 0b10000001000000 | 0b11000001000000 | 0b10100001000000 | 0b11100001000000 | 0b10010001000000 | 0b11010001000000 | 0b10110001000000 | 0b11110001000000 | 0b10001001000000 | 0b11001001000000 | 0b10101001000000 | 0b11101001000000 | 0b10011001000000 | 0b11011001000000 | 0b10111001000000 | 0b11111001000000 | 0b10000101000000 | 0b11000101000000 | 0b10100101000000 | 0b11100101000000 | 0b10010101000000 | 0b11010101000000 | 0b10110101000000 | 0b11110101000000 | 0b10001101000000 | 0b11001101000000 | 0b10101101000000 | 0b11101101000000 | 0b10011101000000 | 0b11011101000000 | 0b10111101000000 | 0b11111101000000 | 0b10000011000000 | 0b11000011000000 | 0b10100011000000 | 0b11100011000000 | 0b10010011000000 | 0b11010011000000 | 0b10110011000000 | 0b11110011000000 | 0b10001011000000 | 0b11001011000000 | 0b10101011000000 | 0b11101011000000 | 0b10011011000000 | 0b11011011000000 | 0b10111011000000 | 0b11111011000000 | 0b10000111000000 | 0b11000111000000 | 0b10100111000000 | 0b11100111000000 | 0b10010111000000 | 0b11010111000000 | 0b10110111000000 | 0b11110111000000 | 0b10001111000000 | 0b11001111000000 | 0b10101111000000 | 0b11101111000000 | 0b10011111000000 | 0b11011111000000 | 0b10111111000000 | 0b11111111000000 | 0b10000000100000 | 0b11000000100000 | 0b10100000100000 | 0b11100000100000 | 0b10010000100000 | 0b11010000100000 | 0b10110000100000 | 0b11110000100000 | 0b10001000100000 | 0b11001000100000 | 0b10101000100000 | 0b11101000100000 | 0b10011000100000 | 0b11011000100000 | 0b10111000100000 | 0b11111000100000 | 0b10000100100000 | 0b11000100100000 | 0b10100100100000 | 0b11100100100000 | 0b10010100100000 | 0b11010100100000 | 0b10110100100000 | 0b11110100100000 | 0b10001100100000 | 0b11001100100000 | 0b10101100100000 | 0b11101100100000 | 0b10011100100000 | 0b11011100100000 | 0b10111100100000 | 0b11111100100000 | 0b10000010100000 | 0b11000010100000 | 0b10100010100000 | 0b11100010100000 | 0b10010010100000 | 0b11010010100000 | 0b10110010100000 | 0b11110010100000 | 0b10001010100000 | 0b11001010100000 | 0b10101010100000 | 0b11101010100000 | 0b10011010100000 | 0b11011010100000 | 0b10111010100000 | 0b11111010100000 | 0b10000110100000 | 0b11000110100000 | 0b10100110100000 | 0b11100110100000 | 0b10010110100000 | 0b11010110100000 | 0b10110110100000 | 0b11110110100000 | 0b10001110100000 | 0b11001110100000 | 0b10101110100000 | 0b11101110100000 | 0b10011110100000 | 0b11011110100000 | 0b10111110100000 | 0b11111110100000 | 0b10000001100000 | 0b11000001100000 | 0b10100001100000 | 0b11100001100000 | 0b10010001100000 | 0b11010001100000 | 0b10110001100000 | 0b11110001100000 | 0b10001001100000 | 0b11001001100000 | 0b10101001100000 | 0b11101001100000 | 0b10011001100000 | 0b11011001100000 | 0b10111001100000 | 0b11111001100000 | 0b10000101100000 | 0b11000101100000 | 0b10100101100000 | 0b11100101100000 | 0b10010101100000 | 0b11010101100000 | 0b10110101100000 | 0b11110101100000 | 0b10001101100000 | 0b11001101100000 | 0b10101101100000 | 0b11101101100000 | 0b10011101100000 | 0b11011101100000 | 0b10111101100000 | 0b11111101100000 | 0b10000011100000 | 0b11000011100000 | 0b10100011100000 | 0b11100011100000 | 0b10010011100000 | 0b11010011100000 | 0b10110011100000 | 0b11110011100000 | 0b10001011100000 | 0b11001011100000 | 0b10101011100000 | 0b11101011100000 | 0b10011011100000 | 0b11011011100000 | 0b10111011100000 | 0b11111011100000 | 0b10000111100000 | 0b11000111100000 | 0b10100111100000 | 0b11100111100000 | 0b10010111100000 | 0b11010111100000 | 0b10110111100000 | 0b11110111100000 | 0b10001111100000 | 0b11001111100000 | 0b10101111100000 | 0b11101111100000 | 0b10011111100000 | 0b11011111100000 | 0b10111111100000 | 0b11111111100000 | 0b10000000010000 | 0b11000000010000 | 0b10100000010000 | 0b11100000010000 | 0b10010000010000 | 0b11010000010000 | 0b10110000010000 | 0b11110000010000 | 0b10001000010000 | 0b11001000010000 | 0b10101000010000 | 0b11101000010000 | 0b10011000010000 | 0b11011000010000 | 0b10111000010000 | 0b11111000010000 | 0b10000100010000 | 0b11000100010000 | 0b10100100010000 | 0b11100100010000 | 0b10010100010000 | 0b11010100010000 | 0b10110100010000 | 0b11110100010000 | 0b10001100010000 | 0b11001100010000 | 0b10101100010000 | 0b11101100010000 | 0b10011100010000 | 0b11011100010000 | 0b10111100010000 | 0b11111100010000 | 0b10000010010000 | 0b11000010010000 | 0b10100010010000 | 0b11100010010000 | 0b10010010010000 | 0b11010010010000 | 0b10110010010000 | 0b11110010010000 | 0b10001010010000 | 0b11001010010000 | 0b10101010010000 | 0b11101010010000 | 0b10011010010000 | 0b11011010010000 | 0b10111010010000 | 0b11111010010000 | 0b10000110010000 | 0b11000110010000 | 0b10100110010000 | 0b11100110010000 | 0b10010110010000 | 0b11010110010000 | 0b10110110010000 | 0b11110110010000 | 0b10001110010000 | 0b11001110010000 | 0b10101110010000 | 0b11101110010000 | 0b10011110010000 | 0b11011110010000 | 0b10111110010000 | 0b11111110010000 | 0b10000001010000 | 0b11000001010000 | 0b10100001010000 | 0b11100001010000 | 0b10010001010000 | 0b11010001010000 | 0b10110001010000 | 0b11110001010000 | 0b10001001010000 | 0b11001001010000 | 0b10101001010000 | 0b11101001010000 | 0b10011001010000 | 0b11011001010000 | 0b10111001010000 | 0b11111001010000 | 0b10000101010000 | 0b11000101010000 | 0b10100101010000 | 0b11100101010000 | 0b10010101010000 | 0b11010101010000 | 0b10110101010000 | 0b11110101010000 | 0b10001101010000 | 0b11001101010000 | 0b10101101010000 | 0b11101101010000 | 0b10011101010000 | 0b11011101010000 | 0b10111101010000 | 0b11111101010000 | 0b10000011010000 | 0b11000011010000 | 0b10100011010000 | 0b11100011010000 | 0b10010011010000 | 0b11010011010000 | 0b10110011010000 | 0b11110011010000 | 0b10001011010000 | 0b11001011010000 | 0b10101011010000 | 0b11101011010000 | 0b10011011010000 | 0b11011011010000 | 0b10111011010000 | 0b11111011010000 | 0b10000111010000 | 0b11000111010000 | 0b10100111010000 | 0b11100111010000 | 0b10010111010000 | 0b11010111010000 | 0b10110111010000 | 0b11110111010000 | 0b10001111010000 | 0b11001111010000 | 0b10101111010000 | 0b11101111010000 | 0b10011111010000 | 0b11011111010000 | 0b10111111010000 | 0b11111111010000 | 0b10000000110000 | 0b11000000110000 | 0b10100000110000 | 0b11100000110000 | 0b10010000110000 | 0b11010000110000 | 0b10110000110000 | 0b11110000110000 | 0b10001000110000 | 0b11001000110000 | 0b10101000110000 | 0b11101000110000 | 0b10011000110000 | 0b11011000110000 | 0b10111000110000 | 0b11111000110000 | 0b10000100110000 | 0b11000100110000 | 0b10100100110000 | 0b11100100110000 | 0b10010100110000 | 0b11010100110000 | 0b10110100110000 | 0b11110100110000 | 0b10001100110000 | 0b11001100110000 | 0b10101100110000 | 0b11101100110000 | 0b10011100110000 | 0b11011100110000 | 0b10111100110000 | 0b11111100110000 | 0b10000010110000 | 0b11000010110000 | 0b10100010110000 | 0b11100010110000 | 0b10010010110000 | 0b11010010110000 | 0b10110010110000 | 0b11110010110000 | 0b10001010110000 | 0b11001010110000 | 0b10101010110000 | 0b11101010110000 | 0b10011010110000 | 0b11011010110000 | 0b10111010110000 | 0b11111010110000 | 0b10000110110000 | 0b11000110110000 | 0b10100110110000 | 0b11100110110000 | 0b10010110110000 | 0b11010110110000 | 0b10110110110000 | 0b11110110110000 | 0b10001110110000 | 0b11001110110000 | 0b10101110110000 | 0b11101110110000 | 0b10011110110000 | 0b11011110110000 | 0b10111110110000 | 0b11111110110000 | 0b10000001110000 | 0b11000001110000 | 0b10100001110000 | 0b11100001110000 | 0b10010001110000 | 0b11010001110000 | 0b10110001110000 | 0b11110001110000 | 0b10001001110000 | 0b11001001110000 | 0b10101001110000 | 0b11101001110000 | 0b10011001110000 | 0b11011001110000 | 0b10111001110000 | 0b11111001110000 | 0b10000101110000 | 0b11000101110000 | 0b10100101110000 | 0b11100101110000 | 0b10010101110000 | 0b11010101110000 | 0b10110101110000 | 0b11110101110000 | 0b10001101110000 | 0b11001101110000 | 0b10101101110000 | 0b11101101110000 | 0b10011101110000 | 0b11011101110000 | 0b10111101110000 | 0b11111101110000 | 0b10000011110000 | 0b11000011110000 | 0b10100011110000 | 0b11100011110000 | 0b10010011110000 | 0b11010011110000 | 0b10110011110000 | 0b11110011110000 | 0b10001011110000 | 0b11001011110000 | 0b10101011110000 | 0b11101011110000 | 0b10011011110000 | 0b11011011110000 | 0b10111011110000 | 0b11111011110000 | 0b10000111110000 | 0b11000111110000 | 0b10100111110000 | 0b11100111110000 | 0b10010111110000 | 0b11010111110000 | 0b10110111110000 | 0b11110111110000 | 0b10001111110000 | 0b11001111110000 | 0b10101111110000 | 0b11101111110000 | 0b10011111110000 | 0b11011111110000 | 0b10111111110000 | 0b11111111110000 | 0b10000000001000 | 0b11000000001000 | 0b10100000001000 | 0b11100000001000 | 0b10010000001000 | 0b11010000001000 | 0b10110000001000 | 0b11110000001000 | 0b10001000001000 | 0b11001000001000 | 0b10101000001000 | 0b11101000001000 | 0b10011000001000 | 0b11011000001000 | 0b10111000001000 | 0b11111000001000 | 0b10000100001000 | 0b11000100001000 | 0b10100100001000 | 0b11100100001000 | 0b10010100001000 | 0b11010100001000 | 0b10110100001000 | 0b11110100001000 | 0b10001100001000 | 0b11001100001000 | 0b10101100001000 | 0b11101100001000 | 0b10011100001000 | 0b11011100001000 | 0b10111100001000 | 0b11111100001000 | 0b10000010001000 | 0b11000010001000 | 0b10100010001000 | 0b11100010001000 | 0b10010010001000 | 0b11010010001000 | 0b10110010001000 | 0b11110010001000 | 0b10001010001000 | 0b11001010001000 | 0b10101010001000 | 0b11101010001000 | 0b10011010001000 | 0b11011010001000 | 0b10111010001000 | 0b11111010001000 | 0b10000110001000 | 0b11000110001000 | 0b10100110001000 | 0b11100110001000 | 0b10010110001000 | 0b11010110001000 | 0b10110110001000 | 0b11110110001000 | 0b10001110001000 | 0b11001110001000 | 0b10101110001000 | 0b11101110001000 | 0b10011110001000 | 0b11011110001000 | 0b10111110001000 | 0b11111110001000 | 0b10000001001000 | 0b11000001001000 | 0b10100001001000 | 0b11100001001000 | 0b10010001001000 | 0b11010001001000 | 0b10110001001000 | 0b11110001001000 | 0b10001001001000 | 0b11001001001000 | 0b10101001001000 | 0b11101001001000 | 0b10011001001000 | 0b11011001001000 | 0b10111001001000 | 0b11111001001000 | 0b10000101001000 | 0b11000101001000 | 0b10100101001000 | 0b11100101001000 | 0b10010101001000 | 0b11010101001000 | 0b10110101001000 | 0b11110101001000 | 0b10001101001000 | 0b11001101001000 | 0b10101101001000 | 0b11101101001000 | 0b10011101001000 | 0b11011101001000 | 0b10111101001000 | 0b11111101001000 | 0b10000011001000 | 0b11000011001000 | 0b10100011001000 | 0b11100011001000 | 0b10010011001000 | 0b11010011001000 | 0b10110011001000 | 0b11110011001000 | 0b10001011001000 | 0b11001011001000 | 0b10101011001000 | 0b11101011001000 | 0b10011011001000 | 0b11011011001000 | 0b10111011001000 | 0b11111011001000 | 0b10000111001000 | 0b11000111001000 | 0b10100111001000 | 0b11100111001000 | 0b10010111001000 | 0b11010111001000 | 0b10110111001000 | 0b11110111001000 | 0b10001111001000 | 0b11001111001000 | 0b10101111001000 | 0b11101111001000 | 0b10011111001000 | 0b11011111001000 | 0b10111111001000 | 0b11111111001000 | 0b10000000101000 | 0b11000000101000 | 0b10100000101000 | 0b11100000101000 | 0b10010000101000 | 0b11010000101000 | 0b10110000101000 | 0b11110000101000 | 0b10001000101000 | 0b11001000101000 | 0b10101000101000 | 0b11101000101000 | 0b10011000101000 | 0b11011000101000 | 0b10111000101000 | 0b11111000101000 | 0b10000100101000 | 0b11000100101000 | 0b10100100101000 | 0b11100100101000 | 0b10010100101000 | 0b11010100101000 | 0b10110100101000 | 0b11110100101000 | 0b10001100101000 | 0b11001100101000 | 0b10101100101000 | 0b11101100101000 | 0b10011100101000 | 0b11011100101000 | 0b10111100101000 | 0b11111100101000 | 0b10000010101000 | 0b11000010101000 | 0b10100010101000 | 0b11100010101000 | 0b10010010101000 | 0b11010010101000 | 0b10110010101000 | 0b11110010101000 | 0b10001010101000 | 0b11001010101000 | 0b10101010101000 | 0b11101010101000 | 0b10011010101000 | 0b11011010101000 | 0b10111010101000 | 0b11111010101000 | 0b10000110101000 | 0b11000110101000 | 0b10100110101000 | 0b11100110101000 | 0b10010110101000 | 0b11010110101000 | 0b10110110101000 | 0b11110110101000 | 0b10001110101000 | 0b11001110101000 | 0b10101110101000 | 0b11101110101000 | 0b10011110101000 | 0b11011110101000 | 0b10111110101000 | 0b11111110101000 | 0b10000001101000 | 0b11000001101000 | 0b10100001101000 | 0b11100001101000 | 0b10010001101000 | 0b11010001101000 | 0b10110001101000 | 0b11110001101000 | 0b10001001101000 | 0b11001001101000 | 0b10101001101000 | 0b11101001101000 | 0b10011001101000 | 0b11011001101000 | 0b10111001101000 | 0b11111001101000 | 0b10000101101000 | 0b11000101101000 | 0b10100101101000 | 0b11100101101000 | 0b10010101101000 | 0b11010101101000 | 0b10110101101000 | 0b11110101101000 | 0b10001101101000 | 0b11001101101000 | 0b10101101101000 | 0b11101101101000 | 0b10011101101000 | 0b11011101101000 | 0b10111101101000 | 0b11111101101000 | 0b10000011101000 | 0b11000011101000 | 0b10100011101000 | 0b11100011101000 | 0b10010011101000 | 0b11010011101000 | 0b10110011101000 | 0b11110011101000 | 0b10001011101000 | 0b11001011101000 | 0b10101011101000 | 0b11101011101000 | 0b10011011101000 | 0b11011011101000 | 0b10111011101000 | 0b11111011101000 | 0b10000111101000 | 0b11000111101000 | 0b10100111101000 | 0b11100111101000 | 0b10010111101000 | 0b11010111101000 | 0b10110111101000 | 0b11110111101000 | 0b10001111101000 | 0b11001111101000 | 0b10101111101000 | 0b11101111101000 | 0b10011111101000 | 0b11011111101000 | 0b10111111101000 | 0b11111111101000 | 0b10000000011000 | 0b11000000011000 | 0b10100000011000 | 0b11100000011000 | 0b10010000011000 | 0b11010000011000 | 0b10110000011000 | 0b11110000011000 | 0b10001000011000 | 0b11001000011000 | 0b10101000011000 | 0b11101000011000 | 0b10011000011000 | 0b11011000011000 | 0b10111000011000 | 0b11111000011000 | 0b10000100011000 | 0b11000100011000 | 0b10100100011000 | 0b11100100011000 | 0b10010100011000 | 0b11010100011000 | 0b10110100011000 | 0b11110100011000 | 0b10001100011000 | 0b11001100011000 | 0b10101100011000 | 0b11101100011000 | 0b10011100011000 | 0b11011100011000 | 0b10111100011000 | 0b11111100011000 | 0b10000010011000 | 0b11000010011000 | 0b10100010011000 | 0b11100010011000 | 0b10010010011000 | 0b11010010011000 | 0b10110010011000 | 0b11110010011000 | 0b10001010011000 | 0b11001010011000 | 0b10101010011000 | 0b11101010011000 | 0b10011010011000 | 0b11011010011000 | 0b10111010011000 | 0b11111010011000 | 0b10000110011000 | 0b11000110011000 | 0b10100110011000 | 0b11100110011000 | 0b10010110011000 | 0b11010110011000 | 0b10110110011000 | 0b11110110011000 | 0b10001110011000 | 0b11001110011000 | 0b10101110011000 | 0b11101110011000 | 0b10011110011000 | 0b11011110011000 | 0b10111110011000 | 0b11111110011000 | 0b10000001011000 | 0b11000001011000 | 0b10100001011000 | 0b11100001011000 | 0b10010001011000 | 0b11010001011000 | 0b10110001011000 | 0b11110001011000 | 0b10001001011000 | 0b11001001011000 | 0b10101001011000 | 0b11101001011000 | 0b10011001011000 | 0b11011001011000 | 0b10111001011000 | 0b11111001011000 | 0b10000101011000 | 0b11000101011000 | 0b10100101011000 | 0b11100101011000 | 0b10010101011000 | 0b11010101011000 | 0b10110101011000 | 0b11110101011000 | 0b10001101011000 | 0b11001101011000 | 0b10101101011000 | 0b11101101011000 | 0b10011101011000 | 0b11011101011000 | 0b10111101011000 | 0b11111101011000 | 0b10000011011000 | 0b11000011011000 | 0b10100011011000 | 0b11100011011000 | 0b10010011011000 | 0b11010011011000 | 0b10110011011000 | 0b11110011011000 | 0b10001011011000 | 0b11001011011000 | 0b10101011011000 | 0b11101011011000 | 0b10011011011000 | 0b11011011011000 | 0b10111011011000 | 0b11111011011000 | 0b10000111011000 | 0b11000111011000 | 0b10100111011000 | 0b11100111011000 | 0b10010111011000 | 0b11010111011000 | 0b10110111011000 | 0b11110111011000 | 0b10001111011000 | 0b11001111011000 | 0b10101111011000 | 0b11101111011000 | 0b10011111011000 | 0b11011111011000 | 0b10111111011000 | 0b11111111011000 | 0b10000000111000 | 0b11000000111000 | 0b10100000111000 | 0b11100000111000 | 0b10010000111000 | 0b11010000111000 | 0b10110000111000 | 0b11110000111000 | 0b10001000111000 | 0b11001000111000 | 0b10101000111000 | 0b11101000111000 | 0b10011000111000 | 0b11011000111000 | 0b10111000111000 | 0b11111000111000 | 0b10000100111000 | 0b11000100111000 | 0b10100100111000 | 0b11100100111000 | 0b10010100111000 | 0b11010100111000 | 0b10110100111000 | 0b11110100111000 | 0b10001100111000 | 0b11001100111000 | 0b10101100111000 | 0b11101100111000 | 0b10011100111000 | 0b11011100111000 | 0b10111100111000 | 0b11111100111000 | 0b10000010111000 | 0b11000010111000 | 0b10100010111000 | 0b11100010111000 | 0b10010010111000 | 0b11010010111000 | 0b10110010111000 | 0b11110010111000 | 0b10001010111000 | 0b11001010111000 | 0b10101010111000 | 0b11101010111000 | 0b10011010111000 | 0b11011010111000 | 0b10111010111000 | 0b11111010111000 | 0b10000110111000 | 0b11000110111000 | 0b10100110111000 | 0b11100110111000 | 0b10010110111000 | 0b11010110111000 | 0b10110110111000 | 0b11110110111000 | 0b10001110111000 | 0b11001110111000 | 0b10101110111000 | 0b11101110111000 | 0b10011110111000 | 0b11011110111000 | 0b10111110111000 | 0b11111110111000 | 0b10000001111000 | 0b11000001111000 | 0b10100001111000 | 0b11100001111000 | 0b10010001111000 | 0b11010001111000 | 0b10110001111000 | 0b11110001111000 | 0b10001001111000 | 0b11001001111000 | 0b10101001111000 | 0b11101001111000 | 0b10011001111000 | 0b11011001111000 | 0b10111001111000 | 0b11111001111000 | 0b10000101111000 | 0b11000101111000 | 0b10100101111000 | 0b11100101111000 | 0b10010101111000 | 0b11010101111000 | 0b10110101111000 | 0b11110101111000 | 0b10001101111000 | 0b11001101111000 | 0b10101101111000 | 0b11101101111000 | 0b10011101111000 | 0b11011101111000 | 0b10111101111000 | 0b11111101111000 | 0b10000011111000 | 0b11000011111000 | 0b10100011111000 | 0b11100011111000 | 0b10010011111000 | 0b11010011111000 | 0b10110011111000 | 0b11110011111000 | 0b10001011111000 | 0b11001011111000 | 0b10101011111000 | 0b11101011111000 | 0b10011011111000 | 0b11011011111000 | 0b10111011111000 | 0b11111011111000 | 0b10000111111000 | 0b11000111111000 | 0b10100111111000 | 0b11100111111000 | 0b10010111111000 | 0b11010111111000 | 0b10110111111000 | 0b11110111111000 | 0b10001111111000 | 0b11001111111000 | 0b10101111111000 | 0b11101111111000 | 0b10011111111000 | 0b11011111111000 | 0b10111111111000 | 0b11111111111000 | 0b10000000000100 | 0b11000000000100 | 0b10100000000100 | 0b11100000000100 | 0b10010000000100 | 0b11010000000100 | 0b10110000000100 | 0b11110000000100 | 0b10001000000100 | 0b11001000000100 | 0b10101000000100 | 0b11101000000100 | 0b10011000000100 | 0b11011000000100 | 0b10111000000100 | 0b11111000000100 | 0b10000100000100 | 0b11000100000100 | 0b10100100000100 | 0b11100100000100 | 0b10010100000100 | 0b11010100000100 | 0b10110100000100 | 0b11110100000100 | 0b10001100000100 | 0b11001100000100 | 0b10101100000100 | 0b11101100000100 | 0b10011100000100 | 0b11011100000100 | 0b10111100000100 | 0b11111100000100 | 0b10000010000100 | 0b11000010000100 | 0b10100010000100 | 0b11100010000100 | 0b10010010000100 | 0b11010010000100 | 0b10110010000100 | 0b11110010000100 | 0b10001010000100 | 0b11001010000100 | 0b10101010000100 | 0b11101010000100 | 0b10011010000100 | 0b11011010000100 | 0b10111010000100 | 0b11111010000100 | 0b10000110000100 | 0b11000110000100 | 0b10100110000100 | 0b11100110000100 | 0b10010110000100 | 0b11010110000100 | 0b10110110000100 | 0b11110110000100 | 0b10001110000100 | 0b11001110000100 | 0b10101110000100 | 0b11101110000100 | 0b10011110000100 | 0b11011110000100 | 0b10111110000100 | 0b11111110000100 | 0b10000001000100 | 0b11000001000100 | 0b10100001000100 | 0b11100001000100 | 0b10010001000100 | 0b11010001000100 | 0b10110001000100 | 0b11110001000100 | 0b10001001000100 | 0b11001001000100 | 0b10101001000100 | 0b11101001000100 | 0b10011001000100 | 0b11011001000100 | 0b10111001000100 | 0b11111001000100 | 0b10000101000100 | 0b11000101000100 | 0b10100101000100 | 0b11100101000100 | 0b10010101000100 | 0b11010101000100 | 0b10110101000100 | 0b11110101000100 | 0b10001101000100 | 0b11001101000100 | 0b10101101000100 | 0b11101101000100 | 0b10011101000100 | 0b11011101000100 | 0b10111101000100 | 0b11111101000100 | 0b10000011000100 | 0b11000011000100 | 0b10100011000100 | 0b11100011000100 | 0b10010011000100 | 0b11010011000100 | 0b10110011000100 | 0b11110011000100 | 0b10001011000100 | 0b11001011000100 | 0b10101011000100 | 0b11101011000100 | 0b10011011000100 | 0b11011011000100 | 0b10111011000100 | 0b11111011000100 | 0b10000111000100 | 0b11000111000100 | 0b10100111000100 | 0b11100111000100 | 0b10010111000100 | 0b11010111000100 | 0b10110111000100 | 0b11110111000100 | 0b10001111000100 | 0b11001111000100 | 0b10101111000100 | 0b11101111000100 | 0b10011111000100 | 0b11011111000100 | 0b10111111000100 | 0b11111111000100 | 0b10000000100100 | 0b11000000100100 | 0b10100000100100 | 0b11100000100100 | 0b10010000100100 | 0b11010000100100 | 0b10110000100100 | 0b11110000100100 | 0b10001000100100 | 0b11001000100100 | 0b10101000100100 | 0b11101000100100 | 0b10011000100100 | 0b11011000100100 | 0b10111000100100 | 0b11111000100100 | 0b10000100100100 | 0b11000100100100 | 0b10100100100100 | 0b11100100100100 | 0b10010100100100 | 0b11010100100100 | 0b10110100100100 | 0b11110100100100 | 0b10001100100100 | 0b11001100100100 | 0b10101100100100 | 0b11101100100100 | 0b10011100100100 | 0b11011100100100 | 0b10111100100100 | 0b11111100100100 | 0b10000010100100 | 0b11000010100100 | 0b10100010100100 | 0b11100010100100 | 0b10010010100100 | 0b11010010100100 | 0b10110010100100 | 0b11110010100100 | 0b10001010100100 | 0b11001010100100 | 0b10101010100100 | 0b11101010100100 | 0b10011010100100 | 0b11011010100100 | 0b10111010100100 | 0b11111010100100 | 0b10000110100100 | 0b11000110100100 | 0b10100110100100 | 0b11100110100100 | 0b10010110100100 | 0b11010110100100 | 0b10110110100100 | 0b11110110100100 | 0b10001110100100 | 0b11001110100100 | 0b10101110100100 | 0b11101110100100 | 0b10011110100100 | 0b11011110100100 | 0b10111110100100 | 0b11111110100100 | 0b10000001100100 | 0b11000001100100 | 0b10100001100100 | 0b11100001100100 | 0b10010001100100 | 0b11010001100100 | 0b10110001100100 | 0b11110001100100 | 0b10001001100100 | 0b11001001100100 | 0b10101001100100 | 0b11101001100100 | 0b10011001100100 | 0b11011001100100 | 0b10111001100100 | 0b11111001100100 | 0b10000101100100 | 0b11000101100100 | 0b10100101100100 | 0b11100101100100 | 0b10010101100100 | 0b11010101100100 | 0b10110101100100 | 0b11110101100100 | 0b10001101100100 | 0b11001101100100 | 0b10101101100100 | 0b11101101100100 | 0b10011101100100 | 0b11011101100100 | 0b10111101100100 | 0b11111101100100 | 0b10000011100100 | 0b11000011100100 | 0b10100011100100 | 0b11100011100100 | 0b10010011100100 | 0b11010011100100 | 0b10110011100100 | 0b11110011100100 | 0b10001011100100 | 0b11001011100100 | 0b10101011100100 | 0b11101011100100 | 0b10011011100100 | 0b11011011100100 | 0b10111011100100 | 0b11111011100100 | 0b10000111100100 | 0b11000111100100 | 0b10100111100100 | 0b11100111100100 | 0b10010111100100 | 0b11010111100100 | 0b10110111100100 | 0b11110111100100 | 0b10001111100100 | 0b11001111100100 | 0b10101111100100 | 0b11101111100100 | 0b10011111100100 | 0b11011111100100 | 0b10111111100100 | 0b11111111100100 | 0b10000000010100 | 0b11000000010100 | 0b10100000010100 | 0b11100000010100 | 0b10010000010100 | 0b11010000010100 | 0b10110000010100 | 0b11110000010100 | 0b10001000010100 | 0b11001000010100 | 0b10101000010100 | 0b11101000010100 | 0b10011000010100 | 0b11011000010100 | 0b10111000010100 | 0b11111000010100 | 0b10000100010100 | 0b11000100010100 | 0b10100100010100 | 0b11100100010100 | 0b10010100010100 | 0b11010100010100 | 0b10110100010100 | 0b11110100010100 | 0b10001100010100 | 0b11001100010100 | 0b10101100010100 | 0b11101100010100 | 0b10011100010100 | 0b11011100010100 | 0b10111100010100 | 0b11111100010100 | 0b10000010010100 | 0b11000010010100 | 0b10100010010100 | 0b11100010010100 | 0b10010010010100 | 0b11010010010100 | 0b10110010010100 | 0b11110010010100 | 0b10001010010100 | 0b11001010010100 | 0b10101010010100 | 0b11101010010100 | 0b10011010010100 | 0b11011010010100 | 0b10111010010100 | 0b11111010010100 | 0b10000110010100 | 0b11000110010100 | 0b10100110010100 | 0b11100110010100 | 0b10010110010100 | 0b11010110010100 | 0b10110110010100 | 0b11110110010100 | 0b10001110010100 | 0b11001110010100 | 0b10101110010100 | 0b11101110010100 | 0b10011110010100 | 0b11011110010100 | 0b10111110010100 | 0b11111110010100 | 0b10000001010100 | 0b11000001010100 | 0b10100001010100 | 0b11100001010100 | 0b10010001010100 | 0b11010001010100 | 0b10110001010100 | 0b11110001010100 | 0b10001001010100 | 0b11001001010100 | 0b10101001010100 | 0b11101001010100 | 0b10011001010100 | 0b11011001010100 | 0b10111001010100 | 0b11111001010100 | 0b10000101010100 | 0b11000101010100 | 0b10100101010100 | 0b11100101010100 | 0b10010101010100 | 0b11010101010100 | 0b10110101010100 | 0b11110101010100 | 0b10001101010100 | 0b11001101010100 | 0b10101101010100 | 0b11101101010100 | 0b10011101010100 | 0b11011101010100 | 0b10111101010100 | 0b11111101010100 | 0b10000011010100 | 0b11000011010100 | 0b10100011010100 | 0b11100011010100 | 0b10010011010100 | 0b11010011010100 | 0b10110011010100 | 0b11110011010100 | 0b10001011010100 | 0b11001011010100 | 0b10101011010100 | 0b11101011010100 | 0b10011011010100 | 0b11011011010100 | 0b10111011010100 | 0b11111011010100 | 0b10000111010100 | 0b11000111010100 | 0b10100111010100 | 0b11100111010100 | 0b10010111010100 | 0b11010111010100 | 0b10110111010100 | 0b11110111010100 | 0b10001111010100 | 0b11001111010100 | 0b10101111010100 | 0b11101111010100 | 0b10011111010100 | 0b11011111010100 | 0b10111111010100 | 0b11111111010100 | 0b10000000110100 | 0b11000000110100 | 0b10100000110100 | 0b11100000110100 | 0b10010000110100 | 0b11010000110100 | 0b10110000110100 | 0b11110000110100 | 0b10001000110100 | 0b11001000110100 | 0b10101000110100 | 0b11101000110100 | 0b10011000110100 | 0b11011000110100 | 0b10111000110100 | 0b11111000110100 | 0b10000100110100 | 0b11000100110100 | 0b10100100110100 | 0b11100100110100 | 0b10010100110100 | 0b11010100110100 | 0b10110100110100 | 0b11110100110100 | 0b10001100110100 | 0b11001100110100 | 0b10101100110100 | 0b11101100110100 | 0b10011100110100 | 0b11011100110100 | 0b10111100110100 | 0b11111100110100 | 0b10000010110100 | 0b11000010110100 | 0b10100010110100 | 0b11100010110100 | 0b10010010110100 | 0b11010010110100 | 0b10110010110100 | 0b11110010110100 | 0b10001010110100 | 0b11001010110100 | 0b10101010110100 | 0b11101010110100 | 0b10011010110100 | 0b11011010110100 | 0b10111010110100 | 0b11111010110100 | 0b10000110110100 | 0b11000110110100 | 0b10100110110100 | 0b11100110110100 | 0b10010110110100 | 0b11010110110100 | 0b10110110110100 | 0b11110110110100 | 0b10001110110100 | 0b11001110110100 | 0b10101110110100 | 0b11101110110100 | 0b10011110110100 | 0b11011110110100 | 0b10111110110100 | 0b11111110110100 | 0b10000001110100 | 0b11000001110100 | 0b10100001110100 | 0b11100001110100 | 0b10010001110100 | 0b11010001110100 | 0b10110001110100 | 0b11110001110100 | 0b10001001110100 | 0b11001001110100 | 0b10101001110100 | 0b11101001110100 | 0b10011001110100 | 0b11011001110100 | 0b10111001110100 | 0b11111001110100 | 0b10000101110100 | 0b11000101110100 | 0b10100101110100 | 0b11100101110100 | 0b10010101110100 | 0b11010101110100 | 0b10110101110100 | 0b11110101110100 | 0b10001101110100 | 0b11001101110100 | 0b10101101110100 | 0b11101101110100 | 0b10011101110100 | 0b11011101110100 | 0b10111101110100 | 0b11111101110100 | 0b10000011110100 | 0b11000011110100 | 0b10100011110100 | 0b11100011110100 | 0b10010011110100 | 0b11010011110100 | 0b10110011110100 | 0b11110011110100 | 0b10001011110100 | 0b11001011110100 | 0b10101011110100 | 0b11101011110100 | 0b10011011110100 | 0b11011011110100 | 0b10111011110100 | 0b11111011110100 | 0b10000111110100 | 0b11000111110100 | 0b10100111110100 | 0b11100111110100 | 0b10010111110100 | 0b11010111110100 | 0b10110111110100 | 0b11110111110100 | 0b10001111110100 | 0b11001111110100 | 0b10101111110100 | 0b11101111110100 | 0b10011111110100 | 0b11011111110100 | 0b10111111110100 | 0b11111111110100 | 0b10000000001100 | 0b11000000001100 | 0b10100000001100 | 0b11100000001100 | 0b10010000001100 | 0b11010000001100 | 0b10110000001100 | 0b11110000001100 | 0b10001000001100 | 0b11001000001100 | 0b10101000001100 | 0b11101000001100 | 0b10011000001100 | 0b11011000001100 | 0b10111000001100 | 0b11111000001100 | 0b10000100001100 | 0b11000100001100 | 0b10100100001100 | 0b11100100001100 | 0b10010100001100 | 0b11010100001100 | 0b10110100001100 | 0b11110100001100 | 0b10001100001100 | 0b11001100001100 | 0b10101100001100 | 0b11101100001100 | 0b10011100001100 | 0b11011100001100 | 0b10111100001100 | 0b11111100001100 | 0b10000010001100 | 0b11000010001100 | 0b10100010001100 | 0b11100010001100 | 0b10010010001100 | 0b11010010001100 | 0b10110010001100 | 0b11110010001100 | 0b10001010001100 | 0b11001010001100 | 0b10101010001100 | 0b11101010001100 | 0b10011010001100 | 0b11011010001100 | 0b10111010001100 | 0b11111010001100 | 0b10000110001100 | 0b11000110001100 | 0b10100110001100 | 0b11100110001100 | 0b10010110001100 | 0b11010110001100 | 0b10110110001100 | 0b11110110001100 | 0b10001110001100 | 0b11001110001100 | 0b10101110001100 | 0b11101110001100 | 0b10011110001100 | 0b11011110001100 | 0b10111110001100 | 0b11111110001100 | 0b10000001001100 | 0b11000001001100 | 0b10100001001100 | 0b11100001001100 | 0b10010001001100 | 0b11010001001100 | 0b10110001001100 | 0b11110001001100 | 0b10001001001100 | 0b11001001001100 | 0b10101001001100 | 0b11101001001100 | 0b10011001001100 | 0b11011001001100 | 0b10111001001100 | 0b11111001001100 | 0b10000101001100 | 0b11000101001100 | 0b10100101001100 | 0b11100101001100 | 0b10010101001100 | 0b11010101001100 | 0b10110101001100 | 0b11110101001100 | 0b10001101001100 | 0b11001101001100 | 0b10101101001100 | 0b11101101001100 | 0b10011101001100 | 0b11011101001100 | 0b10111101001100 | 0b11111101001100 | 0b10000011001100 | 0b11000011001100 | 0b10100011001100 | 0b11100011001100 | 0b10010011001100 | 0b11010011001100 | 0b10110011001100 | 0b11110011001100 | 0b10001011001100 | 0b11001011001100 | 0b10101011001100 | 0b11101011001100 | 0b10011011001100 | 0b11011011001100 | 0b10111011001100 | 0b11111011001100 | 0b10000111001100 | 0b11000111001100 | 0b10100111001100 | 0b11100111001100 | 0b10010111001100 | 0b11010111001100 | 0b10110111001100 | 0b11110111001100 | 0b10001111001100 | 0b11001111001100 | 0b10101111001100 | 0b11101111001100 | 0b10011111001100 | 0b11011111001100 | 0b10111111001100 | 0b11111111001100 | 0b10000000101100 | 0b11000000101100 | 0b10100000101100 | 0b11100000101100 | 0b10010000101100 | 0b11010000101100 | 0b10110000101100 | 0b11110000101100 | 0b10001000101100 | 0b11001000101100 | 0b10101000101100 | 0b11101000101100 | 0b10011000101100 | 0b11011000101100 | 0b10111000101100 | 0b11111000101100 | 0b10000100101100 | 0b11000100101100 | 0b10100100101100 | 0b11100100101100 | 0b10010100101100 | 0b11010100101100 | 0b10110100101100 | 0b11110100101100 | 0b10001100101100 | 0b11001100101100 | 0b10101100101100 | 0b11101100101100 | 0b10011100101100 | 0b11011100101100 | 0b10111100101100 | 0b11111100101100 | 0b10000010101100 | 0b11000010101100 | 0b10100010101100 | 0b11100010101100 | 0b10010010101100 | 0b11010010101100 | 0b10110010101100 | 0b11110010101100 | 0b10001010101100 | 0b11001010101100 | 0b10101010101100 | 0b11101010101100 | 0b10011010101100 | 0b11011010101100 | 0b10111010101100 | 0b11111010101100 | 0b10000110101100 | 0b11000110101100 | 0b10100110101100 | 0b11100110101100 | 0b10010110101100 | 0b11010110101100 | 0b10110110101100 | 0b11110110101100 | 0b10001110101100 | 0b11001110101100 | 0b10101110101100 | 0b11101110101100 | 0b10011110101100 | 0b11011110101100 | 0b10111110101100 | 0b11111110101100 | 0b10000001101100 | 0b11000001101100 | 0b10100001101100 | 0b11100001101100 | 0b10010001101100 | 0b11010001101100 | 0b10110001101100 | 0b11110001101100 | 0b10001001101100 | 0b11001001101100 | 0b10101001101100 | 0b11101001101100 | 0b10011001101100 | 0b11011001101100 | 0b10111001101100 | 0b11111001101100 | 0b10000101101100 | 0b11000101101100 | 0b10100101101100 | 0b11100101101100 | 0b10010101101100 | 0b11010101101100 | 0b10110101101100 | 0b11110101101100 | 0b10001101101100 | 0b11001101101100 | 0b10101101101100 | 0b11101101101100 | 0b10011101101100 | 0b11011101101100 | 0b10111101101100 | 0b11111101101100 | 0b10000011101100 | 0b11000011101100 | 0b10100011101100 | 0b11100011101100 | 0b10010011101100 | 0b11010011101100 | 0b10110011101100 | 0b11110011101100 | 0b10001011101100 | 0b11001011101100 | 0b10101011101100 | 0b11101011101100 | 0b10011011101100 | 0b11011011101100 | 0b10111011101100 | 0b11111011101100 | 0b10000111101100 | 0b11000111101100 | 0b10100111101100 | 0b11100111101100 | 0b10010111101100 | 0b11010111101100 | 0b10110111101100 | 0b11110111101100 | 0b10001111101100 | 0b11001111101100 | 0b10101111101100 | 0b11101111101100 | 0b10011111101100 | 0b11011111101100 | 0b10111111101100 | 0b11111111101100 | 0b10000000011100 | 0b11000000011100 | 0b10100000011100 | 0b11100000011100 | 0b10010000011100 | 0b11010000011100 | 0b10110000011100 | 0b11110000011100 | 0b10001000011100 | 0b11001000011100 | 0b10101000011100 | 0b11101000011100 | 0b10011000011100 | 0b11011000011100 | 0b10111000011100 | 0b11111000011100 | 0b10000100011100 | 0b11000100011100 | 0b10100100011100 | 0b11100100011100 | 0b10010100011100 | 0b11010100011100 | 0b10110100011100 | 0b11110100011100 | 0b10001100011100 | 0b11001100011100 | 0b10101100011100 | 0b11101100011100 | 0b10011100011100 | 0b11011100011100 | 0b10111100011100 | 0b11111100011100 | 0b10000010011100 | 0b11000010011100 | 0b10100010011100 | 0b11100010011100 | 0b10010010011100 | 0b11010010011100 | 0b10110010011100 | 0b11110010011100 | 0b10001010011100 | 0b11001010011100 | 0b10101010011100 | 0b11101010011100 | 0b10011010011100 | 0b11011010011100 | 0b10111010011100 | 0b11111010011100 | 0b10000110011100 | 0b11000110011100 | 0b10100110011100 | 0b11100110011100 | 0b10010110011100 | 0b11010110011100 | 0b10110110011100 | 0b11110110011100 | 0b10001110011100 | 0b11001110011100 | 0b10101110011100 | 0b11101110011100 | 0b10011110011100 | 0b11011110011100 | 0b10111110011100 | 0b11111110011100 | 0b10000001011100 | 0b11000001011100 | 0b10100001011100 | 0b11100001011100 | 0b10010001011100 | 0b11010001011100 | 0b10110001011100 | 0b11110001011100 | 0b10001001011100 | 0b11001001011100 | 0b10101001011100 | 0b11101001011100 | 0b10011001011100 | 0b11011001011100 | 0b10111001011100 | 0b11111001011100 | 0b10000101011100 | 0b11000101011100 | 0b10100101011100 | 0b11100101011100 | 0b10010101011100 | 0b11010101011100 | 0b10110101011100 | 0b11110101011100 | 0b10001101011100 | 0b11001101011100 | 0b10101101011100 | 0b11101101011100 | 0b10011101011100 | 0b11011101011100 | 0b10111101011100 | 0b11111101011100 | 0b10000011011100 | 0b11000011011100 | 0b10100011011100 | 0b11100011011100 | 0b10010011011100 | 0b11010011011100 | 0b10110011011100 | 0b11110011011100 | 0b10001011011100 | 0b11001011011100 | 0b10101011011100 | 0b11101011011100 | 0b10011011011100 | 0b11011011011100 | 0b10111011011100 | 0b11111011011100 | 0b10000111011100 | 0b11000111011100 | 0b10100111011100 | 0b11100111011100 | 0b10010111011100 | 0b11010111011100 | 0b10110111011100 | 0b11110111011100 | 0b10001111011100 | 0b11001111011100 | 0b10101111011100 | 0b11101111011100 | 0b10011111011100 | 0b11011111011100 | 0b10111111011100 | 0b11111111011100 | 0b10000000111100 | 0b11000000111100 | 0b10100000111100 | 0b11100000111100 | 0b10010000111100 | 0b11010000111100 | 0b10110000111100 | 0b11110000111100 | 0b10001000111100 | 0b11001000111100 | 0b10101000111100 | 0b11101000111100 | 0b10011000111100 | 0b11011000111100 | 0b10111000111100 | 0b11111000111100 | 0b10000100111100 | 0b11000100111100 | 0b10100100111100 | 0b11100100111100 | 0b10010100111100 | 0b11010100111100 | 0b10110100111100 | 0b11110100111100 | 0b10001100111100 | 0b11001100111100 | 0b10101100111100 | 0b11101100111100 | 0b10011100111100 | 0b11011100111100 | 0b10111100111100 | 0b11111100111100 | 0b10000010111100 | 0b11000010111100 | 0b10100010111100 | 0b11100010111100 | 0b10010010111100 | 0b11010010111100 | 0b10110010111100 | 0b11110010111100 | 0b10001010111100 | 0b11001010111100 | 0b10101010111100 | 0b11101010111100 | 0b10011010111100 | 0b11011010111100 | 0b10111010111100 | 0b11111010111100 | 0b10000110111100 | 0b11000110111100 | 0b10100110111100 | 0b11100110111100 | 0b10010110111100 | 0b11010110111100 | 0b10110110111100 | 0b11110110111100 | 0b10001110111100 | 0b11001110111100 | 0b10101110111100 | 0b11101110111100 | 0b10011110111100 | 0b11011110111100 | 0b10111110111100 | 0b11111110111100 | 0b10000001111100 | 0b11000001111100 | 0b10100001111100 | 0b11100001111100 | 0b10010001111100 | 0b11010001111100 | 0b10110001111100 | 0b11110001111100 | 0b10001001111100 | 0b11001001111100 | 0b10101001111100 | 0b11101001111100 | 0b10011001111100 | 0b11011001111100 | 0b10111001111100 | 0b11111001111100 | 0b10000101111100 | 0b11000101111100 | 0b10100101111100 | 0b11100101111100 | 0b10010101111100 | 0b11010101111100 | 0b10110101111100 | 0b11110101111100 | 0b10001101111100 | 0b11001101111100 | 0b10101101111100 | 0b11101101111100 | 0b10011101111100 | 0b11011101111100 | 0b10111101111100 | 0b11111101111100 | 0b10000011111100 | 0b11000011111100 | 0b10100011111100 | 0b11100011111100 | 0b10010011111100 | 0b11010011111100 | 0b10110011111100 | 0b11110011111100 | 0b10001011111100 | 0b11001011111100 | 0b10101011111100 | 0b11101011111100 | 0b10011011111100 | 0b11011011111100 | 0b10111011111100 | 0b11111011111100 | 0b10000111111100 | 0b11000111111100 | 0b10100111111100 | 0b11100111111100 | 0b10010111111100 | 0b11010111111100 | 0b10110111111100 | 0b11110111111100 | 0b10001111111100 | 0b11001111111100 | 0b10101111111100 | 0b11101111111100 | 0b10011111111100 | 0b11011111111100 | 0b10111111111100 | 0b11111111111100 | 0b10000000000010 | 0b11000000000010 | 0b10100000000010 | 0b11100000000010 | 0b10010000000010 | 0b11010000000010 | 0b10110000000010 | 0b11110000000010 | 0b10001000000010 | 0b11001000000010 | 0b10101000000010 | 0b11101000000010 | 0b10011000000010 | 0b11011000000010 | 0b10111000000010 | 0b11111000000010 | 0b10000100000010 | 0b11000100000010 | 0b10100100000010 | 0b11100100000010 | 0b10010100000010 | 0b11010100000010 | 0b10110100000010 | 0b11110100000010 | 0b10001100000010 | 0b11001100000010 | 0b10101100000010 | 0b11101100000010 | 0b10011100000010 | 0b11011100000010 | 0b10111100000010 | 0b11111100000010 | 0b10000010000010 | 0b11000010000010 | 0b10100010000010 | 0b11100010000010 | 0b10010010000010 | 0b11010010000010 | 0b10110010000010 | 0b11110010000010 | 0b10001010000010 | 0b11001010000010 | 0b10101010000010 | 0b11101010000010 | 0b10011010000010 | 0b11011010000010 | 0b10111010000010 | 0b11111010000010 | 0b10000110000010 | 0b11000110000010 | 0b10100110000010 | 0b11100110000010 | 0b10010110000010 | 0b11010110000010 | 0b10110110000010 | 0b11110110000010 | 0b10001110000010 | 0b11001110000010 | 0b10101110000010 | 0b11101110000010 | 0b10011110000010 | 0b11011110000010 | 0b10111110000010 | 0b11111110000010 | 0b10000001000010 | 0b11000001000010 | 0b10100001000010 | 0b11100001000010 | 0b10010001000010 | 0b11010001000010 | 0b10110001000010 | 0b11110001000010 | 0b10001001000010 | 0b11001001000010 | 0b10101001000010 | 0b11101001000010 | 0b10011001000010 | 0b11011001000010 | 0b10111001000010 | 0b11111001000010 | 0b10000101000010 | 0b11000101000010 | 0b10100101000010 | 0b11100101000010 | 0b10010101000010 | 0b11010101000010 | 0b10110101000010 | 0b11110101000010 | 0b10001101000010 | 0b11001101000010 | 0b10101101000010 | 0b11101101000010 | 0b10011101000010 | 0b11011101000010 | 0b10111101000010 | 0b11111101000010 | 0b10000011000010 | 0b11000011000010 | 0b10100011000010 | 0b11100011000010 | 0b10010011000010 | 0b11010011000010 | 0b10110011000010 | 0b11110011000010 | 0b10001011000010 | 0b11001011000010 | 0b10101011000010 | 0b11101011000010 | 0b10011011000010 | 0b11011011000010 | 0b10111011000010 | 0b11111011000010 | 0b10000111000010 | 0b11000111000010 | 0b10100111000010 | 0b11100111000010 | 0b10010111000010 | 0b11010111000010 | 0b10110111000010 | 0b11110111000010 | 0b10001111000010 | 0b11001111000010 | 0b10101111000010 | 0b11101111000010 | 0b10011111000010 | 0b11011111000010 | 0b10111111000010 | 0b11111111000010 | 0b10000000100010 | 0b11000000100010 | 0b10100000100010 | 0b11100000100010 | 0b10010000100010 | 0b11010000100010 | 0b10110000100010 | 0b11110000100010 | 0b10001000100010 | 0b11001000100010 | 0b10101000100010 | 0b11101000100010 | 0b10011000100010 | 0b11011000100010 | 0b10111000100010 | 0b11111000100010 | 0b10000100100010 | 0b11000100100010 | 0b10100100100010 | 0b11100100100010 | 0b10010100100010 | 0b11010100100010 | 0b10110100100010 | 0b11110100100010 | 0b10001100100010 | 0b11001100100010 | 0b10101100100010 | 0b11101100100010 | 0b10011100100010 | 0b11011100100010 | 0b10111100100010 | 0b11111100100010 | 0b10000010100010 | 0b11000010100010 | 0b10100010100010 | 0b11100010100010 | 0b10010010100010 | 0b11010010100010 | 0b10110010100010 | 0b11110010100010 | 0b10001010100010 | 0b11001010100010 | 0b10101010100010 | 0b11101010100010 | 0b10011010100010 | 0b11011010100010 | 0b10111010100010 | 0b11111010100010 | 0b10000110100010 | 0b11000110100010 | 0b10100110100010 | 0b11100110100010 | 0b10010110100010 | 0b11010110100010 | 0b10110110100010 | 0b11110110100010 | 0b10001110100010 | 0b11001110100010 | 0b10101110100010 | 0b11101110100010 | 0b10011110100010 | 0b11011110100010 | 0b10111110100010 | 0b11111110100010 | 0b10000001100010 | 0b11000001100010 | 0b10100001100010 | 0b11100001100010 | 0b10010001100010 | 0b11010001100010 | 0b10110001100010 | 0b11110001100010 | 0b10001001100010 | 0b11001001100010 | 0b10101001100010 | 0b11101001100010 | 0b10011001100010 | 0b11011001100010 | 0b10111001100010 | 0b11111001100010 | 0b10000101100010 | 0b11000101100010 | 0b10100101100010 | 0b11100101100010 | 0b10010101100010 | 0b11010101100010 | 0b10110101100010 | 0b11110101100010 | 0b10001101100010 | 0b11001101100010 | 0b10101101100010 | 0b11101101100010 | 0b10011101100010 | 0b11011101100010 | 0b10111101100010 | 0b11111101100010 | 0b10000011100010 | 0b11000011100010 | 0b10100011100010 | 0b11100011100010 | 0b10010011100010 | 0b11010011100010 | 0b10110011100010 | 0b11110011100010 | 0b10001011100010 | 0b11001011100010 | 0b10101011100010 | 0b11101011100010 | 0b10011011100010 | 0b11011011100010 | 0b10111011100010 | 0b11111011100010 | 0b10000111100010 | 0b11000111100010 | 0b10100111100010 | 0b11100111100010 | 0b10010111100010 | 0b11010111100010 | 0b10110111100010 | 0b11110111100010 | 0b10001111100010 | 0b11001111100010 | 0b10101111100010 | 0b11101111100010 | 0b10011111100010 | 0b11011111100010 | 0b10111111100010 | 0b11111111100010 | 0b10000000010010 | 0b11000000010010 | 0b10100000010010 | 0b11100000010010 | 0b10010000010010 | 0b11010000010010 | 0b10110000010010 | 0b11110000010010 | 0b10001000010010 | 0b11001000010010 | 0b10101000010010 | 0b11101000010010 | 0b10011000010010 | 0b11011000010010 | 0b10111000010010 | 0b11111000010010 | 0b10000100010010 | 0b11000100010010 | 0b10100100010010 | 0b11100100010010 | 0b10010100010010 | 0b11010100010010 | 0b10110100010010 | 0b11110100010010 | 0b10001100010010 | 0b11001100010010 | 0b10101100010010 | 0b11101100010010 | 0b10011100010010 | 0b11011100010010 | 0b10111100010010 | 0b11111100010010 | 0b10000010010010 | 0b11000010010010 | 0b10100010010010 | 0b11100010010010 | 0b10010010010010 | 0b11010010010010 | 0b10110010010010 | 0b11110010010010 | 0b10001010010010 | 0b11001010010010 | 0b10101010010010 | 0b11101010010010 | 0b10011010010010 | 0b11011010010010 | 0b10111010010010 | 0b11111010010010 | 0b10000110010010 | 0b11000110010010 | 0b10100110010010 | 0b11100110010010 | 0b10010110010010 | 0b11010110010010 | 0b10110110010010 | 0b11110110010010 | 0b10001110010010 | 0b11001110010010 | 0b10101110010010 | 0b11101110010010 | 0b10011110010010 | 0b11011110010010 | 0b10111110010010 | 0b11111110010010 | 0b10000001010010 | 0b11000001010010 | 0b10100001010010 | 0b11100001010010 | 0b10010001010010 | 0b11010001010010 | 0b10110001010010 | 0b11110001010010 | 0b10001001010010 | 0b11001001010010 | 0b10101001010010 | 0b11101001010010 | 0b10011001010010 | 0b11011001010010 | 0b10111001010010 | 0b11111001010010 | 0b10000101010010 | 0b11000101010010 | 0b10100101010010 | 0b11100101010010 | 0b10010101010010 | 0b11010101010010 | 0b10110101010010 | 0b11110101010010 | 0b10001101010010 | 0b11001101010010 | 0b10101101010010 | 0b11101101010010 | 0b10011101010010 | 0b11011101010010 | 0b10111101010010 | 0b11111101010010 | 0b10000011010010 | 0b11000011010010 | 0b10100011010010 | 0b11100011010010 | 0b10010011010010 | 0b11010011010010 | 0b10110011010010 | 0b11110011010010 | 0b10001011010010 | 0b11001011010010 | 0b10101011010010 | 0b11101011010010 | 0b10011011010010 | 0b11011011010010 | 0b10111011010010 | 0b11111011010010 | 0b10000111010010 | 0b11000111010010 | 0b10100111010010 | 0b11100111010010 | 0b10010111010010 | 0b11010111010010 | 0b10110111010010 | 0b11110111010010 | 0b10001111010010 | 0b11001111010010 | 0b10101111010010 | 0b11101111010010 | 0b10011111010010 | 0b11011111010010 | 0b10111111010010 | 0b11111111010010 | 0b10000000110010 | 0b11000000110010 | 0b10100000110010 | 0b11100000110010 | 0b10010000110010 | 0b11010000110010 | 0b10110000110010 | 0b11110000110010 | 0b10001000110010 | 0b11001000110010 | 0b10101000110010 | 0b11101000110010 | 0b10011000110010 | 0b11011000110010 | 0b10111000110010 | 0b11111000110010 | 0b10000100110010 | 0b11000100110010 | 0b10100100110010 | 0b11100100110010 | 0b10010100110010 | 0b11010100110010 | 0b10110100110010 | 0b11110100110010 | 0b10001100110010 | 0b11001100110010 | 0b10101100110010 | 0b11101100110010 | 0b10011100110010 | 0b11011100110010 | 0b10111100110010 | 0b11111100110010 | 0b10000010110010 | 0b11000010110010 | 0b10100010110010 | 0b11100010110010 | 0b10010010110010 | 0b11010010110010 | 0b10110010110010 | 0b11110010110010 | 0b10001010110010 | 0b11001010110010 | 0b10101010110010 | 0b11101010110010 | 0b10011010110010 | 0b11011010110010 | 0b10111010110010 | 0b11111010110010 | 0b10000110110010 | 0b11000110110010 | 0b10100110110010 | 0b11100110110010 | 0b10010110110010 | 0b11010110110010 | 0b10110110110010 | 0b11110110110010 | 0b10001110110010 | 0b11001110110010 | 0b10101110110010 | 0b11101110110010 | 0b10011110110010 | 0b11011110110010 | 0b10111110110010 | 0b11111110110010 | 0b10000001110010 | 0b11000001110010 | 0b10100001110010 | 0b11100001110010 | 0b10010001110010 | 0b11010001110010 | 0b10110001110010 | 0b11110001110010 | 0b10001001110010 | 0b11001001110010 | 0b10101001110010 | 0b11101001110010 | 0b10011001110010 | 0b11011001110010 | 0b10111001110010 | 0b11111001110010 | 0b10000101110010 | 0b11000101110010 | 0b10100101110010 | 0b11100101110010 | 0b10010101110010 | 0b11010101110010 | 0b10110101110010 | 0b11110101110010 | 0b10001101110010 | 0b11001101110010 | 0b10101101110010 | 0b11101101110010 | 0b10011101110010 | 0b11011101110010 | 0b10111101110010 | 0b11111101110010 | 0b10000011110010 | 0b11000011110010 | 0b10100011110010 | 0b11100011110010 | 0b10010011110010 | 0b11010011110010 | 0b10110011110010 | 0b11110011110010 | 0b10001011110010 | 0b11001011110010 | 0b10101011110010 | 0b11101011110010 | 0b10011011110010 | 0b11011011110010 | 0b10111011110010 | 0b11111011110010 | 0b10000111110010 | 0b11000111110010 | 0b10100111110010 | 0b11100111110010 | 0b10010111110010 | 0b11010111110010 | 0b10110111110010 | 0b11110111110010 | 0b10001111110010 | 0b11001111110010 | 0b10101111110010 | 0b11101111110010 | 0b10011111110010 | 0b11011111110010 | 0b10111111110010 | 0b11111111110010 | 0b10000000001010 | 0b11000000001010 | 0b10100000001010 | 0b11100000001010 | 0b10010000001010 | 0b11010000001010 | 0b10110000001010 | 0b11110000001010 | 0b10001000001010 | 0b11001000001010 | 0b10101000001010 | 0b11101000001010 | 0b10011000001010 | 0b11011000001010 | 0b10111000001010 | 0b11111000001010 | 0b10000100001010 | 0b11000100001010 | 0b10100100001010 | 0b11100100001010 | 0b10010100001010 | 0b11010100001010 | 0b10110100001010 | 0b11110100001010 | 0b10001100001010 | 0b11001100001010 | 0b10101100001010 | 0b11101100001010 | 0b10011100001010 | 0b11011100001010 | 0b10111100001010 | 0b11111100001010 | 0b10000010001010 | 0b11000010001010 | 0b10100010001010 | 0b11100010001010 | 0b10010010001010 | 0b11010010001010 | 0b10110010001010 | 0b11110010001010 | 0b10001010001010 | 0b11001010001010 | 0b10101010001010 | 0b11101010001010 | 0b10011010001010 | 0b11011010001010 | 0b10111010001010 | 0b11111010001010 | 0b10000110001010 | 0b11000110001010 | 0b10100110001010 | 0b11100110001010 | 0b10010110001010 | 0b11010110001010 | 0b10110110001010 | 0b11110110001010 | 0b10001110001010 | 0b11001110001010 | 0b10101110001010 | 0b11101110001010 | 0b10011110001010 | 0b11011110001010 | 0b10111110001010 | 0b11111110001010 | 0b10000001001010 | 0b11000001001010 | 0b10100001001010 | 0b11100001001010 | 0b10010001001010 | 0b11010001001010 | 0b10110001001010 | 0b11110001001010 | 0b10001001001010 | 0b11001001001010 | 0b10101001001010 | 0b11101001001010 | 0b10011001001010 | 0b11011001001010 | 0b10111001001010 | 0b11111001001010 | 0b10000101001010 | 0b11000101001010 | 0b10100101001010 | 0b11100101001010 | 0b10010101001010 | 0b11010101001010 | 0b10110101001010 | 0b11110101001010 | 0b10001101001010 | 0b11001101001010 | 0b10101101001010 | 0b11101101001010 | 0b10011101001010 | 0b11011101001010 | 0b10111101001010 | 0b11111101001010 | 0b10000011001010 | 0b11000011001010 | 0b10100011001010 | 0b11100011001010 | 0b10010011001010 | 0b11010011001010 | 0b10110011001010 | 0b11110011001010 | 0b10001011001010 | 0b11001011001010 | 0b10101011001010 | 0b11101011001010 | 0b10011011001010 | 0b11011011001010 | 0b10111011001010 | 0b11111011001010 | 0b10000111001010 | 0b11000111001010 | 0b10100111001010 | 0b11100111001010 | 0b10010111001010 | 0b11010111001010 | 0b10110111001010 | 0b11110111001010 | 0b10001111001010 | 0b11001111001010 | 0b10101111001010 | 0b11101111001010 | 0b10011111001010 | 0b11011111001010 | 0b10111111001010 | 0b11111111001010 | 0b10000000101010 | 0b11000000101010 | 0b10100000101010 | 0b11100000101010 | 0b10010000101010 | 0b11010000101010 | 0b10110000101010 | 0b11110000101010 | 0b10001000101010 | 0b11001000101010 | 0b10101000101010 | 0b11101000101010 | 0b10011000101010 | 0b11011000101010 | 0b10111000101010 | 0b11111000101010 | 0b10000100101010 | 0b11000100101010 | 0b10100100101010 | 0b11100100101010 | 0b10010100101010 | 0b11010100101010 | 0b10110100101010 | 0b11110100101010 | 0b10001100101010 | 0b11001100101010 | 0b10101100101010 | 0b11101100101010 | 0b10011100101010 | 0b11011100101010 | 0b10111100101010 | 0b11111100101010 | 0b10000010101010 | 0b11000010101010 | 0b10100010101010 | 0b11100010101010 | 0b10010010101010 | 0b11010010101010 | 0b10110010101010 | 0b11110010101010 | 0b10001010101010 | 0b11001010101010 | 0b10101010101010 | 0b11101010101010 | 0b10011010101010 | 0b11011010101010 | 0b10111010101010 | 0b11111010101010 | 0b10000110101010 | 0b11000110101010 | 0b10100110101010 | 0b11100110101010 | 0b10010110101010 | 0b11010110101010 | 0b10110110101010 | 0b11110110101010 | 0b10001110101010 | 0b11001110101010 | 0b10101110101010 | 0b11101110101010 | 0b10011110101010 | 0b11011110101010 | 0b10111110101010 | 0b11111110101010 | 0b10000001101010 | 0b11000001101010 | 0b10100001101010 | 0b11100001101010 | 0b10010001101010 | 0b11010001101010 | 0b10110001101010 | 0b11110001101010 | 0b10001001101010 | 0b11001001101010 | 0b10101001101010 | 0b11101001101010 | 0b10011001101010 | 0b11011001101010 | 0b10111001101010 | 0b11111001101010 | 0b10000101101010 | 0b11000101101010 | 0b10100101101010 | 0b11100101101010 | 0b10010101101010 | 0b11010101101010 | 0b10110101101010 | 0b11110101101010 | 0b10001101101010 | 0b11001101101010 | 0b10101101101010 | 0b11101101101010 | 0b10011101101010 | 0b11011101101010 | 0b10111101101010 | 0b11111101101010 | 0b10000011101010 | 0b11000011101010 | 0b10100011101010 | 0b11100011101010 | 0b10010011101010 | 0b11010011101010 | 0b10110011101010 | 0b11110011101010 | 0b10001011101010 | 0b11001011101010 | 0b10101011101010 | 0b11101011101010 | 0b10011011101010 | 0b11011011101010 | 0b10111011101010 | 0b11111011101010 | 0b10000111101010 | 0b11000111101010 | 0b10100111101010 | 0b11100111101010 | 0b10010111101010 | 0b11010111101010 | 0b10110111101010 | 0b11110111101010 | 0b10001111101010 | 0b11001111101010 | 0b10101111101010 | 0b11101111101010 | 0b10011111101010 | 0b11011111101010 | 0b10111111101010 | 0b11111111101010 | 0b10000000011010 | 0b11000000011010 | 0b10100000011010 | 0b11100000011010 | 0b10010000011010 | 0b11010000011010 | 0b10110000011010 | 0b11110000011010 | 0b10001000011010 | 0b11001000011010 | 0b10101000011010 | 0b11101000011010 | 0b10011000011010 | 0b11011000011010 | 0b10111000011010 | 0b11111000011010 | 0b10000100011010 | 0b11000100011010 | 0b10100100011010 | 0b11100100011010 | 0b10010100011010 | 0b11010100011010 | 0b10110100011010 | 0b11110100011010 | 0b10001100011010 | 0b11001100011010 | 0b10101100011010 | 0b11101100011010 | 0b10011100011010 | 0b11011100011010 | 0b10111100011010 | 0b11111100011010 | 0b10000010011010 | 0b11000010011010 | 0b10100010011010 | 0b11100010011010 | 0b10010010011010 | 0b11010010011010 | 0b10110010011010 | 0b11110010011010 | 0b10001010011010 | 0b11001010011010 | 0b10101010011010 | 0b11101010011010 | 0b10011010011010 | 0b11011010011010 | 0b10111010011010 | 0b11111010011010 | 0b10000110011010 | 0b11000110011010 | 0b10100110011010 | 0b11100110011010 | 0b10010110011010 | 0b11010110011010 | 0b10110110011010 | 0b11110110011010 | 0b10001110011010 | 0b11001110011010 | 0b10101110011010 | 0b11101110011010 | 0b10011110011010 | 0b11011110011010 | 0b10111110011010 | 0b11111110011010 | 0b10000001011010 | 0b11000001011010 | 0b10100001011010 | 0b11100001011010 | 0b10010001011010 | 0b11010001011010 | 0b10110001011010 | 0b11110001011010 | 0b10001001011010 | 0b11001001011010 | 0b10101001011010 | 0b11101001011010 | 0b10011001011010 | 0b11011001011010 | 0b10111001011010 | 0b11111001011010 | 0b10000101011010 | 0b11000101011010 | 0b10100101011010 | 0b11100101011010 | 0b10010101011010 | 0b11010101011010 | 0b10110101011010 | 0b11110101011010 | 0b10001101011010 | 0b11001101011010 | 0b10101101011010 | 0b11101101011010 | 0b10011101011010 | 0b11011101011010 | 0b10111101011010 | 0b11111101011010 | 0b10000011011010 | 0b11000011011010 | 0b10100011011010 | 0b11100011011010 | 0b10010011011010 | 0b11010011011010 | 0b10110011011010 | 0b11110011011010 | 0b10001011011010 | 0b11001011011010 | 0b10101011011010 | 0b11101011011010 | 0b10011011011010 | 0b11011011011010 | 0b10111011011010 | 0b11111011011010 | 0b10000111011010 | 0b11000111011010 | 0b10100111011010 | 0b11100111011010 | 0b10010111011010 | 0b11010111011010 | 0b10110111011010 | 0b11110111011010 | 0b10001111011010 | 0b11001111011010 | 0b10101111011010 | 0b11101111011010 | 0b10011111011010 | 0b11011111011010 | 0b10111111011010 | 0b11111111011010 | 0b10000000111010 | 0b11000000111010 | 0b10100000111010 | 0b11100000111010 | 0b10010000111010 | 0b11010000111010 | 0b10110000111010 | 0b11110000111010 | 0b10001000111010 | 0b11001000111010 | 0b10101000111010 | 0b11101000111010 | 0b10011000111010 | 0b11011000111010 | 0b10111000111010 | 0b11111000111010 | 0b10000100111010 | 0b11000100111010 | 0b10100100111010 | 0b11100100111010 | 0b10010100111010 | 0b11010100111010 | 0b10110100111010 | 0b11110100111010 | 0b10001100111010 | 0b11001100111010 | 0b10101100111010 | 0b11101100111010 | 0b10011100111010 | 0b11011100111010 | 0b10111100111010 | 0b11111100111010 | 0b10000010111010 | 0b11000010111010 | 0b10100010111010 | 0b11100010111010 | 0b10010010111010 | 0b11010010111010 | 0b10110010111010 | 0b11110010111010 | 0b10001010111010 | 0b11001010111010 | 0b10101010111010 | 0b11101010111010 | 0b10011010111010 | 0b11011010111010 | 0b10111010111010 | 0b11111010111010 | 0b10000110111010 | 0b11000110111010 | 0b10100110111010 | 0b11100110111010 | 0b10010110111010 | 0b11010110111010 | 0b10110110111010 | 0b11110110111010 | 0b10001110111010 | 0b11001110111010 | 0b10101110111010 | 0b11101110111010 | 0b10011110111010 | 0b11011110111010 | 0b10111110111010 | 0b11111110111010 | 0b10000001111010 | 0b11000001111010 | 0b10100001111010 | 0b11100001111010 | 0b10010001111010 | 0b11010001111010 | 0b10110001111010 | 0b11110001111010 | 0b10001001111010 | 0b11001001111010 | 0b10101001111010 | 0b11101001111010 | 0b10011001111010 | 0b11011001111010 | 0b10111001111010 | 0b11111001111010 | 0b10000101111010 | 0b11000101111010 | 0b10100101111010 | 0b11100101111010 | 0b10010101111010 | 0b11010101111010 | 0b10110101111010 | 0b11110101111010 | 0b10001101111010 | 0b11001101111010 | 0b10101101111010 | 0b11101101111010 | 0b10011101111010 | 0b11011101111010 | 0b10111101111010 | 0b11111101111010 | 0b10000011111010 | 0b11000011111010 | 0b10100011111010 | 0b11100011111010 | 0b10010011111010 | 0b11010011111010 | 0b10110011111010 | 0b11110011111010 | 0b10001011111010 | 0b11001011111010 | 0b10101011111010 | 0b11101011111010 | 0b10011011111010 | 0b11011011111010 | 0b10111011111010 | 0b11111011111010 | 0b10000111111010 | 0b11000111111010 | 0b10100111111010 | 0b11100111111010 | 0b10010111111010 | 0b11010111111010 | 0b10110111111010 | 0b11110111111010 | 0b10001111111010 | 0b11001111111010 | 0b10101111111010 | 0b11101111111010 | 0b10011111111010 | 0b11011111111010 | 0b10111111111010 | 0b11111111111010 | 0b10000000000110 | 0b11000000000110 | 0b10100000000110 | 0b11100000000110 | 0b10010000000110 | 0b11010000000110 | 0b10110000000110 | 0b11110000000110 | 0b10001000000110 | 0b11001000000110 | 0b10101000000110 | 0b11101000000110 | 0b10011000000110 | 0b11011000000110 | 0b10111000000110 | 0b11111000000110 | 0b10000100000110 | 0b11000100000110 | 0b10100100000110 | 0b11100100000110 | 0b10010100000110 | 0b11010100000110 | 0b10110100000110 | 0b11110100000110 | 0b10001100000110 | 0b11001100000110 | 0b10101100000110 | 0b11101100000110 | 0b10011100000110 | 0b11011100000110 | 0b10111100000110 | 0b11111100000110 | 0b10000010000110 | 0b11000010000110 | 0b10100010000110 | 0b11100010000110 | 0b10010010000110 | 0b11010010000110 | 0b10110010000110 | 0b11110010000110 | 0b10001010000110 | 0b11001010000110 | 0b10101010000110 | 0b11101010000110 | 0b10011010000110 | 0b11011010000110 | 0b10111010000110 | 0b11111010000110 | 0b10000110000110 | 0b11000110000110 | 0b10100110000110 | 0b11100110000110 | 0b10010110000110 | 0b11010110000110 | 0b10110110000110 | 0b11110110000110 | 0b10001110000110 | 0b11001110000110 | 0b10101110000110 | 0b11101110000110 | 0b10011110000110 | 0b11011110000110 | 0b10111110000110 | 0b11111110000110 | 0b10000001000110 | 0b11000001000110 | 0b10100001000110 | 0b11100001000110 | 0b10010001000110 | 0b11010001000110 | 0b10110001000110 | 0b11110001000110 | 0b10001001000110 | 0b11001001000110 | 0b10101001000110 | 0b11101001000110 | 0b10011001000110 | 0b11011001000110 | 0b10111001000110 | 0b11111001000110 | 0b10000101000110 | 0b11000101000110 | 0b10100101000110 | 0b11100101000110 | 0b10010101000110 | 0b11010101000110 | 0b10110101000110 | 0b11110101000110 | 0b10001101000110 | 0b11001101000110 | 0b10101101000110 | 0b11101101000110 | 0b10011101000110 | 0b11011101000110 | 0b10111101000110 | 0b11111101000110 | 0b10000011000110 | 0b11000011000110 | 0b10100011000110 | 0b11100011000110 | 0b10010011000110 | 0b11010011000110 | 0b10110011000110 | 0b11110011000110 | 0b10001011000110 | 0b11001011000110 | 0b10101011000110 | 0b11101011000110 | 0b10011011000110 | 0b11011011000110 | 0b10111011000110 | 0b11111011000110 | 0b10000111000110 | 0b11000111000110 | 0b10100111000110 | 0b11100111000110 | 0b10010111000110 | 0b11010111000110 | 0b10110111000110 | 0b11110111000110 | 0b10001111000110 | 0b11001111000110 | 0b10101111000110 | 0b11101111000110 | 0b10011111000110 | 0b11011111000110 | 0b10111111000110 | 0b11111111000110 | 0b10000000100110 | 0b11000000100110 | 0b10100000100110 | 0b11100000100110 | 0b10010000100110 | 0b11010000100110 | 0b10110000100110 | 0b11110000100110 | 0b10001000100110 | 0b11001000100110 | 0b10101000100110 | 0b11101000100110 | 0b10011000100110 | 0b11011000100110 | 0b10111000100110 | 0b11111000100110 | 0b10000100100110 | 0b11000100100110 | 0b10100100100110 | 0b11100100100110 | 0b10010100100110 | 0b11010100100110 | 0b10110100100110 | 0b11110100100110 | 0b10001100100110 | 0b11001100100110 | 0b10101100100110 | 0b11101100100110 | 0b10011100100110 | 0b11011100100110 | 0b10111100100110 | 0b11111100100110 | 0b10000010100110 | 0b11000010100110 | 0b10100010100110 | 0b11100010100110 | 0b10010010100110 | 0b11010010100110 | 0b10110010100110 | 0b11110010100110 | 0b10001010100110 | 0b11001010100110 | 0b10101010100110 | 0b11101010100110 | 0b10011010100110 | 0b11011010100110 | 0b10111010100110 | 0b11111010100110 | 0b10000110100110 | 0b11000110100110 | 0b10100110100110 | 0b11100110100110 | 0b10010110100110 | 0b11010110100110 | 0b10110110100110 | 0b11110110100110 | 0b10001110100110 | 0b11001110100110 | 0b10101110100110 | 0b11101110100110 | 0b10011110100110 | 0b11011110100110 | 0b10111110100110 | 0b11111110100110 | 0b10000001100110 | 0b11000001100110 | 0b10100001100110 | 0b11100001100110 | 0b10010001100110 | 0b11010001100110 | 0b10110001100110 | 0b11110001100110 | 0b10001001100110 | 0b11001001100110 | 0b10101001100110 | 0b11101001100110 | 0b10011001100110 | 0b11011001100110 | 0b10111001100110 | 0b11111001100110 | 0b10000101100110 | 0b11000101100110 | 0b10100101100110 | 0b11100101100110 | 0b10010101100110 | 0b11010101100110 | 0b10110101100110 | 0b11110101100110 | 0b10001101100110 | 0b11001101100110 | 0b10101101100110 | 0b11101101100110 | 0b10011101100110 | 0b11011101100110 | 0b10111101100110 | 0b11111101100110 | 0b10000011100110 | 0b11000011100110 | 0b10100011100110 | 0b11100011100110 | 0b10010011100110 | 0b11010011100110 | 0b10110011100110 | 0b11110011100110 | 0b10001011100110 | 0b11001011100110 | 0b10101011100110 | 0b11101011100110 | 0b10011011100110 | 0b11011011100110 | 0b10111011100110 | 0b11111011100110 | 0b10000111100110 | 0b11000111100110 | 0b10100111100110 | 0b11100111100110 | 0b10010111100110 | 0b11010111100110 | 0b10110111100110 | 0b11110111100110 | 0b10001111100110 | 0b11001111100110 | 0b10101111100110 | 0b11101111100110 | 0b10011111100110 | 0b11011111100110 | 0b10111111100110 | 0b11111111100110 | 0b10000000010110 | 0b11000000010110 | 0b10100000010110 | 0b11100000010110 | 0b10010000010110 | 0b11010000010110 | 0b10110000010110 | 0b11110000010110 | 0b10001000010110 | 0b11001000010110 | 0b10101000010110 | 0b11101000010110 | 0b10011000010110 | 0b11011000010110 | 0b10111000010110 | 0b11111000010110 | 0b10000100010110 | 0b11000100010110 | 0b10100100010110 | 0b11100100010110 | 0b10010100010110 | 0b11010100010110 | 0b10110100010110 | 0b11110100010110 | 0b10001100010110 | 0b11001100010110 | 0b10101100010110 | 0b11101100010110 | 0b10011100010110 | 0b11011100010110 | 0b10111100010110 | 0b11111100010110 | 0b10000010010110 | 0b11000010010110 | 0b10100010010110 | 0b11100010010110 | 0b10010010010110 | 0b11010010010110 | 0b10110010010110 | 0b11110010010110 | 0b10001010010110 | 0b11001010010110 | 0b10101010010110 | 0b11101010010110 | 0b10011010010110 | 0b11011010010110 | 0b10111010010110 | 0b11111010010110 | 0b10000110010110 | 0b11000110010110 | 0b10100110010110 | 0b11100110010110 | 0b10010110010110 | 0b11010110010110 | 0b10110110010110 | 0b11110110010110 | 0b10001110010110 | 0b11001110010110 | 0b10101110010110 | 0b11101110010110 | 0b10011110010110 | 0b11011110010110 | 0b10111110010110 | 0b11111110010110 | 0b10000001010110 | 0b11000001010110 | 0b10100001010110 | 0b11100001010110 | 0b10010001010110 | 0b11010001010110 | 0b10110001010110 | 0b11110001010110 | 0b10001001010110 | 0b11001001010110 | 0b10101001010110 | 0b11101001010110 | 0b10011001010110 | 0b11011001010110 | 0b10111001010110 | 0b11111001010110 | 0b10000101010110 | 0b11000101010110 | 0b10100101010110 | 0b11100101010110 | 0b10010101010110 | 0b11010101010110 | 0b10110101010110 | 0b11110101010110 | 0b10001101010110 | 0b11001101010110 | 0b10101101010110 | 0b11101101010110 | 0b10011101010110 | 0b11011101010110 | 0b10111101010110 | 0b11111101010110 | 0b10000011010110 | 0b11000011010110 | 0b10100011010110 | 0b11100011010110 | 0b10010011010110 | 0b11010011010110 | 0b10110011010110 | 0b11110011010110 | 0b10001011010110 | 0b11001011010110 | 0b10101011010110 | 0b11101011010110 | 0b10011011010110 | 0b11011011010110 | 0b10111011010110 | 0b11111011010110 | 0b10000111010110 | 0b11000111010110 | 0b10100111010110 | 0b11100111010110 | 0b10010111010110 | 0b11010111010110 | 0b10110111010110 | 0b11110111010110 | 0b10001111010110 | 0b11001111010110 | 0b10101111010110 | 0b11101111010110 | 0b10011111010110 | 0b11011111010110 | 0b10111111010110 | 0b11111111010110 | 0b10000000110110 | 0b11000000110110 | 0b10100000110110 | 0b11100000110110 | 0b10010000110110 | 0b11010000110110 | 0b10110000110110 | 0b11110000110110 | 0b10001000110110 | 0b11001000110110 | 0b10101000110110 | 0b11101000110110 | 0b10011000110110 | 0b11011000110110 | 0b10111000110110 | 0b11111000110110 | 0b10000100110110 | 0b11000100110110 | 0b10100100110110 | 0b11100100110110 | 0b10010100110110 | 0b11010100110110 | 0b10110100110110 | 0b11110100110110 | 0b10001100110110 | 0b11001100110110 | 0b10101100110110 | 0b11101100110110 | 0b10011100110110 | 0b11011100110110 | 0b10111100110110 | 0b11111100110110 | 0b10000010110110 | 0b11000010110110 | 0b10100010110110 | 0b11100010110110 | 0b10010010110110 | 0b11010010110110 | 0b10110010110110 | 0b11110010110110 | 0b10001010110110 | 0b11001010110110 | 0b10101010110110 | 0b11101010110110 | 0b10011010110110 | 0b11011010110110 | 0b10111010110110 | 0b11111010110110 | 0b10000110110110 | 0b11000110110110 | 0b10100110110110 | 0b11100110110110 | 0b10010110110110 | 0b11010110110110 | 0b10110110110110 | 0b11110110110110 | 0b10001110110110 | 0b11001110110110 | 0b10101110110110 | 0b11101110110110 | 0b10011110110110 | 0b11011110110110 | 0b10111110110110 | 0b11111110110110 | 0b10000001110110 | 0b11000001110110 | 0b10100001110110 | 0b11100001110110 | 0b10010001110110 | 0b11010001110110 | 0b10110001110110 | 0b11110001110110 | 0b10001001110110 | 0b11001001110110 | 0b10101001110110 | 0b11101001110110 | 0b10011001110110 | 0b11011001110110 | 0b10111001110110 | 0b11111001110110 | 0b10000101110110 | 0b11000101110110 | 0b10100101110110 | 0b11100101110110 | 0b10010101110110 | 0b11010101110110 | 0b10110101110110 | 0b11110101110110 | 0b10001101110110 | 0b11001101110110 | 0b10101101110110 | 0b11101101110110 | 0b10011101110110 | 0b11011101110110 | 0b10111101110110 | 0b11111101110110 | 0b10000011110110 | 0b11000011110110 | 0b10100011110110 | 0b11100011110110 | 0b10010011110110 | 0b11010011110110 | 0b10110011110110 | 0b11110011110110 | 0b10001011110110 | 0b11001011110110 | 0b10101011110110 | 0b11101011110110 | 0b10011011110110 | 0b11011011110110 | 0b10111011110110 | 0b11111011110110 | 0b10000111110110 | 0b11000111110110 | 0b10100111110110 | 0b11100111110110 | 0b10010111110110 | 0b11010111110110 | 0b10110111110110 | 0b11110111110110 | 0b10001111110110 | 0b11001111110110 | 0b10101111110110 | 0b11101111110110 | 0b10011111110110 | 0b11011111110110 | 0b10111111110110 | 0b11111111110110 | 0b10000000001110 | 0b11000000001110 | 0b10100000001110 | 0b11100000001110 | 0b10010000001110 | 0b11010000001110 | 0b10110000001110 | 0b11110000001110 | 0b10001000001110 | 0b11001000001110 | 0b10101000001110 | 0b11101000001110 | 0b10011000001110 | 0b11011000001110 | 0b10111000001110 | 0b11111000001110 | 0b10000100001110 | 0b11000100001110 | 0b10100100001110 | 0b11100100001110 | 0b10010100001110 | 0b11010100001110 | 0b10110100001110 | 0b11110100001110 | 0b10001100001110 | 0b11001100001110 | 0b10101100001110 | 0b11101100001110 | 0b10011100001110 | 0b11011100001110 | 0b10111100001110 | 0b11111100001110 | 0b10000010001110 | 0b11000010001110 | 0b10100010001110 | 0b11100010001110 | 0b10010010001110 | 0b11010010001110 | 0b10110010001110 | 0b11110010001110 | 0b10001010001110 | 0b11001010001110 | 0b10101010001110 | 0b11101010001110 | 0b10011010001110 | 0b11011010001110 | 0b10111010001110 | 0b11111010001110 | 0b10000110001110 | 0b11000110001110 | 0b10100110001110 | 0b11100110001110 | 0b10010110001110 | 0b11010110001110 | 0b10110110001110 | 0b11110110001110 | 0b10001110001110 | 0b11001110001110 | 0b10101110001110 | 0b11101110001110 | 0b10011110001110 | 0b11011110001110 | 0b10111110001110 | 0b11111110001110 | 0b10000001001110 | 0b11000001001110 | 0b10100001001110 | 0b11100001001110 | 0b10010001001110 | 0b11010001001110 | 0b10110001001110 | 0b11110001001110 | 0b10001001001110 | 0b11001001001110 | 0b10101001001110 | 0b11101001001110 | 0b10011001001110 | 0b11011001001110 | 0b10111001001110 | 0b11111001001110 | 0b10000101001110 | 0b11000101001110 | 0b10100101001110 | 0b11100101001110 | 0b10010101001110 | 0b11010101001110 | 0b10110101001110 | 0b11110101001110 | 0b10001101001110 | 0b11001101001110 | 0b10101101001110 | 0b11101101001110 | 0b10011101001110 | 0b11011101001110 | 0b10111101001110 | 0b11111101001110 | 0b10000011001110 | 0b11000011001110 | 0b10100011001110 | 0b11100011001110 | 0b10010011001110 | 0b11010011001110 | 0b10110011001110 | 0b11110011001110 | 0b10001011001110 | 0b11001011001110 | 0b10101011001110 | 0b11101011001110 | 0b10011011001110 | 0b11011011001110 | 0b10111011001110 | 0b11111011001110 | 0b10000111001110 | 0b11000111001110 | 0b10100111001110 | 0b11100111001110 | 0b10010111001110 | 0b11010111001110 | 0b10110111001110 | 0b11110111001110 | 0b10001111001110 | 0b11001111001110 | 0b10101111001110 | 0b11101111001110 | 0b10011111001110 | 0b11011111001110 | 0b10111111001110 | 0b11111111001110 | 0b10000000101110 | 0b11000000101110 | 0b10100000101110 | 0b11100000101110 | 0b10010000101110 | 0b11010000101110 | 0b10110000101110 | 0b11110000101110 | 0b10001000101110 | 0b11001000101110 | 0b10101000101110 | 0b11101000101110 | 0b10011000101110 | 0b11011000101110 | 0b10111000101110 | 0b11111000101110 | 0b10000100101110 | 0b11000100101110 | 0b10100100101110 | 0b11100100101110 | 0b10010100101110 | 0b11010100101110 | 0b10110100101110 | 0b11110100101110 | 0b10001100101110 | 0b11001100101110 | 0b10101100101110 | 0b11101100101110 | 0b10011100101110 | 0b11011100101110 | 0b10111100101110 | 0b11111100101110 | 0b10000010101110 | 0b11000010101110 | 0b10100010101110 | 0b11100010101110 | 0b10010010101110 | 0b11010010101110 | 0b10110010101110 | 0b11110010101110 | 0b10001010101110 | 0b11001010101110 | 0b10101010101110 | 0b11101010101110 | 0b10011010101110 | 0b11011010101110 | 0b10111010101110 | 0b11111010101110 | 0b10000110101110 | 0b11000110101110 | 0b10100110101110 | 0b11100110101110 | 0b10010110101110 | 0b11010110101110 | 0b10110110101110 | 0b11110110101110 | 0b10001110101110 | 0b11001110101110 | 0b10101110101110 | 0b11101110101110 | 0b10011110101110 | 0b11011110101110 | 0b10111110101110 | 0b11111110101110 | 0b10000001101110 | 0b11000001101110 | 0b10100001101110 | 0b11100001101110 | 0b10010001101110 | 0b11010001101110 | 0b10110001101110 | 0b11110001101110 | 0b10001001101110 | 0b11001001101110 | 0b10101001101110 | 0b11101001101110 | 0b10011001101110 | 0b11011001101110 | 0b10111001101110 | 0b11111001101110 | 0b10000101101110 | 0b11000101101110 | 0b10100101101110 | 0b11100101101110 | 0b10010101101110 | 0b11010101101110 | 0b10110101101110 | 0b11110101101110 | 0b10001101101110 | 0b11001101101110 | 0b10101101101110 | 0b11101101101110 | 0b10011101101110 | 0b11011101101110 | 0b10111101101110 | 0b11111101101110 | 0b10000011101110 | 0b11000011101110 | 0b10100011101110 | 0b11100011101110 | 0b10010011101110 | 0b11010011101110 | 0b10110011101110 | 0b11110011101110 | 0b10001011101110 | 0b11001011101110 | 0b10101011101110 | 0b11101011101110 | 0b10011011101110 | 0b11011011101110 | 0b10111011101110 | 0b11111011101110 | 0b10000111101110 | 0b11000111101110 | 0b10100111101110 | 0b11100111101110 | 0b10010111101110 | 0b11010111101110 | 0b10110111101110 | 0b11110111101110 | 0b10001111101110 | 0b11001111101110 | 0b10101111101110 | 0b11101111101110 | 0b10011111101110 | 0b11011111101110 | 0b10111111101110 | 0b11111111101110 | 0b10000000011110 | 0b11000000011110 | 0b10100000011110 | 0b11100000011110 | 0b10010000011110 | 0b11010000011110 | 0b10110000011110 | 0b11110000011110 | 0b10001000011110 | 0b11001000011110 | 0b10101000011110 | 0b11101000011110 | 0b10011000011110 | 0b11011000011110 | 0b10111000011110 | 0b11111000011110 | 0b10000100011110 | 0b11000100011110 | 0b10100100011110 | 0b11100100011110 | 0b10010100011110 | 0b11010100011110 | 0b10110100011110 | 0b11110100011110 | 0b10001100011110 | 0b11001100011110 | 0b10101100011110 | 0b11101100011110 | 0b10011100011110 | 0b11011100011110 | 0b10111100011110 | 0b11111100011110 | 0b10000010011110 | 0b11000010011110 | 0b10100010011110 | 0b11100010011110 | 0b10010010011110 | 0b11010010011110 | 0b10110010011110 | 0b11110010011110 | 0b10001010011110 | 0b11001010011110 | 0b10101010011110 | 0b11101010011110 | 0b10011010011110 | 0b11011010011110 | 0b10111010011110 | 0b11111010011110 | 0b10000110011110 | 0b11000110011110 | 0b10100110011110 | 0b11100110011110 | 0b10010110011110 | 0b11010110011110 | 0b10110110011110 | 0b11110110011110 | 0b10001110011110 | 0b11001110011110 | 0b10101110011110 | 0b11101110011110 | 0b10011110011110 | 0b11011110011110 | 0b10111110011110 | 0b11111110011110 | 0b10000001011110 | 0b11000001011110 | 0b10100001011110 | 0b11100001011110 | 0b10010001011110 | 0b11010001011110 | 0b10110001011110 | 0b11110001011110 | 0b10001001011110 | 0b11001001011110 | 0b10101001011110 | 0b11101001011110 | 0b10011001011110 | 0b11011001011110 | 0b10111001011110 | 0b11111001011110 | 0b10000101011110 | 0b11000101011110 | 0b10100101011110 | 0b11100101011110 | 0b10010101011110 | 0b11010101011110 | 0b10110101011110 | 0b11110101011110 | 0b10001101011110 | 0b11001101011110 | 0b10101101011110 | 0b11101101011110 | 0b10011101011110 | 0b11011101011110 | 0b10111101011110 | 0b11111101011110 | 0b10000011011110 | 0b11000011011110 | 0b10100011011110 | 0b11100011011110 | 0b10010011011110 | 0b11010011011110 | 0b10110011011110 | 0b11110011011110 | 0b10001011011110 | 0b11001011011110 | 0b10101011011110 | 0b11101011011110 | 0b10011011011110 | 0b11011011011110 | 0b10111011011110 | 0b11111011011110 | 0b10000111011110 | 0b11000111011110 | 0b10100111011110 | 0b11100111011110 | 0b10010111011110 | 0b11010111011110 | 0b10110111011110 | 0b11110111011110 | 0b10001111011110 | 0b11001111011110 | 0b10101111011110 | 0b11101111011110 | 0b10011111011110 | 0b11011111011110 | 0b10111111011110 | 0b11111111011110 | 0b10000000111110 | 0b11000000111110 | 0b10100000111110 | 0b11100000111110 | 0b10010000111110 | 0b11010000111110 | 0b10110000111110 | 0b11110000111110 | 0b10001000111110 | 0b11001000111110 | 0b10101000111110 | 0b11101000111110 | 0b10011000111110 | 0b11011000111110 | 0b10111000111110 | 0b11111000111110 | 0b10000100111110 | 0b11000100111110 | 0b10100100111110 | 0b11100100111110 | 0b10010100111110 | 0b11010100111110 | 0b10110100111110 | 0b11110100111110 | 0b10001100111110 | 0b11001100111110 | 0b10101100111110 | 0b11101100111110 | 0b10011100111110 | 0b11011100111110 | 0b10111100111110 | 0b11111100111110 | 0b10000010111110 | 0b11000010111110 | 0b10100010111110 | 0b11100010111110 | 0b10010010111110 | 0b11010010111110 | 0b10110010111110 | 0b11110010111110 | 0b10001010111110 | 0b11001010111110 | 0b10101010111110 | 0b11101010111110 | 0b10011010111110 | 0b11011010111110 | 0b10111010111110 | 0b11111010111110 | 0b10000110111110 | 0b11000110111110 | 0b10100110111110 | 0b11100110111110 | 0b10010110111110 | 0b11010110111110 | 0b10110110111110 | 0b11110110111110 | 0b10001110111110 | 0b11001110111110 | 0b10101110111110 | 0b11101110111110 | 0b10011110111110 | 0b11011110111110 | 0b10111110111110 | 0b11111110111110 | 0b10000001111110 | 0b11000001111110 | 0b10100001111110 | 0b11100001111110 | 0b10010001111110 | 0b11010001111110 | 0b10110001111110 | 0b11110001111110 | 0b10001001111110 | 0b11001001111110 | 0b10101001111110 | 0b11101001111110 | 0b10011001111110 | 0b11011001111110 | 0b10111001111110 | 0b11111001111110 | 0b10000101111110 | 0b11000101111110 | 0b10100101111110 | 0b11100101111110 | 0b10010101111110 | 0b11010101111110 | 0b10110101111110 | 0b11110101111110 | 0b10001101111110 | 0b11001101111110 | 0b10101101111110 | 0b11101101111110 | 0b10011101111110 | 0b11011101111110 | 0b10111101111110 | 0b11111101111110 | 0b10000011111110 | 0b11000011111110 | 0b10100011111110 | 0b11100011111110 | 0b10010011111110 | 0b11010011111110 | 0b10110011111110 | 0b11110011111110 | 0b10001011111110 | 0b11001011111110 | 0b10101011111110 | 0b11101011111110 | 0b10011011111110 | 0b11011011111110 | 0b10111011111110 | 0b11111011111110 | 0b10000111111110 | 0b11000111111110 | 0b10100111111110 | 0b11100111111110 | 0b10010111111110 | 0b11010111111110 | 0b10110111111110 | 0b11110111111110 | 0b10001111111110 | 0b11001111111110 | 0b10101111111110 | 0b11101111111110 | 0b10011111111110 | 0b11011111111110 | 0b10111111111110 | 0b11111111111110 | 0b10000000000001 | 0b11000000000001 | 0b10100000000001 | 0b11100000000001 | 0b10010000000001 | 0b11010000000001 | 0b10110000000001 | 0b11110000000001 | 0b10001000000001 | 0b11001000000001 | 0b10101000000001 | 0b11101000000001 | 0b10011000000001 | 0b11011000000001 | 0b10111000000001 | 0b11111000000001 | 0b10000100000001 | 0b11000100000001 | 0b10100100000001 | 0b11100100000001 | 0b10010100000001 | 0b11010100000001 | 0b10110100000001 | 0b11110100000001 | 0b10001100000001 | 0b11001100000001 | 0b10101100000001 | 0b11101100000001 | 0b10011100000001 | 0b11011100000001 | 0b10111100000001 | 0b11111100000001 | 0b10000010000001 | 0b11000010000001 | 0b10100010000001 | 0b11100010000001 | 0b10010010000001 | 0b11010010000001 | 0b10110010000001 | 0b11110010000001 | 0b10001010000001 | 0b11001010000001 | 0b10101010000001 | 0b11101010000001 | 0b10011010000001 | 0b11011010000001 | 0b10111010000001 | 0b11111010000001 | 0b10000110000001 | 0b11000110000001 | 0b10100110000001 | 0b11100110000001 | 0b10010110000001 | 0b11010110000001 | 0b10110110000001 | 0b11110110000001 | 0b10001110000001 | 0b11001110000001 | 0b10101110000001 | 0b11101110000001 | 0b10011110000001 | 0b11011110000001 | 0b10111110000001 | 0b11111110000001 | 0b10000001000001 | 0b11000001000001 | 0b10100001000001 | 0b11100001000001 | 0b10010001000001 | 0b11010001000001 | 0b10110001000001 | 0b11110001000001 | 0b10001001000001 | 0b11001001000001 | 0b10101001000001 | 0b11101001000001 | 0b10011001000001 | 0b11011001000001 | 0b10111001000001 | 0b11111001000001 | 0b10000101000001 | 0b11000101000001 | 0b10100101000001 | 0b11100101000001 | 0b10010101000001 | 0b11010101000001 | 0b10110101000001 | 0b11110101000001 | 0b10001101000001 | 0b11001101000001 | 0b10101101000001 | 0b11101101000001 | 0b10011101000001 | 0b11011101000001 | 0b10111101000001 | 0b11111101000001 | 0b10000011000001 | 0b11000011000001 | 0b10100011000001 | 0b11100011000001 | 0b10010011000001 | 0b11010011000001 | 0b10110011000001 | 0b11110011000001 | 0b10001011000001 | 0b11001011000001 | 0b10101011000001 | 0b11101011000001 | 0b10011011000001 | 0b11011011000001 | 0b10111011000001 | 0b11111011000001 | 0b10000111000001 | 0b11000111000001 | 0b10100111000001 | 0b11100111000001 | 0b10010111000001 | 0b11010111000001 | 0b10110111000001 | 0b11110111000001 | 0b10001111000001 | 0b11001111000001 | 0b10101111000001 | 0b11101111000001 | 0b10011111000001 | 0b11011111000001 | 0b10111111000001 | 0b11111111000001 | 0b10000000100001 | 0b11000000100001 | 0b10100000100001 | 0b11100000100001 | 0b10010000100001 | 0b11010000100001 | 0b10110000100001 | 0b11110000100001 | 0b10001000100001 | 0b11001000100001 | 0b10101000100001 | 0b11101000100001 | 0b10011000100001 | 0b11011000100001 | 0b10111000100001 | 0b11111000100001 | 0b10000100100001 | 0b11000100100001 | 0b10100100100001 | 0b11100100100001 | 0b10010100100001 | 0b11010100100001 | 0b10110100100001 | 0b11110100100001 | 0b10001100100001 | 0b11001100100001 | 0b10101100100001 | 0b11101100100001 | 0b10011100100001 | 0b11011100100001 | 0b10111100100001 | 0b11111100100001 | 0b10000010100001 | 0b11000010100001 | 0b10100010100001 | 0b11100010100001 | 0b10010010100001 | 0b11010010100001 | 0b10110010100001 | 0b11110010100001 | 0b10001010100001 | 0b11001010100001 | 0b10101010100001 | 0b11101010100001 | 0b10011010100001 | 0b11011010100001 | 0b10111010100001 | 0b11111010100001 | 0b10000110100001 | 0b11000110100001 | 0b10100110100001 | 0b11100110100001 | 0b10010110100001 | 0b11010110100001 | 0b10110110100001 | 0b11110110100001 | 0b10001110100001 | 0b11001110100001 | 0b10101110100001 | 0b11101110100001 | 0b10011110100001 | 0b11011110100001 | 0b10111110100001 | 0b11111110100001 | 0b10000001100001 | 0b11000001100001 | 0b10100001100001 | 0b11100001100001 | 0b10010001100001 | 0b11010001100001 | 0b10110001100001 | 0b11110001100001 | 0b10001001100001 | 0b11001001100001 | 0b10101001100001 | 0b11101001100001 | 0b10011001100001 | 0b11011001100001 | 0b10111001100001 | 0b11111001100001 | 0b10000101100001 | 0b11000101100001 | 0b10100101100001 | 0b11100101100001 | 0b10010101100001 | 0b11010101100001 | 0b10110101100001 | 0b11110101100001 | 0b10001101100001 | 0b11001101100001 | 0b10101101100001 | 0b11101101100001 | 0b10011101100001 | 0b11011101100001 | 0b10111101100001 | 0b11111101100001 | 0b10000011100001 | 0b11000011100001 | 0b10100011100001 | 0b11100011100001 | 0b10010011100001 | 0b11010011100001 | 0b10110011100001 | 0b11110011100001 | 0b10001011100001 | 0b11001011100001 | 0b10101011100001 | 0b11101011100001 | 0b10011011100001 | 0b11011011100001 | 0b10111011100001 | 0b11111011100001 | 0b10000111100001 | 0b11000111100001 | 0b10100111100001 | 0b11100111100001 | 0b10010111100001 | 0b11010111100001 | 0b10110111100001 | 0b11110111100001 | 0b10001111100001 | 0b11001111100001 | 0b10101111100001 | 0b11101111100001 | 0b10011111100001 | 0b11011111100001 | 0b10111111100001 | 0b11111111100001 | 0b10000000010001 | 0b11000000010001 | 0b10100000010001 | 0b11100000010001 | 0b10010000010001 | 0b11010000010001 | 0b10110000010001 | 0b11110000010001 | 0b10001000010001 | 0b11001000010001 | 0b10101000010001 | 0b11101000010001 | 0b10011000010001 | 0b11011000010001 | 0b10111000010001 | 0b11111000010001 | 0b10000100010001 | 0b11000100010001 | 0b10100100010001 | 0b11100100010001 | 0b10010100010001 | 0b11010100010001 | 0b10110100010001 | 0b11110100010001 | 0b10001100010001 | 0b11001100010001 | 0b10101100010001 | 0b11101100010001 | 0b10011100010001 | 0b11011100010001 | 0b10111100010001 | 0b11111100010001 | 0b10000010010001 | 0b11000010010001 | 0b10100010010001 | 0b11100010010001 | 0b10010010010001 | 0b11010010010001 | 0b10110010010001 | 0b11110010010001 | 0b10001010010001 | 0b11001010010001 | 0b10101010010001 | 0b11101010010001 | 0b10011010010001 | 0b11011010010001 | 0b10111010010001 | 0b11111010010001 | 0b10000110010001 | 0b11000110010001 | 0b10100110010001 | 0b11100110010001 | 0b10010110010001 | 0b11010110010001 | 0b10110110010001 | 0b11110110010001 | 0b10001110010001 | 0b11001110010001 | 0b10101110010001 | 0b11101110010001 | 0b10011110010001 | 0b11011110010001 | 0b10111110010001 | 0b11111110010001 | 0b10000001010001 | 0b11000001010001 | 0b10100001010001 | 0b11100001010001 | 0b10010001010001 | 0b11010001010001 | 0b10110001010001 | 0b11110001010001 | 0b10001001010001 | 0b11001001010001 | 0b10101001010001 | 0b11101001010001 | 0b10011001010001 | 0b11011001010001 | 0b10111001010001 | 0b11111001010001 | 0b10000101010001 | 0b11000101010001 | 0b10100101010001 | 0b11100101010001 | 0b10010101010001 | 0b11010101010001 | 0b10110101010001 | 0b11110101010001 | 0b10001101010001 | 0b11001101010001 | 0b10101101010001 | 0b11101101010001 | 0b10011101010001 | 0b11011101010001 | 0b10111101010001 | 0b11111101010001 | 0b10000011010001 | 0b11000011010001 | 0b10100011010001 | 0b11100011010001 | 0b10010011010001 | 0b11010011010001 | 0b10110011010001 | 0b11110011010001 | 0b10001011010001 | 0b11001011010001 | 0b10101011010001 | 0b11101011010001 | 0b10011011010001 | 0b11011011010001 | 0b10111011010001 | 0b11111011010001 | 0b10000111010001 | 0b11000111010001 | 0b10100111010001 | 0b11100111010001 | 0b10010111010001 | 0b11010111010001 | 0b10110111010001 | 0b11110111010001 | 0b10001111010001 | 0b11001111010001 | 0b10101111010001 | 0b11101111010001 | 0b10011111010001 | 0b11011111010001 | 0b10111111010001 | 0b11111111010001 | 0b10000000110001 | 0b11000000110001 | 0b10100000110001 | 0b11100000110001 | 0b10010000110001 | 0b11010000110001 | 0b10110000110001 | 0b11110000110001 | 0b10001000110001 | 0b11001000110001 | 0b10101000110001 | 0b11101000110001 | 0b10011000110001 | 0b11011000110001 | 0b10111000110001 | 0b11111000110001 | 0b10000100110001 | 0b11000100110001 | 0b10100100110001 | 0b11100100110001 | 0b10010100110001 | 0b11010100110001 | 0b10110100110001 | 0b11110100110001 | 0b10001100110001 | 0b11001100110001 | 0b10101100110001 | 0b11101100110001 | 0b10011100110001 | 0b11011100110001 | 0b10111100110001 | 0b11111100110001 | 0b10000010110001 | 0b11000010110001 | 0b10100010110001 | 0b11100010110001 | 0b10010010110001 | 0b11010010110001 | 0b10110010110001 | 0b11110010110001 | 0b10001010110001 | 0b11001010110001 | 0b10101010110001 | 0b11101010110001 | 0b10011010110001 | 0b11011010110001 | 0b10111010110001 | 0b11111010110001 | 0b10000110110001 | 0b11000110110001 | 0b10100110110001 | 0b11100110110001 | 0b10010110110001 | 0b11010110110001 | 0b10110110110001 | 0b11110110110001 | 0b10001110110001 | 0b11001110110001 | 0b10101110110001 | 0b11101110110001 | 0b10011110110001 | 0b11011110110001 | 0b10111110110001 | 0b11111110110001 | 0b10000001110001 | 0b11000001110001 | 0b10100001110001 | 0b11100001110001 | 0b10010001110001 | 0b11010001110001 | 0b10110001110001 | 0b11110001110001 | 0b10001001110001 | 0b11001001110001 | 0b10101001110001 | 0b11101001110001 | 0b10011001110001 | 0b11011001110001 | 0b10111001110001 | 0b11111001110001 | 0b10000101110001 | 0b11000101110001 | 0b10100101110001 | 0b11100101110001 | 0b10010101110001 | 0b11010101110001 | 0b10110101110001 | 0b11110101110001 | 0b10001101110001 | 0b11001101110001 | 0b10101101110001 | 0b11101101110001 | 0b10011101110001 | 0b11011101110001 | 0b10111101110001 | 0b11111101110001 | 0b10000011110001 | 0b11000011110001 | 0b10100011110001 | 0b11100011110001 | 0b10010011110001 | 0b11010011110001 | 0b10110011110001 | 0b11110011110001 | 0b10001011110001 | 0b11001011110001 | 0b10101011110001 | 0b11101011110001 | 0b10011011110001 | 0b11011011110001 | 0b10111011110001 | 0b11111011110001 | 0b10000111110001 | 0b11000111110001 | 0b10100111110001 | 0b11100111110001 | 0b10010111110001 | 0b11010111110001 | 0b10110111110001 | 0b11110111110001 | 0b10001111110001 | 0b11001111110001 | 0b10101111110001 | 0b11101111110001 | 0b10011111110001 | 0b11011111110001 | 0b10111111110001 | 0b11111111110001 | 0b10000000001001 | 0b11000000001001 | 0b10100000001001 | 0b11100000001001 | 0b10010000001001 | 0b11010000001001 | 0b10110000001001 | 0b11110000001001 | 0b10001000001001 | 0b11001000001001 | 0b10101000001001 | 0b11101000001001 | 0b10011000001001 | 0b11011000001001 | 0b10111000001001 | 0b11111000001001 | 0b10000100001001 | 0b11000100001001 | 0b10100100001001 | 0b11100100001001 | 0b10010100001001 | 0b11010100001001 | 0b10110100001001 | 0b11110100001001 | 0b10001100001001 | 0b11001100001001 | 0b10101100001001 | 0b11101100001001 | 0b10011100001001 | 0b11011100001001 | 0b10111100001001 | 0b11111100001001 | 0b10000010001001 | 0b11000010001001 | 0b10100010001001 | 0b11100010001001 | 0b10010010001001 | 0b11010010001001 | 0b10110010001001 | 0b11110010001001 | 0b10001010001001 | 0b11001010001001 | 0b10101010001001 | 0b11101010001001 | 0b10011010001001 | 0b11011010001001 | 0b10111010001001 | 0b11111010001001 | 0b10000110001001 | 0b11000110001001 | 0b10100110001001 | 0b11100110001001 | 0b10010110001001 | 0b11010110001001 | 0b10110110001001 | 0b11110110001001 | 0b10001110001001 | 0b11001110001001 | 0b10101110001001 | 0b11101110001001 | 0b10011110001001 | 0b11011110001001 | 0b10111110001001 | 0b11111110001001 | 0b10000001001001 | 0b11000001001001 | 0b10100001001001 | 0b11100001001001 | 0b10010001001001 | 0b11010001001001 | 0b10110001001001 | 0b11110001001001 | 0b10001001001001 | 0b11001001001001 | 0b10101001001001 | 0b11101001001001 | 0b10011001001001 | 0b11011001001001 | 0b10111001001001 | 0b11111001001001 | 0b10000101001001 | 0b11000101001001 | 0b10100101001001 | 0b11100101001001 | 0b10010101001001 | 0b11010101001001 | 0b10110101001001 | 0b11110101001001 | 0b10001101001001 | 0b11001101001001 | 0b10101101001001 | 0b11101101001001 | 0b10011101001001 | 0b11011101001001 | 0b10111101001001 | 0b11111101001001 | 0b10000011001001 | 0b11000011001001 | 0b10100011001001 | 0b11100011001001 | 0b10010011001001 | 0b11010011001001 | 0b10110011001001 | 0b11110011001001 | 0b10001011001001 | 0b11001011001001 | 0b10101011001001 | 0b11101011001001 | 0b10011011001001 | 0b11011011001001 | 0b10111011001001 | 0b11111011001001 | 0b10000111001001 | 0b11000111001001 | 0b10100111001001 | 0b11100111001001 | 0b10010111001001 | 0b11010111001001 | 0b10110111001001 | 0b11110111001001 | 0b10001111001001 | 0b11001111001001 | 0b10101111001001 | 0b11101111001001 | 0b10011111001001 | 0b11011111001001 | 0b10111111001001 | 0b11111111001001 | 0b10000000101001 | 0b11000000101001 | 0b10100000101001 | 0b11100000101001 | 0b10010000101001 | 0b11010000101001 | 0b10110000101001 | 0b11110000101001 | 0b10001000101001 | 0b11001000101001 | 0b10101000101001 | 0b11101000101001 | 0b10011000101001 | 0b11011000101001 | 0b10111000101001 | 0b11111000101001 | 0b10000100101001 | 0b11000100101001 | 0b10100100101001 | 0b11100100101001 | 0b10010100101001 | 0b11010100101001 | 0b10110100101001 | 0b11110100101001 | 0b10001100101001 | 0b11001100101001 | 0b10101100101001 | 0b11101100101001 | 0b10011100101001 | 0b11011100101001 | 0b10111100101001 | 0b11111100101001 | 0b10000010101001 | 0b11000010101001 | 0b10100010101001 | 0b11100010101001 | 0b10010010101001 | 0b11010010101001 | 0b10110010101001 | 0b11110010101001 | 0b10001010101001 | 0b11001010101001 | 0b10101010101001 | 0b11101010101001 | 0b10011010101001 | 0b11011010101001 | 0b10111010101001 | 0b11111010101001 | 0b10000110101001 | 0b11000110101001 | 0b10100110101001 | 0b11100110101001 | 0b10010110101001 | 0b11010110101001 | 0b10110110101001 | 0b11110110101001 | 0b10001110101001 | 0b11001110101001 | 0b10101110101001 | 0b11101110101001 | 0b10011110101001 | 0b11011110101001 | 0b10111110101001 | 0b11111110101001 | 0b10000001101001 | 0b11000001101001 | 0b10100001101001 | 0b11100001101001 | 0b10010001101001 | 0b11010001101001 | 0b10110001101001 | 0b11110001101001 | 0b10001001101001 | 0b11001001101001 | 0b10101001101001 | 0b11101001101001 | 0b10011001101001 | 0b11011001101001 | 0b10111001101001 | 0b11111001101001 | 0b10000101101001 | 0b11000101101001 | 0b10100101101001 | 0b11100101101001 | 0b10010101101001 | 0b11010101101001 | 0b10110101101001 | 0b11110101101001 | 0b10001101101001 | 0b11001101101001 | 0b10101101101001 | 0b11101101101001 | 0b10011101101001 | 0b11011101101001 | 0b10111101101001 | 0b11111101101001 | 0b10000011101001 | 0b11000011101001 | 0b10100011101001 | 0b11100011101001 | 0b10010011101001 | 0b11010011101001 | 0b10110011101001 | 0b11110011101001 | 0b10001011101001 | 0b11001011101001 | 0b10101011101001 | 0b11101011101001 | 0b10011011101001 | 0b11011011101001 | 0b10111011101001 | 0b11111011101001 | 0b10000111101001 | 0b11000111101001 | 0b10100111101001 | 0b11100111101001 | 0b10010111101001 | 0b11010111101001 | 0b10110111101001 | 0b11110111101001 | 0b10001111101001 | 0b11001111101001 | 0b10101111101001 | 0b11101111101001 | 0b10011111101001 | 0b11011111101001 | 0b10111111101001 | 0b11111111101001 | 0b10000000011001 | 0b11000000011001 | 0b10100000011001 | 0b11100000011001 | 0b10010000011001 | 0b11010000011001 | 0b10110000011001 | 0b11110000011001 | 0b10001000011001 | 0b11001000011001 | 0b10101000011001 | 0b11101000011001 | 0b10011000011001 | 0b11011000011001 | 0b10111000011001 | 0b11111000011001 | 0b10000100011001 | 0b11000100011001 | 0b10100100011001 | 0b11100100011001 | 0b10010100011001 | 0b11010100011001 | 0b10110100011001 | 0b11110100011001 | 0b10001100011001 | 0b11001100011001 | 0b10101100011001 | 0b11101100011001 | 0b10011100011001 | 0b11011100011001 | 0b10111100011001 | 0b11111100011001 | 0b10000010011001 | 0b11000010011001 | 0b10100010011001 | 0b11100010011001 | 0b10010010011001 | 0b11010010011001 | 0b10110010011001 | 0b11110010011001 | 0b10001010011001 | 0b11001010011001 | 0b10101010011001 | 0b11101010011001 | 0b10011010011001 | 0b11011010011001 | 0b10111010011001 | 0b11111010011001 | 0b10000110011001 | 0b11000110011001 | 0b10100110011001 | 0b11100110011001 | 0b10010110011001 | 0b11010110011001 | 0b10110110011001 | 0b11110110011001 | 0b10001110011001 | 0b11001110011001 | 0b10101110011001 | 0b11101110011001 | 0b10011110011001 | 0b11011110011001 | 0b10111110011001 | 0b11111110011001 | 0b10000001011001 | 0b11000001011001 | 0b10100001011001 | 0b11100001011001 | 0b10010001011001 | 0b11010001011001 | 0b10110001011001 | 0b11110001011001 | 0b10001001011001 | 0b11001001011001 | 0b10101001011001 | 0b11101001011001 | 0b10011001011001 | 0b11011001011001 | 0b10111001011001 | 0b11111001011001 | 0b10000101011001 | 0b11000101011001 | 0b10100101011001 | 0b11100101011001 | 0b10010101011001 | 0b11010101011001 | 0b10110101011001 | 0b11110101011001 | 0b10001101011001 | 0b11001101011001 | 0b10101101011001 | 0b11101101011001 | 0b10011101011001 | 0b11011101011001 | 0b10111101011001 | 0b11111101011001 | 0b10000011011001 | 0b11000011011001 | 0b10100011011001 | 0b11100011011001 | 0b10010011011001 | 0b11010011011001 | 0b10110011011001 | 0b11110011011001 | 0b10001011011001 | 0b11001011011001 | 0b10101011011001 | 0b11101011011001 | 0b10011011011001 | 0b11011011011001 | 0b10111011011001 | 0b11111011011001 | 0b10000111011001 | 0b11000111011001 | 0b10100111011001 | 0b11100111011001 | 0b10010111011001 | 0b11010111011001 | 0b10110111011001 | 0b11110111011001 | 0b10001111011001 | 0b11001111011001 | 0b10101111011001 | 0b11101111011001 | 0b10011111011001 | 0b11011111011001 | 0b10111111011001 | 0b11111111011001 | 0b10000000111001 | 0b11000000111001 | 0b10100000111001 | 0b11100000111001 | 0b10010000111001 | 0b11010000111001 | 0b10110000111001 | 0b11110000111001 | 0b10001000111001 | 0b11001000111001 | 0b10101000111001 | 0b11101000111001 | 0b10011000111001 | 0b11011000111001 | 0b10111000111001 | 0b11111000111001 | 0b10000100111001 | 0b11000100111001 | 0b10100100111001 | 0b11100100111001 | 0b10010100111001 | 0b11010100111001 | 0b10110100111001 | 0b11110100111001 | 0b10001100111001 | 0b11001100111001 | 0b10101100111001 | 0b11101100111001 | 0b10011100111001 | 0b11011100111001 | 0b10111100111001 | 0b11111100111001 | 0b10000010111001 | 0b11000010111001 | 0b10100010111001 | 0b11100010111001 | 0b10010010111001 | 0b11010010111001 | 0b10110010111001 | 0b11110010111001 | 0b10001010111001 | 0b11001010111001 | 0b10101010111001 | 0b11101010111001 | 0b10011010111001 | 0b11011010111001 | 0b10111010111001 | 0b11111010111001 | 0b10000110111001 | 0b11000110111001 | 0b10100110111001 | 0b11100110111001 | 0b10010110111001 | 0b11010110111001 | 0b10110110111001 | 0b11110110111001 | 0b10001110111001 | 0b11001110111001 | 0b10101110111001 | 0b11101110111001 | 0b10011110111001 | 0b11011110111001 | 0b10111110111001 | 0b11111110111001 | 0b10000001111001 | 0b11000001111001 | 0b10100001111001 | 0b11100001111001 | 0b10010001111001 | 0b11010001111001 | 0b10110001111001 | 0b11110001111001 | 0b10001001111001 | 0b11001001111001 | 0b10101001111001 | 0b11101001111001 | 0b10011001111001 | 0b11011001111001 | 0b10111001111001 | 0b11111001111001 | 0b10000101111001 | 0b11000101111001 | 0b10100101111001 | 0b11100101111001 | 0b10010101111001 | 0b11010101111001 | 0b10110101111001 | 0b11110101111001 | 0b10001101111001 | 0b11001101111001 | 0b10101101111001 | 0b11101101111001 | 0b10011101111001 | 0b11011101111001 | 0b10111101111001 | 0b11111101111001 | 0b10000011111001 | 0b11000011111001 | 0b10100011111001 | 0b11100011111001 | 0b10010011111001 | 0b11010011111001 | 0b10110011111001 | 0b11110011111001 | 0b10001011111001 | 0b11001011111001 | 0b10101011111001 | 0b11101011111001 | 0b10011011111001 | 0b11011011111001 | 0b10111011111001 | 0b11111011111001 | 0b10000111111001 | 0b11000111111001 | 0b10100111111001 | 0b11100111111001 | 0b10010111111001 | 0b11010111111001 | 0b10110111111001 | 0b11110111111001 | 0b10001111111001 | 0b11001111111001 | 0b10101111111001 | 0b11101111111001 | 0b10011111111001 | 0b11011111111001 | 0b10111111111001 | 0b11111111111001 | 0b10000000000101 | 0b11000000000101 | 0b10100000000101 | 0b11100000000101 | 0b10010000000101 | 0b11010000000101 | 0b10110000000101 | 0b11110000000101 | 0b10001000000101 | 0b11001000000101 | 0b10101000000101 | 0b11101000000101 | 0b10011000000101 | 0b11011000000101 | 0b10111000000101 | 0b11111000000101 | 0b10000100000101 | 0b11000100000101 | 0b10100100000101 | 0b11100100000101 | 0b10010100000101 | 0b11010100000101 | 0b10110100000101 | 0b11110100000101 | 0b10001100000101 | 0b11001100000101 | 0b10101100000101 | 0b11101100000101 | 0b10011100000101 | 0b11011100000101 | 0b10111100000101 | 0b11111100000101 | 0b10000010000101 | 0b11000010000101 | 0b10100010000101 | 0b11100010000101 | 0b10010010000101 | 0b11010010000101 | 0b10110010000101 | 0b11110010000101 | 0b10001010000101 | 0b11001010000101 | 0b10101010000101 | 0b11101010000101 | 0b10011010000101 | 0b11011010000101 | 0b10111010000101 | 0b11111010000101 | 0b10000110000101 | 0b11000110000101 | 0b10100110000101 | 0b11100110000101 | 0b10010110000101 | 0b11010110000101 | 0b10110110000101 | 0b11110110000101 | 0b10001110000101 | 0b11001110000101 | 0b10101110000101 | 0b11101110000101 | 0b10011110000101 | 0b11011110000101 | 0b10111110000101 | 0b11111110000101 | 0b10000001000101 | 0b11000001000101 | 0b10100001000101 | 0b11100001000101 | 0b10010001000101 | 0b11010001000101 | 0b10110001000101 | 0b11110001000101 | 0b10001001000101 | 0b11001001000101 | 0b10101001000101 | 0b11101001000101 | 0b10011001000101 | 0b11011001000101 | 0b10111001000101 | 0b11111001000101 | 0b10000101000101 | 0b11000101000101 | 0b10100101000101 | 0b11100101000101 | 0b10010101000101 | 0b11010101000101 | 0b10110101000101 | 0b11110101000101 | 0b10001101000101 | 0b11001101000101 | 0b10101101000101 | 0b11101101000101 | 0b10011101000101 | 0b11011101000101 | 0b10111101000101 | 0b11111101000101 | 0b10000011000101 | 0b11000011000101 | 0b10100011000101 | 0b11100011000101 | 0b10010011000101 | 0b11010011000101 | 0b10110011000101 | 0b11110011000101 | 0b10001011000101 | 0b11001011000101 | 0b10101011000101 | 0b11101011000101 | 0b10011011000101 | 0b11011011000101 | 0b10111011000101 | 0b11111011000101 | 0b10000111000101 | 0b11000111000101 | 0b10100111000101 | 0b11100111000101 | 0b10010111000101 | 0b11010111000101 | 0b10110111000101 | 0b11110111000101 | 0b10001111000101 | 0b11001111000101 | 0b10101111000101 | 0b11101111000101 | 0b10011111000101 | 0b11011111000101 | 0b10111111000101 | 0b11111111000101 | 0b10000000100101 | 0b11000000100101 | 0b10100000100101 | 0b11100000100101 | 0b10010000100101 | 0b11010000100101 | 0b10110000100101 | 0b11110000100101 | 0b10001000100101 | 0b11001000100101 | 0b10101000100101 | 0b11101000100101 | 0b10011000100101 | 0b11011000100101 | 0b10111000100101 | 0b11111000100101 | 0b10000100100101 | 0b11000100100101 | 0b10100100100101 | 0b11100100100101 | 0b10010100100101 | 0b11010100100101 | 0b10110100100101 | 0b11110100100101 | 0b10001100100101 | 0b11001100100101 | 0b10101100100101 | 0b11101100100101 | 0b10011100100101 | 0b11011100100101 | 0b10111100100101 | 0b11111100100101 | 0b10000010100101 | 0b11000010100101 | 0b10100010100101 | 0b11100010100101 | 0b10010010100101 | 0b11010010100101 | 0b10110010100101 | 0b11110010100101 | 0b10001010100101 | 0b11001010100101 | 0b10101010100101 | 0b11101010100101 | 0b10011010100101 | 0b11011010100101 | 0b10111010100101 | 0b11111010100101 | 0b10000110100101 | 0b11000110100101 | 0b10100110100101 | 0b11100110100101 | 0b10010110100101 | 0b11010110100101 | 0b10110110100101 | 0b11110110100101 | 0b10001110100101 | 0b11001110100101 | 0b10101110100101 | 0b11101110100101 | 0b10011110100101 | 0b11011110100101 | 0b10111110100101 | 0b11111110100101 | 0b10000001100101 | 0b11000001100101 | 0b10100001100101 | 0b11100001100101 | 0b10010001100101 | 0b11010001100101 | 0b10110001100101 | 0b11110001100101 | 0b10001001100101 | 0b11001001100101 | 0b10101001100101 | 0b11101001100101 | 0b10011001100101 | 0b11011001100101 | 0b10111001100101 | 0b11111001100101 | 0b10000101100101 | 0b11000101100101 | 0b10100101100101 | 0b11100101100101 | 0b10010101100101 | 0b11010101100101 | 0b10110101100101 | 0b11110101100101 | 0b10001101100101 | 0b11001101100101 | 0b10101101100101 | 0b11101101100101 | 0b10011101100101 | 0b11011101100101 | 0b10111101100101 | 0b11111101100101 | 0b10000011100101 | 0b11000011100101 | 0b10100011100101 | 0b11100011100101 | 0b10010011100101 | 0b11010011100101 | 0b10110011100101 | 0b11110011100101 | 0b10001011100101 | 0b11001011100101 | 0b10101011100101 | 0b11101011100101 | 0b10011011100101 | 0b11011011100101 | 0b10111011100101 | 0b11111011100101 | 0b10000111100101 | 0b11000111100101 | 0b10100111100101 | 0b11100111100101 | 0b10010111100101 | 0b11010111100101 | 0b10110111100101 | 0b11110111100101 | 0b10001111100101 | 0b11001111100101 | 0b10101111100101 | 0b11101111100101 | 0b10011111100101 | 0b11011111100101 | 0b10111111100101 | 0b11111111100101 | 0b10000000010101 | 0b11000000010101 | 0b10100000010101 | 0b11100000010101 | 0b10010000010101 | 0b11010000010101 | 0b10110000010101 | 0b11110000010101 | 0b10001000010101 | 0b11001000010101 | 0b10101000010101 | 0b11101000010101 | 0b10011000010101 | 0b11011000010101 | 0b10111000010101 | 0b11111000010101 | 0b10000100010101 | 0b11000100010101 | 0b10100100010101 | 0b11100100010101 | 0b10010100010101 | 0b11010100010101 | 0b10110100010101 | 0b11110100010101 | 0b10001100010101 | 0b11001100010101 | 0b10101100010101 | 0b11101100010101 | 0b10011100010101 | 0b11011100010101 | 0b10111100010101 | 0b11111100010101 | 0b10000010010101 | 0b11000010010101 | 0b10100010010101 | 0b11100010010101 | 0b10010010010101 | 0b11010010010101 | 0b10110010010101 | 0b11110010010101 | 0b10001010010101 | 0b11001010010101 | 0b10101010010101 | 0b11101010010101 | 0b10011010010101 | 0b11011010010101 | 0b10111010010101 | 0b11111010010101 | 0b10000110010101 | 0b11000110010101 | 0b10100110010101 | 0b11100110010101 | 0b10010110010101 | 0b11010110010101 | 0b10110110010101 | 0b11110110010101 | 0b10001110010101 | 0b11001110010101 | 0b10101110010101 | 0b11101110010101 | 0b10011110010101 | 0b11011110010101 | 0b10111110010101 | 0b11111110010101 | 0b10000001010101 | 0b11000001010101 | 0b10100001010101 | 0b11100001010101 | 0b10010001010101 | 0b11010001010101 | 0b10110001010101 | 0b11110001010101 | 0b10001001010101 | 0b11001001010101 | 0b10101001010101 | 0b11101001010101 | 0b10011001010101 | 0b11011001010101 | 0b10111001010101 | 0b11111001010101 | 0b10000101010101 | 0b11000101010101 | 0b10100101010101 | 0b11100101010101 | 0b10010101010101 | 0b11010101010101 | 0b10110101010101 | 0b11110101010101 | 0b10001101010101 | 0b11001101010101 | 0b10101101010101 | 0b11101101010101 | 0b10011101010101 | 0b11011101010101 | 0b10111101010101 | 0b11111101010101 | 0b10000011010101 | 0b11000011010101 | 0b10100011010101 | 0b11100011010101 | 0b10010011010101 | 0b11010011010101 | 0b10110011010101 | 0b11110011010101 | 0b10001011010101 | 0b11001011010101 | 0b10101011010101 | 0b11101011010101 | 0b10011011010101 | 0b11011011010101 | 0b10111011010101 | 0b11111011010101 | 0b10000111010101 | 0b11000111010101 | 0b10100111010101 | 0b11100111010101 | 0b10010111010101 | 0b11010111010101 | 0b10110111010101 | 0b11110111010101 | 0b10001111010101 | 0b11001111010101 | 0b10101111010101 | 0b11101111010101 | 0b10011111010101 | 0b11011111010101 | 0b10111111010101 | 0b11111111010101 | 0b10000000110101 | 0b11000000110101 | 0b10100000110101 | 0b11100000110101 | 0b10010000110101 | 0b11010000110101 | 0b10110000110101 | 0b11110000110101 | 0b10001000110101 | 0b11001000110101 | 0b10101000110101 | 0b11101000110101 | 0b10011000110101 | 0b11011000110101 | 0b10111000110101 | 0b11111000110101 | 0b10000100110101 | 0b11000100110101 | 0b10100100110101 | 0b11100100110101 | 0b10010100110101 | 0b11010100110101 | 0b10110100110101 | 0b11110100110101 | 0b10001100110101 | 0b11001100110101 | 0b10101100110101 | 0b11101100110101 | 0b10011100110101 | 0b11011100110101 | 0b10111100110101 | 0b11111100110101 | 0b10000010110101 | 0b11000010110101 | 0b10100010110101 | 0b11100010110101 | 0b10010010110101 | 0b11010010110101 | 0b10110010110101 | 0b11110010110101 | 0b10001010110101 | 0b11001010110101 | 0b10101010110101 | 0b11101010110101 | 0b10011010110101 | 0b11011010110101 | 0b10111010110101 | 0b11111010110101 | 0b10000110110101 | 0b11000110110101 | 0b10100110110101 | 0b11100110110101 | 0b10010110110101 | 0b11010110110101 | 0b10110110110101 | 0b11110110110101 | 0b10001110110101 | 0b11001110110101 | 0b10101110110101 | 0b11101110110101 | 0b10011110110101 | 0b11011110110101 | 0b10111110110101 | 0b11111110110101 | 0b10000001110101 | 0b11000001110101 | 0b10100001110101 | 0b11100001110101 | 0b10010001110101 | 0b11010001110101 | 0b10110001110101 | 0b11110001110101 | 0b10001001110101 | 0b11001001110101 | 0b10101001110101 | 0b11101001110101 | 0b10011001110101 | 0b11011001110101 | 0b10111001110101 | 0b11111001110101 | 0b10000101110101 | 0b11000101110101 | 0b10100101110101 | 0b11100101110101 | 0b10010101110101 | 0b11010101110101 | 0b10110101110101 | 0b11110101110101 | 0b10001101110101 | 0b11001101110101 | 0b10101101110101 | 0b11101101110101 | 0b10011101110101 | 0b11011101110101 | 0b10111101110101 | 0b11111101110101 | 0b10000011110101 | 0b11000011110101 | 0b10100011110101 | 0b11100011110101 | 0b10010011110101 | 0b11010011110101 | 0b10110011110101 | 0b11110011110101 | 0b10001011110101 | 0b11001011110101 | 0b10101011110101 | 0b11101011110101 | 0b10011011110101 | 0b11011011110101 | 0b10111011110101 | 0b11111011110101 | 0b10000111110101 | 0b11000111110101 | 0b10100111110101 | 0b11100111110101 | 0b10010111110101 | 0b11010111110101 | 0b10110111110101 | 0b11110111110101 | 0b10001111110101 | 0b11001111110101 | 0b10101111110101 | 0b11101111110101 | 0b10011111110101 | 0b11011111110101 | 0b10111111110101 | 0b11111111110101 | 0b10000000001101 | 0b11000000001101 | 0b10100000001101 | 0b11100000001101 | 0b10010000001101 | 0b11010000001101 | 0b10110000001101 | 0b11110000001101 | 0b10001000001101 | 0b11001000001101 | 0b10101000001101 | 0b11101000001101 | 0b10011000001101 | 0b11011000001101 | 0b10111000001101 | 0b11111000001101 | 0b10000100001101 | 0b11000100001101 | 0b10100100001101 | 0b11100100001101 | 0b10010100001101 | 0b11010100001101 | 0b10110100001101 | 0b11110100001101 | 0b10001100001101 | 0b11001100001101 | 0b10101100001101 | 0b11101100001101 | 0b10011100001101 | 0b11011100001101 | 0b10111100001101 | 0b11111100001101 | 0b10000010001101 | 0b11000010001101 | 0b10100010001101 | 0b11100010001101 | 0b10010010001101 | 0b11010010001101 | 0b10110010001101 | 0b11110010001101 | 0b10001010001101 | 0b11001010001101 | 0b10101010001101 | 0b11101010001101 | 0b10011010001101 | 0b11011010001101 | 0b10111010001101 | 0b11111010001101 | 0b10000110001101 | 0b11000110001101 | 0b10100110001101 | 0b11100110001101 | 0b10010110001101 | 0b11010110001101 | 0b10110110001101 | 0b11110110001101 | 0b10001110001101 | 0b11001110001101 | 0b10101110001101 | 0b11101110001101 | 0b10011110001101 | 0b11011110001101 | 0b10111110001101 | 0b11111110001101 | 0b10000001001101 | 0b11000001001101 | 0b10100001001101 | 0b11100001001101 | 0b10010001001101 | 0b11010001001101 | 0b10110001001101 | 0b11110001001101 | 0b10001001001101 | 0b11001001001101 | 0b10101001001101 | 0b11101001001101 | 0b10011001001101 | 0b11011001001101 | 0b10111001001101 | 0b11111001001101 | 0b10000101001101 | 0b11000101001101 | 0b10100101001101 | 0b11100101001101 | 0b10010101001101 | 0b11010101001101 | 0b10110101001101 | 0b11110101001101 | 0b10001101001101 | 0b11001101001101 | 0b10101101001101 | 0b11101101001101 | 0b10011101001101 | 0b11011101001101 | 0b10111101001101 | 0b11111101001101 | 0b10000011001101 | 0b11000011001101 | 0b10100011001101 | 0b11100011001101 | 0b10010011001101 | 0b11010011001101 | 0b10110011001101 | 0b11110011001101 | 0b10001011001101 | 0b11001011001101 | 0b10101011001101 | 0b11101011001101 | 0b10011011001101 | 0b11011011001101 | 0b10111011001101 | 0b11111011001101 | 0b10000111001101 | 0b11000111001101 | 0b10100111001101 | 0b11100111001101 | 0b10010111001101 | 0b11010111001101 | 0b10110111001101 | 0b11110111001101 | 0b10001111001101 | 0b11001111001101 | 0b10101111001101 | 0b11101111001101 | 0b10011111001101 | 0b11011111001101 | 0b10111111001101 | 0b11111111001101 | 0b10000000101101 | 0b11000000101101 | 0b10100000101101 | 0b11100000101101 | 0b10010000101101 | 0b11010000101101 | 0b10110000101101 | 0b11110000101101 | 0b10001000101101 | 0b11001000101101 | 0b10101000101101 | 0b11101000101101 | 0b10011000101101 | 0b11011000101101 | 0b10111000101101 | 0b11111000101101 | 0b10000100101101 | 0b11000100101101 | 0b10100100101101 | 0b11100100101101 | 0b10010100101101 | 0b11010100101101 | 0b10110100101101 | 0b11110100101101 | 0b10001100101101 | 0b11001100101101 | 0b10101100101101 | 0b11101100101101 | 0b10011100101101 | 0b11011100101101 | 0b10111100101101 | 0b11111100101101 | 0b10000010101101 | 0b11000010101101 | 0b10100010101101 | 0b11100010101101 | 0b10010010101101 | 0b11010010101101 | 0b10110010101101 | 0b11110010101101 | 0b10001010101101 | 0b11001010101101 | 0b10101010101101 | 0b11101010101101 | 0b10011010101101 | 0b11011010101101 | 0b10111010101101 | 0b11111010101101 | 0b10000110101101 | 0b11000110101101 | 0b10100110101101 | 0b11100110101101 | 0b10010110101101 | 0b11010110101101 | 0b10110110101101 | 0b11110110101101 | 0b10001110101101 | 0b11001110101101 | 0b10101110101101 | 0b11101110101101 | 0b10011110101101 | 0b11011110101101 | 0b10111110101101 | 0b11111110101101 | 0b10000001101101 | 0b11000001101101 | 0b10100001101101 | 0b11100001101101 | 0b10010001101101 | 0b11010001101101 | 0b10110001101101 | 0b11110001101101 | 0b10001001101101 | 0b11001001101101 | 0b10101001101101 | 0b11101001101101 | 0b10011001101101 | 0b11011001101101 | 0b10111001101101 | 0b11111001101101 | 0b10000101101101 | 0b11000101101101 | 0b10100101101101 | 0b11100101101101 | 0b10010101101101 | 0b11010101101101 | 0b10110101101101 | 0b11110101101101 | 0b10001101101101 | 0b11001101101101 | 0b10101101101101 | 0b11101101101101 | 0b10011101101101 | 0b11011101101101 | 0b10111101101101 | 0b11111101101101 | 0b10000011101101 | 0b11000011101101 | 0b10100011101101 | 0b11100011101101 | 0b10010011101101 | 0b11010011101101 | 0b10110011101101 | 0b11110011101101 | 0b10001011101101 | 0b11001011101101 | 0b10101011101101 | 0b11101011101101 | 0b10011011101101 | 0b11011011101101 | 0b10111011101101 | 0b11111011101101 | 0b10000111101101 | 0b11000111101101 | 0b10100111101101 | 0b11100111101101 | 0b10010111101101 | 0b11010111101101 | 0b10110111101101 | 0b11110111101101 | 0b10001111101101 | 0b11001111101101 | 0b10101111101101 | 0b11101111101101 | 0b10011111101101 | 0b11011111101101 | 0b10111111101101 | 0b11111111101101 | 0b10000000011101 | 0b11000000011101 | 0b10100000011101 | 0b11100000011101 | 0b10010000011101 | 0b11010000011101 | 0b10110000011101 | 0b11110000011101 | 0b10001000011101 | 0b11001000011101 | 0b10101000011101 | 0b11101000011101 | 0b10011000011101 | 0b11011000011101 | 0b10111000011101 | 0b11111000011101 | 0b10000100011101 | 0b11000100011101 | 0b10100100011101 | 0b11100100011101 | 0b10010100011101 | 0b11010100011101 | 0b10110100011101 | 0b11110100011101 | 0b10001100011101 | 0b11001100011101 | 0b10101100011101 | 0b11101100011101 | 0b10011100011101 | 0b11011100011101 | 0b10111100011101 | 0b11111100011101 | 0b10000010011101 | 0b11000010011101 | 0b10100010011101 | 0b11100010011101 | 0b10010010011101 | 0b11010010011101 | 0b10110010011101 | 0b11110010011101 | 0b10001010011101 | 0b11001010011101 | 0b10101010011101 | 0b11101010011101 | 0b10011010011101 | 0b11011010011101 | 0b10111010011101 | 0b11111010011101 | 0b10000110011101 | 0b11000110011101 | 0b10100110011101 | 0b11100110011101 | 0b10010110011101 | 0b11010110011101 | 0b10110110011101 | 0b11110110011101 | 0b10001110011101 | 0b11001110011101 | 0b10101110011101 | 0b11101110011101 | 0b10011110011101 | 0b11011110011101 | 0b10111110011101 | 0b11111110011101 | 0b10000001011101 | 0b11000001011101 | 0b10100001011101 | 0b11100001011101 | 0b10010001011101 | 0b11010001011101 | 0b10110001011101 | 0b11110001011101 | 0b10001001011101 | 0b11001001011101 | 0b10101001011101 | 0b11101001011101 | 0b10011001011101 | 0b11011001011101 | 0b10111001011101 | 0b11111001011101 | 0b10000101011101 | 0b11000101011101 | 0b10100101011101 | 0b11100101011101 | 0b10010101011101 | 0b11010101011101 | 0b10110101011101 | 0b11110101011101 | 0b10001101011101 | 0b11001101011101 | 0b10101101011101 | 0b11101101011101 | 0b10011101011101 | 0b11011101011101 | 0b10111101011101 | 0b11111101011101 | 0b10000011011101 | 0b11000011011101 | 0b10100011011101 | 0b11100011011101 | 0b10010011011101 | 0b11010011011101 | 0b10110011011101 | 0b11110011011101 | 0b10001011011101 | 0b11001011011101 | 0b10101011011101 | 0b11101011011101 | 0b10011011011101 | 0b11011011011101 | 0b10111011011101 | 0b11111011011101 | 0b10000111011101 | 0b11000111011101 | 0b10100111011101 | 0b11100111011101 | 0b10010111011101 | 0b11010111011101 | 0b10110111011101 | 0b11110111011101 | 0b10001111011101 | 0b11001111011101 | 0b10101111011101 | 0b11101111011101 | 0b10011111011101 | 0b11011111011101 | 0b10111111011101 | 0b11111111011101 | 0b10000000111101 | 0b11000000111101 | 0b10100000111101 | 0b11100000111101 | 0b10010000111101 | 0b11010000111101 | 0b10110000111101 | 0b11110000111101 | 0b10001000111101 | 0b11001000111101 | 0b10101000111101 | 0b11101000111101 | 0b10011000111101 | 0b11011000111101 | 0b10111000111101 | 0b11111000111101 | 0b10000100111101 | 0b11000100111101 | 0b10100100111101 | 0b11100100111101 | 0b10010100111101 | 0b11010100111101 | 0b10110100111101 | 0b11110100111101 | 0b10001100111101 | 0b11001100111101 | 0b10101100111101 | 0b11101100111101 | 0b10011100111101 | 0b11011100111101 | 0b10111100111101 | 0b11111100111101 | 0b10000010111101 | 0b11000010111101 | 0b10100010111101 | 0b11100010111101 | 0b10010010111101 | 0b11010010111101 | 0b10110010111101 | 0b11110010111101 | 0b10001010111101 | 0b11001010111101 | 0b10101010111101 | 0b11101010111101 | 0b10011010111101 | 0b11011010111101 | 0b10111010111101 | 0b11111010111101 | 0b10000110111101 | 0b11000110111101 | 0b10100110111101 | 0b11100110111101 | 0b10010110111101 | 0b11010110111101 | 0b10110110111101 | 0b11110110111101 | 0b10001110111101 | 0b11001110111101 | 0b10101110111101 | 0b11101110111101 | 0b10011110111101 | 0b11011110111101 | 0b10111110111101 | 0b11111110111101 | 0b10000001111101 | 0b11000001111101 | 0b10100001111101 | 0b11100001111101 | 0b10010001111101 | 0b11010001111101 | 0b10110001111101 | 0b11110001111101 | 0b10001001111101 | 0b11001001111101 | 0b10101001111101 | 0b11101001111101 | 0b10011001111101 | 0b11011001111101 | 0b10111001111101 | 0b11111001111101 | 0b10000101111101 | 0b11000101111101 | 0b10100101111101 | 0b11100101111101 | 0b10010101111101 | 0b11010101111101 | 0b10110101111101 | 0b11110101111101 | 0b10001101111101 | 0b11001101111101 | 0b10101101111101 | 0b11101101111101 | 0b10011101111101 | 0b11011101111101 | 0b10111101111101 | 0b11111101111101 | 0b10000011111101 | 0b11000011111101 | 0b10100011111101 | 0b11100011111101 | 0b10010011111101 | 0b11010011111101 | 0b10110011111101 | 0b11110011111101 | 0b10001011111101 | 0b11001011111101 | 0b10101011111101 | 0b11101011111101 | 0b10011011111101 | 0b11011011111101 | 0b10111011111101 | 0b11111011111101 | 0b10000111111101 | 0b11000111111101 | 0b10100111111101 | 0b11100111111101 | 0b10010111111101 | 0b11010111111101 | 0b10110111111101 | 0b11110111111101 | 0b10001111111101 | 0b11001111111101 | 0b10101111111101 | 0b11101111111101 | 0b10011111111101 | 0b11011111111101 | 0b10111111111101 | 0b11111111111101 | 0b10000000000011 | 0b11000000000011 | 0b10100000000011 | 0b11100000000011 | 0b10010000000011 | 0b11010000000011 | 0b10110000000011 | 0b11110000000011 | 0b10001000000011 | 0b11001000000011 | 0b10101000000011 | 0b11101000000011 | 0b10011000000011 | 0b11011000000011 | 0b10111000000011 | 0b11111000000011 | 0b10000100000011 | 0b11000100000011 | 0b10100100000011 | 0b11100100000011 | 0b10010100000011 | 0b11010100000011 | 0b10110100000011 | 0b11110100000011 | 0b10001100000011 | 0b11001100000011 | 0b10101100000011 | 0b11101100000011 | 0b10011100000011 | 0b11011100000011 | 0b10111100000011 | 0b11111100000011 | 0b10000010000011 | 0b11000010000011 | 0b10100010000011 | 0b11100010000011 | 0b10010010000011 | 0b11010010000011 | 0b10110010000011 | 0b11110010000011 | 0b10001010000011 | 0b11001010000011 | 0b10101010000011 | 0b11101010000011 | 0b10011010000011 | 0b11011010000011 | 0b10111010000011 | 0b11111010000011 | 0b10000110000011 | 0b11000110000011 | 0b10100110000011 | 0b11100110000011 | 0b10010110000011 | 0b11010110000011 | 0b10110110000011 | 0b11110110000011 | 0b10001110000011 | 0b11001110000011 | 0b10101110000011 | 0b11101110000011 | 0b10011110000011 | 0b11011110000011 | 0b10111110000011 | 0b11111110000011 | 0b10000001000011 | 0b11000001000011 | 0b10100001000011 | 0b11100001000011 | 0b10010001000011 | 0b11010001000011 | 0b10110001000011 | 0b11110001000011 | 0b10001001000011 | 0b11001001000011 | 0b10101001000011 | 0b11101001000011 | 0b10011001000011 | 0b11011001000011 | 0b10111001000011 | 0b11111001000011 | 0b10000101000011 | 0b11000101000011 | 0b10100101000011 | 0b11100101000011 | 0b10010101000011 | 0b11010101000011 | 0b10110101000011 | 0b11110101000011 | 0b10001101000011 | 0b11001101000011 | 0b10101101000011 | 0b11101101000011 | 0b10011101000011 | 0b11011101000011 | 0b10111101000011 | 0b11111101000011 | 0b10000011000011 | 0b11000011000011 | 0b10100011000011 | 0b11100011000011 | 0b10010011000011 | 0b11010011000011 | 0b10110011000011 | 0b11110011000011 | 0b10001011000011 | 0b11001011000011 | 0b10101011000011 | 0b11101011000011 | 0b10011011000011 | 0b11011011000011 | 0b10111011000011 | 0b11111011000011 | 0b10000111000011 | 0b11000111000011 | 0b10100111000011 | 0b11100111000011 | 0b10010111000011 | 0b11010111000011 | 0b10110111000011 | 0b11110111000011 | 0b10001111000011 | 0b11001111000011 | 0b10101111000011 | 0b11101111000011 | 0b10011111000011 | 0b11011111000011 | 0b10111111000011 | 0b11111111000011 | 0b10000000100011 | 0b11000000100011 | 0b10100000100011 | 0b11100000100011 | 0b10010000100011 | 0b11010000100011 | 0b10110000100011 | 0b11110000100011 | 0b10001000100011 | 0b11001000100011 | 0b10101000100011 | 0b11101000100011 | 0b10011000100011 | 0b11011000100011 | 0b10111000100011 | 0b11111000100011 | 0b10000100100011 | 0b11000100100011 | 0b10100100100011 | 0b11100100100011 | 0b10010100100011 | 0b11010100100011 | 0b10110100100011 | 0b11110100100011 | 0b10001100100011 | 0b11001100100011 | 0b10101100100011 | 0b11101100100011 | 0b10011100100011 | 0b11011100100011 | 0b10111100100011 | 0b11111100100011 | 0b10000010100011 | 0b11000010100011 | 0b10100010100011 | 0b11100010100011 | 0b10010010100011 | 0b11010010100011 | 0b10110010100011 | 0b11110010100011 | 0b10001010100011 | 0b11001010100011 | 0b10101010100011 | 0b11101010100011 | 0b10011010100011 | 0b11011010100011 | 0b10111010100011 | 0b11111010100011 | 0b10000110100011 | 0b11000110100011 | 0b10100110100011 | 0b11100110100011 | 0b10010110100011 | 0b11010110100011 | 0b10110110100011 | 0b11110110100011 | 0b10001110100011 | 0b11001110100011 | 0b10101110100011 | 0b11101110100011 | 0b10011110100011 | 0b11011110100011 | 0b10111110100011 | 0b11111110100011 | 0b10000001100011 | 0b11000001100011 | 0b10100001100011 | 0b11100001100011 | 0b10010001100011 | 0b11010001100011 | 0b10110001100011 | 0b11110001100011 | 0b10001001100011 | 0b11001001100011 | 0b10101001100011 | 0b11101001100011 | 0b10011001100011 | 0b11011001100011 | 0b10111001100011 | 0b11111001100011 | 0b10000101100011 | 0b11000101100011 | 0b10100101100011 | 0b11100101100011 | 0b10010101100011 | 0b11010101100011 | 0b10110101100011 | 0b11110101100011 | 0b10001101100011 | 0b11001101100011 | 0b10101101100011 | 0b11101101100011 | 0b10011101100011 | 0b11011101100011 | 0b10111101100011 | 0b11111101100011 | 0b10000011100011 | 0b11000011100011 | 0b10100011100011 | 0b11100011100011 | 0b10010011100011 | 0b11010011100011 | 0b10110011100011 | 0b11110011100011 | 0b10001011100011 | 0b11001011100011 | 0b10101011100011 | 0b11101011100011 | 0b10011011100011 | 0b11011011100011 | 0b10111011100011 | 0b11111011100011 | 0b10000111100011 | 0b11000111100011 | 0b10100111100011 | 0b11100111100011 | 0b10010111100011 | 0b11010111100011 | 0b10110111100011 | 0b11110111100011 | 0b10001111100011 | 0b11001111100011 | 0b10101111100011 | 0b11101111100011 | 0b10011111100011 | 0b11011111100011 | 0b10111111100011 | 0b11111111100011 | 0b10000000010011 | 0b11000000010011 | 0b10100000010011 | 0b11100000010011 | 0b10010000010011 | 0b11010000010011 | 0b10110000010011 | 0b11110000010011 | 0b10001000010011 | 0b11001000010011 | 0b10101000010011 | 0b11101000010011 | 0b10011000010011 | 0b11011000010011 | 0b10111000010011 | 0b11111000010011 | 0b10000100010011 | 0b11000100010011 | 0b10100100010011 | 0b11100100010011 | 0b10010100010011 | 0b11010100010011 | 0b10110100010011 | 0b11110100010011 | 0b10001100010011 | 0b11001100010011 | 0b10101100010011 | 0b11101100010011 | 0b10011100010011 | 0b11011100010011 | 0b10111100010011 | 0b11111100010011 | 0b10000010010011 | 0b11000010010011 | 0b10100010010011 | 0b11100010010011 | 0b10010010010011 | 0b11010010010011 | 0b10110010010011 | 0b11110010010011 | 0b10001010010011 | 0b11001010010011 | 0b10101010010011 | 0b11101010010011 | 0b10011010010011 | 0b11011010010011 | 0b10111010010011 | 0b11111010010011 | 0b10000110010011 | 0b11000110010011 | 0b10100110010011 | 0b11100110010011 | 0b10010110010011 | 0b11010110010011 | 0b10110110010011 | 0b11110110010011 | 0b10001110010011 | 0b11001110010011 | 0b10101110010011 | 0b11101110010011 | 0b10011110010011 | 0b11011110010011 | 0b10111110010011 | 0b11111110010011 | 0b10000001010011 | 0b11000001010011 | 0b10100001010011 | 0b11100001010011 | 0b10010001010011 | 0b11010001010011 | 0b10110001010011 | 0b11110001010011 | 0b10001001010011 | 0b11001001010011 | 0b10101001010011 | 0b11101001010011 | 0b10011001010011 | 0b11011001010011 | 0b10111001010011 | 0b11111001010011 | 0b10000101010011 | 0b11000101010011 | 0b10100101010011 | 0b11100101010011 | 0b10010101010011 | 0b11010101010011 | 0b10110101010011 | 0b11110101010011 | 0b10001101010011 | 0b11001101010011 | 0b10101101010011 | 0b11101101010011 | 0b10011101010011 | 0b11011101010011 | 0b10111101010011 | 0b11111101010011 | 0b10000011010011 | 0b11000011010011 | 0b10100011010011 | 0b11100011010011 | 0b10010011010011 | 0b11010011010011 | 0b10110011010011 | 0b11110011010011 | 0b10001011010011 | 0b11001011010011 | 0b10101011010011 | 0b11101011010011 | 0b10011011010011 | 0b11011011010011 | 0b10111011010011 | 0b11111011010011 | 0b10000111010011 | 0b11000111010011 | 0b10100111010011 | 0b11100111010011 | 0b10010111010011 | 0b11010111010011 | 0b10110111010011 | 0b11110111010011 | 0b10001111010011 | 0b11001111010011 | 0b10101111010011 | 0b11101111010011 | 0b10011111010011 | 0b11011111010011 | 0b10111111010011 | 0b11111111010011 | 0b10000000110011 | 0b11000000110011 | 0b10100000110011 | 0b11100000110011 | 0b10010000110011 | 0b11010000110011 | 0b10110000110011 | 0b11110000110011 | 0b10001000110011 | 0b11001000110011 | 0b10101000110011 | 0b11101000110011 | 0b10011000110011 | 0b11011000110011 | 0b10111000110011 | 0b11111000110011 | 0b10000100110011 | 0b11000100110011 | 0b10100100110011 | 0b11100100110011 | 0b10010100110011 | 0b11010100110011 | 0b10110100110011 | 0b11110100110011 | 0b10001100110011 | 0b11001100110011 | 0b10101100110011 | 0b11101100110011 | 0b10011100110011 | 0b11011100110011 | 0b10111100110011 | 0b11111100110011 | 0b10000010110011 | 0b11000010110011 | 0b10100010110011 | 0b11100010110011 | 0b10010010110011 | 0b11010010110011 | 0b10110010110011 | 0b11110010110011 | 0b10001010110011 | 0b11001010110011 | 0b10101010110011 | 0b11101010110011 | 0b10011010110011 | 0b11011010110011 | 0b10111010110011 | 0b11111010110011 | 0b10000110110011 | 0b11000110110011 | 0b10100110110011 | 0b11100110110011 | 0b10010110110011 | 0b11010110110011 | 0b10110110110011 | 0b11110110110011 | 0b10001110110011 | 0b11001110110011 | 0b10101110110011 | 0b11101110110011 | 0b10011110110011 | 0b11011110110011 | 0b10111110110011 | 0b11111110110011 | 0b10000001110011 | 0b11000001110011 | 0b10100001110011 | 0b11100001110011 | 0b10010001110011 | 0b11010001110011 | 0b10110001110011 | 0b11110001110011 | 0b10001001110011 | 0b11001001110011 | 0b10101001110011 | 0b11101001110011 | 0b10011001110011 | 0b11011001110011 | 0b10111001110011 | 0b11111001110011 | 0b10000101110011 | 0b11000101110011 | 0b10100101110011 | 0b11100101110011 | 0b10010101110011 | 0b11010101110011 | 0b10110101110011 | 0b11110101110011 | 0b10001101110011 | 0b11001101110011 | 0b10101101110011 | 0b11101101110011 | 0b10011101110011 | 0b11011101110011 | 0b10111101110011 | 0b11111101110011 | 0b10000011110011 | 0b11000011110011 | 0b10100011110011 | 0b11100011110011 | 0b10010011110011 | 0b11010011110011 | 0b10110011110011 | 0b11110011110011 | 0b10001011110011 | 0b11001011110011 | 0b10101011110011 | 0b11101011110011 | 0b10011011110011 | 0b11011011110011 | 0b10111011110011 | 0b11111011110011 | 0b10000111110011 | 0b11000111110011 | 0b10100111110011 | 0b11100111110011 | 0b10010111110011 | 0b11010111110011 | 0b10110111110011 | 0b11110111110011 | 0b10001111110011 | 0b11001111110011 | 0b10101111110011 | 0b11101111110011 | 0b10011111110011 | 0b11011111110011 | 0b10111111110011 | 0b11111111110011 | 0b10000000001011 | 0b11000000001011 | 0b10100000001011 | 0b11100000001011 | 0b10010000001011 | 0b11010000001011 | 0b10110000001011 | 0b11110000001011 | 0b10001000001011 | 0b11001000001011 | 0b10101000001011 | 0b11101000001011 | 0b10011000001011 | 0b11011000001011 | 0b10111000001011 | 0b11111000001011 | 0b10000100001011 | 0b11000100001011 | 0b10100100001011 | 0b11100100001011 | 0b10010100001011 | 0b11010100001011 | 0b10110100001011 | 0b11110100001011 | 0b10001100001011 | 0b11001100001011 | 0b10101100001011 | 0b11101100001011 | 0b10011100001011 | 0b11011100001011 | 0b10111100001011 | 0b11111100001011 | 0b10000010001011 | 0b11000010001011 | 0b10100010001011 | 0b11100010001011 | 0b10010010001011 | 0b11010010001011 | 0b10110010001011 | 0b11110010001011 | 0b10001010001011 | 0b11001010001011 | 0b10101010001011 | 0b11101010001011 | 0b10011010001011 | 0b11011010001011 | 0b10111010001011 | 0b11111010001011 | 0b10000110001011 | 0b11000110001011 | 0b10100110001011 | 0b11100110001011 | 0b10010110001011 | 0b11010110001011 | 0b10110110001011 | 0b11110110001011 | 0b10001110001011 | 0b11001110001011 | 0b10101110001011 | 0b11101110001011 | 0b10011110001011 | 0b11011110001011 | 0b10111110001011 | 0b11111110001011 | 0b10000001001011 | 0b11000001001011 | 0b10100001001011 | 0b11100001001011 | 0b10010001001011 | 0b11010001001011 | 0b10110001001011 | 0b11110001001011 | 0b10001001001011 | 0b11001001001011 | 0b10101001001011 | 0b11101001001011 | 0b10011001001011 | 0b11011001001011 | 0b10111001001011 | 0b11111001001011 | 0b10000101001011 | 0b11000101001011 | 0b10100101001011 | 0b11100101001011 | 0b10010101001011 | 0b11010101001011 | 0b10110101001011 | 0b11110101001011 | 0b10001101001011 | 0b11001101001011 | 0b10101101001011 | 0b11101101001011 | 0b10011101001011 | 0b11011101001011 | 0b10111101001011 | 0b11111101001011 | 0b10000011001011 | 0b11000011001011 | 0b10100011001011 | 0b11100011001011 | 0b10010011001011 | 0b11010011001011 | 0b10110011001011 | 0b11110011001011 | 0b10001011001011 | 0b11001011001011 | 0b10101011001011 | 0b11101011001011 | 0b10011011001011 | 0b11011011001011 | 0b10111011001011 | 0b11111011001011 | 0b10000111001011 | 0b11000111001011 | 0b10100111001011 | 0b11100111001011 | 0b10010111001011 | 0b11010111001011 | 0b10110111001011 | 0b11110111001011 | 0b10001111001011 | 0b11001111001011 | 0b10101111001011 | 0b11101111001011 | 0b10011111001011 | 0b11011111001011 | 0b10111111001011 | 0b11111111001011 | 0b10000000101011 | 0b11000000101011 | 0b10100000101011 | 0b11100000101011 | 0b10010000101011 | 0b11010000101011 | 0b10110000101011 | 0b11110000101011 | 0b10001000101011 | 0b11001000101011 | 0b10101000101011 | 0b11101000101011 | 0b10011000101011 | 0b11011000101011 | 0b10111000101011 | 0b11111000101011 | 0b10000100101011 | 0b11000100101011 | 0b10100100101011 | 0b11100100101011 | 0b10010100101011 | 0b11010100101011 | 0b10110100101011 | 0b11110100101011 | 0b10001100101011 | 0b11001100101011 | 0b10101100101011 | 0b11101100101011 | 0b10011100101011 | 0b11011100101011 | 0b10111100101011 | 0b11111100101011 | 0b10000010101011 | 0b11000010101011 | 0b10100010101011 | 0b11100010101011 | 0b10010010101011 | 0b11010010101011 | 0b10110010101011 | 0b11110010101011 | 0b10001010101011 | 0b11001010101011 | 0b10101010101011 | 0b11101010101011 | 0b10011010101011 | 0b11011010101011 | 0b10111010101011 | 0b11111010101011 | 0b10000110101011 | 0b11000110101011 | 0b10100110101011 | 0b11100110101011 | 0b10010110101011 | 0b11010110101011 | 0b10110110101011 | 0b11110110101011 | 0b10001110101011 | 0b11001110101011 | 0b10101110101011 | 0b11101110101011 | 0b10011110101011 | 0b11011110101011 | 0b10111110101011 | 0b11111110101011 | 0b10000001101011 | 0b11000001101011 | 0b10100001101011 | 0b11100001101011 | 0b10010001101011 | 0b11010001101011 | 0b10110001101011 | 0b11110001101011 | 0b10001001101011 | 0b11001001101011 | 0b10101001101011 | 0b11101001101011 | 0b10011001101011 | 0b11011001101011 | 0b10111001101011 | 0b11111001101011 | 0b10000101101011 | 0b11000101101011 | 0b10100101101011 | 0b11100101101011 | 0b10010101101011 | 0b11010101101011 | 0b10110101101011 | 0b11110101101011 | 0b10001101101011 | 0b11001101101011 | 0b10101101101011 | 0b11101101101011 | 0b10011101101011 | 0b11011101101011 | 0b10111101101011 | 0b11111101101011 | 0b10000011101011 | 0b11000011101011 | 0b10100011101011 | 0b11100011101011 | 0b10010011101011 | 0b11010011101011 | 0b10110011101011 | 0b11110011101011 | 0b10001011101011 | 0b11001011101011 | 0b10101011101011 | 0b11101011101011 | 0b10011011101011 | 0b11011011101011 | 0b10111011101011 | 0b11111011101011 | 0b10000111101011 | 0b11000111101011 | 0b10100111101011 | 0b11100111101011 | 0b10010111101011 | 0b11010111101011 | 0b10110111101011 | 0b11110111101011 | 0b10001111101011 | 0b11001111101011 | 0b10101111101011 | 0b11101111101011 | 0b10011111101011 | 0b11011111101011 | 0b10111111101011 | 0b11111111101011 | 0b10000000011011 | 0b11000000011011 | 0b10100000011011 | 0b11100000011011 | 0b10010000011011 | 0b11010000011011 | 0b10110000011011 | 0b11110000011011 | 0b10001000011011 | 0b11001000011011 | 0b10101000011011 | 0b11101000011011 | 0b10011000011011 | 0b11011000011011 | 0b10111000011011 | 0b11111000011011 | 0b10000100011011 | 0b11000100011011 | 0b10100100011011 | 0b11100100011011 | 0b10010100011011 | 0b11010100011011 | 0b10110100011011 | 0b11110100011011 | 0b10001100011011 | 0b11001100011011 | 0b10101100011011 | 0b11101100011011 | 0b10011100011011 | 0b11011100011011 | 0b10111100011011 | 0b11111100011011 | 0b10000010011011 | 0b11000010011011 | 0b10100010011011 | 0b11100010011011 | 0b10010010011011 | 0b11010010011011 | 0b10110010011011 | 0b11110010011011 | 0b10001010011011 | 0b11001010011011 | 0b10101010011011 | 0b11101010011011 | 0b10011010011011 | 0b11011010011011 | 0b10111010011011 | 0b11111010011011 | 0b10000110011011 | 0b11000110011011 | 0b10100110011011 | 0b11100110011011 | 0b10010110011011 | 0b11010110011011 | 0b10110110011011 | 0b11110110011011 | 0b10001110011011 | 0b11001110011011 | 0b10101110011011 | 0b11101110011011 | 0b10011110011011 | 0b11011110011011 | 0b10111110011011 | 0b11111110011011 | 0b10000001011011 | 0b11000001011011 | 0b10100001011011 | 0b11100001011011 | 0b10010001011011 | 0b11010001011011 | 0b10110001011011 | 0b11110001011011 | 0b10001001011011 | 0b11001001011011 | 0b10101001011011 | 0b11101001011011 | 0b10011001011011 | 0b11011001011011 | 0b10111001011011 | 0b11111001011011 | 0b10000101011011 | 0b11000101011011 | 0b10100101011011 | 0b11100101011011 | 0b10010101011011 | 0b11010101011011 | 0b10110101011011 | 0b11110101011011 | 0b10001101011011 | 0b11001101011011 | 0b10101101011011 | 0b11101101011011 | 0b10011101011011 | 0b11011101011011 | 0b10111101011011 | 0b11111101011011 | 0b10000011011011 | 0b11000011011011 | 0b10100011011011 | 0b11100011011011 | 0b10010011011011 | 0b11010011011011 | 0b10110011011011 | 0b11110011011011 | 0b10001011011011 | 0b11001011011011 | 0b10101011011011 | 0b11101011011011 | 0b10011011011011 | 0b11011011011011 | 0b10111011011011 | 0b11111011011011 | 0b10000111011011 | 0b11000111011011 | 0b10100111011011 | 0b11100111011011 | 0b10010111011011 | 0b11010111011011 | 0b10110111011011 | 0b11110111011011 | 0b10001111011011 | 0b11001111011011 | 0b10101111011011 | 0b11101111011011 | 0b10011111011011 | 0b11011111011011 | 0b10111111011011 | 0b11111111011011 | 0b10000000111011 | 0b11000000111011 | 0b10100000111011 | 0b11100000111011 | 0b10010000111011 | 0b11010000111011 | 0b10110000111011 | 0b11110000111011 | 0b10001000111011 | 0b11001000111011 | 0b10101000111011 | 0b11101000111011 | 0b10011000111011 | 0b11011000111011 | 0b10111000111011 | 0b11111000111011 | 0b10000100111011 | 0b11000100111011 | 0b10100100111011 | 0b11100100111011 | 0b10010100111011 | 0b11010100111011 | 0b10110100111011 | 0b11110100111011 | 0b10001100111011 | 0b11001100111011 | 0b10101100111011 | 0b11101100111011 | 0b10011100111011 | 0b11011100111011 | 0b10111100111011 | 0b11111100111011 | 0b10000010111011 | 0b11000010111011 | 0b10100010111011 | 0b11100010111011 | 0b10010010111011 | 0b11010010111011 | 0b10110010111011 | 0b11110010111011 | 0b10001010111011 | 0b11001010111011 | 0b10101010111011 | 0b11101010111011 | 0b10011010111011 | 0b11011010111011 | 0b10111010111011 | 0b11111010111011 | 0b10000110111011 | 0b11000110111011 | 0b10100110111011 | 0b11100110111011 | 0b10010110111011 | 0b11010110111011 | 0b10110110111011 | 0b11110110111011 | 0b10001110111011 | 0b11001110111011 | 0b10101110111011 | 0b11101110111011 | 0b10011110111011 | 0b11011110111011 | 0b10111110111011 | 0b11111110111011 | 0b10000001111011 | 0b11000001111011 | 0b10100001111011 | 0b11100001111011 | 0b10010001111011 | 0b11010001111011 | 0b10110001111011 | 0b11110001111011 | 0b10001001111011 | 0b11001001111011 | 0b10101001111011 | 0b11101001111011 | 0b10011001111011 | 0b11011001111011 | 0b10111001111011 | 0b11111001111011 | 0b10000101111011 | 0b11000101111011 | 0b10100101111011 | 0b11100101111011 | 0b10010101111011 | 0b11010101111011 | 0b10110101111011 | 0b11110101111011 | 0b10001101111011 | 0b11001101111011 | 0b10101101111011 | 0b11101101111011 | 0b10011101111011 | 0b11011101111011 | 0b10111101111011 | 0b11111101111011 | 0b10000011111011 | 0b11000011111011 | 0b10100011111011 | 0b11100011111011 | 0b10010011111011 | 0b11010011111011 | 0b10110011111011 | 0b11110011111011 | 0b10001011111011 | 0b11001011111011 | 0b10101011111011 | 0b11101011111011 | 0b10011011111011 | 0b11011011111011 | 0b10111011111011 | 0b11111011111011 | 0b10000111111011 | 0b11000111111011 | 0b10100111111011 | 0b11100111111011 | 0b10010111111011 | 0b11010111111011 | 0b10110111111011 | 0b11110111111011 | 0b10001111111011 | 0b11001111111011 | 0b10101111111011 | 0b11101111111011 | 0b10011111111011 | 0b11011111111011 | 0b10111111111011 | 0b11111111111011 | 0b10000000000111 | 0b11000000000111 | 0b10100000000111 | 0b11100000000111 | 0b10010000000111 | 0b11010000000111 | 0b10110000000111 | 0b11110000000111 | 0b10001000000111 | 0b11001000000111 | 0b10101000000111 | 0b11101000000111 | 0b10011000000111 | 0b11011000000111 | 0b10111000000111 | 0b11111000000111 | 0b10000100000111 | 0b11000100000111 | 0b10100100000111 | 0b11100100000111 | 0b10010100000111 | 0b11010100000111 | 0b10110100000111 | 0b11110100000111 | 0b10001100000111 | 0b11001100000111 | 0b10101100000111 | 0b11101100000111 | 0b10011100000111 | 0b11011100000111 | 0b10111100000111 | 0b11111100000111 | 0b10000010000111 | 0b11000010000111 | 0b10100010000111 | 0b11100010000111 | 0b10010010000111 | 0b11010010000111 | 0b10110010000111 | 0b11110010000111 | 0b10001010000111 | 0b11001010000111 | 0b10101010000111 | 0b11101010000111 | 0b10011010000111 | 0b11011010000111 | 0b10111010000111 | 0b11111010000111 | 0b10000110000111 | 0b11000110000111 | 0b10100110000111 | 0b11100110000111 | 0b10010110000111 | 0b11010110000111 | 0b10110110000111 | 0b11110110000111 | 0b10001110000111 | 0b11001110000111 | 0b10101110000111 | 0b11101110000111 | 0b10011110000111 | 0b11011110000111 | 0b10111110000111 | 0b11111110000111 | 0b10000001000111 | 0b11000001000111 | 0b10100001000111 | 0b11100001000111 | 0b10010001000111 | 0b11010001000111 | 0b10110001000111 | 0b11110001000111 | 0b10001001000111 | 0b11001001000111 | 0b10101001000111 | 0b11101001000111 | 0b10011001000111 | 0b11011001000111 | 0b10111001000111 | 0b11111001000111 | 0b10000101000111 | 0b11000101000111 | 0b10100101000111 | 0b11100101000111 | 0b10010101000111 | 0b11010101000111 | 0b10110101000111 | 0b11110101000111 | 0b10001101000111 | 0b11001101000111 | 0b10101101000111 | 0b11101101000111 | 0b10011101000111 | 0b11011101000111 | 0b10111101000111 | 0b11111101000111 | 0b10000011000111 | 0b11000011000111 | 0b10100011000111 | 0b11100011000111 | 0b10010011000111 | 0b11010011000111 | 0b10110011000111 | 0b11110011000111 | 0b10001011000111 | 0b11001011000111 | 0b10101011000111 | 0b11101011000111 | 0b10011011000111 | 0b11011011000111 | 0b10111011000111 | 0b11111011000111 | 0b10000111000111 | 0b11000111000111 | 0b10100111000111 | 0b11100111000111 | 0b10010111000111 | 0b11010111000111 | 0b10110111000111 | 0b11110111000111 | 0b10001111000111 | 0b11001111000111 | 0b10101111000111 | 0b11101111000111 | 0b10011111000111 | 0b11011111000111 | 0b10111111000111 | 0b11111111000111 | 0b10000000100111 | 0b11000000100111 | 0b10100000100111 | 0b11100000100111 | 0b10010000100111 | 0b11010000100111 | 0b10110000100111 | 0b11110000100111 | 0b10001000100111 | 0b11001000100111 | 0b10101000100111 | 0b11101000100111 | 0b10011000100111 | 0b11011000100111 | 0b10111000100111 | 0b11111000100111 | 0b10000100100111 | 0b11000100100111 | 0b10100100100111 | 0b11100100100111 | 0b10010100100111 | 0b11010100100111 | 0b10110100100111 | 0b11110100100111 | 0b10001100100111 | 0b11001100100111 | 0b10101100100111 | 0b11101100100111 | 0b10011100100111 | 0b11011100100111 | 0b10111100100111 | 0b11111100100111 | 0b10000010100111 | 0b11000010100111 | 0b10100010100111 | 0b11100010100111 | 0b10010010100111 | 0b11010010100111 | 0b10110010100111 | 0b11110010100111 | 0b10001010100111 | 0b11001010100111 | 0b10101010100111 | 0b11101010100111 | 0b10011010100111 | 0b11011010100111 | 0b10111010100111 | 0b11111010100111 | 0b10000110100111 | 0b11000110100111 | 0b10100110100111 | 0b11100110100111 | 0b10010110100111 | 0b11010110100111 | 0b10110110100111 | 0b11110110100111 | 0b10001110100111 | 0b11001110100111 | 0b10101110100111 | 0b11101110100111 | 0b10011110100111 | 0b11011110100111 | 0b10111110100111 | 0b11111110100111 | 0b10000001100111 | 0b11000001100111 | 0b10100001100111 | 0b11100001100111 | 0b10010001100111 | 0b11010001100111 | 0b10110001100111 | 0b11110001100111 | 0b10001001100111 | 0b11001001100111 | 0b10101001100111 | 0b11101001100111 | 0b10011001100111 | 0b11011001100111 | 0b10111001100111 | 0b11111001100111 | 0b10000101100111 | 0b11000101100111 | 0b10100101100111 | 0b11100101100111 | 0b10010101100111 | 0b11010101100111 | 0b10110101100111 | 0b11110101100111 | 0b10001101100111 | 0b11001101100111 | 0b10101101100111 | 0b11101101100111 | 0b10011101100111 | 0b11011101100111 | 0b10111101100111 | 0b11111101100111 | 0b10000011100111 | 0b11000011100111 | 0b10100011100111 | 0b11100011100111 | 0b10010011100111 | 0b11010011100111 | 0b10110011100111 | 0b11110011100111 | 0b10001011100111 | 0b11001011100111 | 0b10101011100111 | 0b11101011100111 | 0b10011011100111 | 0b11011011100111 | 0b10111011100111 | 0b11111011100111 | 0b10000111100111 | 0b11000111100111 | 0b10100111100111 | 0b11100111100111 | 0b10010111100111 | 0b11010111100111 | 0b10110111100111 | 0b11110111100111 | 0b10001111100111 | 0b11001111100111 | 0b10101111100111 | 0b11101111100111 | 0b10011111100111 | 0b11011111100111 | 0b10111111100111 | 0b11111111100111 | 0b10000000010111 | 0b11000000010111 | 0b10100000010111 | 0b11100000010111 | 0b10010000010111 | 0b11010000010111 | 0b10110000010111 | 0b11110000010111 | 0b10001000010111 | 0b11001000010111 | 0b10101000010111 | 0b11101000010111 | 0b10011000010111 | 0b11011000010111 | 0b10111000010111 | 0b11111000010111 | 0b10000100010111 | 0b11000100010111 | 0b10100100010111 | 0b11100100010111 | 0b10010100010111 | 0b11010100010111 | 0b10110100010111 | 0b11110100010111 | 0b10001100010111 | 0b11001100010111 | 0b10101100010111 | 0b11101100010111 | 0b10011100010111 | 0b11011100010111 | 0b10111100010111 | 0b11111100010111 | 0b10000010010111 | 0b11000010010111 | 0b10100010010111 | 0b11100010010111 | 0b10010010010111 | 0b11010010010111 | 0b10110010010111 | 0b11110010010111 | 0b10001010010111 | 0b11001010010111 | 0b10101010010111 | 0b11101010010111 | 0b10011010010111 | 0b11011010010111 | 0b10111010010111 | 0b11111010010111 | 0b10000110010111 | 0b11000110010111 | 0b10100110010111 | 0b11100110010111 | 0b10010110010111 | 0b11010110010111 | 0b10110110010111 | 0b11110110010111 | 0b10001110010111 | 0b11001110010111 | 0b10101110010111 | 0b11101110010111 | 0b10011110010111 | 0b11011110010111 | 0b10111110010111 | 0b11111110010111 | 0b10000001010111 | 0b11000001010111 | 0b10100001010111 | 0b11100001010111 | 0b10010001010111 | 0b11010001010111 | 0b10110001010111 | 0b11110001010111 | 0b10001001010111 | 0b11001001010111 | 0b10101001010111 | 0b11101001010111 | 0b10011001010111 | 0b11011001010111 | 0b10111001010111 | 0b11111001010111 | 0b10000101010111 | 0b11000101010111 | 0b10100101010111 | 0b11100101010111 | 0b10010101010111 | 0b11010101010111 | 0b10110101010111 | 0b11110101010111 | 0b10001101010111 | 0b11001101010111 | 0b10101101010111 | 0b11101101010111 | 0b10011101010111 | 0b11011101010111 | 0b10111101010111 | 0b11111101010111 | 0b10000011010111 | 0b11000011010111 | 0b10100011010111 | 0b11100011010111 | 0b10010011010111 | 0b11010011010111 | 0b10110011010111 | 0b11110011010111 | 0b10001011010111 | 0b11001011010111 | 0b10101011010111 | 0b11101011010111 | 0b10011011010111 | 0b11011011010111 | 0b10111011010111 | 0b11111011010111 | 0b10000111010111 | 0b11000111010111 | 0b10100111010111 | 0b11100111010111 | 0b10010111010111 | 0b11010111010111 | 0b10110111010111 | 0b11110111010111 | 0b10001111010111 | 0b11001111010111 | 0b10101111010111 | 0b11101111010111 | 0b10011111010111 | 0b11011111010111 | 0b10111111010111 | 0b11111111010111 | 0b10000000110111 | 0b11000000110111 | 0b10100000110111 | 0b11100000110111 | 0b10010000110111 | 0b11010000110111 | 0b10110000110111 | 0b11110000110111 | 0b10001000110111 | 0b11001000110111 | 0b10101000110111 | 0b11101000110111 | 0b10011000110111 | 0b11011000110111 | 0b10111000110111 | 0b11111000110111 | 0b10000100110111 | 0b11000100110111 | 0b10100100110111 | 0b11100100110111 | 0b10010100110111 | 0b11010100110111 | 0b10110100110111 | 0b11110100110111 | 0b10001100110111 | 0b11001100110111 | 0b10101100110111 | 0b11101100110111 | 0b10011100110111 | 0b11011100110111 | 0b10111100110111 | 0b11111100110111 | 0b10000010110111 | 0b11000010110111 | 0b10100010110111 | 0b11100010110111 | 0b10010010110111 | 0b11010010110111 | 0b10110010110111 | 0b11110010110111 | 0b10001010110111 | 0b11001010110111 | 0b10101010110111 | 0b11101010110111 | 0b10011010110111 | 0b11011010110111 | 0b10111010110111 | 0b11111010110111 | 0b10000110110111 | 0b11000110110111 | 0b10100110110111 | 0b11100110110111 | 0b10010110110111 | 0b11010110110111 | 0b10110110110111 | 0b11110110110111 | 0b10001110110111 | 0b11001110110111 | 0b10101110110111 | 0b11101110110111 | 0b10011110110111 | 0b11011110110111 | 0b10111110110111 | 0b11111110110111 | 0b10000001110111 | 0b11000001110111 | 0b10100001110111 | 0b11100001110111 | 0b10010001110111 | 0b11010001110111 | 0b10110001110111 | 0b11110001110111 | 0b10001001110111 | 0b11001001110111 | 0b10101001110111 | 0b11101001110111 | 0b10011001110111 | 0b11011001110111 | 0b10111001110111 | 0b11111001110111 | 0b10000101110111 | 0b11000101110111 | 0b10100101110111 | 0b11100101110111 | 0b10010101110111 | 0b11010101110111 | 0b10110101110111 | 0b11110101110111 | 0b10001101110111 | 0b11001101110111 | 0b10101101110111 | 0b11101101110111 | 0b10011101110111 | 0b11011101110111 | 0b10111101110111 | 0b11111101110111 | 0b10000011110111 | 0b11000011110111 | 0b10100011110111 | 0b11100011110111 | 0b10010011110111 | 0b11010011110111 | 0b10110011110111 | 0b11110011110111 | 0b10001011110111 | 0b11001011110111 | 0b10101011110111 | 0b11101011110111 | 0b10011011110111 | 0b11011011110111 | 0b10111011110111 | 0b11111011110111 | 0b10000111110111 | 0b11000111110111 | 0b10100111110111 | 0b11100111110111 | 0b10010111110111 | 0b11010111110111 | 0b10110111110111 | 0b11110111110111 | 0b10001111110111 | 0b11001111110111 | 0b10101111110111 | 0b11101111110111 | 0b10011111110111 | 0b11011111110111 | 0b10111111110111 | 0b11111111110111 | 0b10000000001111 | 0b11000000001111 | 0b10100000001111 | 0b11100000001111 | 0b10010000001111 | 0b11010000001111 | 0b10110000001111 | 0b11110000001111 | 0b10001000001111 | 0b11001000001111 | 0b10101000001111 | 0b11101000001111 | 0b10011000001111 | 0b11011000001111 | 0b10111000001111 | 0b11111000001111 | 0b10000100001111 | 0b11000100001111 | 0b10100100001111 | 0b11100100001111 | 0b10010100001111 | 0b11010100001111 | 0b10110100001111 | 0b11110100001111 | 0b10001100001111 | 0b11001100001111 | 0b10101100001111 | 0b11101100001111 | 0b10011100001111 | 0b11011100001111 | 0b10111100001111 | 0b11111100001111 | 0b10000010001111 | 0b11000010001111 | 0b10100010001111 | 0b11100010001111 | 0b10010010001111 | 0b11010010001111 | 0b10110010001111 | 0b11110010001111 | 0b10001010001111 | 0b11001010001111 | 0b10101010001111 | 0b11101010001111 | 0b10011010001111 | 0b11011010001111 | 0b10111010001111 | 0b11111010001111 | 0b10000110001111 | 0b11000110001111 | 0b10100110001111 | 0b11100110001111 | 0b10010110001111 | 0b11010110001111 | 0b10110110001111 | 0b11110110001111 | 0b10001110001111 | 0b11001110001111 | 0b10101110001111 | 0b11101110001111 | 0b10011110001111 | 0b11011110001111 | 0b10111110001111 | 0b11111110001111 | 0b10000001001111 | 0b11000001001111 | 0b10100001001111 | 0b11100001001111 | 0b10010001001111 | 0b11010001001111 | 0b10110001001111 | 0b11110001001111 | 0b10001001001111 | 0b11001001001111 | 0b10101001001111 | 0b11101001001111 | 0b10011001001111 | 0b11011001001111 | 0b10111001001111 | 0b11111001001111 | 0b10000101001111 | 0b11000101001111 | 0b10100101001111 | 0b11100101001111 | 0b10010101001111 | 0b11010101001111 | 0b10110101001111 | 0b11110101001111 | 0b10001101001111 | 0b11001101001111 | 0b10101101001111 | 0b11101101001111 | 0b10011101001111 | 0b11011101001111 | 0b10111101001111 | 0b11111101001111 | 0b10000011001111 | 0b11000011001111 | 0b10100011001111 | 0b11100011001111 | 0b10010011001111 | 0b11010011001111 | 0b10110011001111 | 0b11110011001111 | 0b10001011001111 | 0b11001011001111 | 0b10101011001111 | 0b11101011001111 | 0b10011011001111 | 0b11011011001111 | 0b10111011001111 | 0b11111011001111 | 0b10000111001111 | 0b11000111001111 | 0b10100111001111 | 0b11100111001111 | 0b10010111001111 | 0b11010111001111 | 0b10110111001111 | 0b11110111001111 | 0b10001111001111 | 0b11001111001111 | 0b10101111001111 | 0b11101111001111 | 0b10011111001111 | 0b11011111001111 | 0b10111111001111 | 0b11111111001111 | 0b10000000101111 | 0b11000000101111 | 0b10100000101111 | 0b11100000101111 | 0b10010000101111 | 0b11010000101111 | 0b10110000101111 | 0b11110000101111 | 0b10001000101111 | 0b11001000101111 | 0b10101000101111 | 0b11101000101111 | 0b10011000101111 | 0b11011000101111 | 0b10111000101111 | 0b11111000101111 | 0b10000100101111 | 0b11000100101111 | 0b10100100101111 | 0b11100100101111 | 0b10010100101111 | 0b11010100101111 | 0b10110100101111 | 0b11110100101111 | 0b10001100101111 | 0b11001100101111 | 0b10101100101111 | 0b11101100101111 | 0b10011100101111 | 0b11011100101111 | 0b10111100101111 | 0b11111100101111 | 0b10000010101111 | 0b11000010101111 | 0b10100010101111 | 0b11100010101111 | 0b10010010101111 | 0b11010010101111 | 0b10110010101111 | 0b11110010101111 | 0b10001010101111 | 0b11001010101111 | 0b10101010101111 | 0b11101010101111 | 0b10011010101111 | 0b11011010101111 | 0b10111010101111 | 0b11111010101111 | 0b10000110101111 | 0b11000110101111 | 0b10100110101111 | 0b11100110101111 | 0b10010110101111 | 0b11010110101111 | 0b10110110101111 | 0b11110110101111 | 0b10001110101111 | 0b11001110101111 | 0b10101110101111 | 0b11101110101111 | 0b10011110101111 | 0b11011110101111 | 0b10111110101111 | 0b11111110101111 | 0b10000001101111 | 0b11000001101111 | 0b10100001101111 | 0b11100001101111 | 0b10010001101111 | 0b11010001101111 | 0b10110001101111 | 0b11110001101111 | 0b10001001101111 | 0b11001001101111 | 0b10101001101111 | 0b11101001101111 | 0b10011001101111 | 0b11011001101111 | 0b10111001101111 | 0b11111001101111 | 0b10000101101111 | 0b11000101101111 | 0b10100101101111 | 0b11100101101111 | 0b10010101101111 | 0b11010101101111 | 0b10110101101111 | 0b11110101101111 | 0b10001101101111 | 0b11001101101111 | 0b10101101101111 | 0b11101101101111 | 0b10011101101111 | 0b11011101101111 | 0b10111101101111 | 0b11111101101111 | 0b10000011101111 | 0b11000011101111 | 0b10100011101111 | 0b11100011101111 | 0b10010011101111 | 0b11010011101111 | 0b10110011101111 | 0b11110011101111 | 0b10001011101111 | 0b11001011101111 | 0b10101011101111 | 0b11101011101111 | 0b10011011101111 | 0b11011011101111 | 0b10111011101111 | 0b11111011101111 | 0b10000111101111 | 0b11000111101111 | 0b10100111101111 | 0b11100111101111 | 0b10010111101111 | 0b11010111101111 | 0b10110111101111 | 0b11110111101111 | 0b10001111101111 | 0b11001111101111 | 0b10101111101111 | 0b11101111101111 | 0b10011111101111 | 0b11011111101111 | 0b10111111101111 | 0b11111111101111 | 0b10000000011111 | 0b11000000011111 | 0b10100000011111 | 0b11100000011111 | 0b10010000011111 | 0b11010000011111 | 0b10110000011111 | 0b11110000011111 | 0b10001000011111 | 0b11001000011111 | 0b10101000011111 | 0b11101000011111 | 0b10011000011111 | 0b11011000011111 | 0b10111000011111 | 0b11111000011111 | 0b10000100011111 | 0b11000100011111 | 0b10100100011111 | 0b11100100011111 | 0b10010100011111 | 0b11010100011111 | 0b10110100011111 | 0b11110100011111 | 0b10001100011111 | 0b11001100011111 | 0b10101100011111 | 0b11101100011111 | 0b10011100011111 | 0b11011100011111 | 0b10111100011111 | 0b11111100011111 | 0b10000010011111 | 0b11000010011111 | 0b10100010011111 | 0b11100010011111 | 0b10010010011111 | 0b11010010011111 | 0b10110010011111 | 0b11110010011111 | 0b10001010011111 | 0b11001010011111 | 0b10101010011111 | 0b11101010011111 | 0b10011010011111 | 0b11011010011111 | 0b10111010011111 | 0b11111010011111 | 0b10000110011111 | 0b11000110011111 | 0b10100110011111 | 0b11100110011111 | 0b10010110011111 | 0b11010110011111 | 0b10110110011111 | 0b11110110011111 | 0b10001110011111 | 0b11001110011111 | 0b10101110011111 | 0b11101110011111 | 0b10011110011111 | 0b11011110011111 | 0b10111110011111 | 0b11111110011111 | 0b10000001011111 | 0b11000001011111 | 0b10100001011111 | 0b11100001011111 | 0b10010001011111 | 0b11010001011111 | 0b10110001011111 | 0b11110001011111 | 0b10001001011111 | 0b11001001011111 | 0b10101001011111 | 0b11101001011111 | 0b10011001011111 | 0b11011001011111 | 0b10111001011111 | 0b11111001011111 | 0b10000101011111 | 0b11000101011111 | 0b10100101011111 | 0b11100101011111 | 0b10010101011111 | 0b11010101011111 | 0b10110101011111 | 0b11110101011111 | 0b10001101011111 | 0b11001101011111 | 0b10101101011111 | 0b11101101011111 | 0b10011101011111 | 0b11011101011111 | 0b10111101011111 | 0b11111101011111 | 0b10000011011111 | 0b11000011011111 | 0b10100011011111 | 0b11100011011111 | 0b10010011011111 | 0b11010011011111 | 0b10110011011111 | 0b11110011011111 | 0b10001011011111 | 0b11001011011111 | 0b10101011011111 | 0b11101011011111 | 0b10011011011111 | 0b11011011011111 | 0b10111011011111 | 0b11111011011111 | 0b10000111011111 | 0b11000111011111 | 0b10100111011111 | 0b11100111011111 | 0b10010111011111 | 0b11010111011111 | 0b10110111011111 | 0b11110111011111 | 0b10001111011111 | 0b11001111011111 | 0b10101111011111 | 0b11101111011111 | 0b10011111011111 | 0b11011111011111 | 0b10111111011111 | 0b11111111011111 | 0b10000000111111 | 0b11000000111111 | 0b10100000111111 | 0b11100000111111 | 0b10010000111111 | 0b11010000111111 | 0b10110000111111 | 0b11110000111111 | 0b10001000111111 | 0b11001000111111 | 0b10101000111111 | 0b11101000111111 | 0b10011000111111 | 0b11011000111111 | 0b10111000111111 | 0b11111000111111 | 0b10000100111111 | 0b11000100111111 | 0b10100100111111 | 0b11100100111111 | 0b10010100111111 | 0b11010100111111 | 0b10110100111111 | 0b11110100111111 | 0b10001100111111 | 0b11001100111111 | 0b10101100111111 | 0b11101100111111 | 0b10011100111111 | 0b11011100111111 | 0b10111100111111 | 0b11111100111111 | 0b10000010111111 | 0b11000010111111 | 0b10100010111111 | 0b11100010111111 | 0b10010010111111 | 0b11010010111111 | 0b10110010111111 | 0b11110010111111 | 0b10001010111111 | 0b11001010111111 | 0b10101010111111 | 0b11101010111111 | 0b10011010111111 | 0b11011010111111 | 0b10111010111111 | 0b11111010111111 | 0b10000110111111 | 0b11000110111111 | 0b10100110111111 | 0b11100110111111 | 0b10010110111111 | 0b11010110111111 | 0b10110110111111 | 0b11110110111111 | 0b10001110111111 | 0b11001110111111 | 0b10101110111111 | 0b11101110111111 | 0b10011110111111 | 0b11011110111111 | 0b10111110111111 | 0b11111110111111 | 0b10000001111111 | 0b11000001111111 | 0b10100001111111 | 0b11100001111111 | 0b10010001111111 | 0b11010001111111 | 0b10110001111111 | 0b11110001111111 | 0b10001001111111 | 0b11001001111111 | 0b10101001111111 | 0b11101001111111 | 0b10011001111111 | 0b11011001111111 | 0b10111001111111 | 0b11111001111111 | 0b10000101111111 | 0b11000101111111 | 0b10100101111111 | 0b11100101111111 | 0b10010101111111 | 0b11010101111111 | 0b10110101111111 | 0b11110101111111 | 0b10001101111111 | 0b11001101111111 | 0b10101101111111 | 0b11101101111111 | 0b10011101111111 | 0b11011101111111 | 0b10111101111111 | 0b11111101111111 | 0b10000011111111 | 0b11000011111111 | 0b10100011111111 | 0b11100011111111 | 0b10010011111111 | 0b11010011111111 | 0b10110011111111 | 0b11110011111111 | 0b10001011111111 | 0b11001011111111 | 0b10101011111111 | 0b11101011111111 | 0b10011011111111 | 0b11011011111111 | 0b10111011111111 | 0b11111011111111 | 0b10000111111111 | 0b11000111111111 | 0b10100111111111 | 0b11100111111111 | 0b10010111111111 | 0b11010111111111 | 0b10110111111111 | 0b11110111111111 | 0b10001111111111 | 0b11001111111111 | 0b10101111111111 | 0b11101111111111 | 0b10011111111111 | 0b11011111111111 | 0b10111111111111 | 0b11111111111111, _, _) => {
            let opc = (inst >> 21) & 0b1111;
            let op2 = (inst >> 16) & 0b11111;
            let op3 = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let op4 = inst & 0b11111;
            match (opc, op2, op3, Rn, op4) {
                (_, var0, _, _, _) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0000, 0b11111, 0b000000, _, var0) if var0 != 0b00000 => return OpCode::Unallocated,
                (0b0000, 0b11111, 0b000000, _, 0b00000) => return OpCode::BR_64_branch_reg,
                (0b0000, 0b11111, 0b000001, _, _) => return OpCode::Unallocated,
                (0b0000, 0b11111, 0b000010, _, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0000, 0b11111, 0b000010, _, 0b11111) => return OpCode::BRAAZ_64_branch_reg,
                (0b0000, 0b11111, 0b000011, _, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0000, 0b11111, 0b000011, _, 0b11111) => return OpCode::BRABZ_64_branch_reg,
                (0b0000, 0b11111, 0b000100 | 0b000110 | 0b000101 | 0b000111, _, _) => return OpCode::Unallocated,
                (0b0000, 0b11111, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _, _) => return OpCode::Unallocated,
                (0b0000, 0b11111, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _, _) => return OpCode::Unallocated,
                (0b0000, 0b11111, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, _) => return OpCode::Unallocated,
                (0b0001, 0b11111, 0b000000, _, var0) if var0 != 0b00000 => return OpCode::Unallocated,
                (0b0001, 0b11111, 0b000000, _, 0b00000) => return OpCode::BLR_64_branch_reg,
                (0b0001, 0b11111, 0b000001, _, _) => return OpCode::Unallocated,
                (0b0001, 0b11111, 0b000010, _, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0001, 0b11111, 0b000010, _, 0b11111) => return OpCode::BLRAAZ_64_branch_reg,
                (0b0001, 0b11111, 0b000011, _, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0001, 0b11111, 0b000011, _, 0b11111) => return OpCode::BLRABZ_64_branch_reg,
                (0b0001, 0b11111, 0b000100 | 0b000110 | 0b000101 | 0b000111, _, _) => return OpCode::Unallocated,
                (0b0001, 0b11111, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _, _) => return OpCode::Unallocated,
                (0b0001, 0b11111, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _, _) => return OpCode::Unallocated,
                (0b0001, 0b11111, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, _) => return OpCode::Unallocated,
                (0b0010, 0b11111, 0b000000, _, var0) if var0 != 0b00000 => return OpCode::Unallocated,
                (0b0010, 0b11111, 0b000000, _, 0b00000) => return OpCode::RET_64R_branch_reg,
                (0b0010, 0b11111, 0b000001, _, _) => return OpCode::Unallocated,
                (0b0010, 0b11111, 0b000010, var0, var1) if var0 != 0b11111 && var1 != 0b11111 => return OpCode::Unallocated,
                (0b0010, 0b11111, 0b000010, 0b11111, 0b11111) => return OpCode::RETAA_64E_branch_reg,
                (0b0010, 0b11111, 0b000011, var0, var1) if var0 != 0b11111 && var1 != 0b11111 => return OpCode::Unallocated,
                (0b0010, 0b11111, 0b000011, 0b11111, 0b11111) => return OpCode::RETAB_64E_branch_reg,
                (0b0010, 0b11111, 0b000100 | 0b000110 | 0b000101 | 0b000111, _, _) => return OpCode::Unallocated,
                (0b0010, 0b11111, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _, _) => return OpCode::Unallocated,
                (0b0010, 0b11111, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _, _) => return OpCode::Unallocated,
                (0b0010, 0b11111, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, _) => return OpCode::Unallocated,
                (0b0011, 0b11111, _, _, _) => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000000, var0, var1) if var0 != 0b11111 && var1 != 0b00000 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000000, var0, 0b00000) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000000, 0b11111, var0) if var0 != 0b00000 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000000, 0b11111, 0b00000) => return OpCode::ERET_64E_branch_reg,
                (0b0100, 0b11111, 0b000001, _, _) => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000010, var0, var1) if var0 != 0b11111 && var1 != 0b11111 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000010, var0, 0b11111) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000010, 0b11111, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000010, 0b11111, 0b11111) => return OpCode::ERETAA_64E_branch_reg,
                (0b0100, 0b11111, 0b000011, var0, var1) if var0 != 0b11111 && var1 != 0b11111 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000011, var0, 0b11111) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000011, 0b11111, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b000011, 0b11111, 0b11111) => return OpCode::ERETAB_64E_branch_reg,
                (0b0100, 0b11111, 0b000100 | 0b000110 | 0b000101 | 0b000111, _, _) => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _, _) => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _, _) => return OpCode::Unallocated,
                (0b0100, 0b11111, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, _) => return OpCode::Unallocated,
                (0b0101, 0b11111, var0, _, _) if var0 != 0b000000 => return OpCode::Unallocated,
                (0b0101, 0b11111, 0b000000, var0, var1) if var0 != 0b11111 && var1 != 0b00000 => return OpCode::Unallocated,
                (0b0101, 0b11111, 0b000000, var0, 0b00000) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b0101, 0b11111, 0b000000, 0b11111, var0) if var0 != 0b00000 => return OpCode::Unallocated,
                (0b0101, 0b11111, 0b000000, 0b11111, 0b00000) => return OpCode::DRPS_64E_branch_reg,
                (0b0110 | 0b0111, 0b11111, _, _, _) => return OpCode::Unallocated,
                (0b1000, 0b11111, 0b000000 | 0b000001, _, _) => return OpCode::Unallocated,
                (0b1000, 0b11111, 0b000010, _, _) => return OpCode::BRAA_64P_branch_reg,
                (0b1000, 0b11111, 0b000011, _, _) => return OpCode::BRAB_64P_branch_reg,
                (0b1000, 0b11111, 0b000100 | 0b000110 | 0b000101 | 0b000111, _, _) => return OpCode::Unallocated,
                (0b1000, 0b11111, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _, _) => return OpCode::Unallocated,
                (0b1000, 0b11111, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _, _) => return OpCode::Unallocated,
                (0b1000, 0b11111, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, _) => return OpCode::Unallocated,
                (0b1001, 0b11111, 0b000000 | 0b000001, _, _) => return OpCode::Unallocated,
                (0b1001, 0b11111, 0b000010, _, _) => return OpCode::BLRAA_64P_branch_reg,
                (0b1001, 0b11111, 0b000011, _, _) => return OpCode::BLRAB_64P_branch_reg,
                (0b1001, 0b11111, 0b000100 | 0b000110 | 0b000101 | 0b000111, _, _) => return OpCode::Unallocated,
                (0b1001, 0b11111, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _, _) => return OpCode::Unallocated,
                (0b1001, 0b11111, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _, _) => return OpCode::Unallocated,
                (0b1001, 0b11111, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, _) => return OpCode::Unallocated,
                (0b1010 | 0b1011, 0b11111, _, _, _) => return OpCode::Unallocated,
                (0b1100 | 0b1110 | 0b1101 | 0b1111, 0b11111, _, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b000 | 0b100, _, _, _, _) => {
            let op = (inst >> 31) & 0b1;
            let imm26 = inst & 0b11111111111111111111111111;
            match op {
                0 => return OpCode::B_only_branch_imm,
                1 => return OpCode::BL_only_branch_imm,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b001 | 0b101, _, 0b00000000000000 | 0b01000000000000 | 0b00100000000000 | 0b01100000000000 | 0b00010000000000 | 0b01010000000000 | 0b00110000000000 | 0b01110000000000 | 0b00001000000000 | 0b01001000000000 | 0b00101000000000 | 0b01101000000000 | 0b00011000000000 | 0b01011000000000 | 0b00111000000000 | 0b01111000000000 | 0b00000100000000 | 0b01000100000000 | 0b00100100000000 | 0b01100100000000 | 0b00010100000000 | 0b01010100000000 | 0b00110100000000 | 0b01110100000000 | 0b00001100000000 | 0b01001100000000 | 0b00101100000000 | 0b01101100000000 | 0b00011100000000 | 0b01011100000000 | 0b00111100000000 | 0b01111100000000 | 0b00000010000000 | 0b01000010000000 | 0b00100010000000 | 0b01100010000000 | 0b00010010000000 | 0b01010010000000 | 0b00110010000000 | 0b01110010000000 | 0b00001010000000 | 0b01001010000000 | 0b00101010000000 | 0b01101010000000 | 0b00011010000000 | 0b01011010000000 | 0b00111010000000 | 0b01111010000000 | 0b00000110000000 | 0b01000110000000 | 0b00100110000000 | 0b01100110000000 | 0b00010110000000 | 0b01010110000000 | 0b00110110000000 | 0b01110110000000 | 0b00001110000000 | 0b01001110000000 | 0b00101110000000 | 0b01101110000000 | 0b00011110000000 | 0b01011110000000 | 0b00111110000000 | 0b01111110000000 | 0b00000001000000 | 0b01000001000000 | 0b00100001000000 | 0b01100001000000 | 0b00010001000000 | 0b01010001000000 | 0b00110001000000 | 0b01110001000000 | 0b00001001000000 | 0b01001001000000 | 0b00101001000000 | 0b01101001000000 | 0b00011001000000 | 0b01011001000000 | 0b00111001000000 | 0b01111001000000 | 0b00000101000000 | 0b01000101000000 | 0b00100101000000 | 0b01100101000000 | 0b00010101000000 | 0b01010101000000 | 0b00110101000000 | 0b01110101000000 | 0b00001101000000 | 0b01001101000000 | 0b00101101000000 | 0b01101101000000 | 0b00011101000000 | 0b01011101000000 | 0b00111101000000 | 0b01111101000000 | 0b00000011000000 | 0b01000011000000 | 0b00100011000000 | 0b01100011000000 | 0b00010011000000 | 0b01010011000000 | 0b00110011000000 | 0b01110011000000 | 0b00001011000000 | 0b01001011000000 | 0b00101011000000 | 0b01101011000000 | 0b00011011000000 | 0b01011011000000 | 0b00111011000000 | 0b01111011000000 | 0b00000111000000 | 0b01000111000000 | 0b00100111000000 | 0b01100111000000 | 0b00010111000000 | 0b01010111000000 | 0b00110111000000 | 0b01110111000000 | 0b00001111000000 | 0b01001111000000 | 0b00101111000000 | 0b01101111000000 | 0b00011111000000 | 0b01011111000000 | 0b00111111000000 | 0b01111111000000 | 0b00000000100000 | 0b01000000100000 | 0b00100000100000 | 0b01100000100000 | 0b00010000100000 | 0b01010000100000 | 0b00110000100000 | 0b01110000100000 | 0b00001000100000 | 0b01001000100000 | 0b00101000100000 | 0b01101000100000 | 0b00011000100000 | 0b01011000100000 | 0b00111000100000 | 0b01111000100000 | 0b00000100100000 | 0b01000100100000 | 0b00100100100000 | 0b01100100100000 | 0b00010100100000 | 0b01010100100000 | 0b00110100100000 | 0b01110100100000 | 0b00001100100000 | 0b01001100100000 | 0b00101100100000 | 0b01101100100000 | 0b00011100100000 | 0b01011100100000 | 0b00111100100000 | 0b01111100100000 | 0b00000010100000 | 0b01000010100000 | 0b00100010100000 | 0b01100010100000 | 0b00010010100000 | 0b01010010100000 | 0b00110010100000 | 0b01110010100000 | 0b00001010100000 | 0b01001010100000 | 0b00101010100000 | 0b01101010100000 | 0b00011010100000 | 0b01011010100000 | 0b00111010100000 | 0b01111010100000 | 0b00000110100000 | 0b01000110100000 | 0b00100110100000 | 0b01100110100000 | 0b00010110100000 | 0b01010110100000 | 0b00110110100000 | 0b01110110100000 | 0b00001110100000 | 0b01001110100000 | 0b00101110100000 | 0b01101110100000 | 0b00011110100000 | 0b01011110100000 | 0b00111110100000 | 0b01111110100000 | 0b00000001100000 | 0b01000001100000 | 0b00100001100000 | 0b01100001100000 | 0b00010001100000 | 0b01010001100000 | 0b00110001100000 | 0b01110001100000 | 0b00001001100000 | 0b01001001100000 | 0b00101001100000 | 0b01101001100000 | 0b00011001100000 | 0b01011001100000 | 0b00111001100000 | 0b01111001100000 | 0b00000101100000 | 0b01000101100000 | 0b00100101100000 | 0b01100101100000 | 0b00010101100000 | 0b01010101100000 | 0b00110101100000 | 0b01110101100000 | 0b00001101100000 | 0b01001101100000 | 0b00101101100000 | 0b01101101100000 | 0b00011101100000 | 0b01011101100000 | 0b00111101100000 | 0b01111101100000 | 0b00000011100000 | 0b01000011100000 | 0b00100011100000 | 0b01100011100000 | 0b00010011100000 | 0b01010011100000 | 0b00110011100000 | 0b01110011100000 | 0b00001011100000 | 0b01001011100000 | 0b00101011100000 | 0b01101011100000 | 0b00011011100000 | 0b01011011100000 | 0b00111011100000 | 0b01111011100000 | 0b00000111100000 | 0b01000111100000 | 0b00100111100000 | 0b01100111100000 | 0b00010111100000 | 0b01010111100000 | 0b00110111100000 | 0b01110111100000 | 0b00001111100000 | 0b01001111100000 | 0b00101111100000 | 0b01101111100000 | 0b00011111100000 | 0b01011111100000 | 0b00111111100000 | 0b01111111100000 | 0b00000000010000 | 0b01000000010000 | 0b00100000010000 | 0b01100000010000 | 0b00010000010000 | 0b01010000010000 | 0b00110000010000 | 0b01110000010000 | 0b00001000010000 | 0b01001000010000 | 0b00101000010000 | 0b01101000010000 | 0b00011000010000 | 0b01011000010000 | 0b00111000010000 | 0b01111000010000 | 0b00000100010000 | 0b01000100010000 | 0b00100100010000 | 0b01100100010000 | 0b00010100010000 | 0b01010100010000 | 0b00110100010000 | 0b01110100010000 | 0b00001100010000 | 0b01001100010000 | 0b00101100010000 | 0b01101100010000 | 0b00011100010000 | 0b01011100010000 | 0b00111100010000 | 0b01111100010000 | 0b00000010010000 | 0b01000010010000 | 0b00100010010000 | 0b01100010010000 | 0b00010010010000 | 0b01010010010000 | 0b00110010010000 | 0b01110010010000 | 0b00001010010000 | 0b01001010010000 | 0b00101010010000 | 0b01101010010000 | 0b00011010010000 | 0b01011010010000 | 0b00111010010000 | 0b01111010010000 | 0b00000110010000 | 0b01000110010000 | 0b00100110010000 | 0b01100110010000 | 0b00010110010000 | 0b01010110010000 | 0b00110110010000 | 0b01110110010000 | 0b00001110010000 | 0b01001110010000 | 0b00101110010000 | 0b01101110010000 | 0b00011110010000 | 0b01011110010000 | 0b00111110010000 | 0b01111110010000 | 0b00000001010000 | 0b01000001010000 | 0b00100001010000 | 0b01100001010000 | 0b00010001010000 | 0b01010001010000 | 0b00110001010000 | 0b01110001010000 | 0b00001001010000 | 0b01001001010000 | 0b00101001010000 | 0b01101001010000 | 0b00011001010000 | 0b01011001010000 | 0b00111001010000 | 0b01111001010000 | 0b00000101010000 | 0b01000101010000 | 0b00100101010000 | 0b01100101010000 | 0b00010101010000 | 0b01010101010000 | 0b00110101010000 | 0b01110101010000 | 0b00001101010000 | 0b01001101010000 | 0b00101101010000 | 0b01101101010000 | 0b00011101010000 | 0b01011101010000 | 0b00111101010000 | 0b01111101010000 | 0b00000011010000 | 0b01000011010000 | 0b00100011010000 | 0b01100011010000 | 0b00010011010000 | 0b01010011010000 | 0b00110011010000 | 0b01110011010000 | 0b00001011010000 | 0b01001011010000 | 0b00101011010000 | 0b01101011010000 | 0b00011011010000 | 0b01011011010000 | 0b00111011010000 | 0b01111011010000 | 0b00000111010000 | 0b01000111010000 | 0b00100111010000 | 0b01100111010000 | 0b00010111010000 | 0b01010111010000 | 0b00110111010000 | 0b01110111010000 | 0b00001111010000 | 0b01001111010000 | 0b00101111010000 | 0b01101111010000 | 0b00011111010000 | 0b01011111010000 | 0b00111111010000 | 0b01111111010000 | 0b00000000110000 | 0b01000000110000 | 0b00100000110000 | 0b01100000110000 | 0b00010000110000 | 0b01010000110000 | 0b00110000110000 | 0b01110000110000 | 0b00001000110000 | 0b01001000110000 | 0b00101000110000 | 0b01101000110000 | 0b00011000110000 | 0b01011000110000 | 0b00111000110000 | 0b01111000110000 | 0b00000100110000 | 0b01000100110000 | 0b00100100110000 | 0b01100100110000 | 0b00010100110000 | 0b01010100110000 | 0b00110100110000 | 0b01110100110000 | 0b00001100110000 | 0b01001100110000 | 0b00101100110000 | 0b01101100110000 | 0b00011100110000 | 0b01011100110000 | 0b00111100110000 | 0b01111100110000 | 0b00000010110000 | 0b01000010110000 | 0b00100010110000 | 0b01100010110000 | 0b00010010110000 | 0b01010010110000 | 0b00110010110000 | 0b01110010110000 | 0b00001010110000 | 0b01001010110000 | 0b00101010110000 | 0b01101010110000 | 0b00011010110000 | 0b01011010110000 | 0b00111010110000 | 0b01111010110000 | 0b00000110110000 | 0b01000110110000 | 0b00100110110000 | 0b01100110110000 | 0b00010110110000 | 0b01010110110000 | 0b00110110110000 | 0b01110110110000 | 0b00001110110000 | 0b01001110110000 | 0b00101110110000 | 0b01101110110000 | 0b00011110110000 | 0b01011110110000 | 0b00111110110000 | 0b01111110110000 | 0b00000001110000 | 0b01000001110000 | 0b00100001110000 | 0b01100001110000 | 0b00010001110000 | 0b01010001110000 | 0b00110001110000 | 0b01110001110000 | 0b00001001110000 | 0b01001001110000 | 0b00101001110000 | 0b01101001110000 | 0b00011001110000 | 0b01011001110000 | 0b00111001110000 | 0b01111001110000 | 0b00000101110000 | 0b01000101110000 | 0b00100101110000 | 0b01100101110000 | 0b00010101110000 | 0b01010101110000 | 0b00110101110000 | 0b01110101110000 | 0b00001101110000 | 0b01001101110000 | 0b00101101110000 | 0b01101101110000 | 0b00011101110000 | 0b01011101110000 | 0b00111101110000 | 0b01111101110000 | 0b00000011110000 | 0b01000011110000 | 0b00100011110000 | 0b01100011110000 | 0b00010011110000 | 0b01010011110000 | 0b00110011110000 | 0b01110011110000 | 0b00001011110000 | 0b01001011110000 | 0b00101011110000 | 0b01101011110000 | 0b00011011110000 | 0b01011011110000 | 0b00111011110000 | 0b01111011110000 | 0b00000111110000 | 0b01000111110000 | 0b00100111110000 | 0b01100111110000 | 0b00010111110000 | 0b01010111110000 | 0b00110111110000 | 0b01110111110000 | 0b00001111110000 | 0b01001111110000 | 0b00101111110000 | 0b01101111110000 | 0b00011111110000 | 0b01011111110000 | 0b00111111110000 | 0b01111111110000 | 0b00000000001000 | 0b01000000001000 | 0b00100000001000 | 0b01100000001000 | 0b00010000001000 | 0b01010000001000 | 0b00110000001000 | 0b01110000001000 | 0b00001000001000 | 0b01001000001000 | 0b00101000001000 | 0b01101000001000 | 0b00011000001000 | 0b01011000001000 | 0b00111000001000 | 0b01111000001000 | 0b00000100001000 | 0b01000100001000 | 0b00100100001000 | 0b01100100001000 | 0b00010100001000 | 0b01010100001000 | 0b00110100001000 | 0b01110100001000 | 0b00001100001000 | 0b01001100001000 | 0b00101100001000 | 0b01101100001000 | 0b00011100001000 | 0b01011100001000 | 0b00111100001000 | 0b01111100001000 | 0b00000010001000 | 0b01000010001000 | 0b00100010001000 | 0b01100010001000 | 0b00010010001000 | 0b01010010001000 | 0b00110010001000 | 0b01110010001000 | 0b00001010001000 | 0b01001010001000 | 0b00101010001000 | 0b01101010001000 | 0b00011010001000 | 0b01011010001000 | 0b00111010001000 | 0b01111010001000 | 0b00000110001000 | 0b01000110001000 | 0b00100110001000 | 0b01100110001000 | 0b00010110001000 | 0b01010110001000 | 0b00110110001000 | 0b01110110001000 | 0b00001110001000 | 0b01001110001000 | 0b00101110001000 | 0b01101110001000 | 0b00011110001000 | 0b01011110001000 | 0b00111110001000 | 0b01111110001000 | 0b00000001001000 | 0b01000001001000 | 0b00100001001000 | 0b01100001001000 | 0b00010001001000 | 0b01010001001000 | 0b00110001001000 | 0b01110001001000 | 0b00001001001000 | 0b01001001001000 | 0b00101001001000 | 0b01101001001000 | 0b00011001001000 | 0b01011001001000 | 0b00111001001000 | 0b01111001001000 | 0b00000101001000 | 0b01000101001000 | 0b00100101001000 | 0b01100101001000 | 0b00010101001000 | 0b01010101001000 | 0b00110101001000 | 0b01110101001000 | 0b00001101001000 | 0b01001101001000 | 0b00101101001000 | 0b01101101001000 | 0b00011101001000 | 0b01011101001000 | 0b00111101001000 | 0b01111101001000 | 0b00000011001000 | 0b01000011001000 | 0b00100011001000 | 0b01100011001000 | 0b00010011001000 | 0b01010011001000 | 0b00110011001000 | 0b01110011001000 | 0b00001011001000 | 0b01001011001000 | 0b00101011001000 | 0b01101011001000 | 0b00011011001000 | 0b01011011001000 | 0b00111011001000 | 0b01111011001000 | 0b00000111001000 | 0b01000111001000 | 0b00100111001000 | 0b01100111001000 | 0b00010111001000 | 0b01010111001000 | 0b00110111001000 | 0b01110111001000 | 0b00001111001000 | 0b01001111001000 | 0b00101111001000 | 0b01101111001000 | 0b00011111001000 | 0b01011111001000 | 0b00111111001000 | 0b01111111001000 | 0b00000000101000 | 0b01000000101000 | 0b00100000101000 | 0b01100000101000 | 0b00010000101000 | 0b01010000101000 | 0b00110000101000 | 0b01110000101000 | 0b00001000101000 | 0b01001000101000 | 0b00101000101000 | 0b01101000101000 | 0b00011000101000 | 0b01011000101000 | 0b00111000101000 | 0b01111000101000 | 0b00000100101000 | 0b01000100101000 | 0b00100100101000 | 0b01100100101000 | 0b00010100101000 | 0b01010100101000 | 0b00110100101000 | 0b01110100101000 | 0b00001100101000 | 0b01001100101000 | 0b00101100101000 | 0b01101100101000 | 0b00011100101000 | 0b01011100101000 | 0b00111100101000 | 0b01111100101000 | 0b00000010101000 | 0b01000010101000 | 0b00100010101000 | 0b01100010101000 | 0b00010010101000 | 0b01010010101000 | 0b00110010101000 | 0b01110010101000 | 0b00001010101000 | 0b01001010101000 | 0b00101010101000 | 0b01101010101000 | 0b00011010101000 | 0b01011010101000 | 0b00111010101000 | 0b01111010101000 | 0b00000110101000 | 0b01000110101000 | 0b00100110101000 | 0b01100110101000 | 0b00010110101000 | 0b01010110101000 | 0b00110110101000 | 0b01110110101000 | 0b00001110101000 | 0b01001110101000 | 0b00101110101000 | 0b01101110101000 | 0b00011110101000 | 0b01011110101000 | 0b00111110101000 | 0b01111110101000 | 0b00000001101000 | 0b01000001101000 | 0b00100001101000 | 0b01100001101000 | 0b00010001101000 | 0b01010001101000 | 0b00110001101000 | 0b01110001101000 | 0b00001001101000 | 0b01001001101000 | 0b00101001101000 | 0b01101001101000 | 0b00011001101000 | 0b01011001101000 | 0b00111001101000 | 0b01111001101000 | 0b00000101101000 | 0b01000101101000 | 0b00100101101000 | 0b01100101101000 | 0b00010101101000 | 0b01010101101000 | 0b00110101101000 | 0b01110101101000 | 0b00001101101000 | 0b01001101101000 | 0b00101101101000 | 0b01101101101000 | 0b00011101101000 | 0b01011101101000 | 0b00111101101000 | 0b01111101101000 | 0b00000011101000 | 0b01000011101000 | 0b00100011101000 | 0b01100011101000 | 0b00010011101000 | 0b01010011101000 | 0b00110011101000 | 0b01110011101000 | 0b00001011101000 | 0b01001011101000 | 0b00101011101000 | 0b01101011101000 | 0b00011011101000 | 0b01011011101000 | 0b00111011101000 | 0b01111011101000 | 0b00000111101000 | 0b01000111101000 | 0b00100111101000 | 0b01100111101000 | 0b00010111101000 | 0b01010111101000 | 0b00110111101000 | 0b01110111101000 | 0b00001111101000 | 0b01001111101000 | 0b00101111101000 | 0b01101111101000 | 0b00011111101000 | 0b01011111101000 | 0b00111111101000 | 0b01111111101000 | 0b00000000011000 | 0b01000000011000 | 0b00100000011000 | 0b01100000011000 | 0b00010000011000 | 0b01010000011000 | 0b00110000011000 | 0b01110000011000 | 0b00001000011000 | 0b01001000011000 | 0b00101000011000 | 0b01101000011000 | 0b00011000011000 | 0b01011000011000 | 0b00111000011000 | 0b01111000011000 | 0b00000100011000 | 0b01000100011000 | 0b00100100011000 | 0b01100100011000 | 0b00010100011000 | 0b01010100011000 | 0b00110100011000 | 0b01110100011000 | 0b00001100011000 | 0b01001100011000 | 0b00101100011000 | 0b01101100011000 | 0b00011100011000 | 0b01011100011000 | 0b00111100011000 | 0b01111100011000 | 0b00000010011000 | 0b01000010011000 | 0b00100010011000 | 0b01100010011000 | 0b00010010011000 | 0b01010010011000 | 0b00110010011000 | 0b01110010011000 | 0b00001010011000 | 0b01001010011000 | 0b00101010011000 | 0b01101010011000 | 0b00011010011000 | 0b01011010011000 | 0b00111010011000 | 0b01111010011000 | 0b00000110011000 | 0b01000110011000 | 0b00100110011000 | 0b01100110011000 | 0b00010110011000 | 0b01010110011000 | 0b00110110011000 | 0b01110110011000 | 0b00001110011000 | 0b01001110011000 | 0b00101110011000 | 0b01101110011000 | 0b00011110011000 | 0b01011110011000 | 0b00111110011000 | 0b01111110011000 | 0b00000001011000 | 0b01000001011000 | 0b00100001011000 | 0b01100001011000 | 0b00010001011000 | 0b01010001011000 | 0b00110001011000 | 0b01110001011000 | 0b00001001011000 | 0b01001001011000 | 0b00101001011000 | 0b01101001011000 | 0b00011001011000 | 0b01011001011000 | 0b00111001011000 | 0b01111001011000 | 0b00000101011000 | 0b01000101011000 | 0b00100101011000 | 0b01100101011000 | 0b00010101011000 | 0b01010101011000 | 0b00110101011000 | 0b01110101011000 | 0b00001101011000 | 0b01001101011000 | 0b00101101011000 | 0b01101101011000 | 0b00011101011000 | 0b01011101011000 | 0b00111101011000 | 0b01111101011000 | 0b00000011011000 | 0b01000011011000 | 0b00100011011000 | 0b01100011011000 | 0b00010011011000 | 0b01010011011000 | 0b00110011011000 | 0b01110011011000 | 0b00001011011000 | 0b01001011011000 | 0b00101011011000 | 0b01101011011000 | 0b00011011011000 | 0b01011011011000 | 0b00111011011000 | 0b01111011011000 | 0b00000111011000 | 0b01000111011000 | 0b00100111011000 | 0b01100111011000 | 0b00010111011000 | 0b01010111011000 | 0b00110111011000 | 0b01110111011000 | 0b00001111011000 | 0b01001111011000 | 0b00101111011000 | 0b01101111011000 | 0b00011111011000 | 0b01011111011000 | 0b00111111011000 | 0b01111111011000 | 0b00000000111000 | 0b01000000111000 | 0b00100000111000 | 0b01100000111000 | 0b00010000111000 | 0b01010000111000 | 0b00110000111000 | 0b01110000111000 | 0b00001000111000 | 0b01001000111000 | 0b00101000111000 | 0b01101000111000 | 0b00011000111000 | 0b01011000111000 | 0b00111000111000 | 0b01111000111000 | 0b00000100111000 | 0b01000100111000 | 0b00100100111000 | 0b01100100111000 | 0b00010100111000 | 0b01010100111000 | 0b00110100111000 | 0b01110100111000 | 0b00001100111000 | 0b01001100111000 | 0b00101100111000 | 0b01101100111000 | 0b00011100111000 | 0b01011100111000 | 0b00111100111000 | 0b01111100111000 | 0b00000010111000 | 0b01000010111000 | 0b00100010111000 | 0b01100010111000 | 0b00010010111000 | 0b01010010111000 | 0b00110010111000 | 0b01110010111000 | 0b00001010111000 | 0b01001010111000 | 0b00101010111000 | 0b01101010111000 | 0b00011010111000 | 0b01011010111000 | 0b00111010111000 | 0b01111010111000 | 0b00000110111000 | 0b01000110111000 | 0b00100110111000 | 0b01100110111000 | 0b00010110111000 | 0b01010110111000 | 0b00110110111000 | 0b01110110111000 | 0b00001110111000 | 0b01001110111000 | 0b00101110111000 | 0b01101110111000 | 0b00011110111000 | 0b01011110111000 | 0b00111110111000 | 0b01111110111000 | 0b00000001111000 | 0b01000001111000 | 0b00100001111000 | 0b01100001111000 | 0b00010001111000 | 0b01010001111000 | 0b00110001111000 | 0b01110001111000 | 0b00001001111000 | 0b01001001111000 | 0b00101001111000 | 0b01101001111000 | 0b00011001111000 | 0b01011001111000 | 0b00111001111000 | 0b01111001111000 | 0b00000101111000 | 0b01000101111000 | 0b00100101111000 | 0b01100101111000 | 0b00010101111000 | 0b01010101111000 | 0b00110101111000 | 0b01110101111000 | 0b00001101111000 | 0b01001101111000 | 0b00101101111000 | 0b01101101111000 | 0b00011101111000 | 0b01011101111000 | 0b00111101111000 | 0b01111101111000 | 0b00000011111000 | 0b01000011111000 | 0b00100011111000 | 0b01100011111000 | 0b00010011111000 | 0b01010011111000 | 0b00110011111000 | 0b01110011111000 | 0b00001011111000 | 0b01001011111000 | 0b00101011111000 | 0b01101011111000 | 0b00011011111000 | 0b01011011111000 | 0b00111011111000 | 0b01111011111000 | 0b00000111111000 | 0b01000111111000 | 0b00100111111000 | 0b01100111111000 | 0b00010111111000 | 0b01010111111000 | 0b00110111111000 | 0b01110111111000 | 0b00001111111000 | 0b01001111111000 | 0b00101111111000 | 0b01101111111000 | 0b00011111111000 | 0b01011111111000 | 0b00111111111000 | 0b01111111111000 | 0b00000000000100 | 0b01000000000100 | 0b00100000000100 | 0b01100000000100 | 0b00010000000100 | 0b01010000000100 | 0b00110000000100 | 0b01110000000100 | 0b00001000000100 | 0b01001000000100 | 0b00101000000100 | 0b01101000000100 | 0b00011000000100 | 0b01011000000100 | 0b00111000000100 | 0b01111000000100 | 0b00000100000100 | 0b01000100000100 | 0b00100100000100 | 0b01100100000100 | 0b00010100000100 | 0b01010100000100 | 0b00110100000100 | 0b01110100000100 | 0b00001100000100 | 0b01001100000100 | 0b00101100000100 | 0b01101100000100 | 0b00011100000100 | 0b01011100000100 | 0b00111100000100 | 0b01111100000100 | 0b00000010000100 | 0b01000010000100 | 0b00100010000100 | 0b01100010000100 | 0b00010010000100 | 0b01010010000100 | 0b00110010000100 | 0b01110010000100 | 0b00001010000100 | 0b01001010000100 | 0b00101010000100 | 0b01101010000100 | 0b00011010000100 | 0b01011010000100 | 0b00111010000100 | 0b01111010000100 | 0b00000110000100 | 0b01000110000100 | 0b00100110000100 | 0b01100110000100 | 0b00010110000100 | 0b01010110000100 | 0b00110110000100 | 0b01110110000100 | 0b00001110000100 | 0b01001110000100 | 0b00101110000100 | 0b01101110000100 | 0b00011110000100 | 0b01011110000100 | 0b00111110000100 | 0b01111110000100 | 0b00000001000100 | 0b01000001000100 | 0b00100001000100 | 0b01100001000100 | 0b00010001000100 | 0b01010001000100 | 0b00110001000100 | 0b01110001000100 | 0b00001001000100 | 0b01001001000100 | 0b00101001000100 | 0b01101001000100 | 0b00011001000100 | 0b01011001000100 | 0b00111001000100 | 0b01111001000100 | 0b00000101000100 | 0b01000101000100 | 0b00100101000100 | 0b01100101000100 | 0b00010101000100 | 0b01010101000100 | 0b00110101000100 | 0b01110101000100 | 0b00001101000100 | 0b01001101000100 | 0b00101101000100 | 0b01101101000100 | 0b00011101000100 | 0b01011101000100 | 0b00111101000100 | 0b01111101000100 | 0b00000011000100 | 0b01000011000100 | 0b00100011000100 | 0b01100011000100 | 0b00010011000100 | 0b01010011000100 | 0b00110011000100 | 0b01110011000100 | 0b00001011000100 | 0b01001011000100 | 0b00101011000100 | 0b01101011000100 | 0b00011011000100 | 0b01011011000100 | 0b00111011000100 | 0b01111011000100 | 0b00000111000100 | 0b01000111000100 | 0b00100111000100 | 0b01100111000100 | 0b00010111000100 | 0b01010111000100 | 0b00110111000100 | 0b01110111000100 | 0b00001111000100 | 0b01001111000100 | 0b00101111000100 | 0b01101111000100 | 0b00011111000100 | 0b01011111000100 | 0b00111111000100 | 0b01111111000100 | 0b00000000100100 | 0b01000000100100 | 0b00100000100100 | 0b01100000100100 | 0b00010000100100 | 0b01010000100100 | 0b00110000100100 | 0b01110000100100 | 0b00001000100100 | 0b01001000100100 | 0b00101000100100 | 0b01101000100100 | 0b00011000100100 | 0b01011000100100 | 0b00111000100100 | 0b01111000100100 | 0b00000100100100 | 0b01000100100100 | 0b00100100100100 | 0b01100100100100 | 0b00010100100100 | 0b01010100100100 | 0b00110100100100 | 0b01110100100100 | 0b00001100100100 | 0b01001100100100 | 0b00101100100100 | 0b01101100100100 | 0b00011100100100 | 0b01011100100100 | 0b00111100100100 | 0b01111100100100 | 0b00000010100100 | 0b01000010100100 | 0b00100010100100 | 0b01100010100100 | 0b00010010100100 | 0b01010010100100 | 0b00110010100100 | 0b01110010100100 | 0b00001010100100 | 0b01001010100100 | 0b00101010100100 | 0b01101010100100 | 0b00011010100100 | 0b01011010100100 | 0b00111010100100 | 0b01111010100100 | 0b00000110100100 | 0b01000110100100 | 0b00100110100100 | 0b01100110100100 | 0b00010110100100 | 0b01010110100100 | 0b00110110100100 | 0b01110110100100 | 0b00001110100100 | 0b01001110100100 | 0b00101110100100 | 0b01101110100100 | 0b00011110100100 | 0b01011110100100 | 0b00111110100100 | 0b01111110100100 | 0b00000001100100 | 0b01000001100100 | 0b00100001100100 | 0b01100001100100 | 0b00010001100100 | 0b01010001100100 | 0b00110001100100 | 0b01110001100100 | 0b00001001100100 | 0b01001001100100 | 0b00101001100100 | 0b01101001100100 | 0b00011001100100 | 0b01011001100100 | 0b00111001100100 | 0b01111001100100 | 0b00000101100100 | 0b01000101100100 | 0b00100101100100 | 0b01100101100100 | 0b00010101100100 | 0b01010101100100 | 0b00110101100100 | 0b01110101100100 | 0b00001101100100 | 0b01001101100100 | 0b00101101100100 | 0b01101101100100 | 0b00011101100100 | 0b01011101100100 | 0b00111101100100 | 0b01111101100100 | 0b00000011100100 | 0b01000011100100 | 0b00100011100100 | 0b01100011100100 | 0b00010011100100 | 0b01010011100100 | 0b00110011100100 | 0b01110011100100 | 0b00001011100100 | 0b01001011100100 | 0b00101011100100 | 0b01101011100100 | 0b00011011100100 | 0b01011011100100 | 0b00111011100100 | 0b01111011100100 | 0b00000111100100 | 0b01000111100100 | 0b00100111100100 | 0b01100111100100 | 0b00010111100100 | 0b01010111100100 | 0b00110111100100 | 0b01110111100100 | 0b00001111100100 | 0b01001111100100 | 0b00101111100100 | 0b01101111100100 | 0b00011111100100 | 0b01011111100100 | 0b00111111100100 | 0b01111111100100 | 0b00000000010100 | 0b01000000010100 | 0b00100000010100 | 0b01100000010100 | 0b00010000010100 | 0b01010000010100 | 0b00110000010100 | 0b01110000010100 | 0b00001000010100 | 0b01001000010100 | 0b00101000010100 | 0b01101000010100 | 0b00011000010100 | 0b01011000010100 | 0b00111000010100 | 0b01111000010100 | 0b00000100010100 | 0b01000100010100 | 0b00100100010100 | 0b01100100010100 | 0b00010100010100 | 0b01010100010100 | 0b00110100010100 | 0b01110100010100 | 0b00001100010100 | 0b01001100010100 | 0b00101100010100 | 0b01101100010100 | 0b00011100010100 | 0b01011100010100 | 0b00111100010100 | 0b01111100010100 | 0b00000010010100 | 0b01000010010100 | 0b00100010010100 | 0b01100010010100 | 0b00010010010100 | 0b01010010010100 | 0b00110010010100 | 0b01110010010100 | 0b00001010010100 | 0b01001010010100 | 0b00101010010100 | 0b01101010010100 | 0b00011010010100 | 0b01011010010100 | 0b00111010010100 | 0b01111010010100 | 0b00000110010100 | 0b01000110010100 | 0b00100110010100 | 0b01100110010100 | 0b00010110010100 | 0b01010110010100 | 0b00110110010100 | 0b01110110010100 | 0b00001110010100 | 0b01001110010100 | 0b00101110010100 | 0b01101110010100 | 0b00011110010100 | 0b01011110010100 | 0b00111110010100 | 0b01111110010100 | 0b00000001010100 | 0b01000001010100 | 0b00100001010100 | 0b01100001010100 | 0b00010001010100 | 0b01010001010100 | 0b00110001010100 | 0b01110001010100 | 0b00001001010100 | 0b01001001010100 | 0b00101001010100 | 0b01101001010100 | 0b00011001010100 | 0b01011001010100 | 0b00111001010100 | 0b01111001010100 | 0b00000101010100 | 0b01000101010100 | 0b00100101010100 | 0b01100101010100 | 0b00010101010100 | 0b01010101010100 | 0b00110101010100 | 0b01110101010100 | 0b00001101010100 | 0b01001101010100 | 0b00101101010100 | 0b01101101010100 | 0b00011101010100 | 0b01011101010100 | 0b00111101010100 | 0b01111101010100 | 0b00000011010100 | 0b01000011010100 | 0b00100011010100 | 0b01100011010100 | 0b00010011010100 | 0b01010011010100 | 0b00110011010100 | 0b01110011010100 | 0b00001011010100 | 0b01001011010100 | 0b00101011010100 | 0b01101011010100 | 0b00011011010100 | 0b01011011010100 | 0b00111011010100 | 0b01111011010100 | 0b00000111010100 | 0b01000111010100 | 0b00100111010100 | 0b01100111010100 | 0b00010111010100 | 0b01010111010100 | 0b00110111010100 | 0b01110111010100 | 0b00001111010100 | 0b01001111010100 | 0b00101111010100 | 0b01101111010100 | 0b00011111010100 | 0b01011111010100 | 0b00111111010100 | 0b01111111010100 | 0b00000000110100 | 0b01000000110100 | 0b00100000110100 | 0b01100000110100 | 0b00010000110100 | 0b01010000110100 | 0b00110000110100 | 0b01110000110100 | 0b00001000110100 | 0b01001000110100 | 0b00101000110100 | 0b01101000110100 | 0b00011000110100 | 0b01011000110100 | 0b00111000110100 | 0b01111000110100 | 0b00000100110100 | 0b01000100110100 | 0b00100100110100 | 0b01100100110100 | 0b00010100110100 | 0b01010100110100 | 0b00110100110100 | 0b01110100110100 | 0b00001100110100 | 0b01001100110100 | 0b00101100110100 | 0b01101100110100 | 0b00011100110100 | 0b01011100110100 | 0b00111100110100 | 0b01111100110100 | 0b00000010110100 | 0b01000010110100 | 0b00100010110100 | 0b01100010110100 | 0b00010010110100 | 0b01010010110100 | 0b00110010110100 | 0b01110010110100 | 0b00001010110100 | 0b01001010110100 | 0b00101010110100 | 0b01101010110100 | 0b00011010110100 | 0b01011010110100 | 0b00111010110100 | 0b01111010110100 | 0b00000110110100 | 0b01000110110100 | 0b00100110110100 | 0b01100110110100 | 0b00010110110100 | 0b01010110110100 | 0b00110110110100 | 0b01110110110100 | 0b00001110110100 | 0b01001110110100 | 0b00101110110100 | 0b01101110110100 | 0b00011110110100 | 0b01011110110100 | 0b00111110110100 | 0b01111110110100 | 0b00000001110100 | 0b01000001110100 | 0b00100001110100 | 0b01100001110100 | 0b00010001110100 | 0b01010001110100 | 0b00110001110100 | 0b01110001110100 | 0b00001001110100 | 0b01001001110100 | 0b00101001110100 | 0b01101001110100 | 0b00011001110100 | 0b01011001110100 | 0b00111001110100 | 0b01111001110100 | 0b00000101110100 | 0b01000101110100 | 0b00100101110100 | 0b01100101110100 | 0b00010101110100 | 0b01010101110100 | 0b00110101110100 | 0b01110101110100 | 0b00001101110100 | 0b01001101110100 | 0b00101101110100 | 0b01101101110100 | 0b00011101110100 | 0b01011101110100 | 0b00111101110100 | 0b01111101110100 | 0b00000011110100 | 0b01000011110100 | 0b00100011110100 | 0b01100011110100 | 0b00010011110100 | 0b01010011110100 | 0b00110011110100 | 0b01110011110100 | 0b00001011110100 | 0b01001011110100 | 0b00101011110100 | 0b01101011110100 | 0b00011011110100 | 0b01011011110100 | 0b00111011110100 | 0b01111011110100 | 0b00000111110100 | 0b01000111110100 | 0b00100111110100 | 0b01100111110100 | 0b00010111110100 | 0b01010111110100 | 0b00110111110100 | 0b01110111110100 | 0b00001111110100 | 0b01001111110100 | 0b00101111110100 | 0b01101111110100 | 0b00011111110100 | 0b01011111110100 | 0b00111111110100 | 0b01111111110100 | 0b00000000001100 | 0b01000000001100 | 0b00100000001100 | 0b01100000001100 | 0b00010000001100 | 0b01010000001100 | 0b00110000001100 | 0b01110000001100 | 0b00001000001100 | 0b01001000001100 | 0b00101000001100 | 0b01101000001100 | 0b00011000001100 | 0b01011000001100 | 0b00111000001100 | 0b01111000001100 | 0b00000100001100 | 0b01000100001100 | 0b00100100001100 | 0b01100100001100 | 0b00010100001100 | 0b01010100001100 | 0b00110100001100 | 0b01110100001100 | 0b00001100001100 | 0b01001100001100 | 0b00101100001100 | 0b01101100001100 | 0b00011100001100 | 0b01011100001100 | 0b00111100001100 | 0b01111100001100 | 0b00000010001100 | 0b01000010001100 | 0b00100010001100 | 0b01100010001100 | 0b00010010001100 | 0b01010010001100 | 0b00110010001100 | 0b01110010001100 | 0b00001010001100 | 0b01001010001100 | 0b00101010001100 | 0b01101010001100 | 0b00011010001100 | 0b01011010001100 | 0b00111010001100 | 0b01111010001100 | 0b00000110001100 | 0b01000110001100 | 0b00100110001100 | 0b01100110001100 | 0b00010110001100 | 0b01010110001100 | 0b00110110001100 | 0b01110110001100 | 0b00001110001100 | 0b01001110001100 | 0b00101110001100 | 0b01101110001100 | 0b00011110001100 | 0b01011110001100 | 0b00111110001100 | 0b01111110001100 | 0b00000001001100 | 0b01000001001100 | 0b00100001001100 | 0b01100001001100 | 0b00010001001100 | 0b01010001001100 | 0b00110001001100 | 0b01110001001100 | 0b00001001001100 | 0b01001001001100 | 0b00101001001100 | 0b01101001001100 | 0b00011001001100 | 0b01011001001100 | 0b00111001001100 | 0b01111001001100 | 0b00000101001100 | 0b01000101001100 | 0b00100101001100 | 0b01100101001100 | 0b00010101001100 | 0b01010101001100 | 0b00110101001100 | 0b01110101001100 | 0b00001101001100 | 0b01001101001100 | 0b00101101001100 | 0b01101101001100 | 0b00011101001100 | 0b01011101001100 | 0b00111101001100 | 0b01111101001100 | 0b00000011001100 | 0b01000011001100 | 0b00100011001100 | 0b01100011001100 | 0b00010011001100 | 0b01010011001100 | 0b00110011001100 | 0b01110011001100 | 0b00001011001100 | 0b01001011001100 | 0b00101011001100 | 0b01101011001100 | 0b00011011001100 | 0b01011011001100 | 0b00111011001100 | 0b01111011001100 | 0b00000111001100 | 0b01000111001100 | 0b00100111001100 | 0b01100111001100 | 0b00010111001100 | 0b01010111001100 | 0b00110111001100 | 0b01110111001100 | 0b00001111001100 | 0b01001111001100 | 0b00101111001100 | 0b01101111001100 | 0b00011111001100 | 0b01011111001100 | 0b00111111001100 | 0b01111111001100 | 0b00000000101100 | 0b01000000101100 | 0b00100000101100 | 0b01100000101100 | 0b00010000101100 | 0b01010000101100 | 0b00110000101100 | 0b01110000101100 | 0b00001000101100 | 0b01001000101100 | 0b00101000101100 | 0b01101000101100 | 0b00011000101100 | 0b01011000101100 | 0b00111000101100 | 0b01111000101100 | 0b00000100101100 | 0b01000100101100 | 0b00100100101100 | 0b01100100101100 | 0b00010100101100 | 0b01010100101100 | 0b00110100101100 | 0b01110100101100 | 0b00001100101100 | 0b01001100101100 | 0b00101100101100 | 0b01101100101100 | 0b00011100101100 | 0b01011100101100 | 0b00111100101100 | 0b01111100101100 | 0b00000010101100 | 0b01000010101100 | 0b00100010101100 | 0b01100010101100 | 0b00010010101100 | 0b01010010101100 | 0b00110010101100 | 0b01110010101100 | 0b00001010101100 | 0b01001010101100 | 0b00101010101100 | 0b01101010101100 | 0b00011010101100 | 0b01011010101100 | 0b00111010101100 | 0b01111010101100 | 0b00000110101100 | 0b01000110101100 | 0b00100110101100 | 0b01100110101100 | 0b00010110101100 | 0b01010110101100 | 0b00110110101100 | 0b01110110101100 | 0b00001110101100 | 0b01001110101100 | 0b00101110101100 | 0b01101110101100 | 0b00011110101100 | 0b01011110101100 | 0b00111110101100 | 0b01111110101100 | 0b00000001101100 | 0b01000001101100 | 0b00100001101100 | 0b01100001101100 | 0b00010001101100 | 0b01010001101100 | 0b00110001101100 | 0b01110001101100 | 0b00001001101100 | 0b01001001101100 | 0b00101001101100 | 0b01101001101100 | 0b00011001101100 | 0b01011001101100 | 0b00111001101100 | 0b01111001101100 | 0b00000101101100 | 0b01000101101100 | 0b00100101101100 | 0b01100101101100 | 0b00010101101100 | 0b01010101101100 | 0b00110101101100 | 0b01110101101100 | 0b00001101101100 | 0b01001101101100 | 0b00101101101100 | 0b01101101101100 | 0b00011101101100 | 0b01011101101100 | 0b00111101101100 | 0b01111101101100 | 0b00000011101100 | 0b01000011101100 | 0b00100011101100 | 0b01100011101100 | 0b00010011101100 | 0b01010011101100 | 0b00110011101100 | 0b01110011101100 | 0b00001011101100 | 0b01001011101100 | 0b00101011101100 | 0b01101011101100 | 0b00011011101100 | 0b01011011101100 | 0b00111011101100 | 0b01111011101100 | 0b00000111101100 | 0b01000111101100 | 0b00100111101100 | 0b01100111101100 | 0b00010111101100 | 0b01010111101100 | 0b00110111101100 | 0b01110111101100 | 0b00001111101100 | 0b01001111101100 | 0b00101111101100 | 0b01101111101100 | 0b00011111101100 | 0b01011111101100 | 0b00111111101100 | 0b01111111101100 | 0b00000000011100 | 0b01000000011100 | 0b00100000011100 | 0b01100000011100 | 0b00010000011100 | 0b01010000011100 | 0b00110000011100 | 0b01110000011100 | 0b00001000011100 | 0b01001000011100 | 0b00101000011100 | 0b01101000011100 | 0b00011000011100 | 0b01011000011100 | 0b00111000011100 | 0b01111000011100 | 0b00000100011100 | 0b01000100011100 | 0b00100100011100 | 0b01100100011100 | 0b00010100011100 | 0b01010100011100 | 0b00110100011100 | 0b01110100011100 | 0b00001100011100 | 0b01001100011100 | 0b00101100011100 | 0b01101100011100 | 0b00011100011100 | 0b01011100011100 | 0b00111100011100 | 0b01111100011100 | 0b00000010011100 | 0b01000010011100 | 0b00100010011100 | 0b01100010011100 | 0b00010010011100 | 0b01010010011100 | 0b00110010011100 | 0b01110010011100 | 0b00001010011100 | 0b01001010011100 | 0b00101010011100 | 0b01101010011100 | 0b00011010011100 | 0b01011010011100 | 0b00111010011100 | 0b01111010011100 | 0b00000110011100 | 0b01000110011100 | 0b00100110011100 | 0b01100110011100 | 0b00010110011100 | 0b01010110011100 | 0b00110110011100 | 0b01110110011100 | 0b00001110011100 | 0b01001110011100 | 0b00101110011100 | 0b01101110011100 | 0b00011110011100 | 0b01011110011100 | 0b00111110011100 | 0b01111110011100 | 0b00000001011100 | 0b01000001011100 | 0b00100001011100 | 0b01100001011100 | 0b00010001011100 | 0b01010001011100 | 0b00110001011100 | 0b01110001011100 | 0b00001001011100 | 0b01001001011100 | 0b00101001011100 | 0b01101001011100 | 0b00011001011100 | 0b01011001011100 | 0b00111001011100 | 0b01111001011100 | 0b00000101011100 | 0b01000101011100 | 0b00100101011100 | 0b01100101011100 | 0b00010101011100 | 0b01010101011100 | 0b00110101011100 | 0b01110101011100 | 0b00001101011100 | 0b01001101011100 | 0b00101101011100 | 0b01101101011100 | 0b00011101011100 | 0b01011101011100 | 0b00111101011100 | 0b01111101011100 | 0b00000011011100 | 0b01000011011100 | 0b00100011011100 | 0b01100011011100 | 0b00010011011100 | 0b01010011011100 | 0b00110011011100 | 0b01110011011100 | 0b00001011011100 | 0b01001011011100 | 0b00101011011100 | 0b01101011011100 | 0b00011011011100 | 0b01011011011100 | 0b00111011011100 | 0b01111011011100 | 0b00000111011100 | 0b01000111011100 | 0b00100111011100 | 0b01100111011100 | 0b00010111011100 | 0b01010111011100 | 0b00110111011100 | 0b01110111011100 | 0b00001111011100 | 0b01001111011100 | 0b00101111011100 | 0b01101111011100 | 0b00011111011100 | 0b01011111011100 | 0b00111111011100 | 0b01111111011100 | 0b00000000111100 | 0b01000000111100 | 0b00100000111100 | 0b01100000111100 | 0b00010000111100 | 0b01010000111100 | 0b00110000111100 | 0b01110000111100 | 0b00001000111100 | 0b01001000111100 | 0b00101000111100 | 0b01101000111100 | 0b00011000111100 | 0b01011000111100 | 0b00111000111100 | 0b01111000111100 | 0b00000100111100 | 0b01000100111100 | 0b00100100111100 | 0b01100100111100 | 0b00010100111100 | 0b01010100111100 | 0b00110100111100 | 0b01110100111100 | 0b00001100111100 | 0b01001100111100 | 0b00101100111100 | 0b01101100111100 | 0b00011100111100 | 0b01011100111100 | 0b00111100111100 | 0b01111100111100 | 0b00000010111100 | 0b01000010111100 | 0b00100010111100 | 0b01100010111100 | 0b00010010111100 | 0b01010010111100 | 0b00110010111100 | 0b01110010111100 | 0b00001010111100 | 0b01001010111100 | 0b00101010111100 | 0b01101010111100 | 0b00011010111100 | 0b01011010111100 | 0b00111010111100 | 0b01111010111100 | 0b00000110111100 | 0b01000110111100 | 0b00100110111100 | 0b01100110111100 | 0b00010110111100 | 0b01010110111100 | 0b00110110111100 | 0b01110110111100 | 0b00001110111100 | 0b01001110111100 | 0b00101110111100 | 0b01101110111100 | 0b00011110111100 | 0b01011110111100 | 0b00111110111100 | 0b01111110111100 | 0b00000001111100 | 0b01000001111100 | 0b00100001111100 | 0b01100001111100 | 0b00010001111100 | 0b01010001111100 | 0b00110001111100 | 0b01110001111100 | 0b00001001111100 | 0b01001001111100 | 0b00101001111100 | 0b01101001111100 | 0b00011001111100 | 0b01011001111100 | 0b00111001111100 | 0b01111001111100 | 0b00000101111100 | 0b01000101111100 | 0b00100101111100 | 0b01100101111100 | 0b00010101111100 | 0b01010101111100 | 0b00110101111100 | 0b01110101111100 | 0b00001101111100 | 0b01001101111100 | 0b00101101111100 | 0b01101101111100 | 0b00011101111100 | 0b01011101111100 | 0b00111101111100 | 0b01111101111100 | 0b00000011111100 | 0b01000011111100 | 0b00100011111100 | 0b01100011111100 | 0b00010011111100 | 0b01010011111100 | 0b00110011111100 | 0b01110011111100 | 0b00001011111100 | 0b01001011111100 | 0b00101011111100 | 0b01101011111100 | 0b00011011111100 | 0b01011011111100 | 0b00111011111100 | 0b01111011111100 | 0b00000111111100 | 0b01000111111100 | 0b00100111111100 | 0b01100111111100 | 0b00010111111100 | 0b01010111111100 | 0b00110111111100 | 0b01110111111100 | 0b00001111111100 | 0b01001111111100 | 0b00101111111100 | 0b01101111111100 | 0b00011111111100 | 0b01011111111100 | 0b00111111111100 | 0b01111111111100 | 0b00000000000010 | 0b01000000000010 | 0b00100000000010 | 0b01100000000010 | 0b00010000000010 | 0b01010000000010 | 0b00110000000010 | 0b01110000000010 | 0b00001000000010 | 0b01001000000010 | 0b00101000000010 | 0b01101000000010 | 0b00011000000010 | 0b01011000000010 | 0b00111000000010 | 0b01111000000010 | 0b00000100000010 | 0b01000100000010 | 0b00100100000010 | 0b01100100000010 | 0b00010100000010 | 0b01010100000010 | 0b00110100000010 | 0b01110100000010 | 0b00001100000010 | 0b01001100000010 | 0b00101100000010 | 0b01101100000010 | 0b00011100000010 | 0b01011100000010 | 0b00111100000010 | 0b01111100000010 | 0b00000010000010 | 0b01000010000010 | 0b00100010000010 | 0b01100010000010 | 0b00010010000010 | 0b01010010000010 | 0b00110010000010 | 0b01110010000010 | 0b00001010000010 | 0b01001010000010 | 0b00101010000010 | 0b01101010000010 | 0b00011010000010 | 0b01011010000010 | 0b00111010000010 | 0b01111010000010 | 0b00000110000010 | 0b01000110000010 | 0b00100110000010 | 0b01100110000010 | 0b00010110000010 | 0b01010110000010 | 0b00110110000010 | 0b01110110000010 | 0b00001110000010 | 0b01001110000010 | 0b00101110000010 | 0b01101110000010 | 0b00011110000010 | 0b01011110000010 | 0b00111110000010 | 0b01111110000010 | 0b00000001000010 | 0b01000001000010 | 0b00100001000010 | 0b01100001000010 | 0b00010001000010 | 0b01010001000010 | 0b00110001000010 | 0b01110001000010 | 0b00001001000010 | 0b01001001000010 | 0b00101001000010 | 0b01101001000010 | 0b00011001000010 | 0b01011001000010 | 0b00111001000010 | 0b01111001000010 | 0b00000101000010 | 0b01000101000010 | 0b00100101000010 | 0b01100101000010 | 0b00010101000010 | 0b01010101000010 | 0b00110101000010 | 0b01110101000010 | 0b00001101000010 | 0b01001101000010 | 0b00101101000010 | 0b01101101000010 | 0b00011101000010 | 0b01011101000010 | 0b00111101000010 | 0b01111101000010 | 0b00000011000010 | 0b01000011000010 | 0b00100011000010 | 0b01100011000010 | 0b00010011000010 | 0b01010011000010 | 0b00110011000010 | 0b01110011000010 | 0b00001011000010 | 0b01001011000010 | 0b00101011000010 | 0b01101011000010 | 0b00011011000010 | 0b01011011000010 | 0b00111011000010 | 0b01111011000010 | 0b00000111000010 | 0b01000111000010 | 0b00100111000010 | 0b01100111000010 | 0b00010111000010 | 0b01010111000010 | 0b00110111000010 | 0b01110111000010 | 0b00001111000010 | 0b01001111000010 | 0b00101111000010 | 0b01101111000010 | 0b00011111000010 | 0b01011111000010 | 0b00111111000010 | 0b01111111000010 | 0b00000000100010 | 0b01000000100010 | 0b00100000100010 | 0b01100000100010 | 0b00010000100010 | 0b01010000100010 | 0b00110000100010 | 0b01110000100010 | 0b00001000100010 | 0b01001000100010 | 0b00101000100010 | 0b01101000100010 | 0b00011000100010 | 0b01011000100010 | 0b00111000100010 | 0b01111000100010 | 0b00000100100010 | 0b01000100100010 | 0b00100100100010 | 0b01100100100010 | 0b00010100100010 | 0b01010100100010 | 0b00110100100010 | 0b01110100100010 | 0b00001100100010 | 0b01001100100010 | 0b00101100100010 | 0b01101100100010 | 0b00011100100010 | 0b01011100100010 | 0b00111100100010 | 0b01111100100010 | 0b00000010100010 | 0b01000010100010 | 0b00100010100010 | 0b01100010100010 | 0b00010010100010 | 0b01010010100010 | 0b00110010100010 | 0b01110010100010 | 0b00001010100010 | 0b01001010100010 | 0b00101010100010 | 0b01101010100010 | 0b00011010100010 | 0b01011010100010 | 0b00111010100010 | 0b01111010100010 | 0b00000110100010 | 0b01000110100010 | 0b00100110100010 | 0b01100110100010 | 0b00010110100010 | 0b01010110100010 | 0b00110110100010 | 0b01110110100010 | 0b00001110100010 | 0b01001110100010 | 0b00101110100010 | 0b01101110100010 | 0b00011110100010 | 0b01011110100010 | 0b00111110100010 | 0b01111110100010 | 0b00000001100010 | 0b01000001100010 | 0b00100001100010 | 0b01100001100010 | 0b00010001100010 | 0b01010001100010 | 0b00110001100010 | 0b01110001100010 | 0b00001001100010 | 0b01001001100010 | 0b00101001100010 | 0b01101001100010 | 0b00011001100010 | 0b01011001100010 | 0b00111001100010 | 0b01111001100010 | 0b00000101100010 | 0b01000101100010 | 0b00100101100010 | 0b01100101100010 | 0b00010101100010 | 0b01010101100010 | 0b00110101100010 | 0b01110101100010 | 0b00001101100010 | 0b01001101100010 | 0b00101101100010 | 0b01101101100010 | 0b00011101100010 | 0b01011101100010 | 0b00111101100010 | 0b01111101100010 | 0b00000011100010 | 0b01000011100010 | 0b00100011100010 | 0b01100011100010 | 0b00010011100010 | 0b01010011100010 | 0b00110011100010 | 0b01110011100010 | 0b00001011100010 | 0b01001011100010 | 0b00101011100010 | 0b01101011100010 | 0b00011011100010 | 0b01011011100010 | 0b00111011100010 | 0b01111011100010 | 0b00000111100010 | 0b01000111100010 | 0b00100111100010 | 0b01100111100010 | 0b00010111100010 | 0b01010111100010 | 0b00110111100010 | 0b01110111100010 | 0b00001111100010 | 0b01001111100010 | 0b00101111100010 | 0b01101111100010 | 0b00011111100010 | 0b01011111100010 | 0b00111111100010 | 0b01111111100010 | 0b00000000010010 | 0b01000000010010 | 0b00100000010010 | 0b01100000010010 | 0b00010000010010 | 0b01010000010010 | 0b00110000010010 | 0b01110000010010 | 0b00001000010010 | 0b01001000010010 | 0b00101000010010 | 0b01101000010010 | 0b00011000010010 | 0b01011000010010 | 0b00111000010010 | 0b01111000010010 | 0b00000100010010 | 0b01000100010010 | 0b00100100010010 | 0b01100100010010 | 0b00010100010010 | 0b01010100010010 | 0b00110100010010 | 0b01110100010010 | 0b00001100010010 | 0b01001100010010 | 0b00101100010010 | 0b01101100010010 | 0b00011100010010 | 0b01011100010010 | 0b00111100010010 | 0b01111100010010 | 0b00000010010010 | 0b01000010010010 | 0b00100010010010 | 0b01100010010010 | 0b00010010010010 | 0b01010010010010 | 0b00110010010010 | 0b01110010010010 | 0b00001010010010 | 0b01001010010010 | 0b00101010010010 | 0b01101010010010 | 0b00011010010010 | 0b01011010010010 | 0b00111010010010 | 0b01111010010010 | 0b00000110010010 | 0b01000110010010 | 0b00100110010010 | 0b01100110010010 | 0b00010110010010 | 0b01010110010010 | 0b00110110010010 | 0b01110110010010 | 0b00001110010010 | 0b01001110010010 | 0b00101110010010 | 0b01101110010010 | 0b00011110010010 | 0b01011110010010 | 0b00111110010010 | 0b01111110010010 | 0b00000001010010 | 0b01000001010010 | 0b00100001010010 | 0b01100001010010 | 0b00010001010010 | 0b01010001010010 | 0b00110001010010 | 0b01110001010010 | 0b00001001010010 | 0b01001001010010 | 0b00101001010010 | 0b01101001010010 | 0b00011001010010 | 0b01011001010010 | 0b00111001010010 | 0b01111001010010 | 0b00000101010010 | 0b01000101010010 | 0b00100101010010 | 0b01100101010010 | 0b00010101010010 | 0b01010101010010 | 0b00110101010010 | 0b01110101010010 | 0b00001101010010 | 0b01001101010010 | 0b00101101010010 | 0b01101101010010 | 0b00011101010010 | 0b01011101010010 | 0b00111101010010 | 0b01111101010010 | 0b00000011010010 | 0b01000011010010 | 0b00100011010010 | 0b01100011010010 | 0b00010011010010 | 0b01010011010010 | 0b00110011010010 | 0b01110011010010 | 0b00001011010010 | 0b01001011010010 | 0b00101011010010 | 0b01101011010010 | 0b00011011010010 | 0b01011011010010 | 0b00111011010010 | 0b01111011010010 | 0b00000111010010 | 0b01000111010010 | 0b00100111010010 | 0b01100111010010 | 0b00010111010010 | 0b01010111010010 | 0b00110111010010 | 0b01110111010010 | 0b00001111010010 | 0b01001111010010 | 0b00101111010010 | 0b01101111010010 | 0b00011111010010 | 0b01011111010010 | 0b00111111010010 | 0b01111111010010 | 0b00000000110010 | 0b01000000110010 | 0b00100000110010 | 0b01100000110010 | 0b00010000110010 | 0b01010000110010 | 0b00110000110010 | 0b01110000110010 | 0b00001000110010 | 0b01001000110010 | 0b00101000110010 | 0b01101000110010 | 0b00011000110010 | 0b01011000110010 | 0b00111000110010 | 0b01111000110010 | 0b00000100110010 | 0b01000100110010 | 0b00100100110010 | 0b01100100110010 | 0b00010100110010 | 0b01010100110010 | 0b00110100110010 | 0b01110100110010 | 0b00001100110010 | 0b01001100110010 | 0b00101100110010 | 0b01101100110010 | 0b00011100110010 | 0b01011100110010 | 0b00111100110010 | 0b01111100110010 | 0b00000010110010 | 0b01000010110010 | 0b00100010110010 | 0b01100010110010 | 0b00010010110010 | 0b01010010110010 | 0b00110010110010 | 0b01110010110010 | 0b00001010110010 | 0b01001010110010 | 0b00101010110010 | 0b01101010110010 | 0b00011010110010 | 0b01011010110010 | 0b00111010110010 | 0b01111010110010 | 0b00000110110010 | 0b01000110110010 | 0b00100110110010 | 0b01100110110010 | 0b00010110110010 | 0b01010110110010 | 0b00110110110010 | 0b01110110110010 | 0b00001110110010 | 0b01001110110010 | 0b00101110110010 | 0b01101110110010 | 0b00011110110010 | 0b01011110110010 | 0b00111110110010 | 0b01111110110010 | 0b00000001110010 | 0b01000001110010 | 0b00100001110010 | 0b01100001110010 | 0b00010001110010 | 0b01010001110010 | 0b00110001110010 | 0b01110001110010 | 0b00001001110010 | 0b01001001110010 | 0b00101001110010 | 0b01101001110010 | 0b00011001110010 | 0b01011001110010 | 0b00111001110010 | 0b01111001110010 | 0b00000101110010 | 0b01000101110010 | 0b00100101110010 | 0b01100101110010 | 0b00010101110010 | 0b01010101110010 | 0b00110101110010 | 0b01110101110010 | 0b00001101110010 | 0b01001101110010 | 0b00101101110010 | 0b01101101110010 | 0b00011101110010 | 0b01011101110010 | 0b00111101110010 | 0b01111101110010 | 0b00000011110010 | 0b01000011110010 | 0b00100011110010 | 0b01100011110010 | 0b00010011110010 | 0b01010011110010 | 0b00110011110010 | 0b01110011110010 | 0b00001011110010 | 0b01001011110010 | 0b00101011110010 | 0b01101011110010 | 0b00011011110010 | 0b01011011110010 | 0b00111011110010 | 0b01111011110010 | 0b00000111110010 | 0b01000111110010 | 0b00100111110010 | 0b01100111110010 | 0b00010111110010 | 0b01010111110010 | 0b00110111110010 | 0b01110111110010 | 0b00001111110010 | 0b01001111110010 | 0b00101111110010 | 0b01101111110010 | 0b00011111110010 | 0b01011111110010 | 0b00111111110010 | 0b01111111110010 | 0b00000000001010 | 0b01000000001010 | 0b00100000001010 | 0b01100000001010 | 0b00010000001010 | 0b01010000001010 | 0b00110000001010 | 0b01110000001010 | 0b00001000001010 | 0b01001000001010 | 0b00101000001010 | 0b01101000001010 | 0b00011000001010 | 0b01011000001010 | 0b00111000001010 | 0b01111000001010 | 0b00000100001010 | 0b01000100001010 | 0b00100100001010 | 0b01100100001010 | 0b00010100001010 | 0b01010100001010 | 0b00110100001010 | 0b01110100001010 | 0b00001100001010 | 0b01001100001010 | 0b00101100001010 | 0b01101100001010 | 0b00011100001010 | 0b01011100001010 | 0b00111100001010 | 0b01111100001010 | 0b00000010001010 | 0b01000010001010 | 0b00100010001010 | 0b01100010001010 | 0b00010010001010 | 0b01010010001010 | 0b00110010001010 | 0b01110010001010 | 0b00001010001010 | 0b01001010001010 | 0b00101010001010 | 0b01101010001010 | 0b00011010001010 | 0b01011010001010 | 0b00111010001010 | 0b01111010001010 | 0b00000110001010 | 0b01000110001010 | 0b00100110001010 | 0b01100110001010 | 0b00010110001010 | 0b01010110001010 | 0b00110110001010 | 0b01110110001010 | 0b00001110001010 | 0b01001110001010 | 0b00101110001010 | 0b01101110001010 | 0b00011110001010 | 0b01011110001010 | 0b00111110001010 | 0b01111110001010 | 0b00000001001010 | 0b01000001001010 | 0b00100001001010 | 0b01100001001010 | 0b00010001001010 | 0b01010001001010 | 0b00110001001010 | 0b01110001001010 | 0b00001001001010 | 0b01001001001010 | 0b00101001001010 | 0b01101001001010 | 0b00011001001010 | 0b01011001001010 | 0b00111001001010 | 0b01111001001010 | 0b00000101001010 | 0b01000101001010 | 0b00100101001010 | 0b01100101001010 | 0b00010101001010 | 0b01010101001010 | 0b00110101001010 | 0b01110101001010 | 0b00001101001010 | 0b01001101001010 | 0b00101101001010 | 0b01101101001010 | 0b00011101001010 | 0b01011101001010 | 0b00111101001010 | 0b01111101001010 | 0b00000011001010 | 0b01000011001010 | 0b00100011001010 | 0b01100011001010 | 0b00010011001010 | 0b01010011001010 | 0b00110011001010 | 0b01110011001010 | 0b00001011001010 | 0b01001011001010 | 0b00101011001010 | 0b01101011001010 | 0b00011011001010 | 0b01011011001010 | 0b00111011001010 | 0b01111011001010 | 0b00000111001010 | 0b01000111001010 | 0b00100111001010 | 0b01100111001010 | 0b00010111001010 | 0b01010111001010 | 0b00110111001010 | 0b01110111001010 | 0b00001111001010 | 0b01001111001010 | 0b00101111001010 | 0b01101111001010 | 0b00011111001010 | 0b01011111001010 | 0b00111111001010 | 0b01111111001010 | 0b00000000101010 | 0b01000000101010 | 0b00100000101010 | 0b01100000101010 | 0b00010000101010 | 0b01010000101010 | 0b00110000101010 | 0b01110000101010 | 0b00001000101010 | 0b01001000101010 | 0b00101000101010 | 0b01101000101010 | 0b00011000101010 | 0b01011000101010 | 0b00111000101010 | 0b01111000101010 | 0b00000100101010 | 0b01000100101010 | 0b00100100101010 | 0b01100100101010 | 0b00010100101010 | 0b01010100101010 | 0b00110100101010 | 0b01110100101010 | 0b00001100101010 | 0b01001100101010 | 0b00101100101010 | 0b01101100101010 | 0b00011100101010 | 0b01011100101010 | 0b00111100101010 | 0b01111100101010 | 0b00000010101010 | 0b01000010101010 | 0b00100010101010 | 0b01100010101010 | 0b00010010101010 | 0b01010010101010 | 0b00110010101010 | 0b01110010101010 | 0b00001010101010 | 0b01001010101010 | 0b00101010101010 | 0b01101010101010 | 0b00011010101010 | 0b01011010101010 | 0b00111010101010 | 0b01111010101010 | 0b00000110101010 | 0b01000110101010 | 0b00100110101010 | 0b01100110101010 | 0b00010110101010 | 0b01010110101010 | 0b00110110101010 | 0b01110110101010 | 0b00001110101010 | 0b01001110101010 | 0b00101110101010 | 0b01101110101010 | 0b00011110101010 | 0b01011110101010 | 0b00111110101010 | 0b01111110101010 | 0b00000001101010 | 0b01000001101010 | 0b00100001101010 | 0b01100001101010 | 0b00010001101010 | 0b01010001101010 | 0b00110001101010 | 0b01110001101010 | 0b00001001101010 | 0b01001001101010 | 0b00101001101010 | 0b01101001101010 | 0b00011001101010 | 0b01011001101010 | 0b00111001101010 | 0b01111001101010 | 0b00000101101010 | 0b01000101101010 | 0b00100101101010 | 0b01100101101010 | 0b00010101101010 | 0b01010101101010 | 0b00110101101010 | 0b01110101101010 | 0b00001101101010 | 0b01001101101010 | 0b00101101101010 | 0b01101101101010 | 0b00011101101010 | 0b01011101101010 | 0b00111101101010 | 0b01111101101010 | 0b00000011101010 | 0b01000011101010 | 0b00100011101010 | 0b01100011101010 | 0b00010011101010 | 0b01010011101010 | 0b00110011101010 | 0b01110011101010 | 0b00001011101010 | 0b01001011101010 | 0b00101011101010 | 0b01101011101010 | 0b00011011101010 | 0b01011011101010 | 0b00111011101010 | 0b01111011101010 | 0b00000111101010 | 0b01000111101010 | 0b00100111101010 | 0b01100111101010 | 0b00010111101010 | 0b01010111101010 | 0b00110111101010 | 0b01110111101010 | 0b00001111101010 | 0b01001111101010 | 0b00101111101010 | 0b01101111101010 | 0b00011111101010 | 0b01011111101010 | 0b00111111101010 | 0b01111111101010 | 0b00000000011010 | 0b01000000011010 | 0b00100000011010 | 0b01100000011010 | 0b00010000011010 | 0b01010000011010 | 0b00110000011010 | 0b01110000011010 | 0b00001000011010 | 0b01001000011010 | 0b00101000011010 | 0b01101000011010 | 0b00011000011010 | 0b01011000011010 | 0b00111000011010 | 0b01111000011010 | 0b00000100011010 | 0b01000100011010 | 0b00100100011010 | 0b01100100011010 | 0b00010100011010 | 0b01010100011010 | 0b00110100011010 | 0b01110100011010 | 0b00001100011010 | 0b01001100011010 | 0b00101100011010 | 0b01101100011010 | 0b00011100011010 | 0b01011100011010 | 0b00111100011010 | 0b01111100011010 | 0b00000010011010 | 0b01000010011010 | 0b00100010011010 | 0b01100010011010 | 0b00010010011010 | 0b01010010011010 | 0b00110010011010 | 0b01110010011010 | 0b00001010011010 | 0b01001010011010 | 0b00101010011010 | 0b01101010011010 | 0b00011010011010 | 0b01011010011010 | 0b00111010011010 | 0b01111010011010 | 0b00000110011010 | 0b01000110011010 | 0b00100110011010 | 0b01100110011010 | 0b00010110011010 | 0b01010110011010 | 0b00110110011010 | 0b01110110011010 | 0b00001110011010 | 0b01001110011010 | 0b00101110011010 | 0b01101110011010 | 0b00011110011010 | 0b01011110011010 | 0b00111110011010 | 0b01111110011010 | 0b00000001011010 | 0b01000001011010 | 0b00100001011010 | 0b01100001011010 | 0b00010001011010 | 0b01010001011010 | 0b00110001011010 | 0b01110001011010 | 0b00001001011010 | 0b01001001011010 | 0b00101001011010 | 0b01101001011010 | 0b00011001011010 | 0b01011001011010 | 0b00111001011010 | 0b01111001011010 | 0b00000101011010 | 0b01000101011010 | 0b00100101011010 | 0b01100101011010 | 0b00010101011010 | 0b01010101011010 | 0b00110101011010 | 0b01110101011010 | 0b00001101011010 | 0b01001101011010 | 0b00101101011010 | 0b01101101011010 | 0b00011101011010 | 0b01011101011010 | 0b00111101011010 | 0b01111101011010 | 0b00000011011010 | 0b01000011011010 | 0b00100011011010 | 0b01100011011010 | 0b00010011011010 | 0b01010011011010 | 0b00110011011010 | 0b01110011011010 | 0b00001011011010 | 0b01001011011010 | 0b00101011011010 | 0b01101011011010 | 0b00011011011010 | 0b01011011011010 | 0b00111011011010 | 0b01111011011010 | 0b00000111011010 | 0b01000111011010 | 0b00100111011010 | 0b01100111011010 | 0b00010111011010 | 0b01010111011010 | 0b00110111011010 | 0b01110111011010 | 0b00001111011010 | 0b01001111011010 | 0b00101111011010 | 0b01101111011010 | 0b00011111011010 | 0b01011111011010 | 0b00111111011010 | 0b01111111011010 | 0b00000000111010 | 0b01000000111010 | 0b00100000111010 | 0b01100000111010 | 0b00010000111010 | 0b01010000111010 | 0b00110000111010 | 0b01110000111010 | 0b00001000111010 | 0b01001000111010 | 0b00101000111010 | 0b01101000111010 | 0b00011000111010 | 0b01011000111010 | 0b00111000111010 | 0b01111000111010 | 0b00000100111010 | 0b01000100111010 | 0b00100100111010 | 0b01100100111010 | 0b00010100111010 | 0b01010100111010 | 0b00110100111010 | 0b01110100111010 | 0b00001100111010 | 0b01001100111010 | 0b00101100111010 | 0b01101100111010 | 0b00011100111010 | 0b01011100111010 | 0b00111100111010 | 0b01111100111010 | 0b00000010111010 | 0b01000010111010 | 0b00100010111010 | 0b01100010111010 | 0b00010010111010 | 0b01010010111010 | 0b00110010111010 | 0b01110010111010 | 0b00001010111010 | 0b01001010111010 | 0b00101010111010 | 0b01101010111010 | 0b00011010111010 | 0b01011010111010 | 0b00111010111010 | 0b01111010111010 | 0b00000110111010 | 0b01000110111010 | 0b00100110111010 | 0b01100110111010 | 0b00010110111010 | 0b01010110111010 | 0b00110110111010 | 0b01110110111010 | 0b00001110111010 | 0b01001110111010 | 0b00101110111010 | 0b01101110111010 | 0b00011110111010 | 0b01011110111010 | 0b00111110111010 | 0b01111110111010 | 0b00000001111010 | 0b01000001111010 | 0b00100001111010 | 0b01100001111010 | 0b00010001111010 | 0b01010001111010 | 0b00110001111010 | 0b01110001111010 | 0b00001001111010 | 0b01001001111010 | 0b00101001111010 | 0b01101001111010 | 0b00011001111010 | 0b01011001111010 | 0b00111001111010 | 0b01111001111010 | 0b00000101111010 | 0b01000101111010 | 0b00100101111010 | 0b01100101111010 | 0b00010101111010 | 0b01010101111010 | 0b00110101111010 | 0b01110101111010 | 0b00001101111010 | 0b01001101111010 | 0b00101101111010 | 0b01101101111010 | 0b00011101111010 | 0b01011101111010 | 0b00111101111010 | 0b01111101111010 | 0b00000011111010 | 0b01000011111010 | 0b00100011111010 | 0b01100011111010 | 0b00010011111010 | 0b01010011111010 | 0b00110011111010 | 0b01110011111010 | 0b00001011111010 | 0b01001011111010 | 0b00101011111010 | 0b01101011111010 | 0b00011011111010 | 0b01011011111010 | 0b00111011111010 | 0b01111011111010 | 0b00000111111010 | 0b01000111111010 | 0b00100111111010 | 0b01100111111010 | 0b00010111111010 | 0b01010111111010 | 0b00110111111010 | 0b01110111111010 | 0b00001111111010 | 0b01001111111010 | 0b00101111111010 | 0b01101111111010 | 0b00011111111010 | 0b01011111111010 | 0b00111111111010 | 0b01111111111010 | 0b00000000000110 | 0b01000000000110 | 0b00100000000110 | 0b01100000000110 | 0b00010000000110 | 0b01010000000110 | 0b00110000000110 | 0b01110000000110 | 0b00001000000110 | 0b01001000000110 | 0b00101000000110 | 0b01101000000110 | 0b00011000000110 | 0b01011000000110 | 0b00111000000110 | 0b01111000000110 | 0b00000100000110 | 0b01000100000110 | 0b00100100000110 | 0b01100100000110 | 0b00010100000110 | 0b01010100000110 | 0b00110100000110 | 0b01110100000110 | 0b00001100000110 | 0b01001100000110 | 0b00101100000110 | 0b01101100000110 | 0b00011100000110 | 0b01011100000110 | 0b00111100000110 | 0b01111100000110 | 0b00000010000110 | 0b01000010000110 | 0b00100010000110 | 0b01100010000110 | 0b00010010000110 | 0b01010010000110 | 0b00110010000110 | 0b01110010000110 | 0b00001010000110 | 0b01001010000110 | 0b00101010000110 | 0b01101010000110 | 0b00011010000110 | 0b01011010000110 | 0b00111010000110 | 0b01111010000110 | 0b00000110000110 | 0b01000110000110 | 0b00100110000110 | 0b01100110000110 | 0b00010110000110 | 0b01010110000110 | 0b00110110000110 | 0b01110110000110 | 0b00001110000110 | 0b01001110000110 | 0b00101110000110 | 0b01101110000110 | 0b00011110000110 | 0b01011110000110 | 0b00111110000110 | 0b01111110000110 | 0b00000001000110 | 0b01000001000110 | 0b00100001000110 | 0b01100001000110 | 0b00010001000110 | 0b01010001000110 | 0b00110001000110 | 0b01110001000110 | 0b00001001000110 | 0b01001001000110 | 0b00101001000110 | 0b01101001000110 | 0b00011001000110 | 0b01011001000110 | 0b00111001000110 | 0b01111001000110 | 0b00000101000110 | 0b01000101000110 | 0b00100101000110 | 0b01100101000110 | 0b00010101000110 | 0b01010101000110 | 0b00110101000110 | 0b01110101000110 | 0b00001101000110 | 0b01001101000110 | 0b00101101000110 | 0b01101101000110 | 0b00011101000110 | 0b01011101000110 | 0b00111101000110 | 0b01111101000110 | 0b00000011000110 | 0b01000011000110 | 0b00100011000110 | 0b01100011000110 | 0b00010011000110 | 0b01010011000110 | 0b00110011000110 | 0b01110011000110 | 0b00001011000110 | 0b01001011000110 | 0b00101011000110 | 0b01101011000110 | 0b00011011000110 | 0b01011011000110 | 0b00111011000110 | 0b01111011000110 | 0b00000111000110 | 0b01000111000110 | 0b00100111000110 | 0b01100111000110 | 0b00010111000110 | 0b01010111000110 | 0b00110111000110 | 0b01110111000110 | 0b00001111000110 | 0b01001111000110 | 0b00101111000110 | 0b01101111000110 | 0b00011111000110 | 0b01011111000110 | 0b00111111000110 | 0b01111111000110 | 0b00000000100110 | 0b01000000100110 | 0b00100000100110 | 0b01100000100110 | 0b00010000100110 | 0b01010000100110 | 0b00110000100110 | 0b01110000100110 | 0b00001000100110 | 0b01001000100110 | 0b00101000100110 | 0b01101000100110 | 0b00011000100110 | 0b01011000100110 | 0b00111000100110 | 0b01111000100110 | 0b00000100100110 | 0b01000100100110 | 0b00100100100110 | 0b01100100100110 | 0b00010100100110 | 0b01010100100110 | 0b00110100100110 | 0b01110100100110 | 0b00001100100110 | 0b01001100100110 | 0b00101100100110 | 0b01101100100110 | 0b00011100100110 | 0b01011100100110 | 0b00111100100110 | 0b01111100100110 | 0b00000010100110 | 0b01000010100110 | 0b00100010100110 | 0b01100010100110 | 0b00010010100110 | 0b01010010100110 | 0b00110010100110 | 0b01110010100110 | 0b00001010100110 | 0b01001010100110 | 0b00101010100110 | 0b01101010100110 | 0b00011010100110 | 0b01011010100110 | 0b00111010100110 | 0b01111010100110 | 0b00000110100110 | 0b01000110100110 | 0b00100110100110 | 0b01100110100110 | 0b00010110100110 | 0b01010110100110 | 0b00110110100110 | 0b01110110100110 | 0b00001110100110 | 0b01001110100110 | 0b00101110100110 | 0b01101110100110 | 0b00011110100110 | 0b01011110100110 | 0b00111110100110 | 0b01111110100110 | 0b00000001100110 | 0b01000001100110 | 0b00100001100110 | 0b01100001100110 | 0b00010001100110 | 0b01010001100110 | 0b00110001100110 | 0b01110001100110 | 0b00001001100110 | 0b01001001100110 | 0b00101001100110 | 0b01101001100110 | 0b00011001100110 | 0b01011001100110 | 0b00111001100110 | 0b01111001100110 | 0b00000101100110 | 0b01000101100110 | 0b00100101100110 | 0b01100101100110 | 0b00010101100110 | 0b01010101100110 | 0b00110101100110 | 0b01110101100110 | 0b00001101100110 | 0b01001101100110 | 0b00101101100110 | 0b01101101100110 | 0b00011101100110 | 0b01011101100110 | 0b00111101100110 | 0b01111101100110 | 0b00000011100110 | 0b01000011100110 | 0b00100011100110 | 0b01100011100110 | 0b00010011100110 | 0b01010011100110 | 0b00110011100110 | 0b01110011100110 | 0b00001011100110 | 0b01001011100110 | 0b00101011100110 | 0b01101011100110 | 0b00011011100110 | 0b01011011100110 | 0b00111011100110 | 0b01111011100110 | 0b00000111100110 | 0b01000111100110 | 0b00100111100110 | 0b01100111100110 | 0b00010111100110 | 0b01010111100110 | 0b00110111100110 | 0b01110111100110 | 0b00001111100110 | 0b01001111100110 | 0b00101111100110 | 0b01101111100110 | 0b00011111100110 | 0b01011111100110 | 0b00111111100110 | 0b01111111100110 | 0b00000000010110 | 0b01000000010110 | 0b00100000010110 | 0b01100000010110 | 0b00010000010110 | 0b01010000010110 | 0b00110000010110 | 0b01110000010110 | 0b00001000010110 | 0b01001000010110 | 0b00101000010110 | 0b01101000010110 | 0b00011000010110 | 0b01011000010110 | 0b00111000010110 | 0b01111000010110 | 0b00000100010110 | 0b01000100010110 | 0b00100100010110 | 0b01100100010110 | 0b00010100010110 | 0b01010100010110 | 0b00110100010110 | 0b01110100010110 | 0b00001100010110 | 0b01001100010110 | 0b00101100010110 | 0b01101100010110 | 0b00011100010110 | 0b01011100010110 | 0b00111100010110 | 0b01111100010110 | 0b00000010010110 | 0b01000010010110 | 0b00100010010110 | 0b01100010010110 | 0b00010010010110 | 0b01010010010110 | 0b00110010010110 | 0b01110010010110 | 0b00001010010110 | 0b01001010010110 | 0b00101010010110 | 0b01101010010110 | 0b00011010010110 | 0b01011010010110 | 0b00111010010110 | 0b01111010010110 | 0b00000110010110 | 0b01000110010110 | 0b00100110010110 | 0b01100110010110 | 0b00010110010110 | 0b01010110010110 | 0b00110110010110 | 0b01110110010110 | 0b00001110010110 | 0b01001110010110 | 0b00101110010110 | 0b01101110010110 | 0b00011110010110 | 0b01011110010110 | 0b00111110010110 | 0b01111110010110 | 0b00000001010110 | 0b01000001010110 | 0b00100001010110 | 0b01100001010110 | 0b00010001010110 | 0b01010001010110 | 0b00110001010110 | 0b01110001010110 | 0b00001001010110 | 0b01001001010110 | 0b00101001010110 | 0b01101001010110 | 0b00011001010110 | 0b01011001010110 | 0b00111001010110 | 0b01111001010110 | 0b00000101010110 | 0b01000101010110 | 0b00100101010110 | 0b01100101010110 | 0b00010101010110 | 0b01010101010110 | 0b00110101010110 | 0b01110101010110 | 0b00001101010110 | 0b01001101010110 | 0b00101101010110 | 0b01101101010110 | 0b00011101010110 | 0b01011101010110 | 0b00111101010110 | 0b01111101010110 | 0b00000011010110 | 0b01000011010110 | 0b00100011010110 | 0b01100011010110 | 0b00010011010110 | 0b01010011010110 | 0b00110011010110 | 0b01110011010110 | 0b00001011010110 | 0b01001011010110 | 0b00101011010110 | 0b01101011010110 | 0b00011011010110 | 0b01011011010110 | 0b00111011010110 | 0b01111011010110 | 0b00000111010110 | 0b01000111010110 | 0b00100111010110 | 0b01100111010110 | 0b00010111010110 | 0b01010111010110 | 0b00110111010110 | 0b01110111010110 | 0b00001111010110 | 0b01001111010110 | 0b00101111010110 | 0b01101111010110 | 0b00011111010110 | 0b01011111010110 | 0b00111111010110 | 0b01111111010110 | 0b00000000110110 | 0b01000000110110 | 0b00100000110110 | 0b01100000110110 | 0b00010000110110 | 0b01010000110110 | 0b00110000110110 | 0b01110000110110 | 0b00001000110110 | 0b01001000110110 | 0b00101000110110 | 0b01101000110110 | 0b00011000110110 | 0b01011000110110 | 0b00111000110110 | 0b01111000110110 | 0b00000100110110 | 0b01000100110110 | 0b00100100110110 | 0b01100100110110 | 0b00010100110110 | 0b01010100110110 | 0b00110100110110 | 0b01110100110110 | 0b00001100110110 | 0b01001100110110 | 0b00101100110110 | 0b01101100110110 | 0b00011100110110 | 0b01011100110110 | 0b00111100110110 | 0b01111100110110 | 0b00000010110110 | 0b01000010110110 | 0b00100010110110 | 0b01100010110110 | 0b00010010110110 | 0b01010010110110 | 0b00110010110110 | 0b01110010110110 | 0b00001010110110 | 0b01001010110110 | 0b00101010110110 | 0b01101010110110 | 0b00011010110110 | 0b01011010110110 | 0b00111010110110 | 0b01111010110110 | 0b00000110110110 | 0b01000110110110 | 0b00100110110110 | 0b01100110110110 | 0b00010110110110 | 0b01010110110110 | 0b00110110110110 | 0b01110110110110 | 0b00001110110110 | 0b01001110110110 | 0b00101110110110 | 0b01101110110110 | 0b00011110110110 | 0b01011110110110 | 0b00111110110110 | 0b01111110110110 | 0b00000001110110 | 0b01000001110110 | 0b00100001110110 | 0b01100001110110 | 0b00010001110110 | 0b01010001110110 | 0b00110001110110 | 0b01110001110110 | 0b00001001110110 | 0b01001001110110 | 0b00101001110110 | 0b01101001110110 | 0b00011001110110 | 0b01011001110110 | 0b00111001110110 | 0b01111001110110 | 0b00000101110110 | 0b01000101110110 | 0b00100101110110 | 0b01100101110110 | 0b00010101110110 | 0b01010101110110 | 0b00110101110110 | 0b01110101110110 | 0b00001101110110 | 0b01001101110110 | 0b00101101110110 | 0b01101101110110 | 0b00011101110110 | 0b01011101110110 | 0b00111101110110 | 0b01111101110110 | 0b00000011110110 | 0b01000011110110 | 0b00100011110110 | 0b01100011110110 | 0b00010011110110 | 0b01010011110110 | 0b00110011110110 | 0b01110011110110 | 0b00001011110110 | 0b01001011110110 | 0b00101011110110 | 0b01101011110110 | 0b00011011110110 | 0b01011011110110 | 0b00111011110110 | 0b01111011110110 | 0b00000111110110 | 0b01000111110110 | 0b00100111110110 | 0b01100111110110 | 0b00010111110110 | 0b01010111110110 | 0b00110111110110 | 0b01110111110110 | 0b00001111110110 | 0b01001111110110 | 0b00101111110110 | 0b01101111110110 | 0b00011111110110 | 0b01011111110110 | 0b00111111110110 | 0b01111111110110 | 0b00000000001110 | 0b01000000001110 | 0b00100000001110 | 0b01100000001110 | 0b00010000001110 | 0b01010000001110 | 0b00110000001110 | 0b01110000001110 | 0b00001000001110 | 0b01001000001110 | 0b00101000001110 | 0b01101000001110 | 0b00011000001110 | 0b01011000001110 | 0b00111000001110 | 0b01111000001110 | 0b00000100001110 | 0b01000100001110 | 0b00100100001110 | 0b01100100001110 | 0b00010100001110 | 0b01010100001110 | 0b00110100001110 | 0b01110100001110 | 0b00001100001110 | 0b01001100001110 | 0b00101100001110 | 0b01101100001110 | 0b00011100001110 | 0b01011100001110 | 0b00111100001110 | 0b01111100001110 | 0b00000010001110 | 0b01000010001110 | 0b00100010001110 | 0b01100010001110 | 0b00010010001110 | 0b01010010001110 | 0b00110010001110 | 0b01110010001110 | 0b00001010001110 | 0b01001010001110 | 0b00101010001110 | 0b01101010001110 | 0b00011010001110 | 0b01011010001110 | 0b00111010001110 | 0b01111010001110 | 0b00000110001110 | 0b01000110001110 | 0b00100110001110 | 0b01100110001110 | 0b00010110001110 | 0b01010110001110 | 0b00110110001110 | 0b01110110001110 | 0b00001110001110 | 0b01001110001110 | 0b00101110001110 | 0b01101110001110 | 0b00011110001110 | 0b01011110001110 | 0b00111110001110 | 0b01111110001110 | 0b00000001001110 | 0b01000001001110 | 0b00100001001110 | 0b01100001001110 | 0b00010001001110 | 0b01010001001110 | 0b00110001001110 | 0b01110001001110 | 0b00001001001110 | 0b01001001001110 | 0b00101001001110 | 0b01101001001110 | 0b00011001001110 | 0b01011001001110 | 0b00111001001110 | 0b01111001001110 | 0b00000101001110 | 0b01000101001110 | 0b00100101001110 | 0b01100101001110 | 0b00010101001110 | 0b01010101001110 | 0b00110101001110 | 0b01110101001110 | 0b00001101001110 | 0b01001101001110 | 0b00101101001110 | 0b01101101001110 | 0b00011101001110 | 0b01011101001110 | 0b00111101001110 | 0b01111101001110 | 0b00000011001110 | 0b01000011001110 | 0b00100011001110 | 0b01100011001110 | 0b00010011001110 | 0b01010011001110 | 0b00110011001110 | 0b01110011001110 | 0b00001011001110 | 0b01001011001110 | 0b00101011001110 | 0b01101011001110 | 0b00011011001110 | 0b01011011001110 | 0b00111011001110 | 0b01111011001110 | 0b00000111001110 | 0b01000111001110 | 0b00100111001110 | 0b01100111001110 | 0b00010111001110 | 0b01010111001110 | 0b00110111001110 | 0b01110111001110 | 0b00001111001110 | 0b01001111001110 | 0b00101111001110 | 0b01101111001110 | 0b00011111001110 | 0b01011111001110 | 0b00111111001110 | 0b01111111001110 | 0b00000000101110 | 0b01000000101110 | 0b00100000101110 | 0b01100000101110 | 0b00010000101110 | 0b01010000101110 | 0b00110000101110 | 0b01110000101110 | 0b00001000101110 | 0b01001000101110 | 0b00101000101110 | 0b01101000101110 | 0b00011000101110 | 0b01011000101110 | 0b00111000101110 | 0b01111000101110 | 0b00000100101110 | 0b01000100101110 | 0b00100100101110 | 0b01100100101110 | 0b00010100101110 | 0b01010100101110 | 0b00110100101110 | 0b01110100101110 | 0b00001100101110 | 0b01001100101110 | 0b00101100101110 | 0b01101100101110 | 0b00011100101110 | 0b01011100101110 | 0b00111100101110 | 0b01111100101110 | 0b00000010101110 | 0b01000010101110 | 0b00100010101110 | 0b01100010101110 | 0b00010010101110 | 0b01010010101110 | 0b00110010101110 | 0b01110010101110 | 0b00001010101110 | 0b01001010101110 | 0b00101010101110 | 0b01101010101110 | 0b00011010101110 | 0b01011010101110 | 0b00111010101110 | 0b01111010101110 | 0b00000110101110 | 0b01000110101110 | 0b00100110101110 | 0b01100110101110 | 0b00010110101110 | 0b01010110101110 | 0b00110110101110 | 0b01110110101110 | 0b00001110101110 | 0b01001110101110 | 0b00101110101110 | 0b01101110101110 | 0b00011110101110 | 0b01011110101110 | 0b00111110101110 | 0b01111110101110 | 0b00000001101110 | 0b01000001101110 | 0b00100001101110 | 0b01100001101110 | 0b00010001101110 | 0b01010001101110 | 0b00110001101110 | 0b01110001101110 | 0b00001001101110 | 0b01001001101110 | 0b00101001101110 | 0b01101001101110 | 0b00011001101110 | 0b01011001101110 | 0b00111001101110 | 0b01111001101110 | 0b00000101101110 | 0b01000101101110 | 0b00100101101110 | 0b01100101101110 | 0b00010101101110 | 0b01010101101110 | 0b00110101101110 | 0b01110101101110 | 0b00001101101110 | 0b01001101101110 | 0b00101101101110 | 0b01101101101110 | 0b00011101101110 | 0b01011101101110 | 0b00111101101110 | 0b01111101101110 | 0b00000011101110 | 0b01000011101110 | 0b00100011101110 | 0b01100011101110 | 0b00010011101110 | 0b01010011101110 | 0b00110011101110 | 0b01110011101110 | 0b00001011101110 | 0b01001011101110 | 0b00101011101110 | 0b01101011101110 | 0b00011011101110 | 0b01011011101110 | 0b00111011101110 | 0b01111011101110 | 0b00000111101110 | 0b01000111101110 | 0b00100111101110 | 0b01100111101110 | 0b00010111101110 | 0b01010111101110 | 0b00110111101110 | 0b01110111101110 | 0b00001111101110 | 0b01001111101110 | 0b00101111101110 | 0b01101111101110 | 0b00011111101110 | 0b01011111101110 | 0b00111111101110 | 0b01111111101110 | 0b00000000011110 | 0b01000000011110 | 0b00100000011110 | 0b01100000011110 | 0b00010000011110 | 0b01010000011110 | 0b00110000011110 | 0b01110000011110 | 0b00001000011110 | 0b01001000011110 | 0b00101000011110 | 0b01101000011110 | 0b00011000011110 | 0b01011000011110 | 0b00111000011110 | 0b01111000011110 | 0b00000100011110 | 0b01000100011110 | 0b00100100011110 | 0b01100100011110 | 0b00010100011110 | 0b01010100011110 | 0b00110100011110 | 0b01110100011110 | 0b00001100011110 | 0b01001100011110 | 0b00101100011110 | 0b01101100011110 | 0b00011100011110 | 0b01011100011110 | 0b00111100011110 | 0b01111100011110 | 0b00000010011110 | 0b01000010011110 | 0b00100010011110 | 0b01100010011110 | 0b00010010011110 | 0b01010010011110 | 0b00110010011110 | 0b01110010011110 | 0b00001010011110 | 0b01001010011110 | 0b00101010011110 | 0b01101010011110 | 0b00011010011110 | 0b01011010011110 | 0b00111010011110 | 0b01111010011110 | 0b00000110011110 | 0b01000110011110 | 0b00100110011110 | 0b01100110011110 | 0b00010110011110 | 0b01010110011110 | 0b00110110011110 | 0b01110110011110 | 0b00001110011110 | 0b01001110011110 | 0b00101110011110 | 0b01101110011110 | 0b00011110011110 | 0b01011110011110 | 0b00111110011110 | 0b01111110011110 | 0b00000001011110 | 0b01000001011110 | 0b00100001011110 | 0b01100001011110 | 0b00010001011110 | 0b01010001011110 | 0b00110001011110 | 0b01110001011110 | 0b00001001011110 | 0b01001001011110 | 0b00101001011110 | 0b01101001011110 | 0b00011001011110 | 0b01011001011110 | 0b00111001011110 | 0b01111001011110 | 0b00000101011110 | 0b01000101011110 | 0b00100101011110 | 0b01100101011110 | 0b00010101011110 | 0b01010101011110 | 0b00110101011110 | 0b01110101011110 | 0b00001101011110 | 0b01001101011110 | 0b00101101011110 | 0b01101101011110 | 0b00011101011110 | 0b01011101011110 | 0b00111101011110 | 0b01111101011110 | 0b00000011011110 | 0b01000011011110 | 0b00100011011110 | 0b01100011011110 | 0b00010011011110 | 0b01010011011110 | 0b00110011011110 | 0b01110011011110 | 0b00001011011110 | 0b01001011011110 | 0b00101011011110 | 0b01101011011110 | 0b00011011011110 | 0b01011011011110 | 0b00111011011110 | 0b01111011011110 | 0b00000111011110 | 0b01000111011110 | 0b00100111011110 | 0b01100111011110 | 0b00010111011110 | 0b01010111011110 | 0b00110111011110 | 0b01110111011110 | 0b00001111011110 | 0b01001111011110 | 0b00101111011110 | 0b01101111011110 | 0b00011111011110 | 0b01011111011110 | 0b00111111011110 | 0b01111111011110 | 0b00000000111110 | 0b01000000111110 | 0b00100000111110 | 0b01100000111110 | 0b00010000111110 | 0b01010000111110 | 0b00110000111110 | 0b01110000111110 | 0b00001000111110 | 0b01001000111110 | 0b00101000111110 | 0b01101000111110 | 0b00011000111110 | 0b01011000111110 | 0b00111000111110 | 0b01111000111110 | 0b00000100111110 | 0b01000100111110 | 0b00100100111110 | 0b01100100111110 | 0b00010100111110 | 0b01010100111110 | 0b00110100111110 | 0b01110100111110 | 0b00001100111110 | 0b01001100111110 | 0b00101100111110 | 0b01101100111110 | 0b00011100111110 | 0b01011100111110 | 0b00111100111110 | 0b01111100111110 | 0b00000010111110 | 0b01000010111110 | 0b00100010111110 | 0b01100010111110 | 0b00010010111110 | 0b01010010111110 | 0b00110010111110 | 0b01110010111110 | 0b00001010111110 | 0b01001010111110 | 0b00101010111110 | 0b01101010111110 | 0b00011010111110 | 0b01011010111110 | 0b00111010111110 | 0b01111010111110 | 0b00000110111110 | 0b01000110111110 | 0b00100110111110 | 0b01100110111110 | 0b00010110111110 | 0b01010110111110 | 0b00110110111110 | 0b01110110111110 | 0b00001110111110 | 0b01001110111110 | 0b00101110111110 | 0b01101110111110 | 0b00011110111110 | 0b01011110111110 | 0b00111110111110 | 0b01111110111110 | 0b00000001111110 | 0b01000001111110 | 0b00100001111110 | 0b01100001111110 | 0b00010001111110 | 0b01010001111110 | 0b00110001111110 | 0b01110001111110 | 0b00001001111110 | 0b01001001111110 | 0b00101001111110 | 0b01101001111110 | 0b00011001111110 | 0b01011001111110 | 0b00111001111110 | 0b01111001111110 | 0b00000101111110 | 0b01000101111110 | 0b00100101111110 | 0b01100101111110 | 0b00010101111110 | 0b01010101111110 | 0b00110101111110 | 0b01110101111110 | 0b00001101111110 | 0b01001101111110 | 0b00101101111110 | 0b01101101111110 | 0b00011101111110 | 0b01011101111110 | 0b00111101111110 | 0b01111101111110 | 0b00000011111110 | 0b01000011111110 | 0b00100011111110 | 0b01100011111110 | 0b00010011111110 | 0b01010011111110 | 0b00110011111110 | 0b01110011111110 | 0b00001011111110 | 0b01001011111110 | 0b00101011111110 | 0b01101011111110 | 0b00011011111110 | 0b01011011111110 | 0b00111011111110 | 0b01111011111110 | 0b00000111111110 | 0b01000111111110 | 0b00100111111110 | 0b01100111111110 | 0b00010111111110 | 0b01010111111110 | 0b00110111111110 | 0b01110111111110 | 0b00001111111110 | 0b01001111111110 | 0b00101111111110 | 0b01101111111110 | 0b00011111111110 | 0b01011111111110 | 0b00111111111110 | 0b01111111111110 | 0b00000000000001 | 0b01000000000001 | 0b00100000000001 | 0b01100000000001 | 0b00010000000001 | 0b01010000000001 | 0b00110000000001 | 0b01110000000001 | 0b00001000000001 | 0b01001000000001 | 0b00101000000001 | 0b01101000000001 | 0b00011000000001 | 0b01011000000001 | 0b00111000000001 | 0b01111000000001 | 0b00000100000001 | 0b01000100000001 | 0b00100100000001 | 0b01100100000001 | 0b00010100000001 | 0b01010100000001 | 0b00110100000001 | 0b01110100000001 | 0b00001100000001 | 0b01001100000001 | 0b00101100000001 | 0b01101100000001 | 0b00011100000001 | 0b01011100000001 | 0b00111100000001 | 0b01111100000001 | 0b00000010000001 | 0b01000010000001 | 0b00100010000001 | 0b01100010000001 | 0b00010010000001 | 0b01010010000001 | 0b00110010000001 | 0b01110010000001 | 0b00001010000001 | 0b01001010000001 | 0b00101010000001 | 0b01101010000001 | 0b00011010000001 | 0b01011010000001 | 0b00111010000001 | 0b01111010000001 | 0b00000110000001 | 0b01000110000001 | 0b00100110000001 | 0b01100110000001 | 0b00010110000001 | 0b01010110000001 | 0b00110110000001 | 0b01110110000001 | 0b00001110000001 | 0b01001110000001 | 0b00101110000001 | 0b01101110000001 | 0b00011110000001 | 0b01011110000001 | 0b00111110000001 | 0b01111110000001 | 0b00000001000001 | 0b01000001000001 | 0b00100001000001 | 0b01100001000001 | 0b00010001000001 | 0b01010001000001 | 0b00110001000001 | 0b01110001000001 | 0b00001001000001 | 0b01001001000001 | 0b00101001000001 | 0b01101001000001 | 0b00011001000001 | 0b01011001000001 | 0b00111001000001 | 0b01111001000001 | 0b00000101000001 | 0b01000101000001 | 0b00100101000001 | 0b01100101000001 | 0b00010101000001 | 0b01010101000001 | 0b00110101000001 | 0b01110101000001 | 0b00001101000001 | 0b01001101000001 | 0b00101101000001 | 0b01101101000001 | 0b00011101000001 | 0b01011101000001 | 0b00111101000001 | 0b01111101000001 | 0b00000011000001 | 0b01000011000001 | 0b00100011000001 | 0b01100011000001 | 0b00010011000001 | 0b01010011000001 | 0b00110011000001 | 0b01110011000001 | 0b00001011000001 | 0b01001011000001 | 0b00101011000001 | 0b01101011000001 | 0b00011011000001 | 0b01011011000001 | 0b00111011000001 | 0b01111011000001 | 0b00000111000001 | 0b01000111000001 | 0b00100111000001 | 0b01100111000001 | 0b00010111000001 | 0b01010111000001 | 0b00110111000001 | 0b01110111000001 | 0b00001111000001 | 0b01001111000001 | 0b00101111000001 | 0b01101111000001 | 0b00011111000001 | 0b01011111000001 | 0b00111111000001 | 0b01111111000001 | 0b00000000100001 | 0b01000000100001 | 0b00100000100001 | 0b01100000100001 | 0b00010000100001 | 0b01010000100001 | 0b00110000100001 | 0b01110000100001 | 0b00001000100001 | 0b01001000100001 | 0b00101000100001 | 0b01101000100001 | 0b00011000100001 | 0b01011000100001 | 0b00111000100001 | 0b01111000100001 | 0b00000100100001 | 0b01000100100001 | 0b00100100100001 | 0b01100100100001 | 0b00010100100001 | 0b01010100100001 | 0b00110100100001 | 0b01110100100001 | 0b00001100100001 | 0b01001100100001 | 0b00101100100001 | 0b01101100100001 | 0b00011100100001 | 0b01011100100001 | 0b00111100100001 | 0b01111100100001 | 0b00000010100001 | 0b01000010100001 | 0b00100010100001 | 0b01100010100001 | 0b00010010100001 | 0b01010010100001 | 0b00110010100001 | 0b01110010100001 | 0b00001010100001 | 0b01001010100001 | 0b00101010100001 | 0b01101010100001 | 0b00011010100001 | 0b01011010100001 | 0b00111010100001 | 0b01111010100001 | 0b00000110100001 | 0b01000110100001 | 0b00100110100001 | 0b01100110100001 | 0b00010110100001 | 0b01010110100001 | 0b00110110100001 | 0b01110110100001 | 0b00001110100001 | 0b01001110100001 | 0b00101110100001 | 0b01101110100001 | 0b00011110100001 | 0b01011110100001 | 0b00111110100001 | 0b01111110100001 | 0b00000001100001 | 0b01000001100001 | 0b00100001100001 | 0b01100001100001 | 0b00010001100001 | 0b01010001100001 | 0b00110001100001 | 0b01110001100001 | 0b00001001100001 | 0b01001001100001 | 0b00101001100001 | 0b01101001100001 | 0b00011001100001 | 0b01011001100001 | 0b00111001100001 | 0b01111001100001 | 0b00000101100001 | 0b01000101100001 | 0b00100101100001 | 0b01100101100001 | 0b00010101100001 | 0b01010101100001 | 0b00110101100001 | 0b01110101100001 | 0b00001101100001 | 0b01001101100001 | 0b00101101100001 | 0b01101101100001 | 0b00011101100001 | 0b01011101100001 | 0b00111101100001 | 0b01111101100001 | 0b00000011100001 | 0b01000011100001 | 0b00100011100001 | 0b01100011100001 | 0b00010011100001 | 0b01010011100001 | 0b00110011100001 | 0b01110011100001 | 0b00001011100001 | 0b01001011100001 | 0b00101011100001 | 0b01101011100001 | 0b00011011100001 | 0b01011011100001 | 0b00111011100001 | 0b01111011100001 | 0b00000111100001 | 0b01000111100001 | 0b00100111100001 | 0b01100111100001 | 0b00010111100001 | 0b01010111100001 | 0b00110111100001 | 0b01110111100001 | 0b00001111100001 | 0b01001111100001 | 0b00101111100001 | 0b01101111100001 | 0b00011111100001 | 0b01011111100001 | 0b00111111100001 | 0b01111111100001 | 0b00000000010001 | 0b01000000010001 | 0b00100000010001 | 0b01100000010001 | 0b00010000010001 | 0b01010000010001 | 0b00110000010001 | 0b01110000010001 | 0b00001000010001 | 0b01001000010001 | 0b00101000010001 | 0b01101000010001 | 0b00011000010001 | 0b01011000010001 | 0b00111000010001 | 0b01111000010001 | 0b00000100010001 | 0b01000100010001 | 0b00100100010001 | 0b01100100010001 | 0b00010100010001 | 0b01010100010001 | 0b00110100010001 | 0b01110100010001 | 0b00001100010001 | 0b01001100010001 | 0b00101100010001 | 0b01101100010001 | 0b00011100010001 | 0b01011100010001 | 0b00111100010001 | 0b01111100010001 | 0b00000010010001 | 0b01000010010001 | 0b00100010010001 | 0b01100010010001 | 0b00010010010001 | 0b01010010010001 | 0b00110010010001 | 0b01110010010001 | 0b00001010010001 | 0b01001010010001 | 0b00101010010001 | 0b01101010010001 | 0b00011010010001 | 0b01011010010001 | 0b00111010010001 | 0b01111010010001 | 0b00000110010001 | 0b01000110010001 | 0b00100110010001 | 0b01100110010001 | 0b00010110010001 | 0b01010110010001 | 0b00110110010001 | 0b01110110010001 | 0b00001110010001 | 0b01001110010001 | 0b00101110010001 | 0b01101110010001 | 0b00011110010001 | 0b01011110010001 | 0b00111110010001 | 0b01111110010001 | 0b00000001010001 | 0b01000001010001 | 0b00100001010001 | 0b01100001010001 | 0b00010001010001 | 0b01010001010001 | 0b00110001010001 | 0b01110001010001 | 0b00001001010001 | 0b01001001010001 | 0b00101001010001 | 0b01101001010001 | 0b00011001010001 | 0b01011001010001 | 0b00111001010001 | 0b01111001010001 | 0b00000101010001 | 0b01000101010001 | 0b00100101010001 | 0b01100101010001 | 0b00010101010001 | 0b01010101010001 | 0b00110101010001 | 0b01110101010001 | 0b00001101010001 | 0b01001101010001 | 0b00101101010001 | 0b01101101010001 | 0b00011101010001 | 0b01011101010001 | 0b00111101010001 | 0b01111101010001 | 0b00000011010001 | 0b01000011010001 | 0b00100011010001 | 0b01100011010001 | 0b00010011010001 | 0b01010011010001 | 0b00110011010001 | 0b01110011010001 | 0b00001011010001 | 0b01001011010001 | 0b00101011010001 | 0b01101011010001 | 0b00011011010001 | 0b01011011010001 | 0b00111011010001 | 0b01111011010001 | 0b00000111010001 | 0b01000111010001 | 0b00100111010001 | 0b01100111010001 | 0b00010111010001 | 0b01010111010001 | 0b00110111010001 | 0b01110111010001 | 0b00001111010001 | 0b01001111010001 | 0b00101111010001 | 0b01101111010001 | 0b00011111010001 | 0b01011111010001 | 0b00111111010001 | 0b01111111010001 | 0b00000000110001 | 0b01000000110001 | 0b00100000110001 | 0b01100000110001 | 0b00010000110001 | 0b01010000110001 | 0b00110000110001 | 0b01110000110001 | 0b00001000110001 | 0b01001000110001 | 0b00101000110001 | 0b01101000110001 | 0b00011000110001 | 0b01011000110001 | 0b00111000110001 | 0b01111000110001 | 0b00000100110001 | 0b01000100110001 | 0b00100100110001 | 0b01100100110001 | 0b00010100110001 | 0b01010100110001 | 0b00110100110001 | 0b01110100110001 | 0b00001100110001 | 0b01001100110001 | 0b00101100110001 | 0b01101100110001 | 0b00011100110001 | 0b01011100110001 | 0b00111100110001 | 0b01111100110001 | 0b00000010110001 | 0b01000010110001 | 0b00100010110001 | 0b01100010110001 | 0b00010010110001 | 0b01010010110001 | 0b00110010110001 | 0b01110010110001 | 0b00001010110001 | 0b01001010110001 | 0b00101010110001 | 0b01101010110001 | 0b00011010110001 | 0b01011010110001 | 0b00111010110001 | 0b01111010110001 | 0b00000110110001 | 0b01000110110001 | 0b00100110110001 | 0b01100110110001 | 0b00010110110001 | 0b01010110110001 | 0b00110110110001 | 0b01110110110001 | 0b00001110110001 | 0b01001110110001 | 0b00101110110001 | 0b01101110110001 | 0b00011110110001 | 0b01011110110001 | 0b00111110110001 | 0b01111110110001 | 0b00000001110001 | 0b01000001110001 | 0b00100001110001 | 0b01100001110001 | 0b00010001110001 | 0b01010001110001 | 0b00110001110001 | 0b01110001110001 | 0b00001001110001 | 0b01001001110001 | 0b00101001110001 | 0b01101001110001 | 0b00011001110001 | 0b01011001110001 | 0b00111001110001 | 0b01111001110001 | 0b00000101110001 | 0b01000101110001 | 0b00100101110001 | 0b01100101110001 | 0b00010101110001 | 0b01010101110001 | 0b00110101110001 | 0b01110101110001 | 0b00001101110001 | 0b01001101110001 | 0b00101101110001 | 0b01101101110001 | 0b00011101110001 | 0b01011101110001 | 0b00111101110001 | 0b01111101110001 | 0b00000011110001 | 0b01000011110001 | 0b00100011110001 | 0b01100011110001 | 0b00010011110001 | 0b01010011110001 | 0b00110011110001 | 0b01110011110001 | 0b00001011110001 | 0b01001011110001 | 0b00101011110001 | 0b01101011110001 | 0b00011011110001 | 0b01011011110001 | 0b00111011110001 | 0b01111011110001 | 0b00000111110001 | 0b01000111110001 | 0b00100111110001 | 0b01100111110001 | 0b00010111110001 | 0b01010111110001 | 0b00110111110001 | 0b01110111110001 | 0b00001111110001 | 0b01001111110001 | 0b00101111110001 | 0b01101111110001 | 0b00011111110001 | 0b01011111110001 | 0b00111111110001 | 0b01111111110001 | 0b00000000001001 | 0b01000000001001 | 0b00100000001001 | 0b01100000001001 | 0b00010000001001 | 0b01010000001001 | 0b00110000001001 | 0b01110000001001 | 0b00001000001001 | 0b01001000001001 | 0b00101000001001 | 0b01101000001001 | 0b00011000001001 | 0b01011000001001 | 0b00111000001001 | 0b01111000001001 | 0b00000100001001 | 0b01000100001001 | 0b00100100001001 | 0b01100100001001 | 0b00010100001001 | 0b01010100001001 | 0b00110100001001 | 0b01110100001001 | 0b00001100001001 | 0b01001100001001 | 0b00101100001001 | 0b01101100001001 | 0b00011100001001 | 0b01011100001001 | 0b00111100001001 | 0b01111100001001 | 0b00000010001001 | 0b01000010001001 | 0b00100010001001 | 0b01100010001001 | 0b00010010001001 | 0b01010010001001 | 0b00110010001001 | 0b01110010001001 | 0b00001010001001 | 0b01001010001001 | 0b00101010001001 | 0b01101010001001 | 0b00011010001001 | 0b01011010001001 | 0b00111010001001 | 0b01111010001001 | 0b00000110001001 | 0b01000110001001 | 0b00100110001001 | 0b01100110001001 | 0b00010110001001 | 0b01010110001001 | 0b00110110001001 | 0b01110110001001 | 0b00001110001001 | 0b01001110001001 | 0b00101110001001 | 0b01101110001001 | 0b00011110001001 | 0b01011110001001 | 0b00111110001001 | 0b01111110001001 | 0b00000001001001 | 0b01000001001001 | 0b00100001001001 | 0b01100001001001 | 0b00010001001001 | 0b01010001001001 | 0b00110001001001 | 0b01110001001001 | 0b00001001001001 | 0b01001001001001 | 0b00101001001001 | 0b01101001001001 | 0b00011001001001 | 0b01011001001001 | 0b00111001001001 | 0b01111001001001 | 0b00000101001001 | 0b01000101001001 | 0b00100101001001 | 0b01100101001001 | 0b00010101001001 | 0b01010101001001 | 0b00110101001001 | 0b01110101001001 | 0b00001101001001 | 0b01001101001001 | 0b00101101001001 | 0b01101101001001 | 0b00011101001001 | 0b01011101001001 | 0b00111101001001 | 0b01111101001001 | 0b00000011001001 | 0b01000011001001 | 0b00100011001001 | 0b01100011001001 | 0b00010011001001 | 0b01010011001001 | 0b00110011001001 | 0b01110011001001 | 0b00001011001001 | 0b01001011001001 | 0b00101011001001 | 0b01101011001001 | 0b00011011001001 | 0b01011011001001 | 0b00111011001001 | 0b01111011001001 | 0b00000111001001 | 0b01000111001001 | 0b00100111001001 | 0b01100111001001 | 0b00010111001001 | 0b01010111001001 | 0b00110111001001 | 0b01110111001001 | 0b00001111001001 | 0b01001111001001 | 0b00101111001001 | 0b01101111001001 | 0b00011111001001 | 0b01011111001001 | 0b00111111001001 | 0b01111111001001 | 0b00000000101001 | 0b01000000101001 | 0b00100000101001 | 0b01100000101001 | 0b00010000101001 | 0b01010000101001 | 0b00110000101001 | 0b01110000101001 | 0b00001000101001 | 0b01001000101001 | 0b00101000101001 | 0b01101000101001 | 0b00011000101001 | 0b01011000101001 | 0b00111000101001 | 0b01111000101001 | 0b00000100101001 | 0b01000100101001 | 0b00100100101001 | 0b01100100101001 | 0b00010100101001 | 0b01010100101001 | 0b00110100101001 | 0b01110100101001 | 0b00001100101001 | 0b01001100101001 | 0b00101100101001 | 0b01101100101001 | 0b00011100101001 | 0b01011100101001 | 0b00111100101001 | 0b01111100101001 | 0b00000010101001 | 0b01000010101001 | 0b00100010101001 | 0b01100010101001 | 0b00010010101001 | 0b01010010101001 | 0b00110010101001 | 0b01110010101001 | 0b00001010101001 | 0b01001010101001 | 0b00101010101001 | 0b01101010101001 | 0b00011010101001 | 0b01011010101001 | 0b00111010101001 | 0b01111010101001 | 0b00000110101001 | 0b01000110101001 | 0b00100110101001 | 0b01100110101001 | 0b00010110101001 | 0b01010110101001 | 0b00110110101001 | 0b01110110101001 | 0b00001110101001 | 0b01001110101001 | 0b00101110101001 | 0b01101110101001 | 0b00011110101001 | 0b01011110101001 | 0b00111110101001 | 0b01111110101001 | 0b00000001101001 | 0b01000001101001 | 0b00100001101001 | 0b01100001101001 | 0b00010001101001 | 0b01010001101001 | 0b00110001101001 | 0b01110001101001 | 0b00001001101001 | 0b01001001101001 | 0b00101001101001 | 0b01101001101001 | 0b00011001101001 | 0b01011001101001 | 0b00111001101001 | 0b01111001101001 | 0b00000101101001 | 0b01000101101001 | 0b00100101101001 | 0b01100101101001 | 0b00010101101001 | 0b01010101101001 | 0b00110101101001 | 0b01110101101001 | 0b00001101101001 | 0b01001101101001 | 0b00101101101001 | 0b01101101101001 | 0b00011101101001 | 0b01011101101001 | 0b00111101101001 | 0b01111101101001 | 0b00000011101001 | 0b01000011101001 | 0b00100011101001 | 0b01100011101001 | 0b00010011101001 | 0b01010011101001 | 0b00110011101001 | 0b01110011101001 | 0b00001011101001 | 0b01001011101001 | 0b00101011101001 | 0b01101011101001 | 0b00011011101001 | 0b01011011101001 | 0b00111011101001 | 0b01111011101001 | 0b00000111101001 | 0b01000111101001 | 0b00100111101001 | 0b01100111101001 | 0b00010111101001 | 0b01010111101001 | 0b00110111101001 | 0b01110111101001 | 0b00001111101001 | 0b01001111101001 | 0b00101111101001 | 0b01101111101001 | 0b00011111101001 | 0b01011111101001 | 0b00111111101001 | 0b01111111101001 | 0b00000000011001 | 0b01000000011001 | 0b00100000011001 | 0b01100000011001 | 0b00010000011001 | 0b01010000011001 | 0b00110000011001 | 0b01110000011001 | 0b00001000011001 | 0b01001000011001 | 0b00101000011001 | 0b01101000011001 | 0b00011000011001 | 0b01011000011001 | 0b00111000011001 | 0b01111000011001 | 0b00000100011001 | 0b01000100011001 | 0b00100100011001 | 0b01100100011001 | 0b00010100011001 | 0b01010100011001 | 0b00110100011001 | 0b01110100011001 | 0b00001100011001 | 0b01001100011001 | 0b00101100011001 | 0b01101100011001 | 0b00011100011001 | 0b01011100011001 | 0b00111100011001 | 0b01111100011001 | 0b00000010011001 | 0b01000010011001 | 0b00100010011001 | 0b01100010011001 | 0b00010010011001 | 0b01010010011001 | 0b00110010011001 | 0b01110010011001 | 0b00001010011001 | 0b01001010011001 | 0b00101010011001 | 0b01101010011001 | 0b00011010011001 | 0b01011010011001 | 0b00111010011001 | 0b01111010011001 | 0b00000110011001 | 0b01000110011001 | 0b00100110011001 | 0b01100110011001 | 0b00010110011001 | 0b01010110011001 | 0b00110110011001 | 0b01110110011001 | 0b00001110011001 | 0b01001110011001 | 0b00101110011001 | 0b01101110011001 | 0b00011110011001 | 0b01011110011001 | 0b00111110011001 | 0b01111110011001 | 0b00000001011001 | 0b01000001011001 | 0b00100001011001 | 0b01100001011001 | 0b00010001011001 | 0b01010001011001 | 0b00110001011001 | 0b01110001011001 | 0b00001001011001 | 0b01001001011001 | 0b00101001011001 | 0b01101001011001 | 0b00011001011001 | 0b01011001011001 | 0b00111001011001 | 0b01111001011001 | 0b00000101011001 | 0b01000101011001 | 0b00100101011001 | 0b01100101011001 | 0b00010101011001 | 0b01010101011001 | 0b00110101011001 | 0b01110101011001 | 0b00001101011001 | 0b01001101011001 | 0b00101101011001 | 0b01101101011001 | 0b00011101011001 | 0b01011101011001 | 0b00111101011001 | 0b01111101011001 | 0b00000011011001 | 0b01000011011001 | 0b00100011011001 | 0b01100011011001 | 0b00010011011001 | 0b01010011011001 | 0b00110011011001 | 0b01110011011001 | 0b00001011011001 | 0b01001011011001 | 0b00101011011001 | 0b01101011011001 | 0b00011011011001 | 0b01011011011001 | 0b00111011011001 | 0b01111011011001 | 0b00000111011001 | 0b01000111011001 | 0b00100111011001 | 0b01100111011001 | 0b00010111011001 | 0b01010111011001 | 0b00110111011001 | 0b01110111011001 | 0b00001111011001 | 0b01001111011001 | 0b00101111011001 | 0b01101111011001 | 0b00011111011001 | 0b01011111011001 | 0b00111111011001 | 0b01111111011001 | 0b00000000111001 | 0b01000000111001 | 0b00100000111001 | 0b01100000111001 | 0b00010000111001 | 0b01010000111001 | 0b00110000111001 | 0b01110000111001 | 0b00001000111001 | 0b01001000111001 | 0b00101000111001 | 0b01101000111001 | 0b00011000111001 | 0b01011000111001 | 0b00111000111001 | 0b01111000111001 | 0b00000100111001 | 0b01000100111001 | 0b00100100111001 | 0b01100100111001 | 0b00010100111001 | 0b01010100111001 | 0b00110100111001 | 0b01110100111001 | 0b00001100111001 | 0b01001100111001 | 0b00101100111001 | 0b01101100111001 | 0b00011100111001 | 0b01011100111001 | 0b00111100111001 | 0b01111100111001 | 0b00000010111001 | 0b01000010111001 | 0b00100010111001 | 0b01100010111001 | 0b00010010111001 | 0b01010010111001 | 0b00110010111001 | 0b01110010111001 | 0b00001010111001 | 0b01001010111001 | 0b00101010111001 | 0b01101010111001 | 0b00011010111001 | 0b01011010111001 | 0b00111010111001 | 0b01111010111001 | 0b00000110111001 | 0b01000110111001 | 0b00100110111001 | 0b01100110111001 | 0b00010110111001 | 0b01010110111001 | 0b00110110111001 | 0b01110110111001 | 0b00001110111001 | 0b01001110111001 | 0b00101110111001 | 0b01101110111001 | 0b00011110111001 | 0b01011110111001 | 0b00111110111001 | 0b01111110111001 | 0b00000001111001 | 0b01000001111001 | 0b00100001111001 | 0b01100001111001 | 0b00010001111001 | 0b01010001111001 | 0b00110001111001 | 0b01110001111001 | 0b00001001111001 | 0b01001001111001 | 0b00101001111001 | 0b01101001111001 | 0b00011001111001 | 0b01011001111001 | 0b00111001111001 | 0b01111001111001 | 0b00000101111001 | 0b01000101111001 | 0b00100101111001 | 0b01100101111001 | 0b00010101111001 | 0b01010101111001 | 0b00110101111001 | 0b01110101111001 | 0b00001101111001 | 0b01001101111001 | 0b00101101111001 | 0b01101101111001 | 0b00011101111001 | 0b01011101111001 | 0b00111101111001 | 0b01111101111001 | 0b00000011111001 | 0b01000011111001 | 0b00100011111001 | 0b01100011111001 | 0b00010011111001 | 0b01010011111001 | 0b00110011111001 | 0b01110011111001 | 0b00001011111001 | 0b01001011111001 | 0b00101011111001 | 0b01101011111001 | 0b00011011111001 | 0b01011011111001 | 0b00111011111001 | 0b01111011111001 | 0b00000111111001 | 0b01000111111001 | 0b00100111111001 | 0b01100111111001 | 0b00010111111001 | 0b01010111111001 | 0b00110111111001 | 0b01110111111001 | 0b00001111111001 | 0b01001111111001 | 0b00101111111001 | 0b01101111111001 | 0b00011111111001 | 0b01011111111001 | 0b00111111111001 | 0b01111111111001 | 0b00000000000101 | 0b01000000000101 | 0b00100000000101 | 0b01100000000101 | 0b00010000000101 | 0b01010000000101 | 0b00110000000101 | 0b01110000000101 | 0b00001000000101 | 0b01001000000101 | 0b00101000000101 | 0b01101000000101 | 0b00011000000101 | 0b01011000000101 | 0b00111000000101 | 0b01111000000101 | 0b00000100000101 | 0b01000100000101 | 0b00100100000101 | 0b01100100000101 | 0b00010100000101 | 0b01010100000101 | 0b00110100000101 | 0b01110100000101 | 0b00001100000101 | 0b01001100000101 | 0b00101100000101 | 0b01101100000101 | 0b00011100000101 | 0b01011100000101 | 0b00111100000101 | 0b01111100000101 | 0b00000010000101 | 0b01000010000101 | 0b00100010000101 | 0b01100010000101 | 0b00010010000101 | 0b01010010000101 | 0b00110010000101 | 0b01110010000101 | 0b00001010000101 | 0b01001010000101 | 0b00101010000101 | 0b01101010000101 | 0b00011010000101 | 0b01011010000101 | 0b00111010000101 | 0b01111010000101 | 0b00000110000101 | 0b01000110000101 | 0b00100110000101 | 0b01100110000101 | 0b00010110000101 | 0b01010110000101 | 0b00110110000101 | 0b01110110000101 | 0b00001110000101 | 0b01001110000101 | 0b00101110000101 | 0b01101110000101 | 0b00011110000101 | 0b01011110000101 | 0b00111110000101 | 0b01111110000101 | 0b00000001000101 | 0b01000001000101 | 0b00100001000101 | 0b01100001000101 | 0b00010001000101 | 0b01010001000101 | 0b00110001000101 | 0b01110001000101 | 0b00001001000101 | 0b01001001000101 | 0b00101001000101 | 0b01101001000101 | 0b00011001000101 | 0b01011001000101 | 0b00111001000101 | 0b01111001000101 | 0b00000101000101 | 0b01000101000101 | 0b00100101000101 | 0b01100101000101 | 0b00010101000101 | 0b01010101000101 | 0b00110101000101 | 0b01110101000101 | 0b00001101000101 | 0b01001101000101 | 0b00101101000101 | 0b01101101000101 | 0b00011101000101 | 0b01011101000101 | 0b00111101000101 | 0b01111101000101 | 0b00000011000101 | 0b01000011000101 | 0b00100011000101 | 0b01100011000101 | 0b00010011000101 | 0b01010011000101 | 0b00110011000101 | 0b01110011000101 | 0b00001011000101 | 0b01001011000101 | 0b00101011000101 | 0b01101011000101 | 0b00011011000101 | 0b01011011000101 | 0b00111011000101 | 0b01111011000101 | 0b00000111000101 | 0b01000111000101 | 0b00100111000101 | 0b01100111000101 | 0b00010111000101 | 0b01010111000101 | 0b00110111000101 | 0b01110111000101 | 0b00001111000101 | 0b01001111000101 | 0b00101111000101 | 0b01101111000101 | 0b00011111000101 | 0b01011111000101 | 0b00111111000101 | 0b01111111000101 | 0b00000000100101 | 0b01000000100101 | 0b00100000100101 | 0b01100000100101 | 0b00010000100101 | 0b01010000100101 | 0b00110000100101 | 0b01110000100101 | 0b00001000100101 | 0b01001000100101 | 0b00101000100101 | 0b01101000100101 | 0b00011000100101 | 0b01011000100101 | 0b00111000100101 | 0b01111000100101 | 0b00000100100101 | 0b01000100100101 | 0b00100100100101 | 0b01100100100101 | 0b00010100100101 | 0b01010100100101 | 0b00110100100101 | 0b01110100100101 | 0b00001100100101 | 0b01001100100101 | 0b00101100100101 | 0b01101100100101 | 0b00011100100101 | 0b01011100100101 | 0b00111100100101 | 0b01111100100101 | 0b00000010100101 | 0b01000010100101 | 0b00100010100101 | 0b01100010100101 | 0b00010010100101 | 0b01010010100101 | 0b00110010100101 | 0b01110010100101 | 0b00001010100101 | 0b01001010100101 | 0b00101010100101 | 0b01101010100101 | 0b00011010100101 | 0b01011010100101 | 0b00111010100101 | 0b01111010100101 | 0b00000110100101 | 0b01000110100101 | 0b00100110100101 | 0b01100110100101 | 0b00010110100101 | 0b01010110100101 | 0b00110110100101 | 0b01110110100101 | 0b00001110100101 | 0b01001110100101 | 0b00101110100101 | 0b01101110100101 | 0b00011110100101 | 0b01011110100101 | 0b00111110100101 | 0b01111110100101 | 0b00000001100101 | 0b01000001100101 | 0b00100001100101 | 0b01100001100101 | 0b00010001100101 | 0b01010001100101 | 0b00110001100101 | 0b01110001100101 | 0b00001001100101 | 0b01001001100101 | 0b00101001100101 | 0b01101001100101 | 0b00011001100101 | 0b01011001100101 | 0b00111001100101 | 0b01111001100101 | 0b00000101100101 | 0b01000101100101 | 0b00100101100101 | 0b01100101100101 | 0b00010101100101 | 0b01010101100101 | 0b00110101100101 | 0b01110101100101 | 0b00001101100101 | 0b01001101100101 | 0b00101101100101 | 0b01101101100101 | 0b00011101100101 | 0b01011101100101 | 0b00111101100101 | 0b01111101100101 | 0b00000011100101 | 0b01000011100101 | 0b00100011100101 | 0b01100011100101 | 0b00010011100101 | 0b01010011100101 | 0b00110011100101 | 0b01110011100101 | 0b00001011100101 | 0b01001011100101 | 0b00101011100101 | 0b01101011100101 | 0b00011011100101 | 0b01011011100101 | 0b00111011100101 | 0b01111011100101 | 0b00000111100101 | 0b01000111100101 | 0b00100111100101 | 0b01100111100101 | 0b00010111100101 | 0b01010111100101 | 0b00110111100101 | 0b01110111100101 | 0b00001111100101 | 0b01001111100101 | 0b00101111100101 | 0b01101111100101 | 0b00011111100101 | 0b01011111100101 | 0b00111111100101 | 0b01111111100101 | 0b00000000010101 | 0b01000000010101 | 0b00100000010101 | 0b01100000010101 | 0b00010000010101 | 0b01010000010101 | 0b00110000010101 | 0b01110000010101 | 0b00001000010101 | 0b01001000010101 | 0b00101000010101 | 0b01101000010101 | 0b00011000010101 | 0b01011000010101 | 0b00111000010101 | 0b01111000010101 | 0b00000100010101 | 0b01000100010101 | 0b00100100010101 | 0b01100100010101 | 0b00010100010101 | 0b01010100010101 | 0b00110100010101 | 0b01110100010101 | 0b00001100010101 | 0b01001100010101 | 0b00101100010101 | 0b01101100010101 | 0b00011100010101 | 0b01011100010101 | 0b00111100010101 | 0b01111100010101 | 0b00000010010101 | 0b01000010010101 | 0b00100010010101 | 0b01100010010101 | 0b00010010010101 | 0b01010010010101 | 0b00110010010101 | 0b01110010010101 | 0b00001010010101 | 0b01001010010101 | 0b00101010010101 | 0b01101010010101 | 0b00011010010101 | 0b01011010010101 | 0b00111010010101 | 0b01111010010101 | 0b00000110010101 | 0b01000110010101 | 0b00100110010101 | 0b01100110010101 | 0b00010110010101 | 0b01010110010101 | 0b00110110010101 | 0b01110110010101 | 0b00001110010101 | 0b01001110010101 | 0b00101110010101 | 0b01101110010101 | 0b00011110010101 | 0b01011110010101 | 0b00111110010101 | 0b01111110010101 | 0b00000001010101 | 0b01000001010101 | 0b00100001010101 | 0b01100001010101 | 0b00010001010101 | 0b01010001010101 | 0b00110001010101 | 0b01110001010101 | 0b00001001010101 | 0b01001001010101 | 0b00101001010101 | 0b01101001010101 | 0b00011001010101 | 0b01011001010101 | 0b00111001010101 | 0b01111001010101 | 0b00000101010101 | 0b01000101010101 | 0b00100101010101 | 0b01100101010101 | 0b00010101010101 | 0b01010101010101 | 0b00110101010101 | 0b01110101010101 | 0b00001101010101 | 0b01001101010101 | 0b00101101010101 | 0b01101101010101 | 0b00011101010101 | 0b01011101010101 | 0b00111101010101 | 0b01111101010101 | 0b00000011010101 | 0b01000011010101 | 0b00100011010101 | 0b01100011010101 | 0b00010011010101 | 0b01010011010101 | 0b00110011010101 | 0b01110011010101 | 0b00001011010101 | 0b01001011010101 | 0b00101011010101 | 0b01101011010101 | 0b00011011010101 | 0b01011011010101 | 0b00111011010101 | 0b01111011010101 | 0b00000111010101 | 0b01000111010101 | 0b00100111010101 | 0b01100111010101 | 0b00010111010101 | 0b01010111010101 | 0b00110111010101 | 0b01110111010101 | 0b00001111010101 | 0b01001111010101 | 0b00101111010101 | 0b01101111010101 | 0b00011111010101 | 0b01011111010101 | 0b00111111010101 | 0b01111111010101 | 0b00000000110101 | 0b01000000110101 | 0b00100000110101 | 0b01100000110101 | 0b00010000110101 | 0b01010000110101 | 0b00110000110101 | 0b01110000110101 | 0b00001000110101 | 0b01001000110101 | 0b00101000110101 | 0b01101000110101 | 0b00011000110101 | 0b01011000110101 | 0b00111000110101 | 0b01111000110101 | 0b00000100110101 | 0b01000100110101 | 0b00100100110101 | 0b01100100110101 | 0b00010100110101 | 0b01010100110101 | 0b00110100110101 | 0b01110100110101 | 0b00001100110101 | 0b01001100110101 | 0b00101100110101 | 0b01101100110101 | 0b00011100110101 | 0b01011100110101 | 0b00111100110101 | 0b01111100110101 | 0b00000010110101 | 0b01000010110101 | 0b00100010110101 | 0b01100010110101 | 0b00010010110101 | 0b01010010110101 | 0b00110010110101 | 0b01110010110101 | 0b00001010110101 | 0b01001010110101 | 0b00101010110101 | 0b01101010110101 | 0b00011010110101 | 0b01011010110101 | 0b00111010110101 | 0b01111010110101 | 0b00000110110101 | 0b01000110110101 | 0b00100110110101 | 0b01100110110101 | 0b00010110110101 | 0b01010110110101 | 0b00110110110101 | 0b01110110110101 | 0b00001110110101 | 0b01001110110101 | 0b00101110110101 | 0b01101110110101 | 0b00011110110101 | 0b01011110110101 | 0b00111110110101 | 0b01111110110101 | 0b00000001110101 | 0b01000001110101 | 0b00100001110101 | 0b01100001110101 | 0b00010001110101 | 0b01010001110101 | 0b00110001110101 | 0b01110001110101 | 0b00001001110101 | 0b01001001110101 | 0b00101001110101 | 0b01101001110101 | 0b00011001110101 | 0b01011001110101 | 0b00111001110101 | 0b01111001110101 | 0b00000101110101 | 0b01000101110101 | 0b00100101110101 | 0b01100101110101 | 0b00010101110101 | 0b01010101110101 | 0b00110101110101 | 0b01110101110101 | 0b00001101110101 | 0b01001101110101 | 0b00101101110101 | 0b01101101110101 | 0b00011101110101 | 0b01011101110101 | 0b00111101110101 | 0b01111101110101 | 0b00000011110101 | 0b01000011110101 | 0b00100011110101 | 0b01100011110101 | 0b00010011110101 | 0b01010011110101 | 0b00110011110101 | 0b01110011110101 | 0b00001011110101 | 0b01001011110101 | 0b00101011110101 | 0b01101011110101 | 0b00011011110101 | 0b01011011110101 | 0b00111011110101 | 0b01111011110101 | 0b00000111110101 | 0b01000111110101 | 0b00100111110101 | 0b01100111110101 | 0b00010111110101 | 0b01010111110101 | 0b00110111110101 | 0b01110111110101 | 0b00001111110101 | 0b01001111110101 | 0b00101111110101 | 0b01101111110101 | 0b00011111110101 | 0b01011111110101 | 0b00111111110101 | 0b01111111110101 | 0b00000000001101 | 0b01000000001101 | 0b00100000001101 | 0b01100000001101 | 0b00010000001101 | 0b01010000001101 | 0b00110000001101 | 0b01110000001101 | 0b00001000001101 | 0b01001000001101 | 0b00101000001101 | 0b01101000001101 | 0b00011000001101 | 0b01011000001101 | 0b00111000001101 | 0b01111000001101 | 0b00000100001101 | 0b01000100001101 | 0b00100100001101 | 0b01100100001101 | 0b00010100001101 | 0b01010100001101 | 0b00110100001101 | 0b01110100001101 | 0b00001100001101 | 0b01001100001101 | 0b00101100001101 | 0b01101100001101 | 0b00011100001101 | 0b01011100001101 | 0b00111100001101 | 0b01111100001101 | 0b00000010001101 | 0b01000010001101 | 0b00100010001101 | 0b01100010001101 | 0b00010010001101 | 0b01010010001101 | 0b00110010001101 | 0b01110010001101 | 0b00001010001101 | 0b01001010001101 | 0b00101010001101 | 0b01101010001101 | 0b00011010001101 | 0b01011010001101 | 0b00111010001101 | 0b01111010001101 | 0b00000110001101 | 0b01000110001101 | 0b00100110001101 | 0b01100110001101 | 0b00010110001101 | 0b01010110001101 | 0b00110110001101 | 0b01110110001101 | 0b00001110001101 | 0b01001110001101 | 0b00101110001101 | 0b01101110001101 | 0b00011110001101 | 0b01011110001101 | 0b00111110001101 | 0b01111110001101 | 0b00000001001101 | 0b01000001001101 | 0b00100001001101 | 0b01100001001101 | 0b00010001001101 | 0b01010001001101 | 0b00110001001101 | 0b01110001001101 | 0b00001001001101 | 0b01001001001101 | 0b00101001001101 | 0b01101001001101 | 0b00011001001101 | 0b01011001001101 | 0b00111001001101 | 0b01111001001101 | 0b00000101001101 | 0b01000101001101 | 0b00100101001101 | 0b01100101001101 | 0b00010101001101 | 0b01010101001101 | 0b00110101001101 | 0b01110101001101 | 0b00001101001101 | 0b01001101001101 | 0b00101101001101 | 0b01101101001101 | 0b00011101001101 | 0b01011101001101 | 0b00111101001101 | 0b01111101001101 | 0b00000011001101 | 0b01000011001101 | 0b00100011001101 | 0b01100011001101 | 0b00010011001101 | 0b01010011001101 | 0b00110011001101 | 0b01110011001101 | 0b00001011001101 | 0b01001011001101 | 0b00101011001101 | 0b01101011001101 | 0b00011011001101 | 0b01011011001101 | 0b00111011001101 | 0b01111011001101 | 0b00000111001101 | 0b01000111001101 | 0b00100111001101 | 0b01100111001101 | 0b00010111001101 | 0b01010111001101 | 0b00110111001101 | 0b01110111001101 | 0b00001111001101 | 0b01001111001101 | 0b00101111001101 | 0b01101111001101 | 0b00011111001101 | 0b01011111001101 | 0b00111111001101 | 0b01111111001101 | 0b00000000101101 | 0b01000000101101 | 0b00100000101101 | 0b01100000101101 | 0b00010000101101 | 0b01010000101101 | 0b00110000101101 | 0b01110000101101 | 0b00001000101101 | 0b01001000101101 | 0b00101000101101 | 0b01101000101101 | 0b00011000101101 | 0b01011000101101 | 0b00111000101101 | 0b01111000101101 | 0b00000100101101 | 0b01000100101101 | 0b00100100101101 | 0b01100100101101 | 0b00010100101101 | 0b01010100101101 | 0b00110100101101 | 0b01110100101101 | 0b00001100101101 | 0b01001100101101 | 0b00101100101101 | 0b01101100101101 | 0b00011100101101 | 0b01011100101101 | 0b00111100101101 | 0b01111100101101 | 0b00000010101101 | 0b01000010101101 | 0b00100010101101 | 0b01100010101101 | 0b00010010101101 | 0b01010010101101 | 0b00110010101101 | 0b01110010101101 | 0b00001010101101 | 0b01001010101101 | 0b00101010101101 | 0b01101010101101 | 0b00011010101101 | 0b01011010101101 | 0b00111010101101 | 0b01111010101101 | 0b00000110101101 | 0b01000110101101 | 0b00100110101101 | 0b01100110101101 | 0b00010110101101 | 0b01010110101101 | 0b00110110101101 | 0b01110110101101 | 0b00001110101101 | 0b01001110101101 | 0b00101110101101 | 0b01101110101101 | 0b00011110101101 | 0b01011110101101 | 0b00111110101101 | 0b01111110101101 | 0b00000001101101 | 0b01000001101101 | 0b00100001101101 | 0b01100001101101 | 0b00010001101101 | 0b01010001101101 | 0b00110001101101 | 0b01110001101101 | 0b00001001101101 | 0b01001001101101 | 0b00101001101101 | 0b01101001101101 | 0b00011001101101 | 0b01011001101101 | 0b00111001101101 | 0b01111001101101 | 0b00000101101101 | 0b01000101101101 | 0b00100101101101 | 0b01100101101101 | 0b00010101101101 | 0b01010101101101 | 0b00110101101101 | 0b01110101101101 | 0b00001101101101 | 0b01001101101101 | 0b00101101101101 | 0b01101101101101 | 0b00011101101101 | 0b01011101101101 | 0b00111101101101 | 0b01111101101101 | 0b00000011101101 | 0b01000011101101 | 0b00100011101101 | 0b01100011101101 | 0b00010011101101 | 0b01010011101101 | 0b00110011101101 | 0b01110011101101 | 0b00001011101101 | 0b01001011101101 | 0b00101011101101 | 0b01101011101101 | 0b00011011101101 | 0b01011011101101 | 0b00111011101101 | 0b01111011101101 | 0b00000111101101 | 0b01000111101101 | 0b00100111101101 | 0b01100111101101 | 0b00010111101101 | 0b01010111101101 | 0b00110111101101 | 0b01110111101101 | 0b00001111101101 | 0b01001111101101 | 0b00101111101101 | 0b01101111101101 | 0b00011111101101 | 0b01011111101101 | 0b00111111101101 | 0b01111111101101 | 0b00000000011101 | 0b01000000011101 | 0b00100000011101 | 0b01100000011101 | 0b00010000011101 | 0b01010000011101 | 0b00110000011101 | 0b01110000011101 | 0b00001000011101 | 0b01001000011101 | 0b00101000011101 | 0b01101000011101 | 0b00011000011101 | 0b01011000011101 | 0b00111000011101 | 0b01111000011101 | 0b00000100011101 | 0b01000100011101 | 0b00100100011101 | 0b01100100011101 | 0b00010100011101 | 0b01010100011101 | 0b00110100011101 | 0b01110100011101 | 0b00001100011101 | 0b01001100011101 | 0b00101100011101 | 0b01101100011101 | 0b00011100011101 | 0b01011100011101 | 0b00111100011101 | 0b01111100011101 | 0b00000010011101 | 0b01000010011101 | 0b00100010011101 | 0b01100010011101 | 0b00010010011101 | 0b01010010011101 | 0b00110010011101 | 0b01110010011101 | 0b00001010011101 | 0b01001010011101 | 0b00101010011101 | 0b01101010011101 | 0b00011010011101 | 0b01011010011101 | 0b00111010011101 | 0b01111010011101 | 0b00000110011101 | 0b01000110011101 | 0b00100110011101 | 0b01100110011101 | 0b00010110011101 | 0b01010110011101 | 0b00110110011101 | 0b01110110011101 | 0b00001110011101 | 0b01001110011101 | 0b00101110011101 | 0b01101110011101 | 0b00011110011101 | 0b01011110011101 | 0b00111110011101 | 0b01111110011101 | 0b00000001011101 | 0b01000001011101 | 0b00100001011101 | 0b01100001011101 | 0b00010001011101 | 0b01010001011101 | 0b00110001011101 | 0b01110001011101 | 0b00001001011101 | 0b01001001011101 | 0b00101001011101 | 0b01101001011101 | 0b00011001011101 | 0b01011001011101 | 0b00111001011101 | 0b01111001011101 | 0b00000101011101 | 0b01000101011101 | 0b00100101011101 | 0b01100101011101 | 0b00010101011101 | 0b01010101011101 | 0b00110101011101 | 0b01110101011101 | 0b00001101011101 | 0b01001101011101 | 0b00101101011101 | 0b01101101011101 | 0b00011101011101 | 0b01011101011101 | 0b00111101011101 | 0b01111101011101 | 0b00000011011101 | 0b01000011011101 | 0b00100011011101 | 0b01100011011101 | 0b00010011011101 | 0b01010011011101 | 0b00110011011101 | 0b01110011011101 | 0b00001011011101 | 0b01001011011101 | 0b00101011011101 | 0b01101011011101 | 0b00011011011101 | 0b01011011011101 | 0b00111011011101 | 0b01111011011101 | 0b00000111011101 | 0b01000111011101 | 0b00100111011101 | 0b01100111011101 | 0b00010111011101 | 0b01010111011101 | 0b00110111011101 | 0b01110111011101 | 0b00001111011101 | 0b01001111011101 | 0b00101111011101 | 0b01101111011101 | 0b00011111011101 | 0b01011111011101 | 0b00111111011101 | 0b01111111011101 | 0b00000000111101 | 0b01000000111101 | 0b00100000111101 | 0b01100000111101 | 0b00010000111101 | 0b01010000111101 | 0b00110000111101 | 0b01110000111101 | 0b00001000111101 | 0b01001000111101 | 0b00101000111101 | 0b01101000111101 | 0b00011000111101 | 0b01011000111101 | 0b00111000111101 | 0b01111000111101 | 0b00000100111101 | 0b01000100111101 | 0b00100100111101 | 0b01100100111101 | 0b00010100111101 | 0b01010100111101 | 0b00110100111101 | 0b01110100111101 | 0b00001100111101 | 0b01001100111101 | 0b00101100111101 | 0b01101100111101 | 0b00011100111101 | 0b01011100111101 | 0b00111100111101 | 0b01111100111101 | 0b00000010111101 | 0b01000010111101 | 0b00100010111101 | 0b01100010111101 | 0b00010010111101 | 0b01010010111101 | 0b00110010111101 | 0b01110010111101 | 0b00001010111101 | 0b01001010111101 | 0b00101010111101 | 0b01101010111101 | 0b00011010111101 | 0b01011010111101 | 0b00111010111101 | 0b01111010111101 | 0b00000110111101 | 0b01000110111101 | 0b00100110111101 | 0b01100110111101 | 0b00010110111101 | 0b01010110111101 | 0b00110110111101 | 0b01110110111101 | 0b00001110111101 | 0b01001110111101 | 0b00101110111101 | 0b01101110111101 | 0b00011110111101 | 0b01011110111101 | 0b00111110111101 | 0b01111110111101 | 0b00000001111101 | 0b01000001111101 | 0b00100001111101 | 0b01100001111101 | 0b00010001111101 | 0b01010001111101 | 0b00110001111101 | 0b01110001111101 | 0b00001001111101 | 0b01001001111101 | 0b00101001111101 | 0b01101001111101 | 0b00011001111101 | 0b01011001111101 | 0b00111001111101 | 0b01111001111101 | 0b00000101111101 | 0b01000101111101 | 0b00100101111101 | 0b01100101111101 | 0b00010101111101 | 0b01010101111101 | 0b00110101111101 | 0b01110101111101 | 0b00001101111101 | 0b01001101111101 | 0b00101101111101 | 0b01101101111101 | 0b00011101111101 | 0b01011101111101 | 0b00111101111101 | 0b01111101111101 | 0b00000011111101 | 0b01000011111101 | 0b00100011111101 | 0b01100011111101 | 0b00010011111101 | 0b01010011111101 | 0b00110011111101 | 0b01110011111101 | 0b00001011111101 | 0b01001011111101 | 0b00101011111101 | 0b01101011111101 | 0b00011011111101 | 0b01011011111101 | 0b00111011111101 | 0b01111011111101 | 0b00000111111101 | 0b01000111111101 | 0b00100111111101 | 0b01100111111101 | 0b00010111111101 | 0b01010111111101 | 0b00110111111101 | 0b01110111111101 | 0b00001111111101 | 0b01001111111101 | 0b00101111111101 | 0b01101111111101 | 0b00011111111101 | 0b01011111111101 | 0b00111111111101 | 0b01111111111101 | 0b00000000000011 | 0b01000000000011 | 0b00100000000011 | 0b01100000000011 | 0b00010000000011 | 0b01010000000011 | 0b00110000000011 | 0b01110000000011 | 0b00001000000011 | 0b01001000000011 | 0b00101000000011 | 0b01101000000011 | 0b00011000000011 | 0b01011000000011 | 0b00111000000011 | 0b01111000000011 | 0b00000100000011 | 0b01000100000011 | 0b00100100000011 | 0b01100100000011 | 0b00010100000011 | 0b01010100000011 | 0b00110100000011 | 0b01110100000011 | 0b00001100000011 | 0b01001100000011 | 0b00101100000011 | 0b01101100000011 | 0b00011100000011 | 0b01011100000011 | 0b00111100000011 | 0b01111100000011 | 0b00000010000011 | 0b01000010000011 | 0b00100010000011 | 0b01100010000011 | 0b00010010000011 | 0b01010010000011 | 0b00110010000011 | 0b01110010000011 | 0b00001010000011 | 0b01001010000011 | 0b00101010000011 | 0b01101010000011 | 0b00011010000011 | 0b01011010000011 | 0b00111010000011 | 0b01111010000011 | 0b00000110000011 | 0b01000110000011 | 0b00100110000011 | 0b01100110000011 | 0b00010110000011 | 0b01010110000011 | 0b00110110000011 | 0b01110110000011 | 0b00001110000011 | 0b01001110000011 | 0b00101110000011 | 0b01101110000011 | 0b00011110000011 | 0b01011110000011 | 0b00111110000011 | 0b01111110000011 | 0b00000001000011 | 0b01000001000011 | 0b00100001000011 | 0b01100001000011 | 0b00010001000011 | 0b01010001000011 | 0b00110001000011 | 0b01110001000011 | 0b00001001000011 | 0b01001001000011 | 0b00101001000011 | 0b01101001000011 | 0b00011001000011 | 0b01011001000011 | 0b00111001000011 | 0b01111001000011 | 0b00000101000011 | 0b01000101000011 | 0b00100101000011 | 0b01100101000011 | 0b00010101000011 | 0b01010101000011 | 0b00110101000011 | 0b01110101000011 | 0b00001101000011 | 0b01001101000011 | 0b00101101000011 | 0b01101101000011 | 0b00011101000011 | 0b01011101000011 | 0b00111101000011 | 0b01111101000011 | 0b00000011000011 | 0b01000011000011 | 0b00100011000011 | 0b01100011000011 | 0b00010011000011 | 0b01010011000011 | 0b00110011000011 | 0b01110011000011 | 0b00001011000011 | 0b01001011000011 | 0b00101011000011 | 0b01101011000011 | 0b00011011000011 | 0b01011011000011 | 0b00111011000011 | 0b01111011000011 | 0b00000111000011 | 0b01000111000011 | 0b00100111000011 | 0b01100111000011 | 0b00010111000011 | 0b01010111000011 | 0b00110111000011 | 0b01110111000011 | 0b00001111000011 | 0b01001111000011 | 0b00101111000011 | 0b01101111000011 | 0b00011111000011 | 0b01011111000011 | 0b00111111000011 | 0b01111111000011 | 0b00000000100011 | 0b01000000100011 | 0b00100000100011 | 0b01100000100011 | 0b00010000100011 | 0b01010000100011 | 0b00110000100011 | 0b01110000100011 | 0b00001000100011 | 0b01001000100011 | 0b00101000100011 | 0b01101000100011 | 0b00011000100011 | 0b01011000100011 | 0b00111000100011 | 0b01111000100011 | 0b00000100100011 | 0b01000100100011 | 0b00100100100011 | 0b01100100100011 | 0b00010100100011 | 0b01010100100011 | 0b00110100100011 | 0b01110100100011 | 0b00001100100011 | 0b01001100100011 | 0b00101100100011 | 0b01101100100011 | 0b00011100100011 | 0b01011100100011 | 0b00111100100011 | 0b01111100100011 | 0b00000010100011 | 0b01000010100011 | 0b00100010100011 | 0b01100010100011 | 0b00010010100011 | 0b01010010100011 | 0b00110010100011 | 0b01110010100011 | 0b00001010100011 | 0b01001010100011 | 0b00101010100011 | 0b01101010100011 | 0b00011010100011 | 0b01011010100011 | 0b00111010100011 | 0b01111010100011 | 0b00000110100011 | 0b01000110100011 | 0b00100110100011 | 0b01100110100011 | 0b00010110100011 | 0b01010110100011 | 0b00110110100011 | 0b01110110100011 | 0b00001110100011 | 0b01001110100011 | 0b00101110100011 | 0b01101110100011 | 0b00011110100011 | 0b01011110100011 | 0b00111110100011 | 0b01111110100011 | 0b00000001100011 | 0b01000001100011 | 0b00100001100011 | 0b01100001100011 | 0b00010001100011 | 0b01010001100011 | 0b00110001100011 | 0b01110001100011 | 0b00001001100011 | 0b01001001100011 | 0b00101001100011 | 0b01101001100011 | 0b00011001100011 | 0b01011001100011 | 0b00111001100011 | 0b01111001100011 | 0b00000101100011 | 0b01000101100011 | 0b00100101100011 | 0b01100101100011 | 0b00010101100011 | 0b01010101100011 | 0b00110101100011 | 0b01110101100011 | 0b00001101100011 | 0b01001101100011 | 0b00101101100011 | 0b01101101100011 | 0b00011101100011 | 0b01011101100011 | 0b00111101100011 | 0b01111101100011 | 0b00000011100011 | 0b01000011100011 | 0b00100011100011 | 0b01100011100011 | 0b00010011100011 | 0b01010011100011 | 0b00110011100011 | 0b01110011100011 | 0b00001011100011 | 0b01001011100011 | 0b00101011100011 | 0b01101011100011 | 0b00011011100011 | 0b01011011100011 | 0b00111011100011 | 0b01111011100011 | 0b00000111100011 | 0b01000111100011 | 0b00100111100011 | 0b01100111100011 | 0b00010111100011 | 0b01010111100011 | 0b00110111100011 | 0b01110111100011 | 0b00001111100011 | 0b01001111100011 | 0b00101111100011 | 0b01101111100011 | 0b00011111100011 | 0b01011111100011 | 0b00111111100011 | 0b01111111100011 | 0b00000000010011 | 0b01000000010011 | 0b00100000010011 | 0b01100000010011 | 0b00010000010011 | 0b01010000010011 | 0b00110000010011 | 0b01110000010011 | 0b00001000010011 | 0b01001000010011 | 0b00101000010011 | 0b01101000010011 | 0b00011000010011 | 0b01011000010011 | 0b00111000010011 | 0b01111000010011 | 0b00000100010011 | 0b01000100010011 | 0b00100100010011 | 0b01100100010011 | 0b00010100010011 | 0b01010100010011 | 0b00110100010011 | 0b01110100010011 | 0b00001100010011 | 0b01001100010011 | 0b00101100010011 | 0b01101100010011 | 0b00011100010011 | 0b01011100010011 | 0b00111100010011 | 0b01111100010011 | 0b00000010010011 | 0b01000010010011 | 0b00100010010011 | 0b01100010010011 | 0b00010010010011 | 0b01010010010011 | 0b00110010010011 | 0b01110010010011 | 0b00001010010011 | 0b01001010010011 | 0b00101010010011 | 0b01101010010011 | 0b00011010010011 | 0b01011010010011 | 0b00111010010011 | 0b01111010010011 | 0b00000110010011 | 0b01000110010011 | 0b00100110010011 | 0b01100110010011 | 0b00010110010011 | 0b01010110010011 | 0b00110110010011 | 0b01110110010011 | 0b00001110010011 | 0b01001110010011 | 0b00101110010011 | 0b01101110010011 | 0b00011110010011 | 0b01011110010011 | 0b00111110010011 | 0b01111110010011 | 0b00000001010011 | 0b01000001010011 | 0b00100001010011 | 0b01100001010011 | 0b00010001010011 | 0b01010001010011 | 0b00110001010011 | 0b01110001010011 | 0b00001001010011 | 0b01001001010011 | 0b00101001010011 | 0b01101001010011 | 0b00011001010011 | 0b01011001010011 | 0b00111001010011 | 0b01111001010011 | 0b00000101010011 | 0b01000101010011 | 0b00100101010011 | 0b01100101010011 | 0b00010101010011 | 0b01010101010011 | 0b00110101010011 | 0b01110101010011 | 0b00001101010011 | 0b01001101010011 | 0b00101101010011 | 0b01101101010011 | 0b00011101010011 | 0b01011101010011 | 0b00111101010011 | 0b01111101010011 | 0b00000011010011 | 0b01000011010011 | 0b00100011010011 | 0b01100011010011 | 0b00010011010011 | 0b01010011010011 | 0b00110011010011 | 0b01110011010011 | 0b00001011010011 | 0b01001011010011 | 0b00101011010011 | 0b01101011010011 | 0b00011011010011 | 0b01011011010011 | 0b00111011010011 | 0b01111011010011 | 0b00000111010011 | 0b01000111010011 | 0b00100111010011 | 0b01100111010011 | 0b00010111010011 | 0b01010111010011 | 0b00110111010011 | 0b01110111010011 | 0b00001111010011 | 0b01001111010011 | 0b00101111010011 | 0b01101111010011 | 0b00011111010011 | 0b01011111010011 | 0b00111111010011 | 0b01111111010011 | 0b00000000110011 | 0b01000000110011 | 0b00100000110011 | 0b01100000110011 | 0b00010000110011 | 0b01010000110011 | 0b00110000110011 | 0b01110000110011 | 0b00001000110011 | 0b01001000110011 | 0b00101000110011 | 0b01101000110011 | 0b00011000110011 | 0b01011000110011 | 0b00111000110011 | 0b01111000110011 | 0b00000100110011 | 0b01000100110011 | 0b00100100110011 | 0b01100100110011 | 0b00010100110011 | 0b01010100110011 | 0b00110100110011 | 0b01110100110011 | 0b00001100110011 | 0b01001100110011 | 0b00101100110011 | 0b01101100110011 | 0b00011100110011 | 0b01011100110011 | 0b00111100110011 | 0b01111100110011 | 0b00000010110011 | 0b01000010110011 | 0b00100010110011 | 0b01100010110011 | 0b00010010110011 | 0b01010010110011 | 0b00110010110011 | 0b01110010110011 | 0b00001010110011 | 0b01001010110011 | 0b00101010110011 | 0b01101010110011 | 0b00011010110011 | 0b01011010110011 | 0b00111010110011 | 0b01111010110011 | 0b00000110110011 | 0b01000110110011 | 0b00100110110011 | 0b01100110110011 | 0b00010110110011 | 0b01010110110011 | 0b00110110110011 | 0b01110110110011 | 0b00001110110011 | 0b01001110110011 | 0b00101110110011 | 0b01101110110011 | 0b00011110110011 | 0b01011110110011 | 0b00111110110011 | 0b01111110110011 | 0b00000001110011 | 0b01000001110011 | 0b00100001110011 | 0b01100001110011 | 0b00010001110011 | 0b01010001110011 | 0b00110001110011 | 0b01110001110011 | 0b00001001110011 | 0b01001001110011 | 0b00101001110011 | 0b01101001110011 | 0b00011001110011 | 0b01011001110011 | 0b00111001110011 | 0b01111001110011 | 0b00000101110011 | 0b01000101110011 | 0b00100101110011 | 0b01100101110011 | 0b00010101110011 | 0b01010101110011 | 0b00110101110011 | 0b01110101110011 | 0b00001101110011 | 0b01001101110011 | 0b00101101110011 | 0b01101101110011 | 0b00011101110011 | 0b01011101110011 | 0b00111101110011 | 0b01111101110011 | 0b00000011110011 | 0b01000011110011 | 0b00100011110011 | 0b01100011110011 | 0b00010011110011 | 0b01010011110011 | 0b00110011110011 | 0b01110011110011 | 0b00001011110011 | 0b01001011110011 | 0b00101011110011 | 0b01101011110011 | 0b00011011110011 | 0b01011011110011 | 0b00111011110011 | 0b01111011110011 | 0b00000111110011 | 0b01000111110011 | 0b00100111110011 | 0b01100111110011 | 0b00010111110011 | 0b01010111110011 | 0b00110111110011 | 0b01110111110011 | 0b00001111110011 | 0b01001111110011 | 0b00101111110011 | 0b01101111110011 | 0b00011111110011 | 0b01011111110011 | 0b00111111110011 | 0b01111111110011 | 0b00000000001011 | 0b01000000001011 | 0b00100000001011 | 0b01100000001011 | 0b00010000001011 | 0b01010000001011 | 0b00110000001011 | 0b01110000001011 | 0b00001000001011 | 0b01001000001011 | 0b00101000001011 | 0b01101000001011 | 0b00011000001011 | 0b01011000001011 | 0b00111000001011 | 0b01111000001011 | 0b00000100001011 | 0b01000100001011 | 0b00100100001011 | 0b01100100001011 | 0b00010100001011 | 0b01010100001011 | 0b00110100001011 | 0b01110100001011 | 0b00001100001011 | 0b01001100001011 | 0b00101100001011 | 0b01101100001011 | 0b00011100001011 | 0b01011100001011 | 0b00111100001011 | 0b01111100001011 | 0b00000010001011 | 0b01000010001011 | 0b00100010001011 | 0b01100010001011 | 0b00010010001011 | 0b01010010001011 | 0b00110010001011 | 0b01110010001011 | 0b00001010001011 | 0b01001010001011 | 0b00101010001011 | 0b01101010001011 | 0b00011010001011 | 0b01011010001011 | 0b00111010001011 | 0b01111010001011 | 0b00000110001011 | 0b01000110001011 | 0b00100110001011 | 0b01100110001011 | 0b00010110001011 | 0b01010110001011 | 0b00110110001011 | 0b01110110001011 | 0b00001110001011 | 0b01001110001011 | 0b00101110001011 | 0b01101110001011 | 0b00011110001011 | 0b01011110001011 | 0b00111110001011 | 0b01111110001011 | 0b00000001001011 | 0b01000001001011 | 0b00100001001011 | 0b01100001001011 | 0b00010001001011 | 0b01010001001011 | 0b00110001001011 | 0b01110001001011 | 0b00001001001011 | 0b01001001001011 | 0b00101001001011 | 0b01101001001011 | 0b00011001001011 | 0b01011001001011 | 0b00111001001011 | 0b01111001001011 | 0b00000101001011 | 0b01000101001011 | 0b00100101001011 | 0b01100101001011 | 0b00010101001011 | 0b01010101001011 | 0b00110101001011 | 0b01110101001011 | 0b00001101001011 | 0b01001101001011 | 0b00101101001011 | 0b01101101001011 | 0b00011101001011 | 0b01011101001011 | 0b00111101001011 | 0b01111101001011 | 0b00000011001011 | 0b01000011001011 | 0b00100011001011 | 0b01100011001011 | 0b00010011001011 | 0b01010011001011 | 0b00110011001011 | 0b01110011001011 | 0b00001011001011 | 0b01001011001011 | 0b00101011001011 | 0b01101011001011 | 0b00011011001011 | 0b01011011001011 | 0b00111011001011 | 0b01111011001011 | 0b00000111001011 | 0b01000111001011 | 0b00100111001011 | 0b01100111001011 | 0b00010111001011 | 0b01010111001011 | 0b00110111001011 | 0b01110111001011 | 0b00001111001011 | 0b01001111001011 | 0b00101111001011 | 0b01101111001011 | 0b00011111001011 | 0b01011111001011 | 0b00111111001011 | 0b01111111001011 | 0b00000000101011 | 0b01000000101011 | 0b00100000101011 | 0b01100000101011 | 0b00010000101011 | 0b01010000101011 | 0b00110000101011 | 0b01110000101011 | 0b00001000101011 | 0b01001000101011 | 0b00101000101011 | 0b01101000101011 | 0b00011000101011 | 0b01011000101011 | 0b00111000101011 | 0b01111000101011 | 0b00000100101011 | 0b01000100101011 | 0b00100100101011 | 0b01100100101011 | 0b00010100101011 | 0b01010100101011 | 0b00110100101011 | 0b01110100101011 | 0b00001100101011 | 0b01001100101011 | 0b00101100101011 | 0b01101100101011 | 0b00011100101011 | 0b01011100101011 | 0b00111100101011 | 0b01111100101011 | 0b00000010101011 | 0b01000010101011 | 0b00100010101011 | 0b01100010101011 | 0b00010010101011 | 0b01010010101011 | 0b00110010101011 | 0b01110010101011 | 0b00001010101011 | 0b01001010101011 | 0b00101010101011 | 0b01101010101011 | 0b00011010101011 | 0b01011010101011 | 0b00111010101011 | 0b01111010101011 | 0b00000110101011 | 0b01000110101011 | 0b00100110101011 | 0b01100110101011 | 0b00010110101011 | 0b01010110101011 | 0b00110110101011 | 0b01110110101011 | 0b00001110101011 | 0b01001110101011 | 0b00101110101011 | 0b01101110101011 | 0b00011110101011 | 0b01011110101011 | 0b00111110101011 | 0b01111110101011 | 0b00000001101011 | 0b01000001101011 | 0b00100001101011 | 0b01100001101011 | 0b00010001101011 | 0b01010001101011 | 0b00110001101011 | 0b01110001101011 | 0b00001001101011 | 0b01001001101011 | 0b00101001101011 | 0b01101001101011 | 0b00011001101011 | 0b01011001101011 | 0b00111001101011 | 0b01111001101011 | 0b00000101101011 | 0b01000101101011 | 0b00100101101011 | 0b01100101101011 | 0b00010101101011 | 0b01010101101011 | 0b00110101101011 | 0b01110101101011 | 0b00001101101011 | 0b01001101101011 | 0b00101101101011 | 0b01101101101011 | 0b00011101101011 | 0b01011101101011 | 0b00111101101011 | 0b01111101101011 | 0b00000011101011 | 0b01000011101011 | 0b00100011101011 | 0b01100011101011 | 0b00010011101011 | 0b01010011101011 | 0b00110011101011 | 0b01110011101011 | 0b00001011101011 | 0b01001011101011 | 0b00101011101011 | 0b01101011101011 | 0b00011011101011 | 0b01011011101011 | 0b00111011101011 | 0b01111011101011 | 0b00000111101011 | 0b01000111101011 | 0b00100111101011 | 0b01100111101011 | 0b00010111101011 | 0b01010111101011 | 0b00110111101011 | 0b01110111101011 | 0b00001111101011 | 0b01001111101011 | 0b00101111101011 | 0b01101111101011 | 0b00011111101011 | 0b01011111101011 | 0b00111111101011 | 0b01111111101011 | 0b00000000011011 | 0b01000000011011 | 0b00100000011011 | 0b01100000011011 | 0b00010000011011 | 0b01010000011011 | 0b00110000011011 | 0b01110000011011 | 0b00001000011011 | 0b01001000011011 | 0b00101000011011 | 0b01101000011011 | 0b00011000011011 | 0b01011000011011 | 0b00111000011011 | 0b01111000011011 | 0b00000100011011 | 0b01000100011011 | 0b00100100011011 | 0b01100100011011 | 0b00010100011011 | 0b01010100011011 | 0b00110100011011 | 0b01110100011011 | 0b00001100011011 | 0b01001100011011 | 0b00101100011011 | 0b01101100011011 | 0b00011100011011 | 0b01011100011011 | 0b00111100011011 | 0b01111100011011 | 0b00000010011011 | 0b01000010011011 | 0b00100010011011 | 0b01100010011011 | 0b00010010011011 | 0b01010010011011 | 0b00110010011011 | 0b01110010011011 | 0b00001010011011 | 0b01001010011011 | 0b00101010011011 | 0b01101010011011 | 0b00011010011011 | 0b01011010011011 | 0b00111010011011 | 0b01111010011011 | 0b00000110011011 | 0b01000110011011 | 0b00100110011011 | 0b01100110011011 | 0b00010110011011 | 0b01010110011011 | 0b00110110011011 | 0b01110110011011 | 0b00001110011011 | 0b01001110011011 | 0b00101110011011 | 0b01101110011011 | 0b00011110011011 | 0b01011110011011 | 0b00111110011011 | 0b01111110011011 | 0b00000001011011 | 0b01000001011011 | 0b00100001011011 | 0b01100001011011 | 0b00010001011011 | 0b01010001011011 | 0b00110001011011 | 0b01110001011011 | 0b00001001011011 | 0b01001001011011 | 0b00101001011011 | 0b01101001011011 | 0b00011001011011 | 0b01011001011011 | 0b00111001011011 | 0b01111001011011 | 0b00000101011011 | 0b01000101011011 | 0b00100101011011 | 0b01100101011011 | 0b00010101011011 | 0b01010101011011 | 0b00110101011011 | 0b01110101011011 | 0b00001101011011 | 0b01001101011011 | 0b00101101011011 | 0b01101101011011 | 0b00011101011011 | 0b01011101011011 | 0b00111101011011 | 0b01111101011011 | 0b00000011011011 | 0b01000011011011 | 0b00100011011011 | 0b01100011011011 | 0b00010011011011 | 0b01010011011011 | 0b00110011011011 | 0b01110011011011 | 0b00001011011011 | 0b01001011011011 | 0b00101011011011 | 0b01101011011011 | 0b00011011011011 | 0b01011011011011 | 0b00111011011011 | 0b01111011011011 | 0b00000111011011 | 0b01000111011011 | 0b00100111011011 | 0b01100111011011 | 0b00010111011011 | 0b01010111011011 | 0b00110111011011 | 0b01110111011011 | 0b00001111011011 | 0b01001111011011 | 0b00101111011011 | 0b01101111011011 | 0b00011111011011 | 0b01011111011011 | 0b00111111011011 | 0b01111111011011 | 0b00000000111011 | 0b01000000111011 | 0b00100000111011 | 0b01100000111011 | 0b00010000111011 | 0b01010000111011 | 0b00110000111011 | 0b01110000111011 | 0b00001000111011 | 0b01001000111011 | 0b00101000111011 | 0b01101000111011 | 0b00011000111011 | 0b01011000111011 | 0b00111000111011 | 0b01111000111011 | 0b00000100111011 | 0b01000100111011 | 0b00100100111011 | 0b01100100111011 | 0b00010100111011 | 0b01010100111011 | 0b00110100111011 | 0b01110100111011 | 0b00001100111011 | 0b01001100111011 | 0b00101100111011 | 0b01101100111011 | 0b00011100111011 | 0b01011100111011 | 0b00111100111011 | 0b01111100111011 | 0b00000010111011 | 0b01000010111011 | 0b00100010111011 | 0b01100010111011 | 0b00010010111011 | 0b01010010111011 | 0b00110010111011 | 0b01110010111011 | 0b00001010111011 | 0b01001010111011 | 0b00101010111011 | 0b01101010111011 | 0b00011010111011 | 0b01011010111011 | 0b00111010111011 | 0b01111010111011 | 0b00000110111011 | 0b01000110111011 | 0b00100110111011 | 0b01100110111011 | 0b00010110111011 | 0b01010110111011 | 0b00110110111011 | 0b01110110111011 | 0b00001110111011 | 0b01001110111011 | 0b00101110111011 | 0b01101110111011 | 0b00011110111011 | 0b01011110111011 | 0b00111110111011 | 0b01111110111011 | 0b00000001111011 | 0b01000001111011 | 0b00100001111011 | 0b01100001111011 | 0b00010001111011 | 0b01010001111011 | 0b00110001111011 | 0b01110001111011 | 0b00001001111011 | 0b01001001111011 | 0b00101001111011 | 0b01101001111011 | 0b00011001111011 | 0b01011001111011 | 0b00111001111011 | 0b01111001111011 | 0b00000101111011 | 0b01000101111011 | 0b00100101111011 | 0b01100101111011 | 0b00010101111011 | 0b01010101111011 | 0b00110101111011 | 0b01110101111011 | 0b00001101111011 | 0b01001101111011 | 0b00101101111011 | 0b01101101111011 | 0b00011101111011 | 0b01011101111011 | 0b00111101111011 | 0b01111101111011 | 0b00000011111011 | 0b01000011111011 | 0b00100011111011 | 0b01100011111011 | 0b00010011111011 | 0b01010011111011 | 0b00110011111011 | 0b01110011111011 | 0b00001011111011 | 0b01001011111011 | 0b00101011111011 | 0b01101011111011 | 0b00011011111011 | 0b01011011111011 | 0b00111011111011 | 0b01111011111011 | 0b00000111111011 | 0b01000111111011 | 0b00100111111011 | 0b01100111111011 | 0b00010111111011 | 0b01010111111011 | 0b00110111111011 | 0b01110111111011 | 0b00001111111011 | 0b01001111111011 | 0b00101111111011 | 0b01101111111011 | 0b00011111111011 | 0b01011111111011 | 0b00111111111011 | 0b01111111111011 | 0b00000000000111 | 0b01000000000111 | 0b00100000000111 | 0b01100000000111 | 0b00010000000111 | 0b01010000000111 | 0b00110000000111 | 0b01110000000111 | 0b00001000000111 | 0b01001000000111 | 0b00101000000111 | 0b01101000000111 | 0b00011000000111 | 0b01011000000111 | 0b00111000000111 | 0b01111000000111 | 0b00000100000111 | 0b01000100000111 | 0b00100100000111 | 0b01100100000111 | 0b00010100000111 | 0b01010100000111 | 0b00110100000111 | 0b01110100000111 | 0b00001100000111 | 0b01001100000111 | 0b00101100000111 | 0b01101100000111 | 0b00011100000111 | 0b01011100000111 | 0b00111100000111 | 0b01111100000111 | 0b00000010000111 | 0b01000010000111 | 0b00100010000111 | 0b01100010000111 | 0b00010010000111 | 0b01010010000111 | 0b00110010000111 | 0b01110010000111 | 0b00001010000111 | 0b01001010000111 | 0b00101010000111 | 0b01101010000111 | 0b00011010000111 | 0b01011010000111 | 0b00111010000111 | 0b01111010000111 | 0b00000110000111 | 0b01000110000111 | 0b00100110000111 | 0b01100110000111 | 0b00010110000111 | 0b01010110000111 | 0b00110110000111 | 0b01110110000111 | 0b00001110000111 | 0b01001110000111 | 0b00101110000111 | 0b01101110000111 | 0b00011110000111 | 0b01011110000111 | 0b00111110000111 | 0b01111110000111 | 0b00000001000111 | 0b01000001000111 | 0b00100001000111 | 0b01100001000111 | 0b00010001000111 | 0b01010001000111 | 0b00110001000111 | 0b01110001000111 | 0b00001001000111 | 0b01001001000111 | 0b00101001000111 | 0b01101001000111 | 0b00011001000111 | 0b01011001000111 | 0b00111001000111 | 0b01111001000111 | 0b00000101000111 | 0b01000101000111 | 0b00100101000111 | 0b01100101000111 | 0b00010101000111 | 0b01010101000111 | 0b00110101000111 | 0b01110101000111 | 0b00001101000111 | 0b01001101000111 | 0b00101101000111 | 0b01101101000111 | 0b00011101000111 | 0b01011101000111 | 0b00111101000111 | 0b01111101000111 | 0b00000011000111 | 0b01000011000111 | 0b00100011000111 | 0b01100011000111 | 0b00010011000111 | 0b01010011000111 | 0b00110011000111 | 0b01110011000111 | 0b00001011000111 | 0b01001011000111 | 0b00101011000111 | 0b01101011000111 | 0b00011011000111 | 0b01011011000111 | 0b00111011000111 | 0b01111011000111 | 0b00000111000111 | 0b01000111000111 | 0b00100111000111 | 0b01100111000111 | 0b00010111000111 | 0b01010111000111 | 0b00110111000111 | 0b01110111000111 | 0b00001111000111 | 0b01001111000111 | 0b00101111000111 | 0b01101111000111 | 0b00011111000111 | 0b01011111000111 | 0b00111111000111 | 0b01111111000111 | 0b00000000100111 | 0b01000000100111 | 0b00100000100111 | 0b01100000100111 | 0b00010000100111 | 0b01010000100111 | 0b00110000100111 | 0b01110000100111 | 0b00001000100111 | 0b01001000100111 | 0b00101000100111 | 0b01101000100111 | 0b00011000100111 | 0b01011000100111 | 0b00111000100111 | 0b01111000100111 | 0b00000100100111 | 0b01000100100111 | 0b00100100100111 | 0b01100100100111 | 0b00010100100111 | 0b01010100100111 | 0b00110100100111 | 0b01110100100111 | 0b00001100100111 | 0b01001100100111 | 0b00101100100111 | 0b01101100100111 | 0b00011100100111 | 0b01011100100111 | 0b00111100100111 | 0b01111100100111 | 0b00000010100111 | 0b01000010100111 | 0b00100010100111 | 0b01100010100111 | 0b00010010100111 | 0b01010010100111 | 0b00110010100111 | 0b01110010100111 | 0b00001010100111 | 0b01001010100111 | 0b00101010100111 | 0b01101010100111 | 0b00011010100111 | 0b01011010100111 | 0b00111010100111 | 0b01111010100111 | 0b00000110100111 | 0b01000110100111 | 0b00100110100111 | 0b01100110100111 | 0b00010110100111 | 0b01010110100111 | 0b00110110100111 | 0b01110110100111 | 0b00001110100111 | 0b01001110100111 | 0b00101110100111 | 0b01101110100111 | 0b00011110100111 | 0b01011110100111 | 0b00111110100111 | 0b01111110100111 | 0b00000001100111 | 0b01000001100111 | 0b00100001100111 | 0b01100001100111 | 0b00010001100111 | 0b01010001100111 | 0b00110001100111 | 0b01110001100111 | 0b00001001100111 | 0b01001001100111 | 0b00101001100111 | 0b01101001100111 | 0b00011001100111 | 0b01011001100111 | 0b00111001100111 | 0b01111001100111 | 0b00000101100111 | 0b01000101100111 | 0b00100101100111 | 0b01100101100111 | 0b00010101100111 | 0b01010101100111 | 0b00110101100111 | 0b01110101100111 | 0b00001101100111 | 0b01001101100111 | 0b00101101100111 | 0b01101101100111 | 0b00011101100111 | 0b01011101100111 | 0b00111101100111 | 0b01111101100111 | 0b00000011100111 | 0b01000011100111 | 0b00100011100111 | 0b01100011100111 | 0b00010011100111 | 0b01010011100111 | 0b00110011100111 | 0b01110011100111 | 0b00001011100111 | 0b01001011100111 | 0b00101011100111 | 0b01101011100111 | 0b00011011100111 | 0b01011011100111 | 0b00111011100111 | 0b01111011100111 | 0b00000111100111 | 0b01000111100111 | 0b00100111100111 | 0b01100111100111 | 0b00010111100111 | 0b01010111100111 | 0b00110111100111 | 0b01110111100111 | 0b00001111100111 | 0b01001111100111 | 0b00101111100111 | 0b01101111100111 | 0b00011111100111 | 0b01011111100111 | 0b00111111100111 | 0b01111111100111 | 0b00000000010111 | 0b01000000010111 | 0b00100000010111 | 0b01100000010111 | 0b00010000010111 | 0b01010000010111 | 0b00110000010111 | 0b01110000010111 | 0b00001000010111 | 0b01001000010111 | 0b00101000010111 | 0b01101000010111 | 0b00011000010111 | 0b01011000010111 | 0b00111000010111 | 0b01111000010111 | 0b00000100010111 | 0b01000100010111 | 0b00100100010111 | 0b01100100010111 | 0b00010100010111 | 0b01010100010111 | 0b00110100010111 | 0b01110100010111 | 0b00001100010111 | 0b01001100010111 | 0b00101100010111 | 0b01101100010111 | 0b00011100010111 | 0b01011100010111 | 0b00111100010111 | 0b01111100010111 | 0b00000010010111 | 0b01000010010111 | 0b00100010010111 | 0b01100010010111 | 0b00010010010111 | 0b01010010010111 | 0b00110010010111 | 0b01110010010111 | 0b00001010010111 | 0b01001010010111 | 0b00101010010111 | 0b01101010010111 | 0b00011010010111 | 0b01011010010111 | 0b00111010010111 | 0b01111010010111 | 0b00000110010111 | 0b01000110010111 | 0b00100110010111 | 0b01100110010111 | 0b00010110010111 | 0b01010110010111 | 0b00110110010111 | 0b01110110010111 | 0b00001110010111 | 0b01001110010111 | 0b00101110010111 | 0b01101110010111 | 0b00011110010111 | 0b01011110010111 | 0b00111110010111 | 0b01111110010111 | 0b00000001010111 | 0b01000001010111 | 0b00100001010111 | 0b01100001010111 | 0b00010001010111 | 0b01010001010111 | 0b00110001010111 | 0b01110001010111 | 0b00001001010111 | 0b01001001010111 | 0b00101001010111 | 0b01101001010111 | 0b00011001010111 | 0b01011001010111 | 0b00111001010111 | 0b01111001010111 | 0b00000101010111 | 0b01000101010111 | 0b00100101010111 | 0b01100101010111 | 0b00010101010111 | 0b01010101010111 | 0b00110101010111 | 0b01110101010111 | 0b00001101010111 | 0b01001101010111 | 0b00101101010111 | 0b01101101010111 | 0b00011101010111 | 0b01011101010111 | 0b00111101010111 | 0b01111101010111 | 0b00000011010111 | 0b01000011010111 | 0b00100011010111 | 0b01100011010111 | 0b00010011010111 | 0b01010011010111 | 0b00110011010111 | 0b01110011010111 | 0b00001011010111 | 0b01001011010111 | 0b00101011010111 | 0b01101011010111 | 0b00011011010111 | 0b01011011010111 | 0b00111011010111 | 0b01111011010111 | 0b00000111010111 | 0b01000111010111 | 0b00100111010111 | 0b01100111010111 | 0b00010111010111 | 0b01010111010111 | 0b00110111010111 | 0b01110111010111 | 0b00001111010111 | 0b01001111010111 | 0b00101111010111 | 0b01101111010111 | 0b00011111010111 | 0b01011111010111 | 0b00111111010111 | 0b01111111010111 | 0b00000000110111 | 0b01000000110111 | 0b00100000110111 | 0b01100000110111 | 0b00010000110111 | 0b01010000110111 | 0b00110000110111 | 0b01110000110111 | 0b00001000110111 | 0b01001000110111 | 0b00101000110111 | 0b01101000110111 | 0b00011000110111 | 0b01011000110111 | 0b00111000110111 | 0b01111000110111 | 0b00000100110111 | 0b01000100110111 | 0b00100100110111 | 0b01100100110111 | 0b00010100110111 | 0b01010100110111 | 0b00110100110111 | 0b01110100110111 | 0b00001100110111 | 0b01001100110111 | 0b00101100110111 | 0b01101100110111 | 0b00011100110111 | 0b01011100110111 | 0b00111100110111 | 0b01111100110111 | 0b00000010110111 | 0b01000010110111 | 0b00100010110111 | 0b01100010110111 | 0b00010010110111 | 0b01010010110111 | 0b00110010110111 | 0b01110010110111 | 0b00001010110111 | 0b01001010110111 | 0b00101010110111 | 0b01101010110111 | 0b00011010110111 | 0b01011010110111 | 0b00111010110111 | 0b01111010110111 | 0b00000110110111 | 0b01000110110111 | 0b00100110110111 | 0b01100110110111 | 0b00010110110111 | 0b01010110110111 | 0b00110110110111 | 0b01110110110111 | 0b00001110110111 | 0b01001110110111 | 0b00101110110111 | 0b01101110110111 | 0b00011110110111 | 0b01011110110111 | 0b00111110110111 | 0b01111110110111 | 0b00000001110111 | 0b01000001110111 | 0b00100001110111 | 0b01100001110111 | 0b00010001110111 | 0b01010001110111 | 0b00110001110111 | 0b01110001110111 | 0b00001001110111 | 0b01001001110111 | 0b00101001110111 | 0b01101001110111 | 0b00011001110111 | 0b01011001110111 | 0b00111001110111 | 0b01111001110111 | 0b00000101110111 | 0b01000101110111 | 0b00100101110111 | 0b01100101110111 | 0b00010101110111 | 0b01010101110111 | 0b00110101110111 | 0b01110101110111 | 0b00001101110111 | 0b01001101110111 | 0b00101101110111 | 0b01101101110111 | 0b00011101110111 | 0b01011101110111 | 0b00111101110111 | 0b01111101110111 | 0b00000011110111 | 0b01000011110111 | 0b00100011110111 | 0b01100011110111 | 0b00010011110111 | 0b01010011110111 | 0b00110011110111 | 0b01110011110111 | 0b00001011110111 | 0b01001011110111 | 0b00101011110111 | 0b01101011110111 | 0b00011011110111 | 0b01011011110111 | 0b00111011110111 | 0b01111011110111 | 0b00000111110111 | 0b01000111110111 | 0b00100111110111 | 0b01100111110111 | 0b00010111110111 | 0b01010111110111 | 0b00110111110111 | 0b01110111110111 | 0b00001111110111 | 0b01001111110111 | 0b00101111110111 | 0b01101111110111 | 0b00011111110111 | 0b01011111110111 | 0b00111111110111 | 0b01111111110111 | 0b00000000001111 | 0b01000000001111 | 0b00100000001111 | 0b01100000001111 | 0b00010000001111 | 0b01010000001111 | 0b00110000001111 | 0b01110000001111 | 0b00001000001111 | 0b01001000001111 | 0b00101000001111 | 0b01101000001111 | 0b00011000001111 | 0b01011000001111 | 0b00111000001111 | 0b01111000001111 | 0b00000100001111 | 0b01000100001111 | 0b00100100001111 | 0b01100100001111 | 0b00010100001111 | 0b01010100001111 | 0b00110100001111 | 0b01110100001111 | 0b00001100001111 | 0b01001100001111 | 0b00101100001111 | 0b01101100001111 | 0b00011100001111 | 0b01011100001111 | 0b00111100001111 | 0b01111100001111 | 0b00000010001111 | 0b01000010001111 | 0b00100010001111 | 0b01100010001111 | 0b00010010001111 | 0b01010010001111 | 0b00110010001111 | 0b01110010001111 | 0b00001010001111 | 0b01001010001111 | 0b00101010001111 | 0b01101010001111 | 0b00011010001111 | 0b01011010001111 | 0b00111010001111 | 0b01111010001111 | 0b00000110001111 | 0b01000110001111 | 0b00100110001111 | 0b01100110001111 | 0b00010110001111 | 0b01010110001111 | 0b00110110001111 | 0b01110110001111 | 0b00001110001111 | 0b01001110001111 | 0b00101110001111 | 0b01101110001111 | 0b00011110001111 | 0b01011110001111 | 0b00111110001111 | 0b01111110001111 | 0b00000001001111 | 0b01000001001111 | 0b00100001001111 | 0b01100001001111 | 0b00010001001111 | 0b01010001001111 | 0b00110001001111 | 0b01110001001111 | 0b00001001001111 | 0b01001001001111 | 0b00101001001111 | 0b01101001001111 | 0b00011001001111 | 0b01011001001111 | 0b00111001001111 | 0b01111001001111 | 0b00000101001111 | 0b01000101001111 | 0b00100101001111 | 0b01100101001111 | 0b00010101001111 | 0b01010101001111 | 0b00110101001111 | 0b01110101001111 | 0b00001101001111 | 0b01001101001111 | 0b00101101001111 | 0b01101101001111 | 0b00011101001111 | 0b01011101001111 | 0b00111101001111 | 0b01111101001111 | 0b00000011001111 | 0b01000011001111 | 0b00100011001111 | 0b01100011001111 | 0b00010011001111 | 0b01010011001111 | 0b00110011001111 | 0b01110011001111 | 0b00001011001111 | 0b01001011001111 | 0b00101011001111 | 0b01101011001111 | 0b00011011001111 | 0b01011011001111 | 0b00111011001111 | 0b01111011001111 | 0b00000111001111 | 0b01000111001111 | 0b00100111001111 | 0b01100111001111 | 0b00010111001111 | 0b01010111001111 | 0b00110111001111 | 0b01110111001111 | 0b00001111001111 | 0b01001111001111 | 0b00101111001111 | 0b01101111001111 | 0b00011111001111 | 0b01011111001111 | 0b00111111001111 | 0b01111111001111 | 0b00000000101111 | 0b01000000101111 | 0b00100000101111 | 0b01100000101111 | 0b00010000101111 | 0b01010000101111 | 0b00110000101111 | 0b01110000101111 | 0b00001000101111 | 0b01001000101111 | 0b00101000101111 | 0b01101000101111 | 0b00011000101111 | 0b01011000101111 | 0b00111000101111 | 0b01111000101111 | 0b00000100101111 | 0b01000100101111 | 0b00100100101111 | 0b01100100101111 | 0b00010100101111 | 0b01010100101111 | 0b00110100101111 | 0b01110100101111 | 0b00001100101111 | 0b01001100101111 | 0b00101100101111 | 0b01101100101111 | 0b00011100101111 | 0b01011100101111 | 0b00111100101111 | 0b01111100101111 | 0b00000010101111 | 0b01000010101111 | 0b00100010101111 | 0b01100010101111 | 0b00010010101111 | 0b01010010101111 | 0b00110010101111 | 0b01110010101111 | 0b00001010101111 | 0b01001010101111 | 0b00101010101111 | 0b01101010101111 | 0b00011010101111 | 0b01011010101111 | 0b00111010101111 | 0b01111010101111 | 0b00000110101111 | 0b01000110101111 | 0b00100110101111 | 0b01100110101111 | 0b00010110101111 | 0b01010110101111 | 0b00110110101111 | 0b01110110101111 | 0b00001110101111 | 0b01001110101111 | 0b00101110101111 | 0b01101110101111 | 0b00011110101111 | 0b01011110101111 | 0b00111110101111 | 0b01111110101111 | 0b00000001101111 | 0b01000001101111 | 0b00100001101111 | 0b01100001101111 | 0b00010001101111 | 0b01010001101111 | 0b00110001101111 | 0b01110001101111 | 0b00001001101111 | 0b01001001101111 | 0b00101001101111 | 0b01101001101111 | 0b00011001101111 | 0b01011001101111 | 0b00111001101111 | 0b01111001101111 | 0b00000101101111 | 0b01000101101111 | 0b00100101101111 | 0b01100101101111 | 0b00010101101111 | 0b01010101101111 | 0b00110101101111 | 0b01110101101111 | 0b00001101101111 | 0b01001101101111 | 0b00101101101111 | 0b01101101101111 | 0b00011101101111 | 0b01011101101111 | 0b00111101101111 | 0b01111101101111 | 0b00000011101111 | 0b01000011101111 | 0b00100011101111 | 0b01100011101111 | 0b00010011101111 | 0b01010011101111 | 0b00110011101111 | 0b01110011101111 | 0b00001011101111 | 0b01001011101111 | 0b00101011101111 | 0b01101011101111 | 0b00011011101111 | 0b01011011101111 | 0b00111011101111 | 0b01111011101111 | 0b00000111101111 | 0b01000111101111 | 0b00100111101111 | 0b01100111101111 | 0b00010111101111 | 0b01010111101111 | 0b00110111101111 | 0b01110111101111 | 0b00001111101111 | 0b01001111101111 | 0b00101111101111 | 0b01101111101111 | 0b00011111101111 | 0b01011111101111 | 0b00111111101111 | 0b01111111101111 | 0b00000000011111 | 0b01000000011111 | 0b00100000011111 | 0b01100000011111 | 0b00010000011111 | 0b01010000011111 | 0b00110000011111 | 0b01110000011111 | 0b00001000011111 | 0b01001000011111 | 0b00101000011111 | 0b01101000011111 | 0b00011000011111 | 0b01011000011111 | 0b00111000011111 | 0b01111000011111 | 0b00000100011111 | 0b01000100011111 | 0b00100100011111 | 0b01100100011111 | 0b00010100011111 | 0b01010100011111 | 0b00110100011111 | 0b01110100011111 | 0b00001100011111 | 0b01001100011111 | 0b00101100011111 | 0b01101100011111 | 0b00011100011111 | 0b01011100011111 | 0b00111100011111 | 0b01111100011111 | 0b00000010011111 | 0b01000010011111 | 0b00100010011111 | 0b01100010011111 | 0b00010010011111 | 0b01010010011111 | 0b00110010011111 | 0b01110010011111 | 0b00001010011111 | 0b01001010011111 | 0b00101010011111 | 0b01101010011111 | 0b00011010011111 | 0b01011010011111 | 0b00111010011111 | 0b01111010011111 | 0b00000110011111 | 0b01000110011111 | 0b00100110011111 | 0b01100110011111 | 0b00010110011111 | 0b01010110011111 | 0b00110110011111 | 0b01110110011111 | 0b00001110011111 | 0b01001110011111 | 0b00101110011111 | 0b01101110011111 | 0b00011110011111 | 0b01011110011111 | 0b00111110011111 | 0b01111110011111 | 0b00000001011111 | 0b01000001011111 | 0b00100001011111 | 0b01100001011111 | 0b00010001011111 | 0b01010001011111 | 0b00110001011111 | 0b01110001011111 | 0b00001001011111 | 0b01001001011111 | 0b00101001011111 | 0b01101001011111 | 0b00011001011111 | 0b01011001011111 | 0b00111001011111 | 0b01111001011111 | 0b00000101011111 | 0b01000101011111 | 0b00100101011111 | 0b01100101011111 | 0b00010101011111 | 0b01010101011111 | 0b00110101011111 | 0b01110101011111 | 0b00001101011111 | 0b01001101011111 | 0b00101101011111 | 0b01101101011111 | 0b00011101011111 | 0b01011101011111 | 0b00111101011111 | 0b01111101011111 | 0b00000011011111 | 0b01000011011111 | 0b00100011011111 | 0b01100011011111 | 0b00010011011111 | 0b01010011011111 | 0b00110011011111 | 0b01110011011111 | 0b00001011011111 | 0b01001011011111 | 0b00101011011111 | 0b01101011011111 | 0b00011011011111 | 0b01011011011111 | 0b00111011011111 | 0b01111011011111 | 0b00000111011111 | 0b01000111011111 | 0b00100111011111 | 0b01100111011111 | 0b00010111011111 | 0b01010111011111 | 0b00110111011111 | 0b01110111011111 | 0b00001111011111 | 0b01001111011111 | 0b00101111011111 | 0b01101111011111 | 0b00011111011111 | 0b01011111011111 | 0b00111111011111 | 0b01111111011111 | 0b00000000111111 | 0b01000000111111 | 0b00100000111111 | 0b01100000111111 | 0b00010000111111 | 0b01010000111111 | 0b00110000111111 | 0b01110000111111 | 0b00001000111111 | 0b01001000111111 | 0b00101000111111 | 0b01101000111111 | 0b00011000111111 | 0b01011000111111 | 0b00111000111111 | 0b01111000111111 | 0b00000100111111 | 0b01000100111111 | 0b00100100111111 | 0b01100100111111 | 0b00010100111111 | 0b01010100111111 | 0b00110100111111 | 0b01110100111111 | 0b00001100111111 | 0b01001100111111 | 0b00101100111111 | 0b01101100111111 | 0b00011100111111 | 0b01011100111111 | 0b00111100111111 | 0b01111100111111 | 0b00000010111111 | 0b01000010111111 | 0b00100010111111 | 0b01100010111111 | 0b00010010111111 | 0b01010010111111 | 0b00110010111111 | 0b01110010111111 | 0b00001010111111 | 0b01001010111111 | 0b00101010111111 | 0b01101010111111 | 0b00011010111111 | 0b01011010111111 | 0b00111010111111 | 0b01111010111111 | 0b00000110111111 | 0b01000110111111 | 0b00100110111111 | 0b01100110111111 | 0b00010110111111 | 0b01010110111111 | 0b00110110111111 | 0b01110110111111 | 0b00001110111111 | 0b01001110111111 | 0b00101110111111 | 0b01101110111111 | 0b00011110111111 | 0b01011110111111 | 0b00111110111111 | 0b01111110111111 | 0b00000001111111 | 0b01000001111111 | 0b00100001111111 | 0b01100001111111 | 0b00010001111111 | 0b01010001111111 | 0b00110001111111 | 0b01110001111111 | 0b00001001111111 | 0b01001001111111 | 0b00101001111111 | 0b01101001111111 | 0b00011001111111 | 0b01011001111111 | 0b00111001111111 | 0b01111001111111 | 0b00000101111111 | 0b01000101111111 | 0b00100101111111 | 0b01100101111111 | 0b00010101111111 | 0b01010101111111 | 0b00110101111111 | 0b01110101111111 | 0b00001101111111 | 0b01001101111111 | 0b00101101111111 | 0b01101101111111 | 0b00011101111111 | 0b01011101111111 | 0b00111101111111 | 0b01111101111111 | 0b00000011111111 | 0b01000011111111 | 0b00100011111111 | 0b01100011111111 | 0b00010011111111 | 0b01010011111111 | 0b00110011111111 | 0b01110011111111 | 0b00001011111111 | 0b01001011111111 | 0b00101011111111 | 0b01101011111111 | 0b00011011111111 | 0b01011011111111 | 0b00111011111111 | 0b01111011111111 | 0b00000111111111 | 0b01000111111111 | 0b00100111111111 | 0b01100111111111 | 0b00010111111111 | 0b01010111111111 | 0b00110111111111 | 0b01110111111111 | 0b00001111111111 | 0b01001111111111 | 0b00101111111111 | 0b01101111111111 | 0b00011111111111 | 0b01011111111111 | 0b00111111111111 | 0b01111111111111, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 24) & 0b1;
            let imm19 = (inst >> 5) & 0b1111111111111111111;
            let Rt = inst & 0b11111;
            match (sf, op) {
                (0, 0) => return OpCode::CBZ_32_compbranch,
                (0, 1) => return OpCode::CBNZ_32_compbranch,
                (1, 0) => return OpCode::CBZ_64_compbranch,
                (1, 1) => return OpCode::CBNZ_64_compbranch,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b001 | 0b101, _, 0b10000000000000 | 0b11000000000000 | 0b10100000000000 | 0b11100000000000 | 0b10010000000000 | 0b11010000000000 | 0b10110000000000 | 0b11110000000000 | 0b10001000000000 | 0b11001000000000 | 0b10101000000000 | 0b11101000000000 | 0b10011000000000 | 0b11011000000000 | 0b10111000000000 | 0b11111000000000 | 0b10000100000000 | 0b11000100000000 | 0b10100100000000 | 0b11100100000000 | 0b10010100000000 | 0b11010100000000 | 0b10110100000000 | 0b11110100000000 | 0b10001100000000 | 0b11001100000000 | 0b10101100000000 | 0b11101100000000 | 0b10011100000000 | 0b11011100000000 | 0b10111100000000 | 0b11111100000000 | 0b10000010000000 | 0b11000010000000 | 0b10100010000000 | 0b11100010000000 | 0b10010010000000 | 0b11010010000000 | 0b10110010000000 | 0b11110010000000 | 0b10001010000000 | 0b11001010000000 | 0b10101010000000 | 0b11101010000000 | 0b10011010000000 | 0b11011010000000 | 0b10111010000000 | 0b11111010000000 | 0b10000110000000 | 0b11000110000000 | 0b10100110000000 | 0b11100110000000 | 0b10010110000000 | 0b11010110000000 | 0b10110110000000 | 0b11110110000000 | 0b10001110000000 | 0b11001110000000 | 0b10101110000000 | 0b11101110000000 | 0b10011110000000 | 0b11011110000000 | 0b10111110000000 | 0b11111110000000 | 0b10000001000000 | 0b11000001000000 | 0b10100001000000 | 0b11100001000000 | 0b10010001000000 | 0b11010001000000 | 0b10110001000000 | 0b11110001000000 | 0b10001001000000 | 0b11001001000000 | 0b10101001000000 | 0b11101001000000 | 0b10011001000000 | 0b11011001000000 | 0b10111001000000 | 0b11111001000000 | 0b10000101000000 | 0b11000101000000 | 0b10100101000000 | 0b11100101000000 | 0b10010101000000 | 0b11010101000000 | 0b10110101000000 | 0b11110101000000 | 0b10001101000000 | 0b11001101000000 | 0b10101101000000 | 0b11101101000000 | 0b10011101000000 | 0b11011101000000 | 0b10111101000000 | 0b11111101000000 | 0b10000011000000 | 0b11000011000000 | 0b10100011000000 | 0b11100011000000 | 0b10010011000000 | 0b11010011000000 | 0b10110011000000 | 0b11110011000000 | 0b10001011000000 | 0b11001011000000 | 0b10101011000000 | 0b11101011000000 | 0b10011011000000 | 0b11011011000000 | 0b10111011000000 | 0b11111011000000 | 0b10000111000000 | 0b11000111000000 | 0b10100111000000 | 0b11100111000000 | 0b10010111000000 | 0b11010111000000 | 0b10110111000000 | 0b11110111000000 | 0b10001111000000 | 0b11001111000000 | 0b10101111000000 | 0b11101111000000 | 0b10011111000000 | 0b11011111000000 | 0b10111111000000 | 0b11111111000000 | 0b10000000100000 | 0b11000000100000 | 0b10100000100000 | 0b11100000100000 | 0b10010000100000 | 0b11010000100000 | 0b10110000100000 | 0b11110000100000 | 0b10001000100000 | 0b11001000100000 | 0b10101000100000 | 0b11101000100000 | 0b10011000100000 | 0b11011000100000 | 0b10111000100000 | 0b11111000100000 | 0b10000100100000 | 0b11000100100000 | 0b10100100100000 | 0b11100100100000 | 0b10010100100000 | 0b11010100100000 | 0b10110100100000 | 0b11110100100000 | 0b10001100100000 | 0b11001100100000 | 0b10101100100000 | 0b11101100100000 | 0b10011100100000 | 0b11011100100000 | 0b10111100100000 | 0b11111100100000 | 0b10000010100000 | 0b11000010100000 | 0b10100010100000 | 0b11100010100000 | 0b10010010100000 | 0b11010010100000 | 0b10110010100000 | 0b11110010100000 | 0b10001010100000 | 0b11001010100000 | 0b10101010100000 | 0b11101010100000 | 0b10011010100000 | 0b11011010100000 | 0b10111010100000 | 0b11111010100000 | 0b10000110100000 | 0b11000110100000 | 0b10100110100000 | 0b11100110100000 | 0b10010110100000 | 0b11010110100000 | 0b10110110100000 | 0b11110110100000 | 0b10001110100000 | 0b11001110100000 | 0b10101110100000 | 0b11101110100000 | 0b10011110100000 | 0b11011110100000 | 0b10111110100000 | 0b11111110100000 | 0b10000001100000 | 0b11000001100000 | 0b10100001100000 | 0b11100001100000 | 0b10010001100000 | 0b11010001100000 | 0b10110001100000 | 0b11110001100000 | 0b10001001100000 | 0b11001001100000 | 0b10101001100000 | 0b11101001100000 | 0b10011001100000 | 0b11011001100000 | 0b10111001100000 | 0b11111001100000 | 0b10000101100000 | 0b11000101100000 | 0b10100101100000 | 0b11100101100000 | 0b10010101100000 | 0b11010101100000 | 0b10110101100000 | 0b11110101100000 | 0b10001101100000 | 0b11001101100000 | 0b10101101100000 | 0b11101101100000 | 0b10011101100000 | 0b11011101100000 | 0b10111101100000 | 0b11111101100000 | 0b10000011100000 | 0b11000011100000 | 0b10100011100000 | 0b11100011100000 | 0b10010011100000 | 0b11010011100000 | 0b10110011100000 | 0b11110011100000 | 0b10001011100000 | 0b11001011100000 | 0b10101011100000 | 0b11101011100000 | 0b10011011100000 | 0b11011011100000 | 0b10111011100000 | 0b11111011100000 | 0b10000111100000 | 0b11000111100000 | 0b10100111100000 | 0b11100111100000 | 0b10010111100000 | 0b11010111100000 | 0b10110111100000 | 0b11110111100000 | 0b10001111100000 | 0b11001111100000 | 0b10101111100000 | 0b11101111100000 | 0b10011111100000 | 0b11011111100000 | 0b10111111100000 | 0b11111111100000 | 0b10000000010000 | 0b11000000010000 | 0b10100000010000 | 0b11100000010000 | 0b10010000010000 | 0b11010000010000 | 0b10110000010000 | 0b11110000010000 | 0b10001000010000 | 0b11001000010000 | 0b10101000010000 | 0b11101000010000 | 0b10011000010000 | 0b11011000010000 | 0b10111000010000 | 0b11111000010000 | 0b10000100010000 | 0b11000100010000 | 0b10100100010000 | 0b11100100010000 | 0b10010100010000 | 0b11010100010000 | 0b10110100010000 | 0b11110100010000 | 0b10001100010000 | 0b11001100010000 | 0b10101100010000 | 0b11101100010000 | 0b10011100010000 | 0b11011100010000 | 0b10111100010000 | 0b11111100010000 | 0b10000010010000 | 0b11000010010000 | 0b10100010010000 | 0b11100010010000 | 0b10010010010000 | 0b11010010010000 | 0b10110010010000 | 0b11110010010000 | 0b10001010010000 | 0b11001010010000 | 0b10101010010000 | 0b11101010010000 | 0b10011010010000 | 0b11011010010000 | 0b10111010010000 | 0b11111010010000 | 0b10000110010000 | 0b11000110010000 | 0b10100110010000 | 0b11100110010000 | 0b10010110010000 | 0b11010110010000 | 0b10110110010000 | 0b11110110010000 | 0b10001110010000 | 0b11001110010000 | 0b10101110010000 | 0b11101110010000 | 0b10011110010000 | 0b11011110010000 | 0b10111110010000 | 0b11111110010000 | 0b10000001010000 | 0b11000001010000 | 0b10100001010000 | 0b11100001010000 | 0b10010001010000 | 0b11010001010000 | 0b10110001010000 | 0b11110001010000 | 0b10001001010000 | 0b11001001010000 | 0b10101001010000 | 0b11101001010000 | 0b10011001010000 | 0b11011001010000 | 0b10111001010000 | 0b11111001010000 | 0b10000101010000 | 0b11000101010000 | 0b10100101010000 | 0b11100101010000 | 0b10010101010000 | 0b11010101010000 | 0b10110101010000 | 0b11110101010000 | 0b10001101010000 | 0b11001101010000 | 0b10101101010000 | 0b11101101010000 | 0b10011101010000 | 0b11011101010000 | 0b10111101010000 | 0b11111101010000 | 0b10000011010000 | 0b11000011010000 | 0b10100011010000 | 0b11100011010000 | 0b10010011010000 | 0b11010011010000 | 0b10110011010000 | 0b11110011010000 | 0b10001011010000 | 0b11001011010000 | 0b10101011010000 | 0b11101011010000 | 0b10011011010000 | 0b11011011010000 | 0b10111011010000 | 0b11111011010000 | 0b10000111010000 | 0b11000111010000 | 0b10100111010000 | 0b11100111010000 | 0b10010111010000 | 0b11010111010000 | 0b10110111010000 | 0b11110111010000 | 0b10001111010000 | 0b11001111010000 | 0b10101111010000 | 0b11101111010000 | 0b10011111010000 | 0b11011111010000 | 0b10111111010000 | 0b11111111010000 | 0b10000000110000 | 0b11000000110000 | 0b10100000110000 | 0b11100000110000 | 0b10010000110000 | 0b11010000110000 | 0b10110000110000 | 0b11110000110000 | 0b10001000110000 | 0b11001000110000 | 0b10101000110000 | 0b11101000110000 | 0b10011000110000 | 0b11011000110000 | 0b10111000110000 | 0b11111000110000 | 0b10000100110000 | 0b11000100110000 | 0b10100100110000 | 0b11100100110000 | 0b10010100110000 | 0b11010100110000 | 0b10110100110000 | 0b11110100110000 | 0b10001100110000 | 0b11001100110000 | 0b10101100110000 | 0b11101100110000 | 0b10011100110000 | 0b11011100110000 | 0b10111100110000 | 0b11111100110000 | 0b10000010110000 | 0b11000010110000 | 0b10100010110000 | 0b11100010110000 | 0b10010010110000 | 0b11010010110000 | 0b10110010110000 | 0b11110010110000 | 0b10001010110000 | 0b11001010110000 | 0b10101010110000 | 0b11101010110000 | 0b10011010110000 | 0b11011010110000 | 0b10111010110000 | 0b11111010110000 | 0b10000110110000 | 0b11000110110000 | 0b10100110110000 | 0b11100110110000 | 0b10010110110000 | 0b11010110110000 | 0b10110110110000 | 0b11110110110000 | 0b10001110110000 | 0b11001110110000 | 0b10101110110000 | 0b11101110110000 | 0b10011110110000 | 0b11011110110000 | 0b10111110110000 | 0b11111110110000 | 0b10000001110000 | 0b11000001110000 | 0b10100001110000 | 0b11100001110000 | 0b10010001110000 | 0b11010001110000 | 0b10110001110000 | 0b11110001110000 | 0b10001001110000 | 0b11001001110000 | 0b10101001110000 | 0b11101001110000 | 0b10011001110000 | 0b11011001110000 | 0b10111001110000 | 0b11111001110000 | 0b10000101110000 | 0b11000101110000 | 0b10100101110000 | 0b11100101110000 | 0b10010101110000 | 0b11010101110000 | 0b10110101110000 | 0b11110101110000 | 0b10001101110000 | 0b11001101110000 | 0b10101101110000 | 0b11101101110000 | 0b10011101110000 | 0b11011101110000 | 0b10111101110000 | 0b11111101110000 | 0b10000011110000 | 0b11000011110000 | 0b10100011110000 | 0b11100011110000 | 0b10010011110000 | 0b11010011110000 | 0b10110011110000 | 0b11110011110000 | 0b10001011110000 | 0b11001011110000 | 0b10101011110000 | 0b11101011110000 | 0b10011011110000 | 0b11011011110000 | 0b10111011110000 | 0b11111011110000 | 0b10000111110000 | 0b11000111110000 | 0b10100111110000 | 0b11100111110000 | 0b10010111110000 | 0b11010111110000 | 0b10110111110000 | 0b11110111110000 | 0b10001111110000 | 0b11001111110000 | 0b10101111110000 | 0b11101111110000 | 0b10011111110000 | 0b11011111110000 | 0b10111111110000 | 0b11111111110000 | 0b10000000001000 | 0b11000000001000 | 0b10100000001000 | 0b11100000001000 | 0b10010000001000 | 0b11010000001000 | 0b10110000001000 | 0b11110000001000 | 0b10001000001000 | 0b11001000001000 | 0b10101000001000 | 0b11101000001000 | 0b10011000001000 | 0b11011000001000 | 0b10111000001000 | 0b11111000001000 | 0b10000100001000 | 0b11000100001000 | 0b10100100001000 | 0b11100100001000 | 0b10010100001000 | 0b11010100001000 | 0b10110100001000 | 0b11110100001000 | 0b10001100001000 | 0b11001100001000 | 0b10101100001000 | 0b11101100001000 | 0b10011100001000 | 0b11011100001000 | 0b10111100001000 | 0b11111100001000 | 0b10000010001000 | 0b11000010001000 | 0b10100010001000 | 0b11100010001000 | 0b10010010001000 | 0b11010010001000 | 0b10110010001000 | 0b11110010001000 | 0b10001010001000 | 0b11001010001000 | 0b10101010001000 | 0b11101010001000 | 0b10011010001000 | 0b11011010001000 | 0b10111010001000 | 0b11111010001000 | 0b10000110001000 | 0b11000110001000 | 0b10100110001000 | 0b11100110001000 | 0b10010110001000 | 0b11010110001000 | 0b10110110001000 | 0b11110110001000 | 0b10001110001000 | 0b11001110001000 | 0b10101110001000 | 0b11101110001000 | 0b10011110001000 | 0b11011110001000 | 0b10111110001000 | 0b11111110001000 | 0b10000001001000 | 0b11000001001000 | 0b10100001001000 | 0b11100001001000 | 0b10010001001000 | 0b11010001001000 | 0b10110001001000 | 0b11110001001000 | 0b10001001001000 | 0b11001001001000 | 0b10101001001000 | 0b11101001001000 | 0b10011001001000 | 0b11011001001000 | 0b10111001001000 | 0b11111001001000 | 0b10000101001000 | 0b11000101001000 | 0b10100101001000 | 0b11100101001000 | 0b10010101001000 | 0b11010101001000 | 0b10110101001000 | 0b11110101001000 | 0b10001101001000 | 0b11001101001000 | 0b10101101001000 | 0b11101101001000 | 0b10011101001000 | 0b11011101001000 | 0b10111101001000 | 0b11111101001000 | 0b10000011001000 | 0b11000011001000 | 0b10100011001000 | 0b11100011001000 | 0b10010011001000 | 0b11010011001000 | 0b10110011001000 | 0b11110011001000 | 0b10001011001000 | 0b11001011001000 | 0b10101011001000 | 0b11101011001000 | 0b10011011001000 | 0b11011011001000 | 0b10111011001000 | 0b11111011001000 | 0b10000111001000 | 0b11000111001000 | 0b10100111001000 | 0b11100111001000 | 0b10010111001000 | 0b11010111001000 | 0b10110111001000 | 0b11110111001000 | 0b10001111001000 | 0b11001111001000 | 0b10101111001000 | 0b11101111001000 | 0b10011111001000 | 0b11011111001000 | 0b10111111001000 | 0b11111111001000 | 0b10000000101000 | 0b11000000101000 | 0b10100000101000 | 0b11100000101000 | 0b10010000101000 | 0b11010000101000 | 0b10110000101000 | 0b11110000101000 | 0b10001000101000 | 0b11001000101000 | 0b10101000101000 | 0b11101000101000 | 0b10011000101000 | 0b11011000101000 | 0b10111000101000 | 0b11111000101000 | 0b10000100101000 | 0b11000100101000 | 0b10100100101000 | 0b11100100101000 | 0b10010100101000 | 0b11010100101000 | 0b10110100101000 | 0b11110100101000 | 0b10001100101000 | 0b11001100101000 | 0b10101100101000 | 0b11101100101000 | 0b10011100101000 | 0b11011100101000 | 0b10111100101000 | 0b11111100101000 | 0b10000010101000 | 0b11000010101000 | 0b10100010101000 | 0b11100010101000 | 0b10010010101000 | 0b11010010101000 | 0b10110010101000 | 0b11110010101000 | 0b10001010101000 | 0b11001010101000 | 0b10101010101000 | 0b11101010101000 | 0b10011010101000 | 0b11011010101000 | 0b10111010101000 | 0b11111010101000 | 0b10000110101000 | 0b11000110101000 | 0b10100110101000 | 0b11100110101000 | 0b10010110101000 | 0b11010110101000 | 0b10110110101000 | 0b11110110101000 | 0b10001110101000 | 0b11001110101000 | 0b10101110101000 | 0b11101110101000 | 0b10011110101000 | 0b11011110101000 | 0b10111110101000 | 0b11111110101000 | 0b10000001101000 | 0b11000001101000 | 0b10100001101000 | 0b11100001101000 | 0b10010001101000 | 0b11010001101000 | 0b10110001101000 | 0b11110001101000 | 0b10001001101000 | 0b11001001101000 | 0b10101001101000 | 0b11101001101000 | 0b10011001101000 | 0b11011001101000 | 0b10111001101000 | 0b11111001101000 | 0b10000101101000 | 0b11000101101000 | 0b10100101101000 | 0b11100101101000 | 0b10010101101000 | 0b11010101101000 | 0b10110101101000 | 0b11110101101000 | 0b10001101101000 | 0b11001101101000 | 0b10101101101000 | 0b11101101101000 | 0b10011101101000 | 0b11011101101000 | 0b10111101101000 | 0b11111101101000 | 0b10000011101000 | 0b11000011101000 | 0b10100011101000 | 0b11100011101000 | 0b10010011101000 | 0b11010011101000 | 0b10110011101000 | 0b11110011101000 | 0b10001011101000 | 0b11001011101000 | 0b10101011101000 | 0b11101011101000 | 0b10011011101000 | 0b11011011101000 | 0b10111011101000 | 0b11111011101000 | 0b10000111101000 | 0b11000111101000 | 0b10100111101000 | 0b11100111101000 | 0b10010111101000 | 0b11010111101000 | 0b10110111101000 | 0b11110111101000 | 0b10001111101000 | 0b11001111101000 | 0b10101111101000 | 0b11101111101000 | 0b10011111101000 | 0b11011111101000 | 0b10111111101000 | 0b11111111101000 | 0b10000000011000 | 0b11000000011000 | 0b10100000011000 | 0b11100000011000 | 0b10010000011000 | 0b11010000011000 | 0b10110000011000 | 0b11110000011000 | 0b10001000011000 | 0b11001000011000 | 0b10101000011000 | 0b11101000011000 | 0b10011000011000 | 0b11011000011000 | 0b10111000011000 | 0b11111000011000 | 0b10000100011000 | 0b11000100011000 | 0b10100100011000 | 0b11100100011000 | 0b10010100011000 | 0b11010100011000 | 0b10110100011000 | 0b11110100011000 | 0b10001100011000 | 0b11001100011000 | 0b10101100011000 | 0b11101100011000 | 0b10011100011000 | 0b11011100011000 | 0b10111100011000 | 0b11111100011000 | 0b10000010011000 | 0b11000010011000 | 0b10100010011000 | 0b11100010011000 | 0b10010010011000 | 0b11010010011000 | 0b10110010011000 | 0b11110010011000 | 0b10001010011000 | 0b11001010011000 | 0b10101010011000 | 0b11101010011000 | 0b10011010011000 | 0b11011010011000 | 0b10111010011000 | 0b11111010011000 | 0b10000110011000 | 0b11000110011000 | 0b10100110011000 | 0b11100110011000 | 0b10010110011000 | 0b11010110011000 | 0b10110110011000 | 0b11110110011000 | 0b10001110011000 | 0b11001110011000 | 0b10101110011000 | 0b11101110011000 | 0b10011110011000 | 0b11011110011000 | 0b10111110011000 | 0b11111110011000 | 0b10000001011000 | 0b11000001011000 | 0b10100001011000 | 0b11100001011000 | 0b10010001011000 | 0b11010001011000 | 0b10110001011000 | 0b11110001011000 | 0b10001001011000 | 0b11001001011000 | 0b10101001011000 | 0b11101001011000 | 0b10011001011000 | 0b11011001011000 | 0b10111001011000 | 0b11111001011000 | 0b10000101011000 | 0b11000101011000 | 0b10100101011000 | 0b11100101011000 | 0b10010101011000 | 0b11010101011000 | 0b10110101011000 | 0b11110101011000 | 0b10001101011000 | 0b11001101011000 | 0b10101101011000 | 0b11101101011000 | 0b10011101011000 | 0b11011101011000 | 0b10111101011000 | 0b11111101011000 | 0b10000011011000 | 0b11000011011000 | 0b10100011011000 | 0b11100011011000 | 0b10010011011000 | 0b11010011011000 | 0b10110011011000 | 0b11110011011000 | 0b10001011011000 | 0b11001011011000 | 0b10101011011000 | 0b11101011011000 | 0b10011011011000 | 0b11011011011000 | 0b10111011011000 | 0b11111011011000 | 0b10000111011000 | 0b11000111011000 | 0b10100111011000 | 0b11100111011000 | 0b10010111011000 | 0b11010111011000 | 0b10110111011000 | 0b11110111011000 | 0b10001111011000 | 0b11001111011000 | 0b10101111011000 | 0b11101111011000 | 0b10011111011000 | 0b11011111011000 | 0b10111111011000 | 0b11111111011000 | 0b10000000111000 | 0b11000000111000 | 0b10100000111000 | 0b11100000111000 | 0b10010000111000 | 0b11010000111000 | 0b10110000111000 | 0b11110000111000 | 0b10001000111000 | 0b11001000111000 | 0b10101000111000 | 0b11101000111000 | 0b10011000111000 | 0b11011000111000 | 0b10111000111000 | 0b11111000111000 | 0b10000100111000 | 0b11000100111000 | 0b10100100111000 | 0b11100100111000 | 0b10010100111000 | 0b11010100111000 | 0b10110100111000 | 0b11110100111000 | 0b10001100111000 | 0b11001100111000 | 0b10101100111000 | 0b11101100111000 | 0b10011100111000 | 0b11011100111000 | 0b10111100111000 | 0b11111100111000 | 0b10000010111000 | 0b11000010111000 | 0b10100010111000 | 0b11100010111000 | 0b10010010111000 | 0b11010010111000 | 0b10110010111000 | 0b11110010111000 | 0b10001010111000 | 0b11001010111000 | 0b10101010111000 | 0b11101010111000 | 0b10011010111000 | 0b11011010111000 | 0b10111010111000 | 0b11111010111000 | 0b10000110111000 | 0b11000110111000 | 0b10100110111000 | 0b11100110111000 | 0b10010110111000 | 0b11010110111000 | 0b10110110111000 | 0b11110110111000 | 0b10001110111000 | 0b11001110111000 | 0b10101110111000 | 0b11101110111000 | 0b10011110111000 | 0b11011110111000 | 0b10111110111000 | 0b11111110111000 | 0b10000001111000 | 0b11000001111000 | 0b10100001111000 | 0b11100001111000 | 0b10010001111000 | 0b11010001111000 | 0b10110001111000 | 0b11110001111000 | 0b10001001111000 | 0b11001001111000 | 0b10101001111000 | 0b11101001111000 | 0b10011001111000 | 0b11011001111000 | 0b10111001111000 | 0b11111001111000 | 0b10000101111000 | 0b11000101111000 | 0b10100101111000 | 0b11100101111000 | 0b10010101111000 | 0b11010101111000 | 0b10110101111000 | 0b11110101111000 | 0b10001101111000 | 0b11001101111000 | 0b10101101111000 | 0b11101101111000 | 0b10011101111000 | 0b11011101111000 | 0b10111101111000 | 0b11111101111000 | 0b10000011111000 | 0b11000011111000 | 0b10100011111000 | 0b11100011111000 | 0b10010011111000 | 0b11010011111000 | 0b10110011111000 | 0b11110011111000 | 0b10001011111000 | 0b11001011111000 | 0b10101011111000 | 0b11101011111000 | 0b10011011111000 | 0b11011011111000 | 0b10111011111000 | 0b11111011111000 | 0b10000111111000 | 0b11000111111000 | 0b10100111111000 | 0b11100111111000 | 0b10010111111000 | 0b11010111111000 | 0b10110111111000 | 0b11110111111000 | 0b10001111111000 | 0b11001111111000 | 0b10101111111000 | 0b11101111111000 | 0b10011111111000 | 0b11011111111000 | 0b10111111111000 | 0b11111111111000 | 0b10000000000100 | 0b11000000000100 | 0b10100000000100 | 0b11100000000100 | 0b10010000000100 | 0b11010000000100 | 0b10110000000100 | 0b11110000000100 | 0b10001000000100 | 0b11001000000100 | 0b10101000000100 | 0b11101000000100 | 0b10011000000100 | 0b11011000000100 | 0b10111000000100 | 0b11111000000100 | 0b10000100000100 | 0b11000100000100 | 0b10100100000100 | 0b11100100000100 | 0b10010100000100 | 0b11010100000100 | 0b10110100000100 | 0b11110100000100 | 0b10001100000100 | 0b11001100000100 | 0b10101100000100 | 0b11101100000100 | 0b10011100000100 | 0b11011100000100 | 0b10111100000100 | 0b11111100000100 | 0b10000010000100 | 0b11000010000100 | 0b10100010000100 | 0b11100010000100 | 0b10010010000100 | 0b11010010000100 | 0b10110010000100 | 0b11110010000100 | 0b10001010000100 | 0b11001010000100 | 0b10101010000100 | 0b11101010000100 | 0b10011010000100 | 0b11011010000100 | 0b10111010000100 | 0b11111010000100 | 0b10000110000100 | 0b11000110000100 | 0b10100110000100 | 0b11100110000100 | 0b10010110000100 | 0b11010110000100 | 0b10110110000100 | 0b11110110000100 | 0b10001110000100 | 0b11001110000100 | 0b10101110000100 | 0b11101110000100 | 0b10011110000100 | 0b11011110000100 | 0b10111110000100 | 0b11111110000100 | 0b10000001000100 | 0b11000001000100 | 0b10100001000100 | 0b11100001000100 | 0b10010001000100 | 0b11010001000100 | 0b10110001000100 | 0b11110001000100 | 0b10001001000100 | 0b11001001000100 | 0b10101001000100 | 0b11101001000100 | 0b10011001000100 | 0b11011001000100 | 0b10111001000100 | 0b11111001000100 | 0b10000101000100 | 0b11000101000100 | 0b10100101000100 | 0b11100101000100 | 0b10010101000100 | 0b11010101000100 | 0b10110101000100 | 0b11110101000100 | 0b10001101000100 | 0b11001101000100 | 0b10101101000100 | 0b11101101000100 | 0b10011101000100 | 0b11011101000100 | 0b10111101000100 | 0b11111101000100 | 0b10000011000100 | 0b11000011000100 | 0b10100011000100 | 0b11100011000100 | 0b10010011000100 | 0b11010011000100 | 0b10110011000100 | 0b11110011000100 | 0b10001011000100 | 0b11001011000100 | 0b10101011000100 | 0b11101011000100 | 0b10011011000100 | 0b11011011000100 | 0b10111011000100 | 0b11111011000100 | 0b10000111000100 | 0b11000111000100 | 0b10100111000100 | 0b11100111000100 | 0b10010111000100 | 0b11010111000100 | 0b10110111000100 | 0b11110111000100 | 0b10001111000100 | 0b11001111000100 | 0b10101111000100 | 0b11101111000100 | 0b10011111000100 | 0b11011111000100 | 0b10111111000100 | 0b11111111000100 | 0b10000000100100 | 0b11000000100100 | 0b10100000100100 | 0b11100000100100 | 0b10010000100100 | 0b11010000100100 | 0b10110000100100 | 0b11110000100100 | 0b10001000100100 | 0b11001000100100 | 0b10101000100100 | 0b11101000100100 | 0b10011000100100 | 0b11011000100100 | 0b10111000100100 | 0b11111000100100 | 0b10000100100100 | 0b11000100100100 | 0b10100100100100 | 0b11100100100100 | 0b10010100100100 | 0b11010100100100 | 0b10110100100100 | 0b11110100100100 | 0b10001100100100 | 0b11001100100100 | 0b10101100100100 | 0b11101100100100 | 0b10011100100100 | 0b11011100100100 | 0b10111100100100 | 0b11111100100100 | 0b10000010100100 | 0b11000010100100 | 0b10100010100100 | 0b11100010100100 | 0b10010010100100 | 0b11010010100100 | 0b10110010100100 | 0b11110010100100 | 0b10001010100100 | 0b11001010100100 | 0b10101010100100 | 0b11101010100100 | 0b10011010100100 | 0b11011010100100 | 0b10111010100100 | 0b11111010100100 | 0b10000110100100 | 0b11000110100100 | 0b10100110100100 | 0b11100110100100 | 0b10010110100100 | 0b11010110100100 | 0b10110110100100 | 0b11110110100100 | 0b10001110100100 | 0b11001110100100 | 0b10101110100100 | 0b11101110100100 | 0b10011110100100 | 0b11011110100100 | 0b10111110100100 | 0b11111110100100 | 0b10000001100100 | 0b11000001100100 | 0b10100001100100 | 0b11100001100100 | 0b10010001100100 | 0b11010001100100 | 0b10110001100100 | 0b11110001100100 | 0b10001001100100 | 0b11001001100100 | 0b10101001100100 | 0b11101001100100 | 0b10011001100100 | 0b11011001100100 | 0b10111001100100 | 0b11111001100100 | 0b10000101100100 | 0b11000101100100 | 0b10100101100100 | 0b11100101100100 | 0b10010101100100 | 0b11010101100100 | 0b10110101100100 | 0b11110101100100 | 0b10001101100100 | 0b11001101100100 | 0b10101101100100 | 0b11101101100100 | 0b10011101100100 | 0b11011101100100 | 0b10111101100100 | 0b11111101100100 | 0b10000011100100 | 0b11000011100100 | 0b10100011100100 | 0b11100011100100 | 0b10010011100100 | 0b11010011100100 | 0b10110011100100 | 0b11110011100100 | 0b10001011100100 | 0b11001011100100 | 0b10101011100100 | 0b11101011100100 | 0b10011011100100 | 0b11011011100100 | 0b10111011100100 | 0b11111011100100 | 0b10000111100100 | 0b11000111100100 | 0b10100111100100 | 0b11100111100100 | 0b10010111100100 | 0b11010111100100 | 0b10110111100100 | 0b11110111100100 | 0b10001111100100 | 0b11001111100100 | 0b10101111100100 | 0b11101111100100 | 0b10011111100100 | 0b11011111100100 | 0b10111111100100 | 0b11111111100100 | 0b10000000010100 | 0b11000000010100 | 0b10100000010100 | 0b11100000010100 | 0b10010000010100 | 0b11010000010100 | 0b10110000010100 | 0b11110000010100 | 0b10001000010100 | 0b11001000010100 | 0b10101000010100 | 0b11101000010100 | 0b10011000010100 | 0b11011000010100 | 0b10111000010100 | 0b11111000010100 | 0b10000100010100 | 0b11000100010100 | 0b10100100010100 | 0b11100100010100 | 0b10010100010100 | 0b11010100010100 | 0b10110100010100 | 0b11110100010100 | 0b10001100010100 | 0b11001100010100 | 0b10101100010100 | 0b11101100010100 | 0b10011100010100 | 0b11011100010100 | 0b10111100010100 | 0b11111100010100 | 0b10000010010100 | 0b11000010010100 | 0b10100010010100 | 0b11100010010100 | 0b10010010010100 | 0b11010010010100 | 0b10110010010100 | 0b11110010010100 | 0b10001010010100 | 0b11001010010100 | 0b10101010010100 | 0b11101010010100 | 0b10011010010100 | 0b11011010010100 | 0b10111010010100 | 0b11111010010100 | 0b10000110010100 | 0b11000110010100 | 0b10100110010100 | 0b11100110010100 | 0b10010110010100 | 0b11010110010100 | 0b10110110010100 | 0b11110110010100 | 0b10001110010100 | 0b11001110010100 | 0b10101110010100 | 0b11101110010100 | 0b10011110010100 | 0b11011110010100 | 0b10111110010100 | 0b11111110010100 | 0b10000001010100 | 0b11000001010100 | 0b10100001010100 | 0b11100001010100 | 0b10010001010100 | 0b11010001010100 | 0b10110001010100 | 0b11110001010100 | 0b10001001010100 | 0b11001001010100 | 0b10101001010100 | 0b11101001010100 | 0b10011001010100 | 0b11011001010100 | 0b10111001010100 | 0b11111001010100 | 0b10000101010100 | 0b11000101010100 | 0b10100101010100 | 0b11100101010100 | 0b10010101010100 | 0b11010101010100 | 0b10110101010100 | 0b11110101010100 | 0b10001101010100 | 0b11001101010100 | 0b10101101010100 | 0b11101101010100 | 0b10011101010100 | 0b11011101010100 | 0b10111101010100 | 0b11111101010100 | 0b10000011010100 | 0b11000011010100 | 0b10100011010100 | 0b11100011010100 | 0b10010011010100 | 0b11010011010100 | 0b10110011010100 | 0b11110011010100 | 0b10001011010100 | 0b11001011010100 | 0b10101011010100 | 0b11101011010100 | 0b10011011010100 | 0b11011011010100 | 0b10111011010100 | 0b11111011010100 | 0b10000111010100 | 0b11000111010100 | 0b10100111010100 | 0b11100111010100 | 0b10010111010100 | 0b11010111010100 | 0b10110111010100 | 0b11110111010100 | 0b10001111010100 | 0b11001111010100 | 0b10101111010100 | 0b11101111010100 | 0b10011111010100 | 0b11011111010100 | 0b10111111010100 | 0b11111111010100 | 0b10000000110100 | 0b11000000110100 | 0b10100000110100 | 0b11100000110100 | 0b10010000110100 | 0b11010000110100 | 0b10110000110100 | 0b11110000110100 | 0b10001000110100 | 0b11001000110100 | 0b10101000110100 | 0b11101000110100 | 0b10011000110100 | 0b11011000110100 | 0b10111000110100 | 0b11111000110100 | 0b10000100110100 | 0b11000100110100 | 0b10100100110100 | 0b11100100110100 | 0b10010100110100 | 0b11010100110100 | 0b10110100110100 | 0b11110100110100 | 0b10001100110100 | 0b11001100110100 | 0b10101100110100 | 0b11101100110100 | 0b10011100110100 | 0b11011100110100 | 0b10111100110100 | 0b11111100110100 | 0b10000010110100 | 0b11000010110100 | 0b10100010110100 | 0b11100010110100 | 0b10010010110100 | 0b11010010110100 | 0b10110010110100 | 0b11110010110100 | 0b10001010110100 | 0b11001010110100 | 0b10101010110100 | 0b11101010110100 | 0b10011010110100 | 0b11011010110100 | 0b10111010110100 | 0b11111010110100 | 0b10000110110100 | 0b11000110110100 | 0b10100110110100 | 0b11100110110100 | 0b10010110110100 | 0b11010110110100 | 0b10110110110100 | 0b11110110110100 | 0b10001110110100 | 0b11001110110100 | 0b10101110110100 | 0b11101110110100 | 0b10011110110100 | 0b11011110110100 | 0b10111110110100 | 0b11111110110100 | 0b10000001110100 | 0b11000001110100 | 0b10100001110100 | 0b11100001110100 | 0b10010001110100 | 0b11010001110100 | 0b10110001110100 | 0b11110001110100 | 0b10001001110100 | 0b11001001110100 | 0b10101001110100 | 0b11101001110100 | 0b10011001110100 | 0b11011001110100 | 0b10111001110100 | 0b11111001110100 | 0b10000101110100 | 0b11000101110100 | 0b10100101110100 | 0b11100101110100 | 0b10010101110100 | 0b11010101110100 | 0b10110101110100 | 0b11110101110100 | 0b10001101110100 | 0b11001101110100 | 0b10101101110100 | 0b11101101110100 | 0b10011101110100 | 0b11011101110100 | 0b10111101110100 | 0b11111101110100 | 0b10000011110100 | 0b11000011110100 | 0b10100011110100 | 0b11100011110100 | 0b10010011110100 | 0b11010011110100 | 0b10110011110100 | 0b11110011110100 | 0b10001011110100 | 0b11001011110100 | 0b10101011110100 | 0b11101011110100 | 0b10011011110100 | 0b11011011110100 | 0b10111011110100 | 0b11111011110100 | 0b10000111110100 | 0b11000111110100 | 0b10100111110100 | 0b11100111110100 | 0b10010111110100 | 0b11010111110100 | 0b10110111110100 | 0b11110111110100 | 0b10001111110100 | 0b11001111110100 | 0b10101111110100 | 0b11101111110100 | 0b10011111110100 | 0b11011111110100 | 0b10111111110100 | 0b11111111110100 | 0b10000000001100 | 0b11000000001100 | 0b10100000001100 | 0b11100000001100 | 0b10010000001100 | 0b11010000001100 | 0b10110000001100 | 0b11110000001100 | 0b10001000001100 | 0b11001000001100 | 0b10101000001100 | 0b11101000001100 | 0b10011000001100 | 0b11011000001100 | 0b10111000001100 | 0b11111000001100 | 0b10000100001100 | 0b11000100001100 | 0b10100100001100 | 0b11100100001100 | 0b10010100001100 | 0b11010100001100 | 0b10110100001100 | 0b11110100001100 | 0b10001100001100 | 0b11001100001100 | 0b10101100001100 | 0b11101100001100 | 0b10011100001100 | 0b11011100001100 | 0b10111100001100 | 0b11111100001100 | 0b10000010001100 | 0b11000010001100 | 0b10100010001100 | 0b11100010001100 | 0b10010010001100 | 0b11010010001100 | 0b10110010001100 | 0b11110010001100 | 0b10001010001100 | 0b11001010001100 | 0b10101010001100 | 0b11101010001100 | 0b10011010001100 | 0b11011010001100 | 0b10111010001100 | 0b11111010001100 | 0b10000110001100 | 0b11000110001100 | 0b10100110001100 | 0b11100110001100 | 0b10010110001100 | 0b11010110001100 | 0b10110110001100 | 0b11110110001100 | 0b10001110001100 | 0b11001110001100 | 0b10101110001100 | 0b11101110001100 | 0b10011110001100 | 0b11011110001100 | 0b10111110001100 | 0b11111110001100 | 0b10000001001100 | 0b11000001001100 | 0b10100001001100 | 0b11100001001100 | 0b10010001001100 | 0b11010001001100 | 0b10110001001100 | 0b11110001001100 | 0b10001001001100 | 0b11001001001100 | 0b10101001001100 | 0b11101001001100 | 0b10011001001100 | 0b11011001001100 | 0b10111001001100 | 0b11111001001100 | 0b10000101001100 | 0b11000101001100 | 0b10100101001100 | 0b11100101001100 | 0b10010101001100 | 0b11010101001100 | 0b10110101001100 | 0b11110101001100 | 0b10001101001100 | 0b11001101001100 | 0b10101101001100 | 0b11101101001100 | 0b10011101001100 | 0b11011101001100 | 0b10111101001100 | 0b11111101001100 | 0b10000011001100 | 0b11000011001100 | 0b10100011001100 | 0b11100011001100 | 0b10010011001100 | 0b11010011001100 | 0b10110011001100 | 0b11110011001100 | 0b10001011001100 | 0b11001011001100 | 0b10101011001100 | 0b11101011001100 | 0b10011011001100 | 0b11011011001100 | 0b10111011001100 | 0b11111011001100 | 0b10000111001100 | 0b11000111001100 | 0b10100111001100 | 0b11100111001100 | 0b10010111001100 | 0b11010111001100 | 0b10110111001100 | 0b11110111001100 | 0b10001111001100 | 0b11001111001100 | 0b10101111001100 | 0b11101111001100 | 0b10011111001100 | 0b11011111001100 | 0b10111111001100 | 0b11111111001100 | 0b10000000101100 | 0b11000000101100 | 0b10100000101100 | 0b11100000101100 | 0b10010000101100 | 0b11010000101100 | 0b10110000101100 | 0b11110000101100 | 0b10001000101100 | 0b11001000101100 | 0b10101000101100 | 0b11101000101100 | 0b10011000101100 | 0b11011000101100 | 0b10111000101100 | 0b11111000101100 | 0b10000100101100 | 0b11000100101100 | 0b10100100101100 | 0b11100100101100 | 0b10010100101100 | 0b11010100101100 | 0b10110100101100 | 0b11110100101100 | 0b10001100101100 | 0b11001100101100 | 0b10101100101100 | 0b11101100101100 | 0b10011100101100 | 0b11011100101100 | 0b10111100101100 | 0b11111100101100 | 0b10000010101100 | 0b11000010101100 | 0b10100010101100 | 0b11100010101100 | 0b10010010101100 | 0b11010010101100 | 0b10110010101100 | 0b11110010101100 | 0b10001010101100 | 0b11001010101100 | 0b10101010101100 | 0b11101010101100 | 0b10011010101100 | 0b11011010101100 | 0b10111010101100 | 0b11111010101100 | 0b10000110101100 | 0b11000110101100 | 0b10100110101100 | 0b11100110101100 | 0b10010110101100 | 0b11010110101100 | 0b10110110101100 | 0b11110110101100 | 0b10001110101100 | 0b11001110101100 | 0b10101110101100 | 0b11101110101100 | 0b10011110101100 | 0b11011110101100 | 0b10111110101100 | 0b11111110101100 | 0b10000001101100 | 0b11000001101100 | 0b10100001101100 | 0b11100001101100 | 0b10010001101100 | 0b11010001101100 | 0b10110001101100 | 0b11110001101100 | 0b10001001101100 | 0b11001001101100 | 0b10101001101100 | 0b11101001101100 | 0b10011001101100 | 0b11011001101100 | 0b10111001101100 | 0b11111001101100 | 0b10000101101100 | 0b11000101101100 | 0b10100101101100 | 0b11100101101100 | 0b10010101101100 | 0b11010101101100 | 0b10110101101100 | 0b11110101101100 | 0b10001101101100 | 0b11001101101100 | 0b10101101101100 | 0b11101101101100 | 0b10011101101100 | 0b11011101101100 | 0b10111101101100 | 0b11111101101100 | 0b10000011101100 | 0b11000011101100 | 0b10100011101100 | 0b11100011101100 | 0b10010011101100 | 0b11010011101100 | 0b10110011101100 | 0b11110011101100 | 0b10001011101100 | 0b11001011101100 | 0b10101011101100 | 0b11101011101100 | 0b10011011101100 | 0b11011011101100 | 0b10111011101100 | 0b11111011101100 | 0b10000111101100 | 0b11000111101100 | 0b10100111101100 | 0b11100111101100 | 0b10010111101100 | 0b11010111101100 | 0b10110111101100 | 0b11110111101100 | 0b10001111101100 | 0b11001111101100 | 0b10101111101100 | 0b11101111101100 | 0b10011111101100 | 0b11011111101100 | 0b10111111101100 | 0b11111111101100 | 0b10000000011100 | 0b11000000011100 | 0b10100000011100 | 0b11100000011100 | 0b10010000011100 | 0b11010000011100 | 0b10110000011100 | 0b11110000011100 | 0b10001000011100 | 0b11001000011100 | 0b10101000011100 | 0b11101000011100 | 0b10011000011100 | 0b11011000011100 | 0b10111000011100 | 0b11111000011100 | 0b10000100011100 | 0b11000100011100 | 0b10100100011100 | 0b11100100011100 | 0b10010100011100 | 0b11010100011100 | 0b10110100011100 | 0b11110100011100 | 0b10001100011100 | 0b11001100011100 | 0b10101100011100 | 0b11101100011100 | 0b10011100011100 | 0b11011100011100 | 0b10111100011100 | 0b11111100011100 | 0b10000010011100 | 0b11000010011100 | 0b10100010011100 | 0b11100010011100 | 0b10010010011100 | 0b11010010011100 | 0b10110010011100 | 0b11110010011100 | 0b10001010011100 | 0b11001010011100 | 0b10101010011100 | 0b11101010011100 | 0b10011010011100 | 0b11011010011100 | 0b10111010011100 | 0b11111010011100 | 0b10000110011100 | 0b11000110011100 | 0b10100110011100 | 0b11100110011100 | 0b10010110011100 | 0b11010110011100 | 0b10110110011100 | 0b11110110011100 | 0b10001110011100 | 0b11001110011100 | 0b10101110011100 | 0b11101110011100 | 0b10011110011100 | 0b11011110011100 | 0b10111110011100 | 0b11111110011100 | 0b10000001011100 | 0b11000001011100 | 0b10100001011100 | 0b11100001011100 | 0b10010001011100 | 0b11010001011100 | 0b10110001011100 | 0b11110001011100 | 0b10001001011100 | 0b11001001011100 | 0b10101001011100 | 0b11101001011100 | 0b10011001011100 | 0b11011001011100 | 0b10111001011100 | 0b11111001011100 | 0b10000101011100 | 0b11000101011100 | 0b10100101011100 | 0b11100101011100 | 0b10010101011100 | 0b11010101011100 | 0b10110101011100 | 0b11110101011100 | 0b10001101011100 | 0b11001101011100 | 0b10101101011100 | 0b11101101011100 | 0b10011101011100 | 0b11011101011100 | 0b10111101011100 | 0b11111101011100 | 0b10000011011100 | 0b11000011011100 | 0b10100011011100 | 0b11100011011100 | 0b10010011011100 | 0b11010011011100 | 0b10110011011100 | 0b11110011011100 | 0b10001011011100 | 0b11001011011100 | 0b10101011011100 | 0b11101011011100 | 0b10011011011100 | 0b11011011011100 | 0b10111011011100 | 0b11111011011100 | 0b10000111011100 | 0b11000111011100 | 0b10100111011100 | 0b11100111011100 | 0b10010111011100 | 0b11010111011100 | 0b10110111011100 | 0b11110111011100 | 0b10001111011100 | 0b11001111011100 | 0b10101111011100 | 0b11101111011100 | 0b10011111011100 | 0b11011111011100 | 0b10111111011100 | 0b11111111011100 | 0b10000000111100 | 0b11000000111100 | 0b10100000111100 | 0b11100000111100 | 0b10010000111100 | 0b11010000111100 | 0b10110000111100 | 0b11110000111100 | 0b10001000111100 | 0b11001000111100 | 0b10101000111100 | 0b11101000111100 | 0b10011000111100 | 0b11011000111100 | 0b10111000111100 | 0b11111000111100 | 0b10000100111100 | 0b11000100111100 | 0b10100100111100 | 0b11100100111100 | 0b10010100111100 | 0b11010100111100 | 0b10110100111100 | 0b11110100111100 | 0b10001100111100 | 0b11001100111100 | 0b10101100111100 | 0b11101100111100 | 0b10011100111100 | 0b11011100111100 | 0b10111100111100 | 0b11111100111100 | 0b10000010111100 | 0b11000010111100 | 0b10100010111100 | 0b11100010111100 | 0b10010010111100 | 0b11010010111100 | 0b10110010111100 | 0b11110010111100 | 0b10001010111100 | 0b11001010111100 | 0b10101010111100 | 0b11101010111100 | 0b10011010111100 | 0b11011010111100 | 0b10111010111100 | 0b11111010111100 | 0b10000110111100 | 0b11000110111100 | 0b10100110111100 | 0b11100110111100 | 0b10010110111100 | 0b11010110111100 | 0b10110110111100 | 0b11110110111100 | 0b10001110111100 | 0b11001110111100 | 0b10101110111100 | 0b11101110111100 | 0b10011110111100 | 0b11011110111100 | 0b10111110111100 | 0b11111110111100 | 0b10000001111100 | 0b11000001111100 | 0b10100001111100 | 0b11100001111100 | 0b10010001111100 | 0b11010001111100 | 0b10110001111100 | 0b11110001111100 | 0b10001001111100 | 0b11001001111100 | 0b10101001111100 | 0b11101001111100 | 0b10011001111100 | 0b11011001111100 | 0b10111001111100 | 0b11111001111100 | 0b10000101111100 | 0b11000101111100 | 0b10100101111100 | 0b11100101111100 | 0b10010101111100 | 0b11010101111100 | 0b10110101111100 | 0b11110101111100 | 0b10001101111100 | 0b11001101111100 | 0b10101101111100 | 0b11101101111100 | 0b10011101111100 | 0b11011101111100 | 0b10111101111100 | 0b11111101111100 | 0b10000011111100 | 0b11000011111100 | 0b10100011111100 | 0b11100011111100 | 0b10010011111100 | 0b11010011111100 | 0b10110011111100 | 0b11110011111100 | 0b10001011111100 | 0b11001011111100 | 0b10101011111100 | 0b11101011111100 | 0b10011011111100 | 0b11011011111100 | 0b10111011111100 | 0b11111011111100 | 0b10000111111100 | 0b11000111111100 | 0b10100111111100 | 0b11100111111100 | 0b10010111111100 | 0b11010111111100 | 0b10110111111100 | 0b11110111111100 | 0b10001111111100 | 0b11001111111100 | 0b10101111111100 | 0b11101111111100 | 0b10011111111100 | 0b11011111111100 | 0b10111111111100 | 0b11111111111100 | 0b10000000000010 | 0b11000000000010 | 0b10100000000010 | 0b11100000000010 | 0b10010000000010 | 0b11010000000010 | 0b10110000000010 | 0b11110000000010 | 0b10001000000010 | 0b11001000000010 | 0b10101000000010 | 0b11101000000010 | 0b10011000000010 | 0b11011000000010 | 0b10111000000010 | 0b11111000000010 | 0b10000100000010 | 0b11000100000010 | 0b10100100000010 | 0b11100100000010 | 0b10010100000010 | 0b11010100000010 | 0b10110100000010 | 0b11110100000010 | 0b10001100000010 | 0b11001100000010 | 0b10101100000010 | 0b11101100000010 | 0b10011100000010 | 0b11011100000010 | 0b10111100000010 | 0b11111100000010 | 0b10000010000010 | 0b11000010000010 | 0b10100010000010 | 0b11100010000010 | 0b10010010000010 | 0b11010010000010 | 0b10110010000010 | 0b11110010000010 | 0b10001010000010 | 0b11001010000010 | 0b10101010000010 | 0b11101010000010 | 0b10011010000010 | 0b11011010000010 | 0b10111010000010 | 0b11111010000010 | 0b10000110000010 | 0b11000110000010 | 0b10100110000010 | 0b11100110000010 | 0b10010110000010 | 0b11010110000010 | 0b10110110000010 | 0b11110110000010 | 0b10001110000010 | 0b11001110000010 | 0b10101110000010 | 0b11101110000010 | 0b10011110000010 | 0b11011110000010 | 0b10111110000010 | 0b11111110000010 | 0b10000001000010 | 0b11000001000010 | 0b10100001000010 | 0b11100001000010 | 0b10010001000010 | 0b11010001000010 | 0b10110001000010 | 0b11110001000010 | 0b10001001000010 | 0b11001001000010 | 0b10101001000010 | 0b11101001000010 | 0b10011001000010 | 0b11011001000010 | 0b10111001000010 | 0b11111001000010 | 0b10000101000010 | 0b11000101000010 | 0b10100101000010 | 0b11100101000010 | 0b10010101000010 | 0b11010101000010 | 0b10110101000010 | 0b11110101000010 | 0b10001101000010 | 0b11001101000010 | 0b10101101000010 | 0b11101101000010 | 0b10011101000010 | 0b11011101000010 | 0b10111101000010 | 0b11111101000010 | 0b10000011000010 | 0b11000011000010 | 0b10100011000010 | 0b11100011000010 | 0b10010011000010 | 0b11010011000010 | 0b10110011000010 | 0b11110011000010 | 0b10001011000010 | 0b11001011000010 | 0b10101011000010 | 0b11101011000010 | 0b10011011000010 | 0b11011011000010 | 0b10111011000010 | 0b11111011000010 | 0b10000111000010 | 0b11000111000010 | 0b10100111000010 | 0b11100111000010 | 0b10010111000010 | 0b11010111000010 | 0b10110111000010 | 0b11110111000010 | 0b10001111000010 | 0b11001111000010 | 0b10101111000010 | 0b11101111000010 | 0b10011111000010 | 0b11011111000010 | 0b10111111000010 | 0b11111111000010 | 0b10000000100010 | 0b11000000100010 | 0b10100000100010 | 0b11100000100010 | 0b10010000100010 | 0b11010000100010 | 0b10110000100010 | 0b11110000100010 | 0b10001000100010 | 0b11001000100010 | 0b10101000100010 | 0b11101000100010 | 0b10011000100010 | 0b11011000100010 | 0b10111000100010 | 0b11111000100010 | 0b10000100100010 | 0b11000100100010 | 0b10100100100010 | 0b11100100100010 | 0b10010100100010 | 0b11010100100010 | 0b10110100100010 | 0b11110100100010 | 0b10001100100010 | 0b11001100100010 | 0b10101100100010 | 0b11101100100010 | 0b10011100100010 | 0b11011100100010 | 0b10111100100010 | 0b11111100100010 | 0b10000010100010 | 0b11000010100010 | 0b10100010100010 | 0b11100010100010 | 0b10010010100010 | 0b11010010100010 | 0b10110010100010 | 0b11110010100010 | 0b10001010100010 | 0b11001010100010 | 0b10101010100010 | 0b11101010100010 | 0b10011010100010 | 0b11011010100010 | 0b10111010100010 | 0b11111010100010 | 0b10000110100010 | 0b11000110100010 | 0b10100110100010 | 0b11100110100010 | 0b10010110100010 | 0b11010110100010 | 0b10110110100010 | 0b11110110100010 | 0b10001110100010 | 0b11001110100010 | 0b10101110100010 | 0b11101110100010 | 0b10011110100010 | 0b11011110100010 | 0b10111110100010 | 0b11111110100010 | 0b10000001100010 | 0b11000001100010 | 0b10100001100010 | 0b11100001100010 | 0b10010001100010 | 0b11010001100010 | 0b10110001100010 | 0b11110001100010 | 0b10001001100010 | 0b11001001100010 | 0b10101001100010 | 0b11101001100010 | 0b10011001100010 | 0b11011001100010 | 0b10111001100010 | 0b11111001100010 | 0b10000101100010 | 0b11000101100010 | 0b10100101100010 | 0b11100101100010 | 0b10010101100010 | 0b11010101100010 | 0b10110101100010 | 0b11110101100010 | 0b10001101100010 | 0b11001101100010 | 0b10101101100010 | 0b11101101100010 | 0b10011101100010 | 0b11011101100010 | 0b10111101100010 | 0b11111101100010 | 0b10000011100010 | 0b11000011100010 | 0b10100011100010 | 0b11100011100010 | 0b10010011100010 | 0b11010011100010 | 0b10110011100010 | 0b11110011100010 | 0b10001011100010 | 0b11001011100010 | 0b10101011100010 | 0b11101011100010 | 0b10011011100010 | 0b11011011100010 | 0b10111011100010 | 0b11111011100010 | 0b10000111100010 | 0b11000111100010 | 0b10100111100010 | 0b11100111100010 | 0b10010111100010 | 0b11010111100010 | 0b10110111100010 | 0b11110111100010 | 0b10001111100010 | 0b11001111100010 | 0b10101111100010 | 0b11101111100010 | 0b10011111100010 | 0b11011111100010 | 0b10111111100010 | 0b11111111100010 | 0b10000000010010 | 0b11000000010010 | 0b10100000010010 | 0b11100000010010 | 0b10010000010010 | 0b11010000010010 | 0b10110000010010 | 0b11110000010010 | 0b10001000010010 | 0b11001000010010 | 0b10101000010010 | 0b11101000010010 | 0b10011000010010 | 0b11011000010010 | 0b10111000010010 | 0b11111000010010 | 0b10000100010010 | 0b11000100010010 | 0b10100100010010 | 0b11100100010010 | 0b10010100010010 | 0b11010100010010 | 0b10110100010010 | 0b11110100010010 | 0b10001100010010 | 0b11001100010010 | 0b10101100010010 | 0b11101100010010 | 0b10011100010010 | 0b11011100010010 | 0b10111100010010 | 0b11111100010010 | 0b10000010010010 | 0b11000010010010 | 0b10100010010010 | 0b11100010010010 | 0b10010010010010 | 0b11010010010010 | 0b10110010010010 | 0b11110010010010 | 0b10001010010010 | 0b11001010010010 | 0b10101010010010 | 0b11101010010010 | 0b10011010010010 | 0b11011010010010 | 0b10111010010010 | 0b11111010010010 | 0b10000110010010 | 0b11000110010010 | 0b10100110010010 | 0b11100110010010 | 0b10010110010010 | 0b11010110010010 | 0b10110110010010 | 0b11110110010010 | 0b10001110010010 | 0b11001110010010 | 0b10101110010010 | 0b11101110010010 | 0b10011110010010 | 0b11011110010010 | 0b10111110010010 | 0b11111110010010 | 0b10000001010010 | 0b11000001010010 | 0b10100001010010 | 0b11100001010010 | 0b10010001010010 | 0b11010001010010 | 0b10110001010010 | 0b11110001010010 | 0b10001001010010 | 0b11001001010010 | 0b10101001010010 | 0b11101001010010 | 0b10011001010010 | 0b11011001010010 | 0b10111001010010 | 0b11111001010010 | 0b10000101010010 | 0b11000101010010 | 0b10100101010010 | 0b11100101010010 | 0b10010101010010 | 0b11010101010010 | 0b10110101010010 | 0b11110101010010 | 0b10001101010010 | 0b11001101010010 | 0b10101101010010 | 0b11101101010010 | 0b10011101010010 | 0b11011101010010 | 0b10111101010010 | 0b11111101010010 | 0b10000011010010 | 0b11000011010010 | 0b10100011010010 | 0b11100011010010 | 0b10010011010010 | 0b11010011010010 | 0b10110011010010 | 0b11110011010010 | 0b10001011010010 | 0b11001011010010 | 0b10101011010010 | 0b11101011010010 | 0b10011011010010 | 0b11011011010010 | 0b10111011010010 | 0b11111011010010 | 0b10000111010010 | 0b11000111010010 | 0b10100111010010 | 0b11100111010010 | 0b10010111010010 | 0b11010111010010 | 0b10110111010010 | 0b11110111010010 | 0b10001111010010 | 0b11001111010010 | 0b10101111010010 | 0b11101111010010 | 0b10011111010010 | 0b11011111010010 | 0b10111111010010 | 0b11111111010010 | 0b10000000110010 | 0b11000000110010 | 0b10100000110010 | 0b11100000110010 | 0b10010000110010 | 0b11010000110010 | 0b10110000110010 | 0b11110000110010 | 0b10001000110010 | 0b11001000110010 | 0b10101000110010 | 0b11101000110010 | 0b10011000110010 | 0b11011000110010 | 0b10111000110010 | 0b11111000110010 | 0b10000100110010 | 0b11000100110010 | 0b10100100110010 | 0b11100100110010 | 0b10010100110010 | 0b11010100110010 | 0b10110100110010 | 0b11110100110010 | 0b10001100110010 | 0b11001100110010 | 0b10101100110010 | 0b11101100110010 | 0b10011100110010 | 0b11011100110010 | 0b10111100110010 | 0b11111100110010 | 0b10000010110010 | 0b11000010110010 | 0b10100010110010 | 0b11100010110010 | 0b10010010110010 | 0b11010010110010 | 0b10110010110010 | 0b11110010110010 | 0b10001010110010 | 0b11001010110010 | 0b10101010110010 | 0b11101010110010 | 0b10011010110010 | 0b11011010110010 | 0b10111010110010 | 0b11111010110010 | 0b10000110110010 | 0b11000110110010 | 0b10100110110010 | 0b11100110110010 | 0b10010110110010 | 0b11010110110010 | 0b10110110110010 | 0b11110110110010 | 0b10001110110010 | 0b11001110110010 | 0b10101110110010 | 0b11101110110010 | 0b10011110110010 | 0b11011110110010 | 0b10111110110010 | 0b11111110110010 | 0b10000001110010 | 0b11000001110010 | 0b10100001110010 | 0b11100001110010 | 0b10010001110010 | 0b11010001110010 | 0b10110001110010 | 0b11110001110010 | 0b10001001110010 | 0b11001001110010 | 0b10101001110010 | 0b11101001110010 | 0b10011001110010 | 0b11011001110010 | 0b10111001110010 | 0b11111001110010 | 0b10000101110010 | 0b11000101110010 | 0b10100101110010 | 0b11100101110010 | 0b10010101110010 | 0b11010101110010 | 0b10110101110010 | 0b11110101110010 | 0b10001101110010 | 0b11001101110010 | 0b10101101110010 | 0b11101101110010 | 0b10011101110010 | 0b11011101110010 | 0b10111101110010 | 0b11111101110010 | 0b10000011110010 | 0b11000011110010 | 0b10100011110010 | 0b11100011110010 | 0b10010011110010 | 0b11010011110010 | 0b10110011110010 | 0b11110011110010 | 0b10001011110010 | 0b11001011110010 | 0b10101011110010 | 0b11101011110010 | 0b10011011110010 | 0b11011011110010 | 0b10111011110010 | 0b11111011110010 | 0b10000111110010 | 0b11000111110010 | 0b10100111110010 | 0b11100111110010 | 0b10010111110010 | 0b11010111110010 | 0b10110111110010 | 0b11110111110010 | 0b10001111110010 | 0b11001111110010 | 0b10101111110010 | 0b11101111110010 | 0b10011111110010 | 0b11011111110010 | 0b10111111110010 | 0b11111111110010 | 0b10000000001010 | 0b11000000001010 | 0b10100000001010 | 0b11100000001010 | 0b10010000001010 | 0b11010000001010 | 0b10110000001010 | 0b11110000001010 | 0b10001000001010 | 0b11001000001010 | 0b10101000001010 | 0b11101000001010 | 0b10011000001010 | 0b11011000001010 | 0b10111000001010 | 0b11111000001010 | 0b10000100001010 | 0b11000100001010 | 0b10100100001010 | 0b11100100001010 | 0b10010100001010 | 0b11010100001010 | 0b10110100001010 | 0b11110100001010 | 0b10001100001010 | 0b11001100001010 | 0b10101100001010 | 0b11101100001010 | 0b10011100001010 | 0b11011100001010 | 0b10111100001010 | 0b11111100001010 | 0b10000010001010 | 0b11000010001010 | 0b10100010001010 | 0b11100010001010 | 0b10010010001010 | 0b11010010001010 | 0b10110010001010 | 0b11110010001010 | 0b10001010001010 | 0b11001010001010 | 0b10101010001010 | 0b11101010001010 | 0b10011010001010 | 0b11011010001010 | 0b10111010001010 | 0b11111010001010 | 0b10000110001010 | 0b11000110001010 | 0b10100110001010 | 0b11100110001010 | 0b10010110001010 | 0b11010110001010 | 0b10110110001010 | 0b11110110001010 | 0b10001110001010 | 0b11001110001010 | 0b10101110001010 | 0b11101110001010 | 0b10011110001010 | 0b11011110001010 | 0b10111110001010 | 0b11111110001010 | 0b10000001001010 | 0b11000001001010 | 0b10100001001010 | 0b11100001001010 | 0b10010001001010 | 0b11010001001010 | 0b10110001001010 | 0b11110001001010 | 0b10001001001010 | 0b11001001001010 | 0b10101001001010 | 0b11101001001010 | 0b10011001001010 | 0b11011001001010 | 0b10111001001010 | 0b11111001001010 | 0b10000101001010 | 0b11000101001010 | 0b10100101001010 | 0b11100101001010 | 0b10010101001010 | 0b11010101001010 | 0b10110101001010 | 0b11110101001010 | 0b10001101001010 | 0b11001101001010 | 0b10101101001010 | 0b11101101001010 | 0b10011101001010 | 0b11011101001010 | 0b10111101001010 | 0b11111101001010 | 0b10000011001010 | 0b11000011001010 | 0b10100011001010 | 0b11100011001010 | 0b10010011001010 | 0b11010011001010 | 0b10110011001010 | 0b11110011001010 | 0b10001011001010 | 0b11001011001010 | 0b10101011001010 | 0b11101011001010 | 0b10011011001010 | 0b11011011001010 | 0b10111011001010 | 0b11111011001010 | 0b10000111001010 | 0b11000111001010 | 0b10100111001010 | 0b11100111001010 | 0b10010111001010 | 0b11010111001010 | 0b10110111001010 | 0b11110111001010 | 0b10001111001010 | 0b11001111001010 | 0b10101111001010 | 0b11101111001010 | 0b10011111001010 | 0b11011111001010 | 0b10111111001010 | 0b11111111001010 | 0b10000000101010 | 0b11000000101010 | 0b10100000101010 | 0b11100000101010 | 0b10010000101010 | 0b11010000101010 | 0b10110000101010 | 0b11110000101010 | 0b10001000101010 | 0b11001000101010 | 0b10101000101010 | 0b11101000101010 | 0b10011000101010 | 0b11011000101010 | 0b10111000101010 | 0b11111000101010 | 0b10000100101010 | 0b11000100101010 | 0b10100100101010 | 0b11100100101010 | 0b10010100101010 | 0b11010100101010 | 0b10110100101010 | 0b11110100101010 | 0b10001100101010 | 0b11001100101010 | 0b10101100101010 | 0b11101100101010 | 0b10011100101010 | 0b11011100101010 | 0b10111100101010 | 0b11111100101010 | 0b10000010101010 | 0b11000010101010 | 0b10100010101010 | 0b11100010101010 | 0b10010010101010 | 0b11010010101010 | 0b10110010101010 | 0b11110010101010 | 0b10001010101010 | 0b11001010101010 | 0b10101010101010 | 0b11101010101010 | 0b10011010101010 | 0b11011010101010 | 0b10111010101010 | 0b11111010101010 | 0b10000110101010 | 0b11000110101010 | 0b10100110101010 | 0b11100110101010 | 0b10010110101010 | 0b11010110101010 | 0b10110110101010 | 0b11110110101010 | 0b10001110101010 | 0b11001110101010 | 0b10101110101010 | 0b11101110101010 | 0b10011110101010 | 0b11011110101010 | 0b10111110101010 | 0b11111110101010 | 0b10000001101010 | 0b11000001101010 | 0b10100001101010 | 0b11100001101010 | 0b10010001101010 | 0b11010001101010 | 0b10110001101010 | 0b11110001101010 | 0b10001001101010 | 0b11001001101010 | 0b10101001101010 | 0b11101001101010 | 0b10011001101010 | 0b11011001101010 | 0b10111001101010 | 0b11111001101010 | 0b10000101101010 | 0b11000101101010 | 0b10100101101010 | 0b11100101101010 | 0b10010101101010 | 0b11010101101010 | 0b10110101101010 | 0b11110101101010 | 0b10001101101010 | 0b11001101101010 | 0b10101101101010 | 0b11101101101010 | 0b10011101101010 | 0b11011101101010 | 0b10111101101010 | 0b11111101101010 | 0b10000011101010 | 0b11000011101010 | 0b10100011101010 | 0b11100011101010 | 0b10010011101010 | 0b11010011101010 | 0b10110011101010 | 0b11110011101010 | 0b10001011101010 | 0b11001011101010 | 0b10101011101010 | 0b11101011101010 | 0b10011011101010 | 0b11011011101010 | 0b10111011101010 | 0b11111011101010 | 0b10000111101010 | 0b11000111101010 | 0b10100111101010 | 0b11100111101010 | 0b10010111101010 | 0b11010111101010 | 0b10110111101010 | 0b11110111101010 | 0b10001111101010 | 0b11001111101010 | 0b10101111101010 | 0b11101111101010 | 0b10011111101010 | 0b11011111101010 | 0b10111111101010 | 0b11111111101010 | 0b10000000011010 | 0b11000000011010 | 0b10100000011010 | 0b11100000011010 | 0b10010000011010 | 0b11010000011010 | 0b10110000011010 | 0b11110000011010 | 0b10001000011010 | 0b11001000011010 | 0b10101000011010 | 0b11101000011010 | 0b10011000011010 | 0b11011000011010 | 0b10111000011010 | 0b11111000011010 | 0b10000100011010 | 0b11000100011010 | 0b10100100011010 | 0b11100100011010 | 0b10010100011010 | 0b11010100011010 | 0b10110100011010 | 0b11110100011010 | 0b10001100011010 | 0b11001100011010 | 0b10101100011010 | 0b11101100011010 | 0b10011100011010 | 0b11011100011010 | 0b10111100011010 | 0b11111100011010 | 0b10000010011010 | 0b11000010011010 | 0b10100010011010 | 0b11100010011010 | 0b10010010011010 | 0b11010010011010 | 0b10110010011010 | 0b11110010011010 | 0b10001010011010 | 0b11001010011010 | 0b10101010011010 | 0b11101010011010 | 0b10011010011010 | 0b11011010011010 | 0b10111010011010 | 0b11111010011010 | 0b10000110011010 | 0b11000110011010 | 0b10100110011010 | 0b11100110011010 | 0b10010110011010 | 0b11010110011010 | 0b10110110011010 | 0b11110110011010 | 0b10001110011010 | 0b11001110011010 | 0b10101110011010 | 0b11101110011010 | 0b10011110011010 | 0b11011110011010 | 0b10111110011010 | 0b11111110011010 | 0b10000001011010 | 0b11000001011010 | 0b10100001011010 | 0b11100001011010 | 0b10010001011010 | 0b11010001011010 | 0b10110001011010 | 0b11110001011010 | 0b10001001011010 | 0b11001001011010 | 0b10101001011010 | 0b11101001011010 | 0b10011001011010 | 0b11011001011010 | 0b10111001011010 | 0b11111001011010 | 0b10000101011010 | 0b11000101011010 | 0b10100101011010 | 0b11100101011010 | 0b10010101011010 | 0b11010101011010 | 0b10110101011010 | 0b11110101011010 | 0b10001101011010 | 0b11001101011010 | 0b10101101011010 | 0b11101101011010 | 0b10011101011010 | 0b11011101011010 | 0b10111101011010 | 0b11111101011010 | 0b10000011011010 | 0b11000011011010 | 0b10100011011010 | 0b11100011011010 | 0b10010011011010 | 0b11010011011010 | 0b10110011011010 | 0b11110011011010 | 0b10001011011010 | 0b11001011011010 | 0b10101011011010 | 0b11101011011010 | 0b10011011011010 | 0b11011011011010 | 0b10111011011010 | 0b11111011011010 | 0b10000111011010 | 0b11000111011010 | 0b10100111011010 | 0b11100111011010 | 0b10010111011010 | 0b11010111011010 | 0b10110111011010 | 0b11110111011010 | 0b10001111011010 | 0b11001111011010 | 0b10101111011010 | 0b11101111011010 | 0b10011111011010 | 0b11011111011010 | 0b10111111011010 | 0b11111111011010 | 0b10000000111010 | 0b11000000111010 | 0b10100000111010 | 0b11100000111010 | 0b10010000111010 | 0b11010000111010 | 0b10110000111010 | 0b11110000111010 | 0b10001000111010 | 0b11001000111010 | 0b10101000111010 | 0b11101000111010 | 0b10011000111010 | 0b11011000111010 | 0b10111000111010 | 0b11111000111010 | 0b10000100111010 | 0b11000100111010 | 0b10100100111010 | 0b11100100111010 | 0b10010100111010 | 0b11010100111010 | 0b10110100111010 | 0b11110100111010 | 0b10001100111010 | 0b11001100111010 | 0b10101100111010 | 0b11101100111010 | 0b10011100111010 | 0b11011100111010 | 0b10111100111010 | 0b11111100111010 | 0b10000010111010 | 0b11000010111010 | 0b10100010111010 | 0b11100010111010 | 0b10010010111010 | 0b11010010111010 | 0b10110010111010 | 0b11110010111010 | 0b10001010111010 | 0b11001010111010 | 0b10101010111010 | 0b11101010111010 | 0b10011010111010 | 0b11011010111010 | 0b10111010111010 | 0b11111010111010 | 0b10000110111010 | 0b11000110111010 | 0b10100110111010 | 0b11100110111010 | 0b10010110111010 | 0b11010110111010 | 0b10110110111010 | 0b11110110111010 | 0b10001110111010 | 0b11001110111010 | 0b10101110111010 | 0b11101110111010 | 0b10011110111010 | 0b11011110111010 | 0b10111110111010 | 0b11111110111010 | 0b10000001111010 | 0b11000001111010 | 0b10100001111010 | 0b11100001111010 | 0b10010001111010 | 0b11010001111010 | 0b10110001111010 | 0b11110001111010 | 0b10001001111010 | 0b11001001111010 | 0b10101001111010 | 0b11101001111010 | 0b10011001111010 | 0b11011001111010 | 0b10111001111010 | 0b11111001111010 | 0b10000101111010 | 0b11000101111010 | 0b10100101111010 | 0b11100101111010 | 0b10010101111010 | 0b11010101111010 | 0b10110101111010 | 0b11110101111010 | 0b10001101111010 | 0b11001101111010 | 0b10101101111010 | 0b11101101111010 | 0b10011101111010 | 0b11011101111010 | 0b10111101111010 | 0b11111101111010 | 0b10000011111010 | 0b11000011111010 | 0b10100011111010 | 0b11100011111010 | 0b10010011111010 | 0b11010011111010 | 0b10110011111010 | 0b11110011111010 | 0b10001011111010 | 0b11001011111010 | 0b10101011111010 | 0b11101011111010 | 0b10011011111010 | 0b11011011111010 | 0b10111011111010 | 0b11111011111010 | 0b10000111111010 | 0b11000111111010 | 0b10100111111010 | 0b11100111111010 | 0b10010111111010 | 0b11010111111010 | 0b10110111111010 | 0b11110111111010 | 0b10001111111010 | 0b11001111111010 | 0b10101111111010 | 0b11101111111010 | 0b10011111111010 | 0b11011111111010 | 0b10111111111010 | 0b11111111111010 | 0b10000000000110 | 0b11000000000110 | 0b10100000000110 | 0b11100000000110 | 0b10010000000110 | 0b11010000000110 | 0b10110000000110 | 0b11110000000110 | 0b10001000000110 | 0b11001000000110 | 0b10101000000110 | 0b11101000000110 | 0b10011000000110 | 0b11011000000110 | 0b10111000000110 | 0b11111000000110 | 0b10000100000110 | 0b11000100000110 | 0b10100100000110 | 0b11100100000110 | 0b10010100000110 | 0b11010100000110 | 0b10110100000110 | 0b11110100000110 | 0b10001100000110 | 0b11001100000110 | 0b10101100000110 | 0b11101100000110 | 0b10011100000110 | 0b11011100000110 | 0b10111100000110 | 0b11111100000110 | 0b10000010000110 | 0b11000010000110 | 0b10100010000110 | 0b11100010000110 | 0b10010010000110 | 0b11010010000110 | 0b10110010000110 | 0b11110010000110 | 0b10001010000110 | 0b11001010000110 | 0b10101010000110 | 0b11101010000110 | 0b10011010000110 | 0b11011010000110 | 0b10111010000110 | 0b11111010000110 | 0b10000110000110 | 0b11000110000110 | 0b10100110000110 | 0b11100110000110 | 0b10010110000110 | 0b11010110000110 | 0b10110110000110 | 0b11110110000110 | 0b10001110000110 | 0b11001110000110 | 0b10101110000110 | 0b11101110000110 | 0b10011110000110 | 0b11011110000110 | 0b10111110000110 | 0b11111110000110 | 0b10000001000110 | 0b11000001000110 | 0b10100001000110 | 0b11100001000110 | 0b10010001000110 | 0b11010001000110 | 0b10110001000110 | 0b11110001000110 | 0b10001001000110 | 0b11001001000110 | 0b10101001000110 | 0b11101001000110 | 0b10011001000110 | 0b11011001000110 | 0b10111001000110 | 0b11111001000110 | 0b10000101000110 | 0b11000101000110 | 0b10100101000110 | 0b11100101000110 | 0b10010101000110 | 0b11010101000110 | 0b10110101000110 | 0b11110101000110 | 0b10001101000110 | 0b11001101000110 | 0b10101101000110 | 0b11101101000110 | 0b10011101000110 | 0b11011101000110 | 0b10111101000110 | 0b11111101000110 | 0b10000011000110 | 0b11000011000110 | 0b10100011000110 | 0b11100011000110 | 0b10010011000110 | 0b11010011000110 | 0b10110011000110 | 0b11110011000110 | 0b10001011000110 | 0b11001011000110 | 0b10101011000110 | 0b11101011000110 | 0b10011011000110 | 0b11011011000110 | 0b10111011000110 | 0b11111011000110 | 0b10000111000110 | 0b11000111000110 | 0b10100111000110 | 0b11100111000110 | 0b10010111000110 | 0b11010111000110 | 0b10110111000110 | 0b11110111000110 | 0b10001111000110 | 0b11001111000110 | 0b10101111000110 | 0b11101111000110 | 0b10011111000110 | 0b11011111000110 | 0b10111111000110 | 0b11111111000110 | 0b10000000100110 | 0b11000000100110 | 0b10100000100110 | 0b11100000100110 | 0b10010000100110 | 0b11010000100110 | 0b10110000100110 | 0b11110000100110 | 0b10001000100110 | 0b11001000100110 | 0b10101000100110 | 0b11101000100110 | 0b10011000100110 | 0b11011000100110 | 0b10111000100110 | 0b11111000100110 | 0b10000100100110 | 0b11000100100110 | 0b10100100100110 | 0b11100100100110 | 0b10010100100110 | 0b11010100100110 | 0b10110100100110 | 0b11110100100110 | 0b10001100100110 | 0b11001100100110 | 0b10101100100110 | 0b11101100100110 | 0b10011100100110 | 0b11011100100110 | 0b10111100100110 | 0b11111100100110 | 0b10000010100110 | 0b11000010100110 | 0b10100010100110 | 0b11100010100110 | 0b10010010100110 | 0b11010010100110 | 0b10110010100110 | 0b11110010100110 | 0b10001010100110 | 0b11001010100110 | 0b10101010100110 | 0b11101010100110 | 0b10011010100110 | 0b11011010100110 | 0b10111010100110 | 0b11111010100110 | 0b10000110100110 | 0b11000110100110 | 0b10100110100110 | 0b11100110100110 | 0b10010110100110 | 0b11010110100110 | 0b10110110100110 | 0b11110110100110 | 0b10001110100110 | 0b11001110100110 | 0b10101110100110 | 0b11101110100110 | 0b10011110100110 | 0b11011110100110 | 0b10111110100110 | 0b11111110100110 | 0b10000001100110 | 0b11000001100110 | 0b10100001100110 | 0b11100001100110 | 0b10010001100110 | 0b11010001100110 | 0b10110001100110 | 0b11110001100110 | 0b10001001100110 | 0b11001001100110 | 0b10101001100110 | 0b11101001100110 | 0b10011001100110 | 0b11011001100110 | 0b10111001100110 | 0b11111001100110 | 0b10000101100110 | 0b11000101100110 | 0b10100101100110 | 0b11100101100110 | 0b10010101100110 | 0b11010101100110 | 0b10110101100110 | 0b11110101100110 | 0b10001101100110 | 0b11001101100110 | 0b10101101100110 | 0b11101101100110 | 0b10011101100110 | 0b11011101100110 | 0b10111101100110 | 0b11111101100110 | 0b10000011100110 | 0b11000011100110 | 0b10100011100110 | 0b11100011100110 | 0b10010011100110 | 0b11010011100110 | 0b10110011100110 | 0b11110011100110 | 0b10001011100110 | 0b11001011100110 | 0b10101011100110 | 0b11101011100110 | 0b10011011100110 | 0b11011011100110 | 0b10111011100110 | 0b11111011100110 | 0b10000111100110 | 0b11000111100110 | 0b10100111100110 | 0b11100111100110 | 0b10010111100110 | 0b11010111100110 | 0b10110111100110 | 0b11110111100110 | 0b10001111100110 | 0b11001111100110 | 0b10101111100110 | 0b11101111100110 | 0b10011111100110 | 0b11011111100110 | 0b10111111100110 | 0b11111111100110 | 0b10000000010110 | 0b11000000010110 | 0b10100000010110 | 0b11100000010110 | 0b10010000010110 | 0b11010000010110 | 0b10110000010110 | 0b11110000010110 | 0b10001000010110 | 0b11001000010110 | 0b10101000010110 | 0b11101000010110 | 0b10011000010110 | 0b11011000010110 | 0b10111000010110 | 0b11111000010110 | 0b10000100010110 | 0b11000100010110 | 0b10100100010110 | 0b11100100010110 | 0b10010100010110 | 0b11010100010110 | 0b10110100010110 | 0b11110100010110 | 0b10001100010110 | 0b11001100010110 | 0b10101100010110 | 0b11101100010110 | 0b10011100010110 | 0b11011100010110 | 0b10111100010110 | 0b11111100010110 | 0b10000010010110 | 0b11000010010110 | 0b10100010010110 | 0b11100010010110 | 0b10010010010110 | 0b11010010010110 | 0b10110010010110 | 0b11110010010110 | 0b10001010010110 | 0b11001010010110 | 0b10101010010110 | 0b11101010010110 | 0b10011010010110 | 0b11011010010110 | 0b10111010010110 | 0b11111010010110 | 0b10000110010110 | 0b11000110010110 | 0b10100110010110 | 0b11100110010110 | 0b10010110010110 | 0b11010110010110 | 0b10110110010110 | 0b11110110010110 | 0b10001110010110 | 0b11001110010110 | 0b10101110010110 | 0b11101110010110 | 0b10011110010110 | 0b11011110010110 | 0b10111110010110 | 0b11111110010110 | 0b10000001010110 | 0b11000001010110 | 0b10100001010110 | 0b11100001010110 | 0b10010001010110 | 0b11010001010110 | 0b10110001010110 | 0b11110001010110 | 0b10001001010110 | 0b11001001010110 | 0b10101001010110 | 0b11101001010110 | 0b10011001010110 | 0b11011001010110 | 0b10111001010110 | 0b11111001010110 | 0b10000101010110 | 0b11000101010110 | 0b10100101010110 | 0b11100101010110 | 0b10010101010110 | 0b11010101010110 | 0b10110101010110 | 0b11110101010110 | 0b10001101010110 | 0b11001101010110 | 0b10101101010110 | 0b11101101010110 | 0b10011101010110 | 0b11011101010110 | 0b10111101010110 | 0b11111101010110 | 0b10000011010110 | 0b11000011010110 | 0b10100011010110 | 0b11100011010110 | 0b10010011010110 | 0b11010011010110 | 0b10110011010110 | 0b11110011010110 | 0b10001011010110 | 0b11001011010110 | 0b10101011010110 | 0b11101011010110 | 0b10011011010110 | 0b11011011010110 | 0b10111011010110 | 0b11111011010110 | 0b10000111010110 | 0b11000111010110 | 0b10100111010110 | 0b11100111010110 | 0b10010111010110 | 0b11010111010110 | 0b10110111010110 | 0b11110111010110 | 0b10001111010110 | 0b11001111010110 | 0b10101111010110 | 0b11101111010110 | 0b10011111010110 | 0b11011111010110 | 0b10111111010110 | 0b11111111010110 | 0b10000000110110 | 0b11000000110110 | 0b10100000110110 | 0b11100000110110 | 0b10010000110110 | 0b11010000110110 | 0b10110000110110 | 0b11110000110110 | 0b10001000110110 | 0b11001000110110 | 0b10101000110110 | 0b11101000110110 | 0b10011000110110 | 0b11011000110110 | 0b10111000110110 | 0b11111000110110 | 0b10000100110110 | 0b11000100110110 | 0b10100100110110 | 0b11100100110110 | 0b10010100110110 | 0b11010100110110 | 0b10110100110110 | 0b11110100110110 | 0b10001100110110 | 0b11001100110110 | 0b10101100110110 | 0b11101100110110 | 0b10011100110110 | 0b11011100110110 | 0b10111100110110 | 0b11111100110110 | 0b10000010110110 | 0b11000010110110 | 0b10100010110110 | 0b11100010110110 | 0b10010010110110 | 0b11010010110110 | 0b10110010110110 | 0b11110010110110 | 0b10001010110110 | 0b11001010110110 | 0b10101010110110 | 0b11101010110110 | 0b10011010110110 | 0b11011010110110 | 0b10111010110110 | 0b11111010110110 | 0b10000110110110 | 0b11000110110110 | 0b10100110110110 | 0b11100110110110 | 0b10010110110110 | 0b11010110110110 | 0b10110110110110 | 0b11110110110110 | 0b10001110110110 | 0b11001110110110 | 0b10101110110110 | 0b11101110110110 | 0b10011110110110 | 0b11011110110110 | 0b10111110110110 | 0b11111110110110 | 0b10000001110110 | 0b11000001110110 | 0b10100001110110 | 0b11100001110110 | 0b10010001110110 | 0b11010001110110 | 0b10110001110110 | 0b11110001110110 | 0b10001001110110 | 0b11001001110110 | 0b10101001110110 | 0b11101001110110 | 0b10011001110110 | 0b11011001110110 | 0b10111001110110 | 0b11111001110110 | 0b10000101110110 | 0b11000101110110 | 0b10100101110110 | 0b11100101110110 | 0b10010101110110 | 0b11010101110110 | 0b10110101110110 | 0b11110101110110 | 0b10001101110110 | 0b11001101110110 | 0b10101101110110 | 0b11101101110110 | 0b10011101110110 | 0b11011101110110 | 0b10111101110110 | 0b11111101110110 | 0b10000011110110 | 0b11000011110110 | 0b10100011110110 | 0b11100011110110 | 0b10010011110110 | 0b11010011110110 | 0b10110011110110 | 0b11110011110110 | 0b10001011110110 | 0b11001011110110 | 0b10101011110110 | 0b11101011110110 | 0b10011011110110 | 0b11011011110110 | 0b10111011110110 | 0b11111011110110 | 0b10000111110110 | 0b11000111110110 | 0b10100111110110 | 0b11100111110110 | 0b10010111110110 | 0b11010111110110 | 0b10110111110110 | 0b11110111110110 | 0b10001111110110 | 0b11001111110110 | 0b10101111110110 | 0b11101111110110 | 0b10011111110110 | 0b11011111110110 | 0b10111111110110 | 0b11111111110110 | 0b10000000001110 | 0b11000000001110 | 0b10100000001110 | 0b11100000001110 | 0b10010000001110 | 0b11010000001110 | 0b10110000001110 | 0b11110000001110 | 0b10001000001110 | 0b11001000001110 | 0b10101000001110 | 0b11101000001110 | 0b10011000001110 | 0b11011000001110 | 0b10111000001110 | 0b11111000001110 | 0b10000100001110 | 0b11000100001110 | 0b10100100001110 | 0b11100100001110 | 0b10010100001110 | 0b11010100001110 | 0b10110100001110 | 0b11110100001110 | 0b10001100001110 | 0b11001100001110 | 0b10101100001110 | 0b11101100001110 | 0b10011100001110 | 0b11011100001110 | 0b10111100001110 | 0b11111100001110 | 0b10000010001110 | 0b11000010001110 | 0b10100010001110 | 0b11100010001110 | 0b10010010001110 | 0b11010010001110 | 0b10110010001110 | 0b11110010001110 | 0b10001010001110 | 0b11001010001110 | 0b10101010001110 | 0b11101010001110 | 0b10011010001110 | 0b11011010001110 | 0b10111010001110 | 0b11111010001110 | 0b10000110001110 | 0b11000110001110 | 0b10100110001110 | 0b11100110001110 | 0b10010110001110 | 0b11010110001110 | 0b10110110001110 | 0b11110110001110 | 0b10001110001110 | 0b11001110001110 | 0b10101110001110 | 0b11101110001110 | 0b10011110001110 | 0b11011110001110 | 0b10111110001110 | 0b11111110001110 | 0b10000001001110 | 0b11000001001110 | 0b10100001001110 | 0b11100001001110 | 0b10010001001110 | 0b11010001001110 | 0b10110001001110 | 0b11110001001110 | 0b10001001001110 | 0b11001001001110 | 0b10101001001110 | 0b11101001001110 | 0b10011001001110 | 0b11011001001110 | 0b10111001001110 | 0b11111001001110 | 0b10000101001110 | 0b11000101001110 | 0b10100101001110 | 0b11100101001110 | 0b10010101001110 | 0b11010101001110 | 0b10110101001110 | 0b11110101001110 | 0b10001101001110 | 0b11001101001110 | 0b10101101001110 | 0b11101101001110 | 0b10011101001110 | 0b11011101001110 | 0b10111101001110 | 0b11111101001110 | 0b10000011001110 | 0b11000011001110 | 0b10100011001110 | 0b11100011001110 | 0b10010011001110 | 0b11010011001110 | 0b10110011001110 | 0b11110011001110 | 0b10001011001110 | 0b11001011001110 | 0b10101011001110 | 0b11101011001110 | 0b10011011001110 | 0b11011011001110 | 0b10111011001110 | 0b11111011001110 | 0b10000111001110 | 0b11000111001110 | 0b10100111001110 | 0b11100111001110 | 0b10010111001110 | 0b11010111001110 | 0b10110111001110 | 0b11110111001110 | 0b10001111001110 | 0b11001111001110 | 0b10101111001110 | 0b11101111001110 | 0b10011111001110 | 0b11011111001110 | 0b10111111001110 | 0b11111111001110 | 0b10000000101110 | 0b11000000101110 | 0b10100000101110 | 0b11100000101110 | 0b10010000101110 | 0b11010000101110 | 0b10110000101110 | 0b11110000101110 | 0b10001000101110 | 0b11001000101110 | 0b10101000101110 | 0b11101000101110 | 0b10011000101110 | 0b11011000101110 | 0b10111000101110 | 0b11111000101110 | 0b10000100101110 | 0b11000100101110 | 0b10100100101110 | 0b11100100101110 | 0b10010100101110 | 0b11010100101110 | 0b10110100101110 | 0b11110100101110 | 0b10001100101110 | 0b11001100101110 | 0b10101100101110 | 0b11101100101110 | 0b10011100101110 | 0b11011100101110 | 0b10111100101110 | 0b11111100101110 | 0b10000010101110 | 0b11000010101110 | 0b10100010101110 | 0b11100010101110 | 0b10010010101110 | 0b11010010101110 | 0b10110010101110 | 0b11110010101110 | 0b10001010101110 | 0b11001010101110 | 0b10101010101110 | 0b11101010101110 | 0b10011010101110 | 0b11011010101110 | 0b10111010101110 | 0b11111010101110 | 0b10000110101110 | 0b11000110101110 | 0b10100110101110 | 0b11100110101110 | 0b10010110101110 | 0b11010110101110 | 0b10110110101110 | 0b11110110101110 | 0b10001110101110 | 0b11001110101110 | 0b10101110101110 | 0b11101110101110 | 0b10011110101110 | 0b11011110101110 | 0b10111110101110 | 0b11111110101110 | 0b10000001101110 | 0b11000001101110 | 0b10100001101110 | 0b11100001101110 | 0b10010001101110 | 0b11010001101110 | 0b10110001101110 | 0b11110001101110 | 0b10001001101110 | 0b11001001101110 | 0b10101001101110 | 0b11101001101110 | 0b10011001101110 | 0b11011001101110 | 0b10111001101110 | 0b11111001101110 | 0b10000101101110 | 0b11000101101110 | 0b10100101101110 | 0b11100101101110 | 0b10010101101110 | 0b11010101101110 | 0b10110101101110 | 0b11110101101110 | 0b10001101101110 | 0b11001101101110 | 0b10101101101110 | 0b11101101101110 | 0b10011101101110 | 0b11011101101110 | 0b10111101101110 | 0b11111101101110 | 0b10000011101110 | 0b11000011101110 | 0b10100011101110 | 0b11100011101110 | 0b10010011101110 | 0b11010011101110 | 0b10110011101110 | 0b11110011101110 | 0b10001011101110 | 0b11001011101110 | 0b10101011101110 | 0b11101011101110 | 0b10011011101110 | 0b11011011101110 | 0b10111011101110 | 0b11111011101110 | 0b10000111101110 | 0b11000111101110 | 0b10100111101110 | 0b11100111101110 | 0b10010111101110 | 0b11010111101110 | 0b10110111101110 | 0b11110111101110 | 0b10001111101110 | 0b11001111101110 | 0b10101111101110 | 0b11101111101110 | 0b10011111101110 | 0b11011111101110 | 0b10111111101110 | 0b11111111101110 | 0b10000000011110 | 0b11000000011110 | 0b10100000011110 | 0b11100000011110 | 0b10010000011110 | 0b11010000011110 | 0b10110000011110 | 0b11110000011110 | 0b10001000011110 | 0b11001000011110 | 0b10101000011110 | 0b11101000011110 | 0b10011000011110 | 0b11011000011110 | 0b10111000011110 | 0b11111000011110 | 0b10000100011110 | 0b11000100011110 | 0b10100100011110 | 0b11100100011110 | 0b10010100011110 | 0b11010100011110 | 0b10110100011110 | 0b11110100011110 | 0b10001100011110 | 0b11001100011110 | 0b10101100011110 | 0b11101100011110 | 0b10011100011110 | 0b11011100011110 | 0b10111100011110 | 0b11111100011110 | 0b10000010011110 | 0b11000010011110 | 0b10100010011110 | 0b11100010011110 | 0b10010010011110 | 0b11010010011110 | 0b10110010011110 | 0b11110010011110 | 0b10001010011110 | 0b11001010011110 | 0b10101010011110 | 0b11101010011110 | 0b10011010011110 | 0b11011010011110 | 0b10111010011110 | 0b11111010011110 | 0b10000110011110 | 0b11000110011110 | 0b10100110011110 | 0b11100110011110 | 0b10010110011110 | 0b11010110011110 | 0b10110110011110 | 0b11110110011110 | 0b10001110011110 | 0b11001110011110 | 0b10101110011110 | 0b11101110011110 | 0b10011110011110 | 0b11011110011110 | 0b10111110011110 | 0b11111110011110 | 0b10000001011110 | 0b11000001011110 | 0b10100001011110 | 0b11100001011110 | 0b10010001011110 | 0b11010001011110 | 0b10110001011110 | 0b11110001011110 | 0b10001001011110 | 0b11001001011110 | 0b10101001011110 | 0b11101001011110 | 0b10011001011110 | 0b11011001011110 | 0b10111001011110 | 0b11111001011110 | 0b10000101011110 | 0b11000101011110 | 0b10100101011110 | 0b11100101011110 | 0b10010101011110 | 0b11010101011110 | 0b10110101011110 | 0b11110101011110 | 0b10001101011110 | 0b11001101011110 | 0b10101101011110 | 0b11101101011110 | 0b10011101011110 | 0b11011101011110 | 0b10111101011110 | 0b11111101011110 | 0b10000011011110 | 0b11000011011110 | 0b10100011011110 | 0b11100011011110 | 0b10010011011110 | 0b11010011011110 | 0b10110011011110 | 0b11110011011110 | 0b10001011011110 | 0b11001011011110 | 0b10101011011110 | 0b11101011011110 | 0b10011011011110 | 0b11011011011110 | 0b10111011011110 | 0b11111011011110 | 0b10000111011110 | 0b11000111011110 | 0b10100111011110 | 0b11100111011110 | 0b10010111011110 | 0b11010111011110 | 0b10110111011110 | 0b11110111011110 | 0b10001111011110 | 0b11001111011110 | 0b10101111011110 | 0b11101111011110 | 0b10011111011110 | 0b11011111011110 | 0b10111111011110 | 0b11111111011110 | 0b10000000111110 | 0b11000000111110 | 0b10100000111110 | 0b11100000111110 | 0b10010000111110 | 0b11010000111110 | 0b10110000111110 | 0b11110000111110 | 0b10001000111110 | 0b11001000111110 | 0b10101000111110 | 0b11101000111110 | 0b10011000111110 | 0b11011000111110 | 0b10111000111110 | 0b11111000111110 | 0b10000100111110 | 0b11000100111110 | 0b10100100111110 | 0b11100100111110 | 0b10010100111110 | 0b11010100111110 | 0b10110100111110 | 0b11110100111110 | 0b10001100111110 | 0b11001100111110 | 0b10101100111110 | 0b11101100111110 | 0b10011100111110 | 0b11011100111110 | 0b10111100111110 | 0b11111100111110 | 0b10000010111110 | 0b11000010111110 | 0b10100010111110 | 0b11100010111110 | 0b10010010111110 | 0b11010010111110 | 0b10110010111110 | 0b11110010111110 | 0b10001010111110 | 0b11001010111110 | 0b10101010111110 | 0b11101010111110 | 0b10011010111110 | 0b11011010111110 | 0b10111010111110 | 0b11111010111110 | 0b10000110111110 | 0b11000110111110 | 0b10100110111110 | 0b11100110111110 | 0b10010110111110 | 0b11010110111110 | 0b10110110111110 | 0b11110110111110 | 0b10001110111110 | 0b11001110111110 | 0b10101110111110 | 0b11101110111110 | 0b10011110111110 | 0b11011110111110 | 0b10111110111110 | 0b11111110111110 | 0b10000001111110 | 0b11000001111110 | 0b10100001111110 | 0b11100001111110 | 0b10010001111110 | 0b11010001111110 | 0b10110001111110 | 0b11110001111110 | 0b10001001111110 | 0b11001001111110 | 0b10101001111110 | 0b11101001111110 | 0b10011001111110 | 0b11011001111110 | 0b10111001111110 | 0b11111001111110 | 0b10000101111110 | 0b11000101111110 | 0b10100101111110 | 0b11100101111110 | 0b10010101111110 | 0b11010101111110 | 0b10110101111110 | 0b11110101111110 | 0b10001101111110 | 0b11001101111110 | 0b10101101111110 | 0b11101101111110 | 0b10011101111110 | 0b11011101111110 | 0b10111101111110 | 0b11111101111110 | 0b10000011111110 | 0b11000011111110 | 0b10100011111110 | 0b11100011111110 | 0b10010011111110 | 0b11010011111110 | 0b10110011111110 | 0b11110011111110 | 0b10001011111110 | 0b11001011111110 | 0b10101011111110 | 0b11101011111110 | 0b10011011111110 | 0b11011011111110 | 0b10111011111110 | 0b11111011111110 | 0b10000111111110 | 0b11000111111110 | 0b10100111111110 | 0b11100111111110 | 0b10010111111110 | 0b11010111111110 | 0b10110111111110 | 0b11110111111110 | 0b10001111111110 | 0b11001111111110 | 0b10101111111110 | 0b11101111111110 | 0b10011111111110 | 0b11011111111110 | 0b10111111111110 | 0b11111111111110 | 0b10000000000001 | 0b11000000000001 | 0b10100000000001 | 0b11100000000001 | 0b10010000000001 | 0b11010000000001 | 0b10110000000001 | 0b11110000000001 | 0b10001000000001 | 0b11001000000001 | 0b10101000000001 | 0b11101000000001 | 0b10011000000001 | 0b11011000000001 | 0b10111000000001 | 0b11111000000001 | 0b10000100000001 | 0b11000100000001 | 0b10100100000001 | 0b11100100000001 | 0b10010100000001 | 0b11010100000001 | 0b10110100000001 | 0b11110100000001 | 0b10001100000001 | 0b11001100000001 | 0b10101100000001 | 0b11101100000001 | 0b10011100000001 | 0b11011100000001 | 0b10111100000001 | 0b11111100000001 | 0b10000010000001 | 0b11000010000001 | 0b10100010000001 | 0b11100010000001 | 0b10010010000001 | 0b11010010000001 | 0b10110010000001 | 0b11110010000001 | 0b10001010000001 | 0b11001010000001 | 0b10101010000001 | 0b11101010000001 | 0b10011010000001 | 0b11011010000001 | 0b10111010000001 | 0b11111010000001 | 0b10000110000001 | 0b11000110000001 | 0b10100110000001 | 0b11100110000001 | 0b10010110000001 | 0b11010110000001 | 0b10110110000001 | 0b11110110000001 | 0b10001110000001 | 0b11001110000001 | 0b10101110000001 | 0b11101110000001 | 0b10011110000001 | 0b11011110000001 | 0b10111110000001 | 0b11111110000001 | 0b10000001000001 | 0b11000001000001 | 0b10100001000001 | 0b11100001000001 | 0b10010001000001 | 0b11010001000001 | 0b10110001000001 | 0b11110001000001 | 0b10001001000001 | 0b11001001000001 | 0b10101001000001 | 0b11101001000001 | 0b10011001000001 | 0b11011001000001 | 0b10111001000001 | 0b11111001000001 | 0b10000101000001 | 0b11000101000001 | 0b10100101000001 | 0b11100101000001 | 0b10010101000001 | 0b11010101000001 | 0b10110101000001 | 0b11110101000001 | 0b10001101000001 | 0b11001101000001 | 0b10101101000001 | 0b11101101000001 | 0b10011101000001 | 0b11011101000001 | 0b10111101000001 | 0b11111101000001 | 0b10000011000001 | 0b11000011000001 | 0b10100011000001 | 0b11100011000001 | 0b10010011000001 | 0b11010011000001 | 0b10110011000001 | 0b11110011000001 | 0b10001011000001 | 0b11001011000001 | 0b10101011000001 | 0b11101011000001 | 0b10011011000001 | 0b11011011000001 | 0b10111011000001 | 0b11111011000001 | 0b10000111000001 | 0b11000111000001 | 0b10100111000001 | 0b11100111000001 | 0b10010111000001 | 0b11010111000001 | 0b10110111000001 | 0b11110111000001 | 0b10001111000001 | 0b11001111000001 | 0b10101111000001 | 0b11101111000001 | 0b10011111000001 | 0b11011111000001 | 0b10111111000001 | 0b11111111000001 | 0b10000000100001 | 0b11000000100001 | 0b10100000100001 | 0b11100000100001 | 0b10010000100001 | 0b11010000100001 | 0b10110000100001 | 0b11110000100001 | 0b10001000100001 | 0b11001000100001 | 0b10101000100001 | 0b11101000100001 | 0b10011000100001 | 0b11011000100001 | 0b10111000100001 | 0b11111000100001 | 0b10000100100001 | 0b11000100100001 | 0b10100100100001 | 0b11100100100001 | 0b10010100100001 | 0b11010100100001 | 0b10110100100001 | 0b11110100100001 | 0b10001100100001 | 0b11001100100001 | 0b10101100100001 | 0b11101100100001 | 0b10011100100001 | 0b11011100100001 | 0b10111100100001 | 0b11111100100001 | 0b10000010100001 | 0b11000010100001 | 0b10100010100001 | 0b11100010100001 | 0b10010010100001 | 0b11010010100001 | 0b10110010100001 | 0b11110010100001 | 0b10001010100001 | 0b11001010100001 | 0b10101010100001 | 0b11101010100001 | 0b10011010100001 | 0b11011010100001 | 0b10111010100001 | 0b11111010100001 | 0b10000110100001 | 0b11000110100001 | 0b10100110100001 | 0b11100110100001 | 0b10010110100001 | 0b11010110100001 | 0b10110110100001 | 0b11110110100001 | 0b10001110100001 | 0b11001110100001 | 0b10101110100001 | 0b11101110100001 | 0b10011110100001 | 0b11011110100001 | 0b10111110100001 | 0b11111110100001 | 0b10000001100001 | 0b11000001100001 | 0b10100001100001 | 0b11100001100001 | 0b10010001100001 | 0b11010001100001 | 0b10110001100001 | 0b11110001100001 | 0b10001001100001 | 0b11001001100001 | 0b10101001100001 | 0b11101001100001 | 0b10011001100001 | 0b11011001100001 | 0b10111001100001 | 0b11111001100001 | 0b10000101100001 | 0b11000101100001 | 0b10100101100001 | 0b11100101100001 | 0b10010101100001 | 0b11010101100001 | 0b10110101100001 | 0b11110101100001 | 0b10001101100001 | 0b11001101100001 | 0b10101101100001 | 0b11101101100001 | 0b10011101100001 | 0b11011101100001 | 0b10111101100001 | 0b11111101100001 | 0b10000011100001 | 0b11000011100001 | 0b10100011100001 | 0b11100011100001 | 0b10010011100001 | 0b11010011100001 | 0b10110011100001 | 0b11110011100001 | 0b10001011100001 | 0b11001011100001 | 0b10101011100001 | 0b11101011100001 | 0b10011011100001 | 0b11011011100001 | 0b10111011100001 | 0b11111011100001 | 0b10000111100001 | 0b11000111100001 | 0b10100111100001 | 0b11100111100001 | 0b10010111100001 | 0b11010111100001 | 0b10110111100001 | 0b11110111100001 | 0b10001111100001 | 0b11001111100001 | 0b10101111100001 | 0b11101111100001 | 0b10011111100001 | 0b11011111100001 | 0b10111111100001 | 0b11111111100001 | 0b10000000010001 | 0b11000000010001 | 0b10100000010001 | 0b11100000010001 | 0b10010000010001 | 0b11010000010001 | 0b10110000010001 | 0b11110000010001 | 0b10001000010001 | 0b11001000010001 | 0b10101000010001 | 0b11101000010001 | 0b10011000010001 | 0b11011000010001 | 0b10111000010001 | 0b11111000010001 | 0b10000100010001 | 0b11000100010001 | 0b10100100010001 | 0b11100100010001 | 0b10010100010001 | 0b11010100010001 | 0b10110100010001 | 0b11110100010001 | 0b10001100010001 | 0b11001100010001 | 0b10101100010001 | 0b11101100010001 | 0b10011100010001 | 0b11011100010001 | 0b10111100010001 | 0b11111100010001 | 0b10000010010001 | 0b11000010010001 | 0b10100010010001 | 0b11100010010001 | 0b10010010010001 | 0b11010010010001 | 0b10110010010001 | 0b11110010010001 | 0b10001010010001 | 0b11001010010001 | 0b10101010010001 | 0b11101010010001 | 0b10011010010001 | 0b11011010010001 | 0b10111010010001 | 0b11111010010001 | 0b10000110010001 | 0b11000110010001 | 0b10100110010001 | 0b11100110010001 | 0b10010110010001 | 0b11010110010001 | 0b10110110010001 | 0b11110110010001 | 0b10001110010001 | 0b11001110010001 | 0b10101110010001 | 0b11101110010001 | 0b10011110010001 | 0b11011110010001 | 0b10111110010001 | 0b11111110010001 | 0b10000001010001 | 0b11000001010001 | 0b10100001010001 | 0b11100001010001 | 0b10010001010001 | 0b11010001010001 | 0b10110001010001 | 0b11110001010001 | 0b10001001010001 | 0b11001001010001 | 0b10101001010001 | 0b11101001010001 | 0b10011001010001 | 0b11011001010001 | 0b10111001010001 | 0b11111001010001 | 0b10000101010001 | 0b11000101010001 | 0b10100101010001 | 0b11100101010001 | 0b10010101010001 | 0b11010101010001 | 0b10110101010001 | 0b11110101010001 | 0b10001101010001 | 0b11001101010001 | 0b10101101010001 | 0b11101101010001 | 0b10011101010001 | 0b11011101010001 | 0b10111101010001 | 0b11111101010001 | 0b10000011010001 | 0b11000011010001 | 0b10100011010001 | 0b11100011010001 | 0b10010011010001 | 0b11010011010001 | 0b10110011010001 | 0b11110011010001 | 0b10001011010001 | 0b11001011010001 | 0b10101011010001 | 0b11101011010001 | 0b10011011010001 | 0b11011011010001 | 0b10111011010001 | 0b11111011010001 | 0b10000111010001 | 0b11000111010001 | 0b10100111010001 | 0b11100111010001 | 0b10010111010001 | 0b11010111010001 | 0b10110111010001 | 0b11110111010001 | 0b10001111010001 | 0b11001111010001 | 0b10101111010001 | 0b11101111010001 | 0b10011111010001 | 0b11011111010001 | 0b10111111010001 | 0b11111111010001 | 0b10000000110001 | 0b11000000110001 | 0b10100000110001 | 0b11100000110001 | 0b10010000110001 | 0b11010000110001 | 0b10110000110001 | 0b11110000110001 | 0b10001000110001 | 0b11001000110001 | 0b10101000110001 | 0b11101000110001 | 0b10011000110001 | 0b11011000110001 | 0b10111000110001 | 0b11111000110001 | 0b10000100110001 | 0b11000100110001 | 0b10100100110001 | 0b11100100110001 | 0b10010100110001 | 0b11010100110001 | 0b10110100110001 | 0b11110100110001 | 0b10001100110001 | 0b11001100110001 | 0b10101100110001 | 0b11101100110001 | 0b10011100110001 | 0b11011100110001 | 0b10111100110001 | 0b11111100110001 | 0b10000010110001 | 0b11000010110001 | 0b10100010110001 | 0b11100010110001 | 0b10010010110001 | 0b11010010110001 | 0b10110010110001 | 0b11110010110001 | 0b10001010110001 | 0b11001010110001 | 0b10101010110001 | 0b11101010110001 | 0b10011010110001 | 0b11011010110001 | 0b10111010110001 | 0b11111010110001 | 0b10000110110001 | 0b11000110110001 | 0b10100110110001 | 0b11100110110001 | 0b10010110110001 | 0b11010110110001 | 0b10110110110001 | 0b11110110110001 | 0b10001110110001 | 0b11001110110001 | 0b10101110110001 | 0b11101110110001 | 0b10011110110001 | 0b11011110110001 | 0b10111110110001 | 0b11111110110001 | 0b10000001110001 | 0b11000001110001 | 0b10100001110001 | 0b11100001110001 | 0b10010001110001 | 0b11010001110001 | 0b10110001110001 | 0b11110001110001 | 0b10001001110001 | 0b11001001110001 | 0b10101001110001 | 0b11101001110001 | 0b10011001110001 | 0b11011001110001 | 0b10111001110001 | 0b11111001110001 | 0b10000101110001 | 0b11000101110001 | 0b10100101110001 | 0b11100101110001 | 0b10010101110001 | 0b11010101110001 | 0b10110101110001 | 0b11110101110001 | 0b10001101110001 | 0b11001101110001 | 0b10101101110001 | 0b11101101110001 | 0b10011101110001 | 0b11011101110001 | 0b10111101110001 | 0b11111101110001 | 0b10000011110001 | 0b11000011110001 | 0b10100011110001 | 0b11100011110001 | 0b10010011110001 | 0b11010011110001 | 0b10110011110001 | 0b11110011110001 | 0b10001011110001 | 0b11001011110001 | 0b10101011110001 | 0b11101011110001 | 0b10011011110001 | 0b11011011110001 | 0b10111011110001 | 0b11111011110001 | 0b10000111110001 | 0b11000111110001 | 0b10100111110001 | 0b11100111110001 | 0b10010111110001 | 0b11010111110001 | 0b10110111110001 | 0b11110111110001 | 0b10001111110001 | 0b11001111110001 | 0b10101111110001 | 0b11101111110001 | 0b10011111110001 | 0b11011111110001 | 0b10111111110001 | 0b11111111110001 | 0b10000000001001 | 0b11000000001001 | 0b10100000001001 | 0b11100000001001 | 0b10010000001001 | 0b11010000001001 | 0b10110000001001 | 0b11110000001001 | 0b10001000001001 | 0b11001000001001 | 0b10101000001001 | 0b11101000001001 | 0b10011000001001 | 0b11011000001001 | 0b10111000001001 | 0b11111000001001 | 0b10000100001001 | 0b11000100001001 | 0b10100100001001 | 0b11100100001001 | 0b10010100001001 | 0b11010100001001 | 0b10110100001001 | 0b11110100001001 | 0b10001100001001 | 0b11001100001001 | 0b10101100001001 | 0b11101100001001 | 0b10011100001001 | 0b11011100001001 | 0b10111100001001 | 0b11111100001001 | 0b10000010001001 | 0b11000010001001 | 0b10100010001001 | 0b11100010001001 | 0b10010010001001 | 0b11010010001001 | 0b10110010001001 | 0b11110010001001 | 0b10001010001001 | 0b11001010001001 | 0b10101010001001 | 0b11101010001001 | 0b10011010001001 | 0b11011010001001 | 0b10111010001001 | 0b11111010001001 | 0b10000110001001 | 0b11000110001001 | 0b10100110001001 | 0b11100110001001 | 0b10010110001001 | 0b11010110001001 | 0b10110110001001 | 0b11110110001001 | 0b10001110001001 | 0b11001110001001 | 0b10101110001001 | 0b11101110001001 | 0b10011110001001 | 0b11011110001001 | 0b10111110001001 | 0b11111110001001 | 0b10000001001001 | 0b11000001001001 | 0b10100001001001 | 0b11100001001001 | 0b10010001001001 | 0b11010001001001 | 0b10110001001001 | 0b11110001001001 | 0b10001001001001 | 0b11001001001001 | 0b10101001001001 | 0b11101001001001 | 0b10011001001001 | 0b11011001001001 | 0b10111001001001 | 0b11111001001001 | 0b10000101001001 | 0b11000101001001 | 0b10100101001001 | 0b11100101001001 | 0b10010101001001 | 0b11010101001001 | 0b10110101001001 | 0b11110101001001 | 0b10001101001001 | 0b11001101001001 | 0b10101101001001 | 0b11101101001001 | 0b10011101001001 | 0b11011101001001 | 0b10111101001001 | 0b11111101001001 | 0b10000011001001 | 0b11000011001001 | 0b10100011001001 | 0b11100011001001 | 0b10010011001001 | 0b11010011001001 | 0b10110011001001 | 0b11110011001001 | 0b10001011001001 | 0b11001011001001 | 0b10101011001001 | 0b11101011001001 | 0b10011011001001 | 0b11011011001001 | 0b10111011001001 | 0b11111011001001 | 0b10000111001001 | 0b11000111001001 | 0b10100111001001 | 0b11100111001001 | 0b10010111001001 | 0b11010111001001 | 0b10110111001001 | 0b11110111001001 | 0b10001111001001 | 0b11001111001001 | 0b10101111001001 | 0b11101111001001 | 0b10011111001001 | 0b11011111001001 | 0b10111111001001 | 0b11111111001001 | 0b10000000101001 | 0b11000000101001 | 0b10100000101001 | 0b11100000101001 | 0b10010000101001 | 0b11010000101001 | 0b10110000101001 | 0b11110000101001 | 0b10001000101001 | 0b11001000101001 | 0b10101000101001 | 0b11101000101001 | 0b10011000101001 | 0b11011000101001 | 0b10111000101001 | 0b11111000101001 | 0b10000100101001 | 0b11000100101001 | 0b10100100101001 | 0b11100100101001 | 0b10010100101001 | 0b11010100101001 | 0b10110100101001 | 0b11110100101001 | 0b10001100101001 | 0b11001100101001 | 0b10101100101001 | 0b11101100101001 | 0b10011100101001 | 0b11011100101001 | 0b10111100101001 | 0b11111100101001 | 0b10000010101001 | 0b11000010101001 | 0b10100010101001 | 0b11100010101001 | 0b10010010101001 | 0b11010010101001 | 0b10110010101001 | 0b11110010101001 | 0b10001010101001 | 0b11001010101001 | 0b10101010101001 | 0b11101010101001 | 0b10011010101001 | 0b11011010101001 | 0b10111010101001 | 0b11111010101001 | 0b10000110101001 | 0b11000110101001 | 0b10100110101001 | 0b11100110101001 | 0b10010110101001 | 0b11010110101001 | 0b10110110101001 | 0b11110110101001 | 0b10001110101001 | 0b11001110101001 | 0b10101110101001 | 0b11101110101001 | 0b10011110101001 | 0b11011110101001 | 0b10111110101001 | 0b11111110101001 | 0b10000001101001 | 0b11000001101001 | 0b10100001101001 | 0b11100001101001 | 0b10010001101001 | 0b11010001101001 | 0b10110001101001 | 0b11110001101001 | 0b10001001101001 | 0b11001001101001 | 0b10101001101001 | 0b11101001101001 | 0b10011001101001 | 0b11011001101001 | 0b10111001101001 | 0b11111001101001 | 0b10000101101001 | 0b11000101101001 | 0b10100101101001 | 0b11100101101001 | 0b10010101101001 | 0b11010101101001 | 0b10110101101001 | 0b11110101101001 | 0b10001101101001 | 0b11001101101001 | 0b10101101101001 | 0b11101101101001 | 0b10011101101001 | 0b11011101101001 | 0b10111101101001 | 0b11111101101001 | 0b10000011101001 | 0b11000011101001 | 0b10100011101001 | 0b11100011101001 | 0b10010011101001 | 0b11010011101001 | 0b10110011101001 | 0b11110011101001 | 0b10001011101001 | 0b11001011101001 | 0b10101011101001 | 0b11101011101001 | 0b10011011101001 | 0b11011011101001 | 0b10111011101001 | 0b11111011101001 | 0b10000111101001 | 0b11000111101001 | 0b10100111101001 | 0b11100111101001 | 0b10010111101001 | 0b11010111101001 | 0b10110111101001 | 0b11110111101001 | 0b10001111101001 | 0b11001111101001 | 0b10101111101001 | 0b11101111101001 | 0b10011111101001 | 0b11011111101001 | 0b10111111101001 | 0b11111111101001 | 0b10000000011001 | 0b11000000011001 | 0b10100000011001 | 0b11100000011001 | 0b10010000011001 | 0b11010000011001 | 0b10110000011001 | 0b11110000011001 | 0b10001000011001 | 0b11001000011001 | 0b10101000011001 | 0b11101000011001 | 0b10011000011001 | 0b11011000011001 | 0b10111000011001 | 0b11111000011001 | 0b10000100011001 | 0b11000100011001 | 0b10100100011001 | 0b11100100011001 | 0b10010100011001 | 0b11010100011001 | 0b10110100011001 | 0b11110100011001 | 0b10001100011001 | 0b11001100011001 | 0b10101100011001 | 0b11101100011001 | 0b10011100011001 | 0b11011100011001 | 0b10111100011001 | 0b11111100011001 | 0b10000010011001 | 0b11000010011001 | 0b10100010011001 | 0b11100010011001 | 0b10010010011001 | 0b11010010011001 | 0b10110010011001 | 0b11110010011001 | 0b10001010011001 | 0b11001010011001 | 0b10101010011001 | 0b11101010011001 | 0b10011010011001 | 0b11011010011001 | 0b10111010011001 | 0b11111010011001 | 0b10000110011001 | 0b11000110011001 | 0b10100110011001 | 0b11100110011001 | 0b10010110011001 | 0b11010110011001 | 0b10110110011001 | 0b11110110011001 | 0b10001110011001 | 0b11001110011001 | 0b10101110011001 | 0b11101110011001 | 0b10011110011001 | 0b11011110011001 | 0b10111110011001 | 0b11111110011001 | 0b10000001011001 | 0b11000001011001 | 0b10100001011001 | 0b11100001011001 | 0b10010001011001 | 0b11010001011001 | 0b10110001011001 | 0b11110001011001 | 0b10001001011001 | 0b11001001011001 | 0b10101001011001 | 0b11101001011001 | 0b10011001011001 | 0b11011001011001 | 0b10111001011001 | 0b11111001011001 | 0b10000101011001 | 0b11000101011001 | 0b10100101011001 | 0b11100101011001 | 0b10010101011001 | 0b11010101011001 | 0b10110101011001 | 0b11110101011001 | 0b10001101011001 | 0b11001101011001 | 0b10101101011001 | 0b11101101011001 | 0b10011101011001 | 0b11011101011001 | 0b10111101011001 | 0b11111101011001 | 0b10000011011001 | 0b11000011011001 | 0b10100011011001 | 0b11100011011001 | 0b10010011011001 | 0b11010011011001 | 0b10110011011001 | 0b11110011011001 | 0b10001011011001 | 0b11001011011001 | 0b10101011011001 | 0b11101011011001 | 0b10011011011001 | 0b11011011011001 | 0b10111011011001 | 0b11111011011001 | 0b10000111011001 | 0b11000111011001 | 0b10100111011001 | 0b11100111011001 | 0b10010111011001 | 0b11010111011001 | 0b10110111011001 | 0b11110111011001 | 0b10001111011001 | 0b11001111011001 | 0b10101111011001 | 0b11101111011001 | 0b10011111011001 | 0b11011111011001 | 0b10111111011001 | 0b11111111011001 | 0b10000000111001 | 0b11000000111001 | 0b10100000111001 | 0b11100000111001 | 0b10010000111001 | 0b11010000111001 | 0b10110000111001 | 0b11110000111001 | 0b10001000111001 | 0b11001000111001 | 0b10101000111001 | 0b11101000111001 | 0b10011000111001 | 0b11011000111001 | 0b10111000111001 | 0b11111000111001 | 0b10000100111001 | 0b11000100111001 | 0b10100100111001 | 0b11100100111001 | 0b10010100111001 | 0b11010100111001 | 0b10110100111001 | 0b11110100111001 | 0b10001100111001 | 0b11001100111001 | 0b10101100111001 | 0b11101100111001 | 0b10011100111001 | 0b11011100111001 | 0b10111100111001 | 0b11111100111001 | 0b10000010111001 | 0b11000010111001 | 0b10100010111001 | 0b11100010111001 | 0b10010010111001 | 0b11010010111001 | 0b10110010111001 | 0b11110010111001 | 0b10001010111001 | 0b11001010111001 | 0b10101010111001 | 0b11101010111001 | 0b10011010111001 | 0b11011010111001 | 0b10111010111001 | 0b11111010111001 | 0b10000110111001 | 0b11000110111001 | 0b10100110111001 | 0b11100110111001 | 0b10010110111001 | 0b11010110111001 | 0b10110110111001 | 0b11110110111001 | 0b10001110111001 | 0b11001110111001 | 0b10101110111001 | 0b11101110111001 | 0b10011110111001 | 0b11011110111001 | 0b10111110111001 | 0b11111110111001 | 0b10000001111001 | 0b11000001111001 | 0b10100001111001 | 0b11100001111001 | 0b10010001111001 | 0b11010001111001 | 0b10110001111001 | 0b11110001111001 | 0b10001001111001 | 0b11001001111001 | 0b10101001111001 | 0b11101001111001 | 0b10011001111001 | 0b11011001111001 | 0b10111001111001 | 0b11111001111001 | 0b10000101111001 | 0b11000101111001 | 0b10100101111001 | 0b11100101111001 | 0b10010101111001 | 0b11010101111001 | 0b10110101111001 | 0b11110101111001 | 0b10001101111001 | 0b11001101111001 | 0b10101101111001 | 0b11101101111001 | 0b10011101111001 | 0b11011101111001 | 0b10111101111001 | 0b11111101111001 | 0b10000011111001 | 0b11000011111001 | 0b10100011111001 | 0b11100011111001 | 0b10010011111001 | 0b11010011111001 | 0b10110011111001 | 0b11110011111001 | 0b10001011111001 | 0b11001011111001 | 0b10101011111001 | 0b11101011111001 | 0b10011011111001 | 0b11011011111001 | 0b10111011111001 | 0b11111011111001 | 0b10000111111001 | 0b11000111111001 | 0b10100111111001 | 0b11100111111001 | 0b10010111111001 | 0b11010111111001 | 0b10110111111001 | 0b11110111111001 | 0b10001111111001 | 0b11001111111001 | 0b10101111111001 | 0b11101111111001 | 0b10011111111001 | 0b11011111111001 | 0b10111111111001 | 0b11111111111001 | 0b10000000000101 | 0b11000000000101 | 0b10100000000101 | 0b11100000000101 | 0b10010000000101 | 0b11010000000101 | 0b10110000000101 | 0b11110000000101 | 0b10001000000101 | 0b11001000000101 | 0b10101000000101 | 0b11101000000101 | 0b10011000000101 | 0b11011000000101 | 0b10111000000101 | 0b11111000000101 | 0b10000100000101 | 0b11000100000101 | 0b10100100000101 | 0b11100100000101 | 0b10010100000101 | 0b11010100000101 | 0b10110100000101 | 0b11110100000101 | 0b10001100000101 | 0b11001100000101 | 0b10101100000101 | 0b11101100000101 | 0b10011100000101 | 0b11011100000101 | 0b10111100000101 | 0b11111100000101 | 0b10000010000101 | 0b11000010000101 | 0b10100010000101 | 0b11100010000101 | 0b10010010000101 | 0b11010010000101 | 0b10110010000101 | 0b11110010000101 | 0b10001010000101 | 0b11001010000101 | 0b10101010000101 | 0b11101010000101 | 0b10011010000101 | 0b11011010000101 | 0b10111010000101 | 0b11111010000101 | 0b10000110000101 | 0b11000110000101 | 0b10100110000101 | 0b11100110000101 | 0b10010110000101 | 0b11010110000101 | 0b10110110000101 | 0b11110110000101 | 0b10001110000101 | 0b11001110000101 | 0b10101110000101 | 0b11101110000101 | 0b10011110000101 | 0b11011110000101 | 0b10111110000101 | 0b11111110000101 | 0b10000001000101 | 0b11000001000101 | 0b10100001000101 | 0b11100001000101 | 0b10010001000101 | 0b11010001000101 | 0b10110001000101 | 0b11110001000101 | 0b10001001000101 | 0b11001001000101 | 0b10101001000101 | 0b11101001000101 | 0b10011001000101 | 0b11011001000101 | 0b10111001000101 | 0b11111001000101 | 0b10000101000101 | 0b11000101000101 | 0b10100101000101 | 0b11100101000101 | 0b10010101000101 | 0b11010101000101 | 0b10110101000101 | 0b11110101000101 | 0b10001101000101 | 0b11001101000101 | 0b10101101000101 | 0b11101101000101 | 0b10011101000101 | 0b11011101000101 | 0b10111101000101 | 0b11111101000101 | 0b10000011000101 | 0b11000011000101 | 0b10100011000101 | 0b11100011000101 | 0b10010011000101 | 0b11010011000101 | 0b10110011000101 | 0b11110011000101 | 0b10001011000101 | 0b11001011000101 | 0b10101011000101 | 0b11101011000101 | 0b10011011000101 | 0b11011011000101 | 0b10111011000101 | 0b11111011000101 | 0b10000111000101 | 0b11000111000101 | 0b10100111000101 | 0b11100111000101 | 0b10010111000101 | 0b11010111000101 | 0b10110111000101 | 0b11110111000101 | 0b10001111000101 | 0b11001111000101 | 0b10101111000101 | 0b11101111000101 | 0b10011111000101 | 0b11011111000101 | 0b10111111000101 | 0b11111111000101 | 0b10000000100101 | 0b11000000100101 | 0b10100000100101 | 0b11100000100101 | 0b10010000100101 | 0b11010000100101 | 0b10110000100101 | 0b11110000100101 | 0b10001000100101 | 0b11001000100101 | 0b10101000100101 | 0b11101000100101 | 0b10011000100101 | 0b11011000100101 | 0b10111000100101 | 0b11111000100101 | 0b10000100100101 | 0b11000100100101 | 0b10100100100101 | 0b11100100100101 | 0b10010100100101 | 0b11010100100101 | 0b10110100100101 | 0b11110100100101 | 0b10001100100101 | 0b11001100100101 | 0b10101100100101 | 0b11101100100101 | 0b10011100100101 | 0b11011100100101 | 0b10111100100101 | 0b11111100100101 | 0b10000010100101 | 0b11000010100101 | 0b10100010100101 | 0b11100010100101 | 0b10010010100101 | 0b11010010100101 | 0b10110010100101 | 0b11110010100101 | 0b10001010100101 | 0b11001010100101 | 0b10101010100101 | 0b11101010100101 | 0b10011010100101 | 0b11011010100101 | 0b10111010100101 | 0b11111010100101 | 0b10000110100101 | 0b11000110100101 | 0b10100110100101 | 0b11100110100101 | 0b10010110100101 | 0b11010110100101 | 0b10110110100101 | 0b11110110100101 | 0b10001110100101 | 0b11001110100101 | 0b10101110100101 | 0b11101110100101 | 0b10011110100101 | 0b11011110100101 | 0b10111110100101 | 0b11111110100101 | 0b10000001100101 | 0b11000001100101 | 0b10100001100101 | 0b11100001100101 | 0b10010001100101 | 0b11010001100101 | 0b10110001100101 | 0b11110001100101 | 0b10001001100101 | 0b11001001100101 | 0b10101001100101 | 0b11101001100101 | 0b10011001100101 | 0b11011001100101 | 0b10111001100101 | 0b11111001100101 | 0b10000101100101 | 0b11000101100101 | 0b10100101100101 | 0b11100101100101 | 0b10010101100101 | 0b11010101100101 | 0b10110101100101 | 0b11110101100101 | 0b10001101100101 | 0b11001101100101 | 0b10101101100101 | 0b11101101100101 | 0b10011101100101 | 0b11011101100101 | 0b10111101100101 | 0b11111101100101 | 0b10000011100101 | 0b11000011100101 | 0b10100011100101 | 0b11100011100101 | 0b10010011100101 | 0b11010011100101 | 0b10110011100101 | 0b11110011100101 | 0b10001011100101 | 0b11001011100101 | 0b10101011100101 | 0b11101011100101 | 0b10011011100101 | 0b11011011100101 | 0b10111011100101 | 0b11111011100101 | 0b10000111100101 | 0b11000111100101 | 0b10100111100101 | 0b11100111100101 | 0b10010111100101 | 0b11010111100101 | 0b10110111100101 | 0b11110111100101 | 0b10001111100101 | 0b11001111100101 | 0b10101111100101 | 0b11101111100101 | 0b10011111100101 | 0b11011111100101 | 0b10111111100101 | 0b11111111100101 | 0b10000000010101 | 0b11000000010101 | 0b10100000010101 | 0b11100000010101 | 0b10010000010101 | 0b11010000010101 | 0b10110000010101 | 0b11110000010101 | 0b10001000010101 | 0b11001000010101 | 0b10101000010101 | 0b11101000010101 | 0b10011000010101 | 0b11011000010101 | 0b10111000010101 | 0b11111000010101 | 0b10000100010101 | 0b11000100010101 | 0b10100100010101 | 0b11100100010101 | 0b10010100010101 | 0b11010100010101 | 0b10110100010101 | 0b11110100010101 | 0b10001100010101 | 0b11001100010101 | 0b10101100010101 | 0b11101100010101 | 0b10011100010101 | 0b11011100010101 | 0b10111100010101 | 0b11111100010101 | 0b10000010010101 | 0b11000010010101 | 0b10100010010101 | 0b11100010010101 | 0b10010010010101 | 0b11010010010101 | 0b10110010010101 | 0b11110010010101 | 0b10001010010101 | 0b11001010010101 | 0b10101010010101 | 0b11101010010101 | 0b10011010010101 | 0b11011010010101 | 0b10111010010101 | 0b11111010010101 | 0b10000110010101 | 0b11000110010101 | 0b10100110010101 | 0b11100110010101 | 0b10010110010101 | 0b11010110010101 | 0b10110110010101 | 0b11110110010101 | 0b10001110010101 | 0b11001110010101 | 0b10101110010101 | 0b11101110010101 | 0b10011110010101 | 0b11011110010101 | 0b10111110010101 | 0b11111110010101 | 0b10000001010101 | 0b11000001010101 | 0b10100001010101 | 0b11100001010101 | 0b10010001010101 | 0b11010001010101 | 0b10110001010101 | 0b11110001010101 | 0b10001001010101 | 0b11001001010101 | 0b10101001010101 | 0b11101001010101 | 0b10011001010101 | 0b11011001010101 | 0b10111001010101 | 0b11111001010101 | 0b10000101010101 | 0b11000101010101 | 0b10100101010101 | 0b11100101010101 | 0b10010101010101 | 0b11010101010101 | 0b10110101010101 | 0b11110101010101 | 0b10001101010101 | 0b11001101010101 | 0b10101101010101 | 0b11101101010101 | 0b10011101010101 | 0b11011101010101 | 0b10111101010101 | 0b11111101010101 | 0b10000011010101 | 0b11000011010101 | 0b10100011010101 | 0b11100011010101 | 0b10010011010101 | 0b11010011010101 | 0b10110011010101 | 0b11110011010101 | 0b10001011010101 | 0b11001011010101 | 0b10101011010101 | 0b11101011010101 | 0b10011011010101 | 0b11011011010101 | 0b10111011010101 | 0b11111011010101 | 0b10000111010101 | 0b11000111010101 | 0b10100111010101 | 0b11100111010101 | 0b10010111010101 | 0b11010111010101 | 0b10110111010101 | 0b11110111010101 | 0b10001111010101 | 0b11001111010101 | 0b10101111010101 | 0b11101111010101 | 0b10011111010101 | 0b11011111010101 | 0b10111111010101 | 0b11111111010101 | 0b10000000110101 | 0b11000000110101 | 0b10100000110101 | 0b11100000110101 | 0b10010000110101 | 0b11010000110101 | 0b10110000110101 | 0b11110000110101 | 0b10001000110101 | 0b11001000110101 | 0b10101000110101 | 0b11101000110101 | 0b10011000110101 | 0b11011000110101 | 0b10111000110101 | 0b11111000110101 | 0b10000100110101 | 0b11000100110101 | 0b10100100110101 | 0b11100100110101 | 0b10010100110101 | 0b11010100110101 | 0b10110100110101 | 0b11110100110101 | 0b10001100110101 | 0b11001100110101 | 0b10101100110101 | 0b11101100110101 | 0b10011100110101 | 0b11011100110101 | 0b10111100110101 | 0b11111100110101 | 0b10000010110101 | 0b11000010110101 | 0b10100010110101 | 0b11100010110101 | 0b10010010110101 | 0b11010010110101 | 0b10110010110101 | 0b11110010110101 | 0b10001010110101 | 0b11001010110101 | 0b10101010110101 | 0b11101010110101 | 0b10011010110101 | 0b11011010110101 | 0b10111010110101 | 0b11111010110101 | 0b10000110110101 | 0b11000110110101 | 0b10100110110101 | 0b11100110110101 | 0b10010110110101 | 0b11010110110101 | 0b10110110110101 | 0b11110110110101 | 0b10001110110101 | 0b11001110110101 | 0b10101110110101 | 0b11101110110101 | 0b10011110110101 | 0b11011110110101 | 0b10111110110101 | 0b11111110110101 | 0b10000001110101 | 0b11000001110101 | 0b10100001110101 | 0b11100001110101 | 0b10010001110101 | 0b11010001110101 | 0b10110001110101 | 0b11110001110101 | 0b10001001110101 | 0b11001001110101 | 0b10101001110101 | 0b11101001110101 | 0b10011001110101 | 0b11011001110101 | 0b10111001110101 | 0b11111001110101 | 0b10000101110101 | 0b11000101110101 | 0b10100101110101 | 0b11100101110101 | 0b10010101110101 | 0b11010101110101 | 0b10110101110101 | 0b11110101110101 | 0b10001101110101 | 0b11001101110101 | 0b10101101110101 | 0b11101101110101 | 0b10011101110101 | 0b11011101110101 | 0b10111101110101 | 0b11111101110101 | 0b10000011110101 | 0b11000011110101 | 0b10100011110101 | 0b11100011110101 | 0b10010011110101 | 0b11010011110101 | 0b10110011110101 | 0b11110011110101 | 0b10001011110101 | 0b11001011110101 | 0b10101011110101 | 0b11101011110101 | 0b10011011110101 | 0b11011011110101 | 0b10111011110101 | 0b11111011110101 | 0b10000111110101 | 0b11000111110101 | 0b10100111110101 | 0b11100111110101 | 0b10010111110101 | 0b11010111110101 | 0b10110111110101 | 0b11110111110101 | 0b10001111110101 | 0b11001111110101 | 0b10101111110101 | 0b11101111110101 | 0b10011111110101 | 0b11011111110101 | 0b10111111110101 | 0b11111111110101 | 0b10000000001101 | 0b11000000001101 | 0b10100000001101 | 0b11100000001101 | 0b10010000001101 | 0b11010000001101 | 0b10110000001101 | 0b11110000001101 | 0b10001000001101 | 0b11001000001101 | 0b10101000001101 | 0b11101000001101 | 0b10011000001101 | 0b11011000001101 | 0b10111000001101 | 0b11111000001101 | 0b10000100001101 | 0b11000100001101 | 0b10100100001101 | 0b11100100001101 | 0b10010100001101 | 0b11010100001101 | 0b10110100001101 | 0b11110100001101 | 0b10001100001101 | 0b11001100001101 | 0b10101100001101 | 0b11101100001101 | 0b10011100001101 | 0b11011100001101 | 0b10111100001101 | 0b11111100001101 | 0b10000010001101 | 0b11000010001101 | 0b10100010001101 | 0b11100010001101 | 0b10010010001101 | 0b11010010001101 | 0b10110010001101 | 0b11110010001101 | 0b10001010001101 | 0b11001010001101 | 0b10101010001101 | 0b11101010001101 | 0b10011010001101 | 0b11011010001101 | 0b10111010001101 | 0b11111010001101 | 0b10000110001101 | 0b11000110001101 | 0b10100110001101 | 0b11100110001101 | 0b10010110001101 | 0b11010110001101 | 0b10110110001101 | 0b11110110001101 | 0b10001110001101 | 0b11001110001101 | 0b10101110001101 | 0b11101110001101 | 0b10011110001101 | 0b11011110001101 | 0b10111110001101 | 0b11111110001101 | 0b10000001001101 | 0b11000001001101 | 0b10100001001101 | 0b11100001001101 | 0b10010001001101 | 0b11010001001101 | 0b10110001001101 | 0b11110001001101 | 0b10001001001101 | 0b11001001001101 | 0b10101001001101 | 0b11101001001101 | 0b10011001001101 | 0b11011001001101 | 0b10111001001101 | 0b11111001001101 | 0b10000101001101 | 0b11000101001101 | 0b10100101001101 | 0b11100101001101 | 0b10010101001101 | 0b11010101001101 | 0b10110101001101 | 0b11110101001101 | 0b10001101001101 | 0b11001101001101 | 0b10101101001101 | 0b11101101001101 | 0b10011101001101 | 0b11011101001101 | 0b10111101001101 | 0b11111101001101 | 0b10000011001101 | 0b11000011001101 | 0b10100011001101 | 0b11100011001101 | 0b10010011001101 | 0b11010011001101 | 0b10110011001101 | 0b11110011001101 | 0b10001011001101 | 0b11001011001101 | 0b10101011001101 | 0b11101011001101 | 0b10011011001101 | 0b11011011001101 | 0b10111011001101 | 0b11111011001101 | 0b10000111001101 | 0b11000111001101 | 0b10100111001101 | 0b11100111001101 | 0b10010111001101 | 0b11010111001101 | 0b10110111001101 | 0b11110111001101 | 0b10001111001101 | 0b11001111001101 | 0b10101111001101 | 0b11101111001101 | 0b10011111001101 | 0b11011111001101 | 0b10111111001101 | 0b11111111001101 | 0b10000000101101 | 0b11000000101101 | 0b10100000101101 | 0b11100000101101 | 0b10010000101101 | 0b11010000101101 | 0b10110000101101 | 0b11110000101101 | 0b10001000101101 | 0b11001000101101 | 0b10101000101101 | 0b11101000101101 | 0b10011000101101 | 0b11011000101101 | 0b10111000101101 | 0b11111000101101 | 0b10000100101101 | 0b11000100101101 | 0b10100100101101 | 0b11100100101101 | 0b10010100101101 | 0b11010100101101 | 0b10110100101101 | 0b11110100101101 | 0b10001100101101 | 0b11001100101101 | 0b10101100101101 | 0b11101100101101 | 0b10011100101101 | 0b11011100101101 | 0b10111100101101 | 0b11111100101101 | 0b10000010101101 | 0b11000010101101 | 0b10100010101101 | 0b11100010101101 | 0b10010010101101 | 0b11010010101101 | 0b10110010101101 | 0b11110010101101 | 0b10001010101101 | 0b11001010101101 | 0b10101010101101 | 0b11101010101101 | 0b10011010101101 | 0b11011010101101 | 0b10111010101101 | 0b11111010101101 | 0b10000110101101 | 0b11000110101101 | 0b10100110101101 | 0b11100110101101 | 0b10010110101101 | 0b11010110101101 | 0b10110110101101 | 0b11110110101101 | 0b10001110101101 | 0b11001110101101 | 0b10101110101101 | 0b11101110101101 | 0b10011110101101 | 0b11011110101101 | 0b10111110101101 | 0b11111110101101 | 0b10000001101101 | 0b11000001101101 | 0b10100001101101 | 0b11100001101101 | 0b10010001101101 | 0b11010001101101 | 0b10110001101101 | 0b11110001101101 | 0b10001001101101 | 0b11001001101101 | 0b10101001101101 | 0b11101001101101 | 0b10011001101101 | 0b11011001101101 | 0b10111001101101 | 0b11111001101101 | 0b10000101101101 | 0b11000101101101 | 0b10100101101101 | 0b11100101101101 | 0b10010101101101 | 0b11010101101101 | 0b10110101101101 | 0b11110101101101 | 0b10001101101101 | 0b11001101101101 | 0b10101101101101 | 0b11101101101101 | 0b10011101101101 | 0b11011101101101 | 0b10111101101101 | 0b11111101101101 | 0b10000011101101 | 0b11000011101101 | 0b10100011101101 | 0b11100011101101 | 0b10010011101101 | 0b11010011101101 | 0b10110011101101 | 0b11110011101101 | 0b10001011101101 | 0b11001011101101 | 0b10101011101101 | 0b11101011101101 | 0b10011011101101 | 0b11011011101101 | 0b10111011101101 | 0b11111011101101 | 0b10000111101101 | 0b11000111101101 | 0b10100111101101 | 0b11100111101101 | 0b10010111101101 | 0b11010111101101 | 0b10110111101101 | 0b11110111101101 | 0b10001111101101 | 0b11001111101101 | 0b10101111101101 | 0b11101111101101 | 0b10011111101101 | 0b11011111101101 | 0b10111111101101 | 0b11111111101101 | 0b10000000011101 | 0b11000000011101 | 0b10100000011101 | 0b11100000011101 | 0b10010000011101 | 0b11010000011101 | 0b10110000011101 | 0b11110000011101 | 0b10001000011101 | 0b11001000011101 | 0b10101000011101 | 0b11101000011101 | 0b10011000011101 | 0b11011000011101 | 0b10111000011101 | 0b11111000011101 | 0b10000100011101 | 0b11000100011101 | 0b10100100011101 | 0b11100100011101 | 0b10010100011101 | 0b11010100011101 | 0b10110100011101 | 0b11110100011101 | 0b10001100011101 | 0b11001100011101 | 0b10101100011101 | 0b11101100011101 | 0b10011100011101 | 0b11011100011101 | 0b10111100011101 | 0b11111100011101 | 0b10000010011101 | 0b11000010011101 | 0b10100010011101 | 0b11100010011101 | 0b10010010011101 | 0b11010010011101 | 0b10110010011101 | 0b11110010011101 | 0b10001010011101 | 0b11001010011101 | 0b10101010011101 | 0b11101010011101 | 0b10011010011101 | 0b11011010011101 | 0b10111010011101 | 0b11111010011101 | 0b10000110011101 | 0b11000110011101 | 0b10100110011101 | 0b11100110011101 | 0b10010110011101 | 0b11010110011101 | 0b10110110011101 | 0b11110110011101 | 0b10001110011101 | 0b11001110011101 | 0b10101110011101 | 0b11101110011101 | 0b10011110011101 | 0b11011110011101 | 0b10111110011101 | 0b11111110011101 | 0b10000001011101 | 0b11000001011101 | 0b10100001011101 | 0b11100001011101 | 0b10010001011101 | 0b11010001011101 | 0b10110001011101 | 0b11110001011101 | 0b10001001011101 | 0b11001001011101 | 0b10101001011101 | 0b11101001011101 | 0b10011001011101 | 0b11011001011101 | 0b10111001011101 | 0b11111001011101 | 0b10000101011101 | 0b11000101011101 | 0b10100101011101 | 0b11100101011101 | 0b10010101011101 | 0b11010101011101 | 0b10110101011101 | 0b11110101011101 | 0b10001101011101 | 0b11001101011101 | 0b10101101011101 | 0b11101101011101 | 0b10011101011101 | 0b11011101011101 | 0b10111101011101 | 0b11111101011101 | 0b10000011011101 | 0b11000011011101 | 0b10100011011101 | 0b11100011011101 | 0b10010011011101 | 0b11010011011101 | 0b10110011011101 | 0b11110011011101 | 0b10001011011101 | 0b11001011011101 | 0b10101011011101 | 0b11101011011101 | 0b10011011011101 | 0b11011011011101 | 0b10111011011101 | 0b11111011011101 | 0b10000111011101 | 0b11000111011101 | 0b10100111011101 | 0b11100111011101 | 0b10010111011101 | 0b11010111011101 | 0b10110111011101 | 0b11110111011101 | 0b10001111011101 | 0b11001111011101 | 0b10101111011101 | 0b11101111011101 | 0b10011111011101 | 0b11011111011101 | 0b10111111011101 | 0b11111111011101 | 0b10000000111101 | 0b11000000111101 | 0b10100000111101 | 0b11100000111101 | 0b10010000111101 | 0b11010000111101 | 0b10110000111101 | 0b11110000111101 | 0b10001000111101 | 0b11001000111101 | 0b10101000111101 | 0b11101000111101 | 0b10011000111101 | 0b11011000111101 | 0b10111000111101 | 0b11111000111101 | 0b10000100111101 | 0b11000100111101 | 0b10100100111101 | 0b11100100111101 | 0b10010100111101 | 0b11010100111101 | 0b10110100111101 | 0b11110100111101 | 0b10001100111101 | 0b11001100111101 | 0b10101100111101 | 0b11101100111101 | 0b10011100111101 | 0b11011100111101 | 0b10111100111101 | 0b11111100111101 | 0b10000010111101 | 0b11000010111101 | 0b10100010111101 | 0b11100010111101 | 0b10010010111101 | 0b11010010111101 | 0b10110010111101 | 0b11110010111101 | 0b10001010111101 | 0b11001010111101 | 0b10101010111101 | 0b11101010111101 | 0b10011010111101 | 0b11011010111101 | 0b10111010111101 | 0b11111010111101 | 0b10000110111101 | 0b11000110111101 | 0b10100110111101 | 0b11100110111101 | 0b10010110111101 | 0b11010110111101 | 0b10110110111101 | 0b11110110111101 | 0b10001110111101 | 0b11001110111101 | 0b10101110111101 | 0b11101110111101 | 0b10011110111101 | 0b11011110111101 | 0b10111110111101 | 0b11111110111101 | 0b10000001111101 | 0b11000001111101 | 0b10100001111101 | 0b11100001111101 | 0b10010001111101 | 0b11010001111101 | 0b10110001111101 | 0b11110001111101 | 0b10001001111101 | 0b11001001111101 | 0b10101001111101 | 0b11101001111101 | 0b10011001111101 | 0b11011001111101 | 0b10111001111101 | 0b11111001111101 | 0b10000101111101 | 0b11000101111101 | 0b10100101111101 | 0b11100101111101 | 0b10010101111101 | 0b11010101111101 | 0b10110101111101 | 0b11110101111101 | 0b10001101111101 | 0b11001101111101 | 0b10101101111101 | 0b11101101111101 | 0b10011101111101 | 0b11011101111101 | 0b10111101111101 | 0b11111101111101 | 0b10000011111101 | 0b11000011111101 | 0b10100011111101 | 0b11100011111101 | 0b10010011111101 | 0b11010011111101 | 0b10110011111101 | 0b11110011111101 | 0b10001011111101 | 0b11001011111101 | 0b10101011111101 | 0b11101011111101 | 0b10011011111101 | 0b11011011111101 | 0b10111011111101 | 0b11111011111101 | 0b10000111111101 | 0b11000111111101 | 0b10100111111101 | 0b11100111111101 | 0b10010111111101 | 0b11010111111101 | 0b10110111111101 | 0b11110111111101 | 0b10001111111101 | 0b11001111111101 | 0b10101111111101 | 0b11101111111101 | 0b10011111111101 | 0b11011111111101 | 0b10111111111101 | 0b11111111111101 | 0b10000000000011 | 0b11000000000011 | 0b10100000000011 | 0b11100000000011 | 0b10010000000011 | 0b11010000000011 | 0b10110000000011 | 0b11110000000011 | 0b10001000000011 | 0b11001000000011 | 0b10101000000011 | 0b11101000000011 | 0b10011000000011 | 0b11011000000011 | 0b10111000000011 | 0b11111000000011 | 0b10000100000011 | 0b11000100000011 | 0b10100100000011 | 0b11100100000011 | 0b10010100000011 | 0b11010100000011 | 0b10110100000011 | 0b11110100000011 | 0b10001100000011 | 0b11001100000011 | 0b10101100000011 | 0b11101100000011 | 0b10011100000011 | 0b11011100000011 | 0b10111100000011 | 0b11111100000011 | 0b10000010000011 | 0b11000010000011 | 0b10100010000011 | 0b11100010000011 | 0b10010010000011 | 0b11010010000011 | 0b10110010000011 | 0b11110010000011 | 0b10001010000011 | 0b11001010000011 | 0b10101010000011 | 0b11101010000011 | 0b10011010000011 | 0b11011010000011 | 0b10111010000011 | 0b11111010000011 | 0b10000110000011 | 0b11000110000011 | 0b10100110000011 | 0b11100110000011 | 0b10010110000011 | 0b11010110000011 | 0b10110110000011 | 0b11110110000011 | 0b10001110000011 | 0b11001110000011 | 0b10101110000011 | 0b11101110000011 | 0b10011110000011 | 0b11011110000011 | 0b10111110000011 | 0b11111110000011 | 0b10000001000011 | 0b11000001000011 | 0b10100001000011 | 0b11100001000011 | 0b10010001000011 | 0b11010001000011 | 0b10110001000011 | 0b11110001000011 | 0b10001001000011 | 0b11001001000011 | 0b10101001000011 | 0b11101001000011 | 0b10011001000011 | 0b11011001000011 | 0b10111001000011 | 0b11111001000011 | 0b10000101000011 | 0b11000101000011 | 0b10100101000011 | 0b11100101000011 | 0b10010101000011 | 0b11010101000011 | 0b10110101000011 | 0b11110101000011 | 0b10001101000011 | 0b11001101000011 | 0b10101101000011 | 0b11101101000011 | 0b10011101000011 | 0b11011101000011 | 0b10111101000011 | 0b11111101000011 | 0b10000011000011 | 0b11000011000011 | 0b10100011000011 | 0b11100011000011 | 0b10010011000011 | 0b11010011000011 | 0b10110011000011 | 0b11110011000011 | 0b10001011000011 | 0b11001011000011 | 0b10101011000011 | 0b11101011000011 | 0b10011011000011 | 0b11011011000011 | 0b10111011000011 | 0b11111011000011 | 0b10000111000011 | 0b11000111000011 | 0b10100111000011 | 0b11100111000011 | 0b10010111000011 | 0b11010111000011 | 0b10110111000011 | 0b11110111000011 | 0b10001111000011 | 0b11001111000011 | 0b10101111000011 | 0b11101111000011 | 0b10011111000011 | 0b11011111000011 | 0b10111111000011 | 0b11111111000011 | 0b10000000100011 | 0b11000000100011 | 0b10100000100011 | 0b11100000100011 | 0b10010000100011 | 0b11010000100011 | 0b10110000100011 | 0b11110000100011 | 0b10001000100011 | 0b11001000100011 | 0b10101000100011 | 0b11101000100011 | 0b10011000100011 | 0b11011000100011 | 0b10111000100011 | 0b11111000100011 | 0b10000100100011 | 0b11000100100011 | 0b10100100100011 | 0b11100100100011 | 0b10010100100011 | 0b11010100100011 | 0b10110100100011 | 0b11110100100011 | 0b10001100100011 | 0b11001100100011 | 0b10101100100011 | 0b11101100100011 | 0b10011100100011 | 0b11011100100011 | 0b10111100100011 | 0b11111100100011 | 0b10000010100011 | 0b11000010100011 | 0b10100010100011 | 0b11100010100011 | 0b10010010100011 | 0b11010010100011 | 0b10110010100011 | 0b11110010100011 | 0b10001010100011 | 0b11001010100011 | 0b10101010100011 | 0b11101010100011 | 0b10011010100011 | 0b11011010100011 | 0b10111010100011 | 0b11111010100011 | 0b10000110100011 | 0b11000110100011 | 0b10100110100011 | 0b11100110100011 | 0b10010110100011 | 0b11010110100011 | 0b10110110100011 | 0b11110110100011 | 0b10001110100011 | 0b11001110100011 | 0b10101110100011 | 0b11101110100011 | 0b10011110100011 | 0b11011110100011 | 0b10111110100011 | 0b11111110100011 | 0b10000001100011 | 0b11000001100011 | 0b10100001100011 | 0b11100001100011 | 0b10010001100011 | 0b11010001100011 | 0b10110001100011 | 0b11110001100011 | 0b10001001100011 | 0b11001001100011 | 0b10101001100011 | 0b11101001100011 | 0b10011001100011 | 0b11011001100011 | 0b10111001100011 | 0b11111001100011 | 0b10000101100011 | 0b11000101100011 | 0b10100101100011 | 0b11100101100011 | 0b10010101100011 | 0b11010101100011 | 0b10110101100011 | 0b11110101100011 | 0b10001101100011 | 0b11001101100011 | 0b10101101100011 | 0b11101101100011 | 0b10011101100011 | 0b11011101100011 | 0b10111101100011 | 0b11111101100011 | 0b10000011100011 | 0b11000011100011 | 0b10100011100011 | 0b11100011100011 | 0b10010011100011 | 0b11010011100011 | 0b10110011100011 | 0b11110011100011 | 0b10001011100011 | 0b11001011100011 | 0b10101011100011 | 0b11101011100011 | 0b10011011100011 | 0b11011011100011 | 0b10111011100011 | 0b11111011100011 | 0b10000111100011 | 0b11000111100011 | 0b10100111100011 | 0b11100111100011 | 0b10010111100011 | 0b11010111100011 | 0b10110111100011 | 0b11110111100011 | 0b10001111100011 | 0b11001111100011 | 0b10101111100011 | 0b11101111100011 | 0b10011111100011 | 0b11011111100011 | 0b10111111100011 | 0b11111111100011 | 0b10000000010011 | 0b11000000010011 | 0b10100000010011 | 0b11100000010011 | 0b10010000010011 | 0b11010000010011 | 0b10110000010011 | 0b11110000010011 | 0b10001000010011 | 0b11001000010011 | 0b10101000010011 | 0b11101000010011 | 0b10011000010011 | 0b11011000010011 | 0b10111000010011 | 0b11111000010011 | 0b10000100010011 | 0b11000100010011 | 0b10100100010011 | 0b11100100010011 | 0b10010100010011 | 0b11010100010011 | 0b10110100010011 | 0b11110100010011 | 0b10001100010011 | 0b11001100010011 | 0b10101100010011 | 0b11101100010011 | 0b10011100010011 | 0b11011100010011 | 0b10111100010011 | 0b11111100010011 | 0b10000010010011 | 0b11000010010011 | 0b10100010010011 | 0b11100010010011 | 0b10010010010011 | 0b11010010010011 | 0b10110010010011 | 0b11110010010011 | 0b10001010010011 | 0b11001010010011 | 0b10101010010011 | 0b11101010010011 | 0b10011010010011 | 0b11011010010011 | 0b10111010010011 | 0b11111010010011 | 0b10000110010011 | 0b11000110010011 | 0b10100110010011 | 0b11100110010011 | 0b10010110010011 | 0b11010110010011 | 0b10110110010011 | 0b11110110010011 | 0b10001110010011 | 0b11001110010011 | 0b10101110010011 | 0b11101110010011 | 0b10011110010011 | 0b11011110010011 | 0b10111110010011 | 0b11111110010011 | 0b10000001010011 | 0b11000001010011 | 0b10100001010011 | 0b11100001010011 | 0b10010001010011 | 0b11010001010011 | 0b10110001010011 | 0b11110001010011 | 0b10001001010011 | 0b11001001010011 | 0b10101001010011 | 0b11101001010011 | 0b10011001010011 | 0b11011001010011 | 0b10111001010011 | 0b11111001010011 | 0b10000101010011 | 0b11000101010011 | 0b10100101010011 | 0b11100101010011 | 0b10010101010011 | 0b11010101010011 | 0b10110101010011 | 0b11110101010011 | 0b10001101010011 | 0b11001101010011 | 0b10101101010011 | 0b11101101010011 | 0b10011101010011 | 0b11011101010011 | 0b10111101010011 | 0b11111101010011 | 0b10000011010011 | 0b11000011010011 | 0b10100011010011 | 0b11100011010011 | 0b10010011010011 | 0b11010011010011 | 0b10110011010011 | 0b11110011010011 | 0b10001011010011 | 0b11001011010011 | 0b10101011010011 | 0b11101011010011 | 0b10011011010011 | 0b11011011010011 | 0b10111011010011 | 0b11111011010011 | 0b10000111010011 | 0b11000111010011 | 0b10100111010011 | 0b11100111010011 | 0b10010111010011 | 0b11010111010011 | 0b10110111010011 | 0b11110111010011 | 0b10001111010011 | 0b11001111010011 | 0b10101111010011 | 0b11101111010011 | 0b10011111010011 | 0b11011111010011 | 0b10111111010011 | 0b11111111010011 | 0b10000000110011 | 0b11000000110011 | 0b10100000110011 | 0b11100000110011 | 0b10010000110011 | 0b11010000110011 | 0b10110000110011 | 0b11110000110011 | 0b10001000110011 | 0b11001000110011 | 0b10101000110011 | 0b11101000110011 | 0b10011000110011 | 0b11011000110011 | 0b10111000110011 | 0b11111000110011 | 0b10000100110011 | 0b11000100110011 | 0b10100100110011 | 0b11100100110011 | 0b10010100110011 | 0b11010100110011 | 0b10110100110011 | 0b11110100110011 | 0b10001100110011 | 0b11001100110011 | 0b10101100110011 | 0b11101100110011 | 0b10011100110011 | 0b11011100110011 | 0b10111100110011 | 0b11111100110011 | 0b10000010110011 | 0b11000010110011 | 0b10100010110011 | 0b11100010110011 | 0b10010010110011 | 0b11010010110011 | 0b10110010110011 | 0b11110010110011 | 0b10001010110011 | 0b11001010110011 | 0b10101010110011 | 0b11101010110011 | 0b10011010110011 | 0b11011010110011 | 0b10111010110011 | 0b11111010110011 | 0b10000110110011 | 0b11000110110011 | 0b10100110110011 | 0b11100110110011 | 0b10010110110011 | 0b11010110110011 | 0b10110110110011 | 0b11110110110011 | 0b10001110110011 | 0b11001110110011 | 0b10101110110011 | 0b11101110110011 | 0b10011110110011 | 0b11011110110011 | 0b10111110110011 | 0b11111110110011 | 0b10000001110011 | 0b11000001110011 | 0b10100001110011 | 0b11100001110011 | 0b10010001110011 | 0b11010001110011 | 0b10110001110011 | 0b11110001110011 | 0b10001001110011 | 0b11001001110011 | 0b10101001110011 | 0b11101001110011 | 0b10011001110011 | 0b11011001110011 | 0b10111001110011 | 0b11111001110011 | 0b10000101110011 | 0b11000101110011 | 0b10100101110011 | 0b11100101110011 | 0b10010101110011 | 0b11010101110011 | 0b10110101110011 | 0b11110101110011 | 0b10001101110011 | 0b11001101110011 | 0b10101101110011 | 0b11101101110011 | 0b10011101110011 | 0b11011101110011 | 0b10111101110011 | 0b11111101110011 | 0b10000011110011 | 0b11000011110011 | 0b10100011110011 | 0b11100011110011 | 0b10010011110011 | 0b11010011110011 | 0b10110011110011 | 0b11110011110011 | 0b10001011110011 | 0b11001011110011 | 0b10101011110011 | 0b11101011110011 | 0b10011011110011 | 0b11011011110011 | 0b10111011110011 | 0b11111011110011 | 0b10000111110011 | 0b11000111110011 | 0b10100111110011 | 0b11100111110011 | 0b10010111110011 | 0b11010111110011 | 0b10110111110011 | 0b11110111110011 | 0b10001111110011 | 0b11001111110011 | 0b10101111110011 | 0b11101111110011 | 0b10011111110011 | 0b11011111110011 | 0b10111111110011 | 0b11111111110011 | 0b10000000001011 | 0b11000000001011 | 0b10100000001011 | 0b11100000001011 | 0b10010000001011 | 0b11010000001011 | 0b10110000001011 | 0b11110000001011 | 0b10001000001011 | 0b11001000001011 | 0b10101000001011 | 0b11101000001011 | 0b10011000001011 | 0b11011000001011 | 0b10111000001011 | 0b11111000001011 | 0b10000100001011 | 0b11000100001011 | 0b10100100001011 | 0b11100100001011 | 0b10010100001011 | 0b11010100001011 | 0b10110100001011 | 0b11110100001011 | 0b10001100001011 | 0b11001100001011 | 0b10101100001011 | 0b11101100001011 | 0b10011100001011 | 0b11011100001011 | 0b10111100001011 | 0b11111100001011 | 0b10000010001011 | 0b11000010001011 | 0b10100010001011 | 0b11100010001011 | 0b10010010001011 | 0b11010010001011 | 0b10110010001011 | 0b11110010001011 | 0b10001010001011 | 0b11001010001011 | 0b10101010001011 | 0b11101010001011 | 0b10011010001011 | 0b11011010001011 | 0b10111010001011 | 0b11111010001011 | 0b10000110001011 | 0b11000110001011 | 0b10100110001011 | 0b11100110001011 | 0b10010110001011 | 0b11010110001011 | 0b10110110001011 | 0b11110110001011 | 0b10001110001011 | 0b11001110001011 | 0b10101110001011 | 0b11101110001011 | 0b10011110001011 | 0b11011110001011 | 0b10111110001011 | 0b11111110001011 | 0b10000001001011 | 0b11000001001011 | 0b10100001001011 | 0b11100001001011 | 0b10010001001011 | 0b11010001001011 | 0b10110001001011 | 0b11110001001011 | 0b10001001001011 | 0b11001001001011 | 0b10101001001011 | 0b11101001001011 | 0b10011001001011 | 0b11011001001011 | 0b10111001001011 | 0b11111001001011 | 0b10000101001011 | 0b11000101001011 | 0b10100101001011 | 0b11100101001011 | 0b10010101001011 | 0b11010101001011 | 0b10110101001011 | 0b11110101001011 | 0b10001101001011 | 0b11001101001011 | 0b10101101001011 | 0b11101101001011 | 0b10011101001011 | 0b11011101001011 | 0b10111101001011 | 0b11111101001011 | 0b10000011001011 | 0b11000011001011 | 0b10100011001011 | 0b11100011001011 | 0b10010011001011 | 0b11010011001011 | 0b10110011001011 | 0b11110011001011 | 0b10001011001011 | 0b11001011001011 | 0b10101011001011 | 0b11101011001011 | 0b10011011001011 | 0b11011011001011 | 0b10111011001011 | 0b11111011001011 | 0b10000111001011 | 0b11000111001011 | 0b10100111001011 | 0b11100111001011 | 0b10010111001011 | 0b11010111001011 | 0b10110111001011 | 0b11110111001011 | 0b10001111001011 | 0b11001111001011 | 0b10101111001011 | 0b11101111001011 | 0b10011111001011 | 0b11011111001011 | 0b10111111001011 | 0b11111111001011 | 0b10000000101011 | 0b11000000101011 | 0b10100000101011 | 0b11100000101011 | 0b10010000101011 | 0b11010000101011 | 0b10110000101011 | 0b11110000101011 | 0b10001000101011 | 0b11001000101011 | 0b10101000101011 | 0b11101000101011 | 0b10011000101011 | 0b11011000101011 | 0b10111000101011 | 0b11111000101011 | 0b10000100101011 | 0b11000100101011 | 0b10100100101011 | 0b11100100101011 | 0b10010100101011 | 0b11010100101011 | 0b10110100101011 | 0b11110100101011 | 0b10001100101011 | 0b11001100101011 | 0b10101100101011 | 0b11101100101011 | 0b10011100101011 | 0b11011100101011 | 0b10111100101011 | 0b11111100101011 | 0b10000010101011 | 0b11000010101011 | 0b10100010101011 | 0b11100010101011 | 0b10010010101011 | 0b11010010101011 | 0b10110010101011 | 0b11110010101011 | 0b10001010101011 | 0b11001010101011 | 0b10101010101011 | 0b11101010101011 | 0b10011010101011 | 0b11011010101011 | 0b10111010101011 | 0b11111010101011 | 0b10000110101011 | 0b11000110101011 | 0b10100110101011 | 0b11100110101011 | 0b10010110101011 | 0b11010110101011 | 0b10110110101011 | 0b11110110101011 | 0b10001110101011 | 0b11001110101011 | 0b10101110101011 | 0b11101110101011 | 0b10011110101011 | 0b11011110101011 | 0b10111110101011 | 0b11111110101011 | 0b10000001101011 | 0b11000001101011 | 0b10100001101011 | 0b11100001101011 | 0b10010001101011 | 0b11010001101011 | 0b10110001101011 | 0b11110001101011 | 0b10001001101011 | 0b11001001101011 | 0b10101001101011 | 0b11101001101011 | 0b10011001101011 | 0b11011001101011 | 0b10111001101011 | 0b11111001101011 | 0b10000101101011 | 0b11000101101011 | 0b10100101101011 | 0b11100101101011 | 0b10010101101011 | 0b11010101101011 | 0b10110101101011 | 0b11110101101011 | 0b10001101101011 | 0b11001101101011 | 0b10101101101011 | 0b11101101101011 | 0b10011101101011 | 0b11011101101011 | 0b10111101101011 | 0b11111101101011 | 0b10000011101011 | 0b11000011101011 | 0b10100011101011 | 0b11100011101011 | 0b10010011101011 | 0b11010011101011 | 0b10110011101011 | 0b11110011101011 | 0b10001011101011 | 0b11001011101011 | 0b10101011101011 | 0b11101011101011 | 0b10011011101011 | 0b11011011101011 | 0b10111011101011 | 0b11111011101011 | 0b10000111101011 | 0b11000111101011 | 0b10100111101011 | 0b11100111101011 | 0b10010111101011 | 0b11010111101011 | 0b10110111101011 | 0b11110111101011 | 0b10001111101011 | 0b11001111101011 | 0b10101111101011 | 0b11101111101011 | 0b10011111101011 | 0b11011111101011 | 0b10111111101011 | 0b11111111101011 | 0b10000000011011 | 0b11000000011011 | 0b10100000011011 | 0b11100000011011 | 0b10010000011011 | 0b11010000011011 | 0b10110000011011 | 0b11110000011011 | 0b10001000011011 | 0b11001000011011 | 0b10101000011011 | 0b11101000011011 | 0b10011000011011 | 0b11011000011011 | 0b10111000011011 | 0b11111000011011 | 0b10000100011011 | 0b11000100011011 | 0b10100100011011 | 0b11100100011011 | 0b10010100011011 | 0b11010100011011 | 0b10110100011011 | 0b11110100011011 | 0b10001100011011 | 0b11001100011011 | 0b10101100011011 | 0b11101100011011 | 0b10011100011011 | 0b11011100011011 | 0b10111100011011 | 0b11111100011011 | 0b10000010011011 | 0b11000010011011 | 0b10100010011011 | 0b11100010011011 | 0b10010010011011 | 0b11010010011011 | 0b10110010011011 | 0b11110010011011 | 0b10001010011011 | 0b11001010011011 | 0b10101010011011 | 0b11101010011011 | 0b10011010011011 | 0b11011010011011 | 0b10111010011011 | 0b11111010011011 | 0b10000110011011 | 0b11000110011011 | 0b10100110011011 | 0b11100110011011 | 0b10010110011011 | 0b11010110011011 | 0b10110110011011 | 0b11110110011011 | 0b10001110011011 | 0b11001110011011 | 0b10101110011011 | 0b11101110011011 | 0b10011110011011 | 0b11011110011011 | 0b10111110011011 | 0b11111110011011 | 0b10000001011011 | 0b11000001011011 | 0b10100001011011 | 0b11100001011011 | 0b10010001011011 | 0b11010001011011 | 0b10110001011011 | 0b11110001011011 | 0b10001001011011 | 0b11001001011011 | 0b10101001011011 | 0b11101001011011 | 0b10011001011011 | 0b11011001011011 | 0b10111001011011 | 0b11111001011011 | 0b10000101011011 | 0b11000101011011 | 0b10100101011011 | 0b11100101011011 | 0b10010101011011 | 0b11010101011011 | 0b10110101011011 | 0b11110101011011 | 0b10001101011011 | 0b11001101011011 | 0b10101101011011 | 0b11101101011011 | 0b10011101011011 | 0b11011101011011 | 0b10111101011011 | 0b11111101011011 | 0b10000011011011 | 0b11000011011011 | 0b10100011011011 | 0b11100011011011 | 0b10010011011011 | 0b11010011011011 | 0b10110011011011 | 0b11110011011011 | 0b10001011011011 | 0b11001011011011 | 0b10101011011011 | 0b11101011011011 | 0b10011011011011 | 0b11011011011011 | 0b10111011011011 | 0b11111011011011 | 0b10000111011011 | 0b11000111011011 | 0b10100111011011 | 0b11100111011011 | 0b10010111011011 | 0b11010111011011 | 0b10110111011011 | 0b11110111011011 | 0b10001111011011 | 0b11001111011011 | 0b10101111011011 | 0b11101111011011 | 0b10011111011011 | 0b11011111011011 | 0b10111111011011 | 0b11111111011011 | 0b10000000111011 | 0b11000000111011 | 0b10100000111011 | 0b11100000111011 | 0b10010000111011 | 0b11010000111011 | 0b10110000111011 | 0b11110000111011 | 0b10001000111011 | 0b11001000111011 | 0b10101000111011 | 0b11101000111011 | 0b10011000111011 | 0b11011000111011 | 0b10111000111011 | 0b11111000111011 | 0b10000100111011 | 0b11000100111011 | 0b10100100111011 | 0b11100100111011 | 0b10010100111011 | 0b11010100111011 | 0b10110100111011 | 0b11110100111011 | 0b10001100111011 | 0b11001100111011 | 0b10101100111011 | 0b11101100111011 | 0b10011100111011 | 0b11011100111011 | 0b10111100111011 | 0b11111100111011 | 0b10000010111011 | 0b11000010111011 | 0b10100010111011 | 0b11100010111011 | 0b10010010111011 | 0b11010010111011 | 0b10110010111011 | 0b11110010111011 | 0b10001010111011 | 0b11001010111011 | 0b10101010111011 | 0b11101010111011 | 0b10011010111011 | 0b11011010111011 | 0b10111010111011 | 0b11111010111011 | 0b10000110111011 | 0b11000110111011 | 0b10100110111011 | 0b11100110111011 | 0b10010110111011 | 0b11010110111011 | 0b10110110111011 | 0b11110110111011 | 0b10001110111011 | 0b11001110111011 | 0b10101110111011 | 0b11101110111011 | 0b10011110111011 | 0b11011110111011 | 0b10111110111011 | 0b11111110111011 | 0b10000001111011 | 0b11000001111011 | 0b10100001111011 | 0b11100001111011 | 0b10010001111011 | 0b11010001111011 | 0b10110001111011 | 0b11110001111011 | 0b10001001111011 | 0b11001001111011 | 0b10101001111011 | 0b11101001111011 | 0b10011001111011 | 0b11011001111011 | 0b10111001111011 | 0b11111001111011 | 0b10000101111011 | 0b11000101111011 | 0b10100101111011 | 0b11100101111011 | 0b10010101111011 | 0b11010101111011 | 0b10110101111011 | 0b11110101111011 | 0b10001101111011 | 0b11001101111011 | 0b10101101111011 | 0b11101101111011 | 0b10011101111011 | 0b11011101111011 | 0b10111101111011 | 0b11111101111011 | 0b10000011111011 | 0b11000011111011 | 0b10100011111011 | 0b11100011111011 | 0b10010011111011 | 0b11010011111011 | 0b10110011111011 | 0b11110011111011 | 0b10001011111011 | 0b11001011111011 | 0b10101011111011 | 0b11101011111011 | 0b10011011111011 | 0b11011011111011 | 0b10111011111011 | 0b11111011111011 | 0b10000111111011 | 0b11000111111011 | 0b10100111111011 | 0b11100111111011 | 0b10010111111011 | 0b11010111111011 | 0b10110111111011 | 0b11110111111011 | 0b10001111111011 | 0b11001111111011 | 0b10101111111011 | 0b11101111111011 | 0b10011111111011 | 0b11011111111011 | 0b10111111111011 | 0b11111111111011 | 0b10000000000111 | 0b11000000000111 | 0b10100000000111 | 0b11100000000111 | 0b10010000000111 | 0b11010000000111 | 0b10110000000111 | 0b11110000000111 | 0b10001000000111 | 0b11001000000111 | 0b10101000000111 | 0b11101000000111 | 0b10011000000111 | 0b11011000000111 | 0b10111000000111 | 0b11111000000111 | 0b10000100000111 | 0b11000100000111 | 0b10100100000111 | 0b11100100000111 | 0b10010100000111 | 0b11010100000111 | 0b10110100000111 | 0b11110100000111 | 0b10001100000111 | 0b11001100000111 | 0b10101100000111 | 0b11101100000111 | 0b10011100000111 | 0b11011100000111 | 0b10111100000111 | 0b11111100000111 | 0b10000010000111 | 0b11000010000111 | 0b10100010000111 | 0b11100010000111 | 0b10010010000111 | 0b11010010000111 | 0b10110010000111 | 0b11110010000111 | 0b10001010000111 | 0b11001010000111 | 0b10101010000111 | 0b11101010000111 | 0b10011010000111 | 0b11011010000111 | 0b10111010000111 | 0b11111010000111 | 0b10000110000111 | 0b11000110000111 | 0b10100110000111 | 0b11100110000111 | 0b10010110000111 | 0b11010110000111 | 0b10110110000111 | 0b11110110000111 | 0b10001110000111 | 0b11001110000111 | 0b10101110000111 | 0b11101110000111 | 0b10011110000111 | 0b11011110000111 | 0b10111110000111 | 0b11111110000111 | 0b10000001000111 | 0b11000001000111 | 0b10100001000111 | 0b11100001000111 | 0b10010001000111 | 0b11010001000111 | 0b10110001000111 | 0b11110001000111 | 0b10001001000111 | 0b11001001000111 | 0b10101001000111 | 0b11101001000111 | 0b10011001000111 | 0b11011001000111 | 0b10111001000111 | 0b11111001000111 | 0b10000101000111 | 0b11000101000111 | 0b10100101000111 | 0b11100101000111 | 0b10010101000111 | 0b11010101000111 | 0b10110101000111 | 0b11110101000111 | 0b10001101000111 | 0b11001101000111 | 0b10101101000111 | 0b11101101000111 | 0b10011101000111 | 0b11011101000111 | 0b10111101000111 | 0b11111101000111 | 0b10000011000111 | 0b11000011000111 | 0b10100011000111 | 0b11100011000111 | 0b10010011000111 | 0b11010011000111 | 0b10110011000111 | 0b11110011000111 | 0b10001011000111 | 0b11001011000111 | 0b10101011000111 | 0b11101011000111 | 0b10011011000111 | 0b11011011000111 | 0b10111011000111 | 0b11111011000111 | 0b10000111000111 | 0b11000111000111 | 0b10100111000111 | 0b11100111000111 | 0b10010111000111 | 0b11010111000111 | 0b10110111000111 | 0b11110111000111 | 0b10001111000111 | 0b11001111000111 | 0b10101111000111 | 0b11101111000111 | 0b10011111000111 | 0b11011111000111 | 0b10111111000111 | 0b11111111000111 | 0b10000000100111 | 0b11000000100111 | 0b10100000100111 | 0b11100000100111 | 0b10010000100111 | 0b11010000100111 | 0b10110000100111 | 0b11110000100111 | 0b10001000100111 | 0b11001000100111 | 0b10101000100111 | 0b11101000100111 | 0b10011000100111 | 0b11011000100111 | 0b10111000100111 | 0b11111000100111 | 0b10000100100111 | 0b11000100100111 | 0b10100100100111 | 0b11100100100111 | 0b10010100100111 | 0b11010100100111 | 0b10110100100111 | 0b11110100100111 | 0b10001100100111 | 0b11001100100111 | 0b10101100100111 | 0b11101100100111 | 0b10011100100111 | 0b11011100100111 | 0b10111100100111 | 0b11111100100111 | 0b10000010100111 | 0b11000010100111 | 0b10100010100111 | 0b11100010100111 | 0b10010010100111 | 0b11010010100111 | 0b10110010100111 | 0b11110010100111 | 0b10001010100111 | 0b11001010100111 | 0b10101010100111 | 0b11101010100111 | 0b10011010100111 | 0b11011010100111 | 0b10111010100111 | 0b11111010100111 | 0b10000110100111 | 0b11000110100111 | 0b10100110100111 | 0b11100110100111 | 0b10010110100111 | 0b11010110100111 | 0b10110110100111 | 0b11110110100111 | 0b10001110100111 | 0b11001110100111 | 0b10101110100111 | 0b11101110100111 | 0b10011110100111 | 0b11011110100111 | 0b10111110100111 | 0b11111110100111 | 0b10000001100111 | 0b11000001100111 | 0b10100001100111 | 0b11100001100111 | 0b10010001100111 | 0b11010001100111 | 0b10110001100111 | 0b11110001100111 | 0b10001001100111 | 0b11001001100111 | 0b10101001100111 | 0b11101001100111 | 0b10011001100111 | 0b11011001100111 | 0b10111001100111 | 0b11111001100111 | 0b10000101100111 | 0b11000101100111 | 0b10100101100111 | 0b11100101100111 | 0b10010101100111 | 0b11010101100111 | 0b10110101100111 | 0b11110101100111 | 0b10001101100111 | 0b11001101100111 | 0b10101101100111 | 0b11101101100111 | 0b10011101100111 | 0b11011101100111 | 0b10111101100111 | 0b11111101100111 | 0b10000011100111 | 0b11000011100111 | 0b10100011100111 | 0b11100011100111 | 0b10010011100111 | 0b11010011100111 | 0b10110011100111 | 0b11110011100111 | 0b10001011100111 | 0b11001011100111 | 0b10101011100111 | 0b11101011100111 | 0b10011011100111 | 0b11011011100111 | 0b10111011100111 | 0b11111011100111 | 0b10000111100111 | 0b11000111100111 | 0b10100111100111 | 0b11100111100111 | 0b10010111100111 | 0b11010111100111 | 0b10110111100111 | 0b11110111100111 | 0b10001111100111 | 0b11001111100111 | 0b10101111100111 | 0b11101111100111 | 0b10011111100111 | 0b11011111100111 | 0b10111111100111 | 0b11111111100111 | 0b10000000010111 | 0b11000000010111 | 0b10100000010111 | 0b11100000010111 | 0b10010000010111 | 0b11010000010111 | 0b10110000010111 | 0b11110000010111 | 0b10001000010111 | 0b11001000010111 | 0b10101000010111 | 0b11101000010111 | 0b10011000010111 | 0b11011000010111 | 0b10111000010111 | 0b11111000010111 | 0b10000100010111 | 0b11000100010111 | 0b10100100010111 | 0b11100100010111 | 0b10010100010111 | 0b11010100010111 | 0b10110100010111 | 0b11110100010111 | 0b10001100010111 | 0b11001100010111 | 0b10101100010111 | 0b11101100010111 | 0b10011100010111 | 0b11011100010111 | 0b10111100010111 | 0b11111100010111 | 0b10000010010111 | 0b11000010010111 | 0b10100010010111 | 0b11100010010111 | 0b10010010010111 | 0b11010010010111 | 0b10110010010111 | 0b11110010010111 | 0b10001010010111 | 0b11001010010111 | 0b10101010010111 | 0b11101010010111 | 0b10011010010111 | 0b11011010010111 | 0b10111010010111 | 0b11111010010111 | 0b10000110010111 | 0b11000110010111 | 0b10100110010111 | 0b11100110010111 | 0b10010110010111 | 0b11010110010111 | 0b10110110010111 | 0b11110110010111 | 0b10001110010111 | 0b11001110010111 | 0b10101110010111 | 0b11101110010111 | 0b10011110010111 | 0b11011110010111 | 0b10111110010111 | 0b11111110010111 | 0b10000001010111 | 0b11000001010111 | 0b10100001010111 | 0b11100001010111 | 0b10010001010111 | 0b11010001010111 | 0b10110001010111 | 0b11110001010111 | 0b10001001010111 | 0b11001001010111 | 0b10101001010111 | 0b11101001010111 | 0b10011001010111 | 0b11011001010111 | 0b10111001010111 | 0b11111001010111 | 0b10000101010111 | 0b11000101010111 | 0b10100101010111 | 0b11100101010111 | 0b10010101010111 | 0b11010101010111 | 0b10110101010111 | 0b11110101010111 | 0b10001101010111 | 0b11001101010111 | 0b10101101010111 | 0b11101101010111 | 0b10011101010111 | 0b11011101010111 | 0b10111101010111 | 0b11111101010111 | 0b10000011010111 | 0b11000011010111 | 0b10100011010111 | 0b11100011010111 | 0b10010011010111 | 0b11010011010111 | 0b10110011010111 | 0b11110011010111 | 0b10001011010111 | 0b11001011010111 | 0b10101011010111 | 0b11101011010111 | 0b10011011010111 | 0b11011011010111 | 0b10111011010111 | 0b11111011010111 | 0b10000111010111 | 0b11000111010111 | 0b10100111010111 | 0b11100111010111 | 0b10010111010111 | 0b11010111010111 | 0b10110111010111 | 0b11110111010111 | 0b10001111010111 | 0b11001111010111 | 0b10101111010111 | 0b11101111010111 | 0b10011111010111 | 0b11011111010111 | 0b10111111010111 | 0b11111111010111 | 0b10000000110111 | 0b11000000110111 | 0b10100000110111 | 0b11100000110111 | 0b10010000110111 | 0b11010000110111 | 0b10110000110111 | 0b11110000110111 | 0b10001000110111 | 0b11001000110111 | 0b10101000110111 | 0b11101000110111 | 0b10011000110111 | 0b11011000110111 | 0b10111000110111 | 0b11111000110111 | 0b10000100110111 | 0b11000100110111 | 0b10100100110111 | 0b11100100110111 | 0b10010100110111 | 0b11010100110111 | 0b10110100110111 | 0b11110100110111 | 0b10001100110111 | 0b11001100110111 | 0b10101100110111 | 0b11101100110111 | 0b10011100110111 | 0b11011100110111 | 0b10111100110111 | 0b11111100110111 | 0b10000010110111 | 0b11000010110111 | 0b10100010110111 | 0b11100010110111 | 0b10010010110111 | 0b11010010110111 | 0b10110010110111 | 0b11110010110111 | 0b10001010110111 | 0b11001010110111 | 0b10101010110111 | 0b11101010110111 | 0b10011010110111 | 0b11011010110111 | 0b10111010110111 | 0b11111010110111 | 0b10000110110111 | 0b11000110110111 | 0b10100110110111 | 0b11100110110111 | 0b10010110110111 | 0b11010110110111 | 0b10110110110111 | 0b11110110110111 | 0b10001110110111 | 0b11001110110111 | 0b10101110110111 | 0b11101110110111 | 0b10011110110111 | 0b11011110110111 | 0b10111110110111 | 0b11111110110111 | 0b10000001110111 | 0b11000001110111 | 0b10100001110111 | 0b11100001110111 | 0b10010001110111 | 0b11010001110111 | 0b10110001110111 | 0b11110001110111 | 0b10001001110111 | 0b11001001110111 | 0b10101001110111 | 0b11101001110111 | 0b10011001110111 | 0b11011001110111 | 0b10111001110111 | 0b11111001110111 | 0b10000101110111 | 0b11000101110111 | 0b10100101110111 | 0b11100101110111 | 0b10010101110111 | 0b11010101110111 | 0b10110101110111 | 0b11110101110111 | 0b10001101110111 | 0b11001101110111 | 0b10101101110111 | 0b11101101110111 | 0b10011101110111 | 0b11011101110111 | 0b10111101110111 | 0b11111101110111 | 0b10000011110111 | 0b11000011110111 | 0b10100011110111 | 0b11100011110111 | 0b10010011110111 | 0b11010011110111 | 0b10110011110111 | 0b11110011110111 | 0b10001011110111 | 0b11001011110111 | 0b10101011110111 | 0b11101011110111 | 0b10011011110111 | 0b11011011110111 | 0b10111011110111 | 0b11111011110111 | 0b10000111110111 | 0b11000111110111 | 0b10100111110111 | 0b11100111110111 | 0b10010111110111 | 0b11010111110111 | 0b10110111110111 | 0b11110111110111 | 0b10001111110111 | 0b11001111110111 | 0b10101111110111 | 0b11101111110111 | 0b10011111110111 | 0b11011111110111 | 0b10111111110111 | 0b11111111110111 | 0b10000000001111 | 0b11000000001111 | 0b10100000001111 | 0b11100000001111 | 0b10010000001111 | 0b11010000001111 | 0b10110000001111 | 0b11110000001111 | 0b10001000001111 | 0b11001000001111 | 0b10101000001111 | 0b11101000001111 | 0b10011000001111 | 0b11011000001111 | 0b10111000001111 | 0b11111000001111 | 0b10000100001111 | 0b11000100001111 | 0b10100100001111 | 0b11100100001111 | 0b10010100001111 | 0b11010100001111 | 0b10110100001111 | 0b11110100001111 | 0b10001100001111 | 0b11001100001111 | 0b10101100001111 | 0b11101100001111 | 0b10011100001111 | 0b11011100001111 | 0b10111100001111 | 0b11111100001111 | 0b10000010001111 | 0b11000010001111 | 0b10100010001111 | 0b11100010001111 | 0b10010010001111 | 0b11010010001111 | 0b10110010001111 | 0b11110010001111 | 0b10001010001111 | 0b11001010001111 | 0b10101010001111 | 0b11101010001111 | 0b10011010001111 | 0b11011010001111 | 0b10111010001111 | 0b11111010001111 | 0b10000110001111 | 0b11000110001111 | 0b10100110001111 | 0b11100110001111 | 0b10010110001111 | 0b11010110001111 | 0b10110110001111 | 0b11110110001111 | 0b10001110001111 | 0b11001110001111 | 0b10101110001111 | 0b11101110001111 | 0b10011110001111 | 0b11011110001111 | 0b10111110001111 | 0b11111110001111 | 0b10000001001111 | 0b11000001001111 | 0b10100001001111 | 0b11100001001111 | 0b10010001001111 | 0b11010001001111 | 0b10110001001111 | 0b11110001001111 | 0b10001001001111 | 0b11001001001111 | 0b10101001001111 | 0b11101001001111 | 0b10011001001111 | 0b11011001001111 | 0b10111001001111 | 0b11111001001111 | 0b10000101001111 | 0b11000101001111 | 0b10100101001111 | 0b11100101001111 | 0b10010101001111 | 0b11010101001111 | 0b10110101001111 | 0b11110101001111 | 0b10001101001111 | 0b11001101001111 | 0b10101101001111 | 0b11101101001111 | 0b10011101001111 | 0b11011101001111 | 0b10111101001111 | 0b11111101001111 | 0b10000011001111 | 0b11000011001111 | 0b10100011001111 | 0b11100011001111 | 0b10010011001111 | 0b11010011001111 | 0b10110011001111 | 0b11110011001111 | 0b10001011001111 | 0b11001011001111 | 0b10101011001111 | 0b11101011001111 | 0b10011011001111 | 0b11011011001111 | 0b10111011001111 | 0b11111011001111 | 0b10000111001111 | 0b11000111001111 | 0b10100111001111 | 0b11100111001111 | 0b10010111001111 | 0b11010111001111 | 0b10110111001111 | 0b11110111001111 | 0b10001111001111 | 0b11001111001111 | 0b10101111001111 | 0b11101111001111 | 0b10011111001111 | 0b11011111001111 | 0b10111111001111 | 0b11111111001111 | 0b10000000101111 | 0b11000000101111 | 0b10100000101111 | 0b11100000101111 | 0b10010000101111 | 0b11010000101111 | 0b10110000101111 | 0b11110000101111 | 0b10001000101111 | 0b11001000101111 | 0b10101000101111 | 0b11101000101111 | 0b10011000101111 | 0b11011000101111 | 0b10111000101111 | 0b11111000101111 | 0b10000100101111 | 0b11000100101111 | 0b10100100101111 | 0b11100100101111 | 0b10010100101111 | 0b11010100101111 | 0b10110100101111 | 0b11110100101111 | 0b10001100101111 | 0b11001100101111 | 0b10101100101111 | 0b11101100101111 | 0b10011100101111 | 0b11011100101111 | 0b10111100101111 | 0b11111100101111 | 0b10000010101111 | 0b11000010101111 | 0b10100010101111 | 0b11100010101111 | 0b10010010101111 | 0b11010010101111 | 0b10110010101111 | 0b11110010101111 | 0b10001010101111 | 0b11001010101111 | 0b10101010101111 | 0b11101010101111 | 0b10011010101111 | 0b11011010101111 | 0b10111010101111 | 0b11111010101111 | 0b10000110101111 | 0b11000110101111 | 0b10100110101111 | 0b11100110101111 | 0b10010110101111 | 0b11010110101111 | 0b10110110101111 | 0b11110110101111 | 0b10001110101111 | 0b11001110101111 | 0b10101110101111 | 0b11101110101111 | 0b10011110101111 | 0b11011110101111 | 0b10111110101111 | 0b11111110101111 | 0b10000001101111 | 0b11000001101111 | 0b10100001101111 | 0b11100001101111 | 0b10010001101111 | 0b11010001101111 | 0b10110001101111 | 0b11110001101111 | 0b10001001101111 | 0b11001001101111 | 0b10101001101111 | 0b11101001101111 | 0b10011001101111 | 0b11011001101111 | 0b10111001101111 | 0b11111001101111 | 0b10000101101111 | 0b11000101101111 | 0b10100101101111 | 0b11100101101111 | 0b10010101101111 | 0b11010101101111 | 0b10110101101111 | 0b11110101101111 | 0b10001101101111 | 0b11001101101111 | 0b10101101101111 | 0b11101101101111 | 0b10011101101111 | 0b11011101101111 | 0b10111101101111 | 0b11111101101111 | 0b10000011101111 | 0b11000011101111 | 0b10100011101111 | 0b11100011101111 | 0b10010011101111 | 0b11010011101111 | 0b10110011101111 | 0b11110011101111 | 0b10001011101111 | 0b11001011101111 | 0b10101011101111 | 0b11101011101111 | 0b10011011101111 | 0b11011011101111 | 0b10111011101111 | 0b11111011101111 | 0b10000111101111 | 0b11000111101111 | 0b10100111101111 | 0b11100111101111 | 0b10010111101111 | 0b11010111101111 | 0b10110111101111 | 0b11110111101111 | 0b10001111101111 | 0b11001111101111 | 0b10101111101111 | 0b11101111101111 | 0b10011111101111 | 0b11011111101111 | 0b10111111101111 | 0b11111111101111 | 0b10000000011111 | 0b11000000011111 | 0b10100000011111 | 0b11100000011111 | 0b10010000011111 | 0b11010000011111 | 0b10110000011111 | 0b11110000011111 | 0b10001000011111 | 0b11001000011111 | 0b10101000011111 | 0b11101000011111 | 0b10011000011111 | 0b11011000011111 | 0b10111000011111 | 0b11111000011111 | 0b10000100011111 | 0b11000100011111 | 0b10100100011111 | 0b11100100011111 | 0b10010100011111 | 0b11010100011111 | 0b10110100011111 | 0b11110100011111 | 0b10001100011111 | 0b11001100011111 | 0b10101100011111 | 0b11101100011111 | 0b10011100011111 | 0b11011100011111 | 0b10111100011111 | 0b11111100011111 | 0b10000010011111 | 0b11000010011111 | 0b10100010011111 | 0b11100010011111 | 0b10010010011111 | 0b11010010011111 | 0b10110010011111 | 0b11110010011111 | 0b10001010011111 | 0b11001010011111 | 0b10101010011111 | 0b11101010011111 | 0b10011010011111 | 0b11011010011111 | 0b10111010011111 | 0b11111010011111 | 0b10000110011111 | 0b11000110011111 | 0b10100110011111 | 0b11100110011111 | 0b10010110011111 | 0b11010110011111 | 0b10110110011111 | 0b11110110011111 | 0b10001110011111 | 0b11001110011111 | 0b10101110011111 | 0b11101110011111 | 0b10011110011111 | 0b11011110011111 | 0b10111110011111 | 0b11111110011111 | 0b10000001011111 | 0b11000001011111 | 0b10100001011111 | 0b11100001011111 | 0b10010001011111 | 0b11010001011111 | 0b10110001011111 | 0b11110001011111 | 0b10001001011111 | 0b11001001011111 | 0b10101001011111 | 0b11101001011111 | 0b10011001011111 | 0b11011001011111 | 0b10111001011111 | 0b11111001011111 | 0b10000101011111 | 0b11000101011111 | 0b10100101011111 | 0b11100101011111 | 0b10010101011111 | 0b11010101011111 | 0b10110101011111 | 0b11110101011111 | 0b10001101011111 | 0b11001101011111 | 0b10101101011111 | 0b11101101011111 | 0b10011101011111 | 0b11011101011111 | 0b10111101011111 | 0b11111101011111 | 0b10000011011111 | 0b11000011011111 | 0b10100011011111 | 0b11100011011111 | 0b10010011011111 | 0b11010011011111 | 0b10110011011111 | 0b11110011011111 | 0b10001011011111 | 0b11001011011111 | 0b10101011011111 | 0b11101011011111 | 0b10011011011111 | 0b11011011011111 | 0b10111011011111 | 0b11111011011111 | 0b10000111011111 | 0b11000111011111 | 0b10100111011111 | 0b11100111011111 | 0b10010111011111 | 0b11010111011111 | 0b10110111011111 | 0b11110111011111 | 0b10001111011111 | 0b11001111011111 | 0b10101111011111 | 0b11101111011111 | 0b10011111011111 | 0b11011111011111 | 0b10111111011111 | 0b11111111011111 | 0b10000000111111 | 0b11000000111111 | 0b10100000111111 | 0b11100000111111 | 0b10010000111111 | 0b11010000111111 | 0b10110000111111 | 0b11110000111111 | 0b10001000111111 | 0b11001000111111 | 0b10101000111111 | 0b11101000111111 | 0b10011000111111 | 0b11011000111111 | 0b10111000111111 | 0b11111000111111 | 0b10000100111111 | 0b11000100111111 | 0b10100100111111 | 0b11100100111111 | 0b10010100111111 | 0b11010100111111 | 0b10110100111111 | 0b11110100111111 | 0b10001100111111 | 0b11001100111111 | 0b10101100111111 | 0b11101100111111 | 0b10011100111111 | 0b11011100111111 | 0b10111100111111 | 0b11111100111111 | 0b10000010111111 | 0b11000010111111 | 0b10100010111111 | 0b11100010111111 | 0b10010010111111 | 0b11010010111111 | 0b10110010111111 | 0b11110010111111 | 0b10001010111111 | 0b11001010111111 | 0b10101010111111 | 0b11101010111111 | 0b10011010111111 | 0b11011010111111 | 0b10111010111111 | 0b11111010111111 | 0b10000110111111 | 0b11000110111111 | 0b10100110111111 | 0b11100110111111 | 0b10010110111111 | 0b11010110111111 | 0b10110110111111 | 0b11110110111111 | 0b10001110111111 | 0b11001110111111 | 0b10101110111111 | 0b11101110111111 | 0b10011110111111 | 0b11011110111111 | 0b10111110111111 | 0b11111110111111 | 0b10000001111111 | 0b11000001111111 | 0b10100001111111 | 0b11100001111111 | 0b10010001111111 | 0b11010001111111 | 0b10110001111111 | 0b11110001111111 | 0b10001001111111 | 0b11001001111111 | 0b10101001111111 | 0b11101001111111 | 0b10011001111111 | 0b11011001111111 | 0b10111001111111 | 0b11111001111111 | 0b10000101111111 | 0b11000101111111 | 0b10100101111111 | 0b11100101111111 | 0b10010101111111 | 0b11010101111111 | 0b10110101111111 | 0b11110101111111 | 0b10001101111111 | 0b11001101111111 | 0b10101101111111 | 0b11101101111111 | 0b10011101111111 | 0b11011101111111 | 0b10111101111111 | 0b11111101111111 | 0b10000011111111 | 0b11000011111111 | 0b10100011111111 | 0b11100011111111 | 0b10010011111111 | 0b11010011111111 | 0b10110011111111 | 0b11110011111111 | 0b10001011111111 | 0b11001011111111 | 0b10101011111111 | 0b11101011111111 | 0b10011011111111 | 0b11011011111111 | 0b10111011111111 | 0b11111011111111 | 0b10000111111111 | 0b11000111111111 | 0b10100111111111 | 0b11100111111111 | 0b10010111111111 | 0b11010111111111 | 0b10110111111111 | 0b11110111111111 | 0b10001111111111 | 0b11001111111111 | 0b10101111111111 | 0b11101111111111 | 0b10011111111111 | 0b11011111111111 | 0b10111111111111 | 0b11111111111111, _, _) => {
            let b5 = (inst >> 31) & 0b1;
            let op = (inst >> 24) & 0b1;
            let b40 = (inst >> 19) & 0b11111;
            let imm14 = (inst >> 5) & 0b11111111111111;
            let Rt = inst & 0b11111;
            match op {
                0 => return OpCode::TBZ_only_testbranch,
                1 => return OpCode::TBNZ_only_testbranch,
                _ => return OpCode::Unpredictable,
            }
        }
        _ => return OpCode::Unpredictable,
    }
    (_, 0b01000 | 0b11000 | 0b01100 | 0b11100 | 0b01001 | 0b11001 | 0b01101 | 0b11101, _) => match ((inst >> 28) & 0b1111, (inst >> 27) & 0b1, (inst >> 26) & 0b1, (inst >> 25) & 0b1, (inst >> 23) & 0b11, (inst >> 22) & 0b1, (inst >> 16) & 0b111111, (inst >> 12) & 0b1111, (inst >> 10) & 0b11, inst & 0b1111111111) {
        (0b0000 | 0b0100, _, 1, _, 0b00, _, 0b000000, _, _, _) => {
            let Q = (inst >> 30) & 0b1;
            let L = (inst >> 22) & 0b1;
            let opcode = (inst >> 12) & 0b1111;
            let size = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (L, opcode) {
                (0, 0b0000) => return OpCode::ST4_asisdlse_R4,
                (0, 0b0001) => return OpCode::Unallocated,
                (0, 0b0010) => return OpCode::ST1_asisdlse_R4_4v,
                (0, 0b0011) => return OpCode::Unallocated,
                (0, 0b0100) => return OpCode::ST3_asisdlse_R3,
                (0, 0b0101) => return OpCode::Unallocated,
                (0, 0b0110) => return OpCode::ST1_asisdlse_R3_3v,
                (0, 0b0111) => return OpCode::ST1_asisdlse_R1_1v,
                (0, 0b1000) => return OpCode::ST2_asisdlse_R2,
                (0, 0b1001) => return OpCode::Unallocated,
                (0, 0b1010) => return OpCode::ST1_asisdlse_R2_2v,
                (0, 0b1011) => return OpCode::Unallocated,
                (0, 0b1100 | 0b1110 | 0b1101 | 0b1111) => return OpCode::Unallocated,
                (1, 0b0000) => return OpCode::LD4_asisdlse_R4,
                (1, 0b0001) => return OpCode::Unallocated,
                (1, 0b0010) => return OpCode::LD1_asisdlse_R4_4v,
                (1, 0b0011) => return OpCode::Unallocated,
                (1, 0b0100) => return OpCode::LD3_asisdlse_R3,
                (1, 0b0101) => return OpCode::Unallocated,
                (1, 0b0110) => return OpCode::LD1_asisdlse_R3_3v,
                (1, 0b0111) => return OpCode::LD1_asisdlse_R1_1v,
                (1, 0b1000) => return OpCode::LD2_asisdlse_R2,
                (1, 0b1001) => return OpCode::Unallocated,
                (1, 0b1010) => return OpCode::LD1_asisdlse_R2_2v,
                (1, 0b1011) => return OpCode::Unallocated,
                (1, 0b1100 | 0b1110 | 0b1101 | 0b1111) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100, _, 1, _, 0b01, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _, _, _) => {
            let Q = (inst >> 30) & 0b1;
            let L = (inst >> 22) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 12) & 0b1111;
            let size = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (L, Rm, opcode) {
                (0, _, 0b0001) => return OpCode::Unallocated,
                (0, _, 0b0011) => return OpCode::Unallocated,
                (0, _, 0b0101) => return OpCode::Unallocated,
                (0, _, 0b1001) => return OpCode::Unallocated,
                (0, _, 0b1011) => return OpCode::Unallocated,
                (0, _, 0b1100 | 0b1110 | 0b1101 | 0b1111) => return OpCode::Unallocated,
                (0, var0, 0b0000) if var0 != 0b11111 => return OpCode::ST4_asisdlsep_R4_r,
                (0, var0, 0b0010) if var0 != 0b11111 => return OpCode::ST1_asisdlsep_R4_r4,
                (0, var0, 0b0100) if var0 != 0b11111 => return OpCode::ST3_asisdlsep_R3_r,
                (0, var0, 0b0110) if var0 != 0b11111 => return OpCode::ST1_asisdlsep_R3_r3,
                (0, var0, 0b0111) if var0 != 0b11111 => return OpCode::ST1_asisdlsep_R1_r1,
                (0, var0, 0b1000) if var0 != 0b11111 => return OpCode::ST2_asisdlsep_R2_r,
                (0, var0, 0b1010) if var0 != 0b11111 => return OpCode::ST1_asisdlsep_R2_r2,
                (0, 0b11111, 0b0000) => return OpCode::ST4_asisdlsep_I4_i,
                (0, 0b11111, 0b0010) => return OpCode::ST1_asisdlsep_I4_i4,
                (0, 0b11111, 0b0100) => return OpCode::ST3_asisdlsep_I3_i,
                (0, 0b11111, 0b0110) => return OpCode::ST1_asisdlsep_I3_i3,
                (0, 0b11111, 0b0111) => return OpCode::ST1_asisdlsep_I1_i1,
                (0, 0b11111, 0b1000) => return OpCode::ST2_asisdlsep_I2_i,
                (0, 0b11111, 0b1010) => return OpCode::ST1_asisdlsep_I2_i2,
                (1, _, 0b0001) => return OpCode::Unallocated,
                (1, _, 0b0011) => return OpCode::Unallocated,
                (1, _, 0b0101) => return OpCode::Unallocated,
                (1, _, 0b1001) => return OpCode::Unallocated,
                (1, _, 0b1011) => return OpCode::Unallocated,
                (1, _, 0b1100 | 0b1110 | 0b1101 | 0b1111) => return OpCode::Unallocated,
                (1, var0, 0b0000) if var0 != 0b11111 => return OpCode::LD4_asisdlsep_R4_r,
                (1, var0, 0b0010) if var0 != 0b11111 => return OpCode::LD1_asisdlsep_R4_r4,
                (1, var0, 0b0100) if var0 != 0b11111 => return OpCode::LD3_asisdlsep_R3_r,
                (1, var0, 0b0110) if var0 != 0b11111 => return OpCode::LD1_asisdlsep_R3_r3,
                (1, var0, 0b0111) if var0 != 0b11111 => return OpCode::LD1_asisdlsep_R1_r1,
                (1, var0, 0b1000) if var0 != 0b11111 => return OpCode::LD2_asisdlsep_R2_r,
                (1, var0, 0b1010) if var0 != 0b11111 => return OpCode::LD1_asisdlsep_R2_r2,
                (1, 0b11111, 0b0000) => return OpCode::LD4_asisdlsep_I4_i,
                (1, 0b11111, 0b0010) => return OpCode::LD1_asisdlsep_I4_i4,
                (1, 0b11111, 0b0100) => return OpCode::LD3_asisdlsep_I3_i,
                (1, 0b11111, 0b0110) => return OpCode::LD1_asisdlsep_I3_i3,
                (1, 0b11111, 0b0111) => return OpCode::LD1_asisdlsep_I1_i1,
                (1, 0b11111, 0b1000) => return OpCode::LD2_asisdlsep_I2_i,
                (1, 0b11111, 0b1010) => return OpCode::LD1_asisdlsep_I2_i2,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100, _, 1, _, 0b00 | 0b01, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, _, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100, _, 1, _, 0b10, _, 0b000000 | 0b100000, _, _, _) => {
            let Q = (inst >> 30) & 0b1;
            let L = (inst >> 22) & 0b1;
            let R = (inst >> 21) & 0b1;
            let opcode = (inst >> 13) & 0b111;
            let S = (inst >> 12) & 0b1;
            let size = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (L, R, opcode, S, size) {
                (0, _, 0b110 | 0b111, _, _) => return OpCode::Unallocated,
                (0, 0, 0b000, _, _) => return OpCode::ST1_asisdlso_B1_1b,
                (0, 0, 0b001, _, _) => return OpCode::ST3_asisdlso_B3_3b,
                (0, 0, 0b010, _, 0b00 | 0b10) => return OpCode::ST1_asisdlso_H1_1h,
                (0, 0, 0b010, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 0, 0b011, _, 0b00 | 0b10) => return OpCode::ST3_asisdlso_H3_3h,
                (0, 0, 0b011, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 0, 0b100, _, 0b00) => return OpCode::ST1_asisdlso_S1_1s,
                (0, 0, 0b100, _, 0b10 | 0b11) => return OpCode::Unallocated,
                (0, 0, 0b100, 0, 0b01) => return OpCode::ST1_asisdlso_D1_1d,
                (0, 0, 0b100, 1, 0b01) => return OpCode::Unallocated,
                (0, 0, 0b101, _, 0b00) => return OpCode::ST3_asisdlso_S3_3s,
                (0, 0, 0b101, _, 0b10) => return OpCode::Unallocated,
                (0, 0, 0b101, 0, 0b01) => return OpCode::ST3_asisdlso_D3_3d,
                (0, 0, 0b101, 0, 0b11) => return OpCode::Unallocated,
                (0, 0, 0b101, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 1, 0b000, _, _) => return OpCode::ST2_asisdlso_B2_2b,
                (0, 1, 0b001, _, _) => return OpCode::ST4_asisdlso_B4_4b,
                (0, 1, 0b010, _, 0b00 | 0b10) => return OpCode::ST2_asisdlso_H2_2h,
                (0, 1, 0b010, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 1, 0b011, _, 0b00 | 0b10) => return OpCode::ST4_asisdlso_H4_4h,
                (0, 1, 0b011, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 1, 0b100, _, 0b00) => return OpCode::ST2_asisdlso_S2_2s,
                (0, 1, 0b100, _, 0b10) => return OpCode::Unallocated,
                (0, 1, 0b100, 0, 0b01) => return OpCode::ST2_asisdlso_D2_2d,
                (0, 1, 0b100, 0, 0b11) => return OpCode::Unallocated,
                (0, 1, 0b100, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 1, 0b101, _, 0b00) => return OpCode::ST4_asisdlso_S4_4s,
                (0, 1, 0b101, _, 0b10) => return OpCode::Unallocated,
                (0, 1, 0b101, 0, 0b01) => return OpCode::ST4_asisdlso_D4_4d,
                (0, 1, 0b101, 0, 0b11) => return OpCode::Unallocated,
                (0, 1, 0b101, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 0, 0b000, _, _) => return OpCode::LD1_asisdlso_B1_1b,
                (1, 0, 0b001, _, _) => return OpCode::LD3_asisdlso_B3_3b,
                (1, 0, 0b010, _, 0b00 | 0b10) => return OpCode::LD1_asisdlso_H1_1h,
                (1, 0, 0b010, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 0, 0b011, _, 0b00 | 0b10) => return OpCode::LD3_asisdlso_H3_3h,
                (1, 0, 0b011, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 0, 0b100, _, 0b00) => return OpCode::LD1_asisdlso_S1_1s,
                (1, 0, 0b100, _, 0b10 | 0b11) => return OpCode::Unallocated,
                (1, 0, 0b100, 0, 0b01) => return OpCode::LD1_asisdlso_D1_1d,
                (1, 0, 0b100, 1, 0b01) => return OpCode::Unallocated,
                (1, 0, 0b101, _, 0b00) => return OpCode::LD3_asisdlso_S3_3s,
                (1, 0, 0b101, _, 0b10) => return OpCode::Unallocated,
                (1, 0, 0b101, 0, 0b01) => return OpCode::LD3_asisdlso_D3_3d,
                (1, 0, 0b101, 0, 0b11) => return OpCode::Unallocated,
                (1, 0, 0b101, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 0, 0b110, 0, _) => return OpCode::LD1R_asisdlso_R1,
                (1, 0, 0b110, 1, _) => return OpCode::Unallocated,
                (1, 0, 0b111, 0, _) => return OpCode::LD3R_asisdlso_R3,
                (1, 0, 0b111, 1, _) => return OpCode::Unallocated,
                (1, 1, 0b000, _, _) => return OpCode::LD2_asisdlso_B2_2b,
                (1, 1, 0b001, _, _) => return OpCode::LD4_asisdlso_B4_4b,
                (1, 1, 0b010, _, 0b00 | 0b10) => return OpCode::LD2_asisdlso_H2_2h,
                (1, 1, 0b010, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 1, 0b011, _, 0b00 | 0b10) => return OpCode::LD4_asisdlso_H4_4h,
                (1, 1, 0b011, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 1, 0b100, _, 0b00) => return OpCode::LD2_asisdlso_S2_2s,
                (1, 1, 0b100, _, 0b10) => return OpCode::Unallocated,
                (1, 1, 0b100, 0, 0b01) => return OpCode::LD2_asisdlso_D2_2d,
                (1, 1, 0b100, 0, 0b11) => return OpCode::Unallocated,
                (1, 1, 0b100, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 1, 0b101, _, 0b00) => return OpCode::LD4_asisdlso_S4_4s,
                (1, 1, 0b101, _, 0b10) => return OpCode::Unallocated,
                (1, 1, 0b101, 0, 0b01) => return OpCode::LD4_asisdlso_D4_4d,
                (1, 1, 0b101, 0, 0b11) => return OpCode::Unallocated,
                (1, 1, 0b101, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 1, 0b110, 0, _) => return OpCode::LD2R_asisdlso_R2,
                (1, 1, 0b110, 1, _) => return OpCode::Unallocated,
                (1, 1, 0b111, 0, _) => return OpCode::LD4R_asisdlso_R4,
                (1, 1, 0b111, 1, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100, _, 1, _, 0b11, _, _, _, _, _) => {
            let Q = (inst >> 30) & 0b1;
            let L = (inst >> 22) & 0b1;
            let R = (inst >> 21) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 13) & 0b111;
            let S = (inst >> 12) & 0b1;
            let size = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (L, R, Rm, opcode, S, size) {
                (0, _, _, 0b110 | 0b111, _, _) => return OpCode::Unallocated,
                (0, 0, _, 0b010, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 0, _, 0b011, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 0, _, 0b100, _, 0b10 | 0b11) => return OpCode::Unallocated,
                (0, 0, _, 0b100, 1, 0b01) => return OpCode::Unallocated,
                (0, 0, _, 0b101, _, 0b10) => return OpCode::Unallocated,
                (0, 0, _, 0b101, 0, 0b11) => return OpCode::Unallocated,
                (0, 0, _, 0b101, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 0, var0, 0b000, _, _) if var0 != 0b11111 => return OpCode::ST1_asisdlsop_BX1_r1b,
                (0, 0, var0, 0b001, _, _) if var0 != 0b11111 => return OpCode::ST3_asisdlsop_BX3_r3b,
                (0, 0, var0, 0b010, _, 0b00 | 0b10) if var0 != 0b11111 => return OpCode::ST1_asisdlsop_HX1_r1h,
                (0, 0, var0, 0b011, _, 0b00 | 0b10) if var0 != 0b11111 => return OpCode::ST3_asisdlsop_HX3_r3h,
                (0, 0, var0, 0b100, _, 0b00) if var0 != 0b11111 => return OpCode::ST1_asisdlsop_SX1_r1s,
                (0, 0, var0, 0b100, 0, 0b01) if var0 != 0b11111 => return OpCode::ST1_asisdlsop_DX1_r1d,
                (0, 0, var0, 0b101, _, 0b00) if var0 != 0b11111 => return OpCode::ST3_asisdlsop_SX3_r3s,
                (0, 0, var0, 0b101, 0, 0b01) if var0 != 0b11111 => return OpCode::ST3_asisdlsop_DX3_r3d,
                (0, 0, 0b11111, 0b000, _, _) => return OpCode::ST1_asisdlsop_B1_i1b,
                (0, 0, 0b11111, 0b001, _, _) => return OpCode::ST3_asisdlsop_B3_i3b,
                (0, 0, 0b11111, 0b010, _, 0b00 | 0b10) => return OpCode::ST1_asisdlsop_H1_i1h,
                (0, 0, 0b11111, 0b011, _, 0b00 | 0b10) => return OpCode::ST3_asisdlsop_H3_i3h,
                (0, 0, 0b11111, 0b100, _, 0b00) => return OpCode::ST1_asisdlsop_S1_i1s,
                (0, 0, 0b11111, 0b100, 0, 0b01) => return OpCode::ST1_asisdlsop_D1_i1d,
                (0, 0, 0b11111, 0b101, _, 0b00) => return OpCode::ST3_asisdlsop_S3_i3s,
                (0, 0, 0b11111, 0b101, 0, 0b01) => return OpCode::ST3_asisdlsop_D3_i3d,
                (0, 1, _, 0b010, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 1, _, 0b011, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 1, _, 0b100, _, 0b10) => return OpCode::Unallocated,
                (0, 1, _, 0b100, 0, 0b11) => return OpCode::Unallocated,
                (0, 1, _, 0b100, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 1, _, 0b101, _, 0b10) => return OpCode::Unallocated,
                (0, 1, _, 0b101, 0, 0b11) => return OpCode::Unallocated,
                (0, 1, _, 0b101, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (0, 1, var0, 0b000, _, _) if var0 != 0b11111 => return OpCode::ST2_asisdlsop_BX2_r2b,
                (0, 1, var0, 0b001, _, _) if var0 != 0b11111 => return OpCode::ST4_asisdlsop_BX4_r4b,
                (0, 1, var0, 0b010, _, 0b00 | 0b10) if var0 != 0b11111 => return OpCode::ST2_asisdlsop_HX2_r2h,
                (0, 1, var0, 0b011, _, 0b00 | 0b10) if var0 != 0b11111 => return OpCode::ST4_asisdlsop_HX4_r4h,
                (0, 1, var0, 0b100, _, 0b00) if var0 != 0b11111 => return OpCode::ST2_asisdlsop_SX2_r2s,
                (0, 1, var0, 0b100, 0, 0b01) if var0 != 0b11111 => return OpCode::ST2_asisdlsop_DX2_r2d,
                (0, 1, var0, 0b101, _, 0b00) if var0 != 0b11111 => return OpCode::ST4_asisdlsop_SX4_r4s,
                (0, 1, var0, 0b101, 0, 0b01) if var0 != 0b11111 => return OpCode::ST4_asisdlsop_DX4_r4d,
                (0, 1, 0b11111, 0b000, _, _) => return OpCode::ST2_asisdlsop_B2_i2b,
                (0, 1, 0b11111, 0b001, _, _) => return OpCode::ST4_asisdlsop_B4_i4b,
                (0, 1, 0b11111, 0b010, _, 0b00 | 0b10) => return OpCode::ST2_asisdlsop_H2_i2h,
                (0, 1, 0b11111, 0b011, _, 0b00 | 0b10) => return OpCode::ST4_asisdlsop_H4_i4h,
                (0, 1, 0b11111, 0b100, _, 0b00) => return OpCode::ST2_asisdlsop_S2_i2s,
                (0, 1, 0b11111, 0b100, 0, 0b01) => return OpCode::ST2_asisdlsop_D2_i2d,
                (0, 1, 0b11111, 0b101, _, 0b00) => return OpCode::ST4_asisdlsop_S4_i4s,
                (0, 1, 0b11111, 0b101, 0, 0b01) => return OpCode::ST4_asisdlsop_D4_i4d,
                (1, 0, _, 0b010, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 0, _, 0b011, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 0, _, 0b100, _, 0b10 | 0b11) => return OpCode::Unallocated,
                (1, 0, _, 0b100, 1, 0b01) => return OpCode::Unallocated,
                (1, 0, _, 0b101, _, 0b10) => return OpCode::Unallocated,
                (1, 0, _, 0b101, 0, 0b11) => return OpCode::Unallocated,
                (1, 0, _, 0b101, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 0, _, 0b110, 1, _) => return OpCode::Unallocated,
                (1, 0, _, 0b111, 1, _) => return OpCode::Unallocated,
                (1, 0, var0, 0b000, _, _) if var0 != 0b11111 => return OpCode::LD1_asisdlsop_BX1_r1b,
                (1, 0, var0, 0b001, _, _) if var0 != 0b11111 => return OpCode::LD3_asisdlsop_BX3_r3b,
                (1, 0, var0, 0b010, _, 0b00 | 0b10) if var0 != 0b11111 => return OpCode::LD1_asisdlsop_HX1_r1h,
                (1, 0, var0, 0b011, _, 0b00 | 0b10) if var0 != 0b11111 => return OpCode::LD3_asisdlsop_HX3_r3h,
                (1, 0, var0, 0b100, _, 0b00) if var0 != 0b11111 => return OpCode::LD1_asisdlsop_SX1_r1s,
                (1, 0, var0, 0b100, 0, 0b01) if var0 != 0b11111 => return OpCode::LD1_asisdlsop_DX1_r1d,
                (1, 0, var0, 0b101, _, 0b00) if var0 != 0b11111 => return OpCode::LD3_asisdlsop_SX3_r3s,
                (1, 0, var0, 0b101, 0, 0b01) if var0 != 0b11111 => return OpCode::LD3_asisdlsop_DX3_r3d,
                (1, 0, var0, 0b110, 0, _) if var0 != 0b11111 => return OpCode::LD1R_asisdlsop_RX1_r,
                (1, 0, var0, 0b111, 0, _) if var0 != 0b11111 => return OpCode::LD3R_asisdlsop_RX3_r,
                (1, 0, 0b11111, 0b000, _, _) => return OpCode::LD1_asisdlsop_B1_i1b,
                (1, 0, 0b11111, 0b001, _, _) => return OpCode::LD3_asisdlsop_B3_i3b,
                (1, 0, 0b11111, 0b010, _, 0b00 | 0b10) => return OpCode::LD1_asisdlsop_H1_i1h,
                (1, 0, 0b11111, 0b011, _, 0b00 | 0b10) => return OpCode::LD3_asisdlsop_H3_i3h,
                (1, 0, 0b11111, 0b100, _, 0b00) => return OpCode::LD1_asisdlsop_S1_i1s,
                (1, 0, 0b11111, 0b100, 0, 0b01) => return OpCode::LD1_asisdlsop_D1_i1d,
                (1, 0, 0b11111, 0b101, _, 0b00) => return OpCode::LD3_asisdlsop_S3_i3s,
                (1, 0, 0b11111, 0b101, 0, 0b01) => return OpCode::LD3_asisdlsop_D3_i3d,
                (1, 0, 0b11111, 0b110, 0, _) => return OpCode::LD1R_asisdlsop_R1_i,
                (1, 0, 0b11111, 0b111, 0, _) => return OpCode::LD3R_asisdlsop_R3_i,
                (1, 1, _, 0b010, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 1, _, 0b011, _, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 1, _, 0b100, _, 0b10) => return OpCode::Unallocated,
                (1, 1, _, 0b100, 0, 0b11) => return OpCode::Unallocated,
                (1, 1, _, 0b100, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 1, _, 0b101, _, 0b10) => return OpCode::Unallocated,
                (1, 1, _, 0b101, 0, 0b11) => return OpCode::Unallocated,
                (1, 1, _, 0b101, 1, 0b01 | 0b11) => return OpCode::Unallocated,
                (1, 1, _, 0b110, 1, _) => return OpCode::Unallocated,
                (1, 1, _, 0b111, 1, _) => return OpCode::Unallocated,
                (1, 1, var0, 0b000, _, _) if var0 != 0b11111 => return OpCode::LD2_asisdlsop_BX2_r2b,
                (1, 1, var0, 0b001, _, _) if var0 != 0b11111 => return OpCode::LD4_asisdlsop_BX4_r4b,
                (1, 1, var0, 0b010, _, 0b00 | 0b10) if var0 != 0b11111 => return OpCode::LD2_asisdlsop_HX2_r2h,
                (1, 1, var0, 0b011, _, 0b00 | 0b10) if var0 != 0b11111 => return OpCode::LD4_asisdlsop_HX4_r4h,
                (1, 1, var0, 0b100, _, 0b00) if var0 != 0b11111 => return OpCode::LD2_asisdlsop_SX2_r2s,
                (1, 1, var0, 0b100, 0, 0b01) if var0 != 0b11111 => return OpCode::LD2_asisdlsop_DX2_r2d,
                (1, 1, var0, 0b101, _, 0b00) if var0 != 0b11111 => return OpCode::LD4_asisdlsop_SX4_r4s,
                (1, 1, var0, 0b101, 0, 0b01) if var0 != 0b11111 => return OpCode::LD4_asisdlsop_DX4_r4d,
                (1, 1, var0, 0b110, 0, _) if var0 != 0b11111 => return OpCode::LD2R_asisdlsop_RX2_r,
                (1, 1, var0, 0b111, 0, _) if var0 != 0b11111 => return OpCode::LD4R_asisdlsop_RX4_r,
                (1, 1, 0b11111, 0b000, _, _) => return OpCode::LD2_asisdlsop_B2_i2b,
                (1, 1, 0b11111, 0b001, _, _) => return OpCode::LD4_asisdlsop_B4_i4b,
                (1, 1, 0b11111, 0b010, _, 0b00 | 0b10) => return OpCode::LD2_asisdlsop_H2_i2h,
                (1, 1, 0b11111, 0b011, _, 0b00 | 0b10) => return OpCode::LD4_asisdlsop_H4_i4h,
                (1, 1, 0b11111, 0b100, _, 0b00) => return OpCode::LD2_asisdlsop_S2_i2s,
                (1, 1, 0b11111, 0b100, 0, 0b01) => return OpCode::LD2_asisdlsop_D2_i2d,
                (1, 1, 0b11111, 0b101, _, 0b00) => return OpCode::LD4_asisdlsop_S4_i4s,
                (1, 1, 0b11111, 0b101, 0, 0b01) => return OpCode::LD4_asisdlsop_D4_i4d,
                (1, 1, 0b11111, 0b110, 0, _) => return OpCode::LD2R_asisdlsop_R2_i,
                (1, 1, 0b11111, 0b111, 0, _) => return OpCode::LD4R_asisdlsop_R4_i,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100, _, 1, _, 0b00 | 0b10, _, 0b010000 | 0b110000 | 0b011000 | 0b111000 | 0b010100 | 0b110100 | 0b011100 | 0b111100 | 0b010010 | 0b110010 | 0b011010 | 0b111010 | 0b010110 | 0b110110 | 0b011110 | 0b111110 | 0b010001 | 0b110001 | 0b011001 | 0b111001 | 0b010101 | 0b110101 | 0b011101 | 0b111101 | 0b010011 | 0b110011 | 0b011011 | 0b111011 | 0b010111 | 0b110111 | 0b011111 | 0b111111, _, _, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100, _, 1, _, 0b00 | 0b10, _, 0b001000 | 0b101000 | 0b011000 | 0b111000 | 0b001100 | 0b101100 | 0b011100 | 0b111100 | 0b001010 | 0b101010 | 0b011010 | 0b111010 | 0b001110 | 0b101110 | 0b011110 | 0b111110 | 0b001001 | 0b101001 | 0b011001 | 0b111001 | 0b001101 | 0b101101 | 0b011101 | 0b111101 | 0b001011 | 0b101011 | 0b011011 | 0b111011 | 0b001111 | 0b101111 | 0b011111 | 0b111111, _, _, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100, _, 1, _, 0b00 | 0b10, _, 0b000100 | 0b100100 | 0b010100 | 0b110100 | 0b001100 | 0b101100 | 0b011100 | 0b111100 | 0b000110 | 0b100110 | 0b010110 | 0b110110 | 0b001110 | 0b101110 | 0b011110 | 0b111110 | 0b000101 | 0b100101 | 0b010101 | 0b110101 | 0b001101 | 0b101101 | 0b011101 | 0b111101 | 0b000111 | 0b100111 | 0b010111 | 0b110111 | 0b001111 | 0b101111 | 0b011111 | 0b111111, _, _, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100, _, 1, _, 0b00 | 0b10, _, 0b000010 | 0b100010 | 0b010010 | 0b110010 | 0b001010 | 0b101010 | 0b011010 | 0b111010 | 0b000110 | 0b100110 | 0b010110 | 0b110110 | 0b001110 | 0b101110 | 0b011110 | 0b111110 | 0b000011 | 0b100011 | 0b010011 | 0b110011 | 0b001011 | 0b101011 | 0b011011 | 0b111011 | 0b000111 | 0b100111 | 0b010111 | 0b110111 | 0b001111 | 0b101111 | 0b011111 | 0b111111, _, _, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100, _, 1, _, 0b00 | 0b10, _, 0b000001 | 0b100001 | 0b010001 | 0b110001 | 0b001001 | 0b101001 | 0b011001 | 0b111001 | 0b000101 | 0b100101 | 0b010101 | 0b110101 | 0b001101 | 0b101101 | 0b011101 | 0b111101 | 0b000011 | 0b100011 | 0b010011 | 0b110011 | 0b001011 | 0b101011 | 0b011011 | 0b111011 | 0b000111 | 0b100111 | 0b010111 | 0b110111 | 0b001111 | 0b101111 | 0b011111 | 0b111111, _, _, _) => return OpCode::Unpredictable,
        (0b1101, _, 0, _, 0b10 | 0b11, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, _, _) => {
            let opc = (inst >> 22) & 0b11;
            let imm9 = (inst >> 12) & 0b111111111;
            let op2 = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (opc, imm9, op2) {
                (0b00, _, 0b01) => return OpCode::STG_64Spost_ldsttags,
                (0b00, _, 0b10) => return OpCode::STG_64Soffset_ldsttags,
                (0b00, _, 0b11) => return OpCode::STG_64Spre_ldsttags,
                (0b00, 0b000000000, 0b00) => return OpCode::STZGM_64bulk_ldsttags,
                (0b01, _, 0b00) => return OpCode::LDG_64Loffset_ldsttags,
                (0b01, _, 0b01) => return OpCode::STZG_64Spost_ldsttags,
                (0b01, _, 0b10) => return OpCode::STZG_64Soffset_ldsttags,
                (0b01, _, 0b11) => return OpCode::STZG_64Spre_ldsttags,
                (0b10, _, 0b01) => return OpCode::ST2G_64Spost_ldsttags,
                (0b10, _, 0b10) => return OpCode::ST2G_64Soffset_ldsttags,
                (0b10, _, 0b11) => return OpCode::ST2G_64Spre_ldsttags,
                (0b10, var0, 0b00) if var0 != 0b000000000 => return OpCode::Unallocated,
                (0b10, 0b000000000, 0b00) => return OpCode::STGM_64bulk_ldsttags,
                (0b11, _, 0b01) => return OpCode::STZ2G_64Spost_ldsttags,
                (0b11, _, 0b10) => return OpCode::STZ2G_64Soffset_ldsttags,
                (0b11, _, 0b11) => return OpCode::STZ2G_64Spre_ldsttags,
                (0b11, var0, 0b00) if var0 != 0b000000000 => return OpCode::Unallocated,
                (0b11, 0b000000000, 0b00) => return OpCode::LDGM_64bulk_ldsttags,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b1000 | 0b1100, _, 1, _, _, _, _, _, _, _) => return OpCode::Unpredictable,
        (0b0000 | 0b1000 | 0b0100 | 0b1100, _, 0, _, 0b00 | 0b01, _, _, _, _, _) => {
            let size = (inst >> 30) & 0b11;
            let o2 = (inst >> 23) & 0b1;
            let L = (inst >> 22) & 0b1;
            let o1 = (inst >> 21) & 0b1;
            let Rs = (inst >> 16) & 0b11111;
            let o0 = (inst >> 15) & 0b1;
            let Rt2 = (inst >> 10) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, o2, L, o1, o0, Rt2) {
                (_, 1, _, 1, _, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b00 | 0b01, 0, _, 1, _, var0) if var0 != 0b11111 => return OpCode::Unallocated,
                (0b00, 0, 0, 0, 0, _) => return OpCode::STXRB_SR32_ldstexcl,
                (0b00, 0, 0, 0, 1, _) => return OpCode::STLXRB_SR32_ldstexcl,
                (0b00, 0, 0, 1, 0, 0b11111) => return OpCode::CASP_CP32_ldstexcl,
                (0b00, 0, 0, 1, 1, 0b11111) => return OpCode::CASPL_CP32_ldstexcl,
                (0b00, 0, 1, 0, 0, _) => return OpCode::LDXRB_LR32_ldstexcl,
                (0b00, 0, 1, 0, 1, _) => return OpCode::LDAXRB_LR32_ldstexcl,
                (0b00, 0, 1, 1, 0, 0b11111) => return OpCode::CASPA_CP32_ldstexcl,
                (0b00, 0, 1, 1, 1, 0b11111) => return OpCode::CASPAL_CP32_ldstexcl,
                (0b00, 1, 0, 0, 0, _) => return OpCode::STLLRB_SL32_ldstexcl,
                (0b00, 1, 0, 0, 1, _) => return OpCode::STLRB_SL32_ldstexcl,
                (0b00, 1, 0, 1, 0, 0b11111) => return OpCode::CASB_C32_ldstexcl,
                (0b00, 1, 0, 1, 1, 0b11111) => return OpCode::CASLB_C32_ldstexcl,
                (0b00, 1, 1, 0, 0, _) => return OpCode::LDLARB_LR32_ldstexcl,
                (0b00, 1, 1, 0, 1, _) => return OpCode::LDARB_LR32_ldstexcl,
                (0b00, 1, 1, 1, 0, 0b11111) => return OpCode::CASAB_C32_ldstexcl,
                (0b00, 1, 1, 1, 1, 0b11111) => return OpCode::CASALB_C32_ldstexcl,
                (0b01, 0, 0, 0, 0, _) => return OpCode::STXRH_SR32_ldstexcl,
                (0b01, 0, 0, 0, 1, _) => return OpCode::STLXRH_SR32_ldstexcl,
                (0b01, 0, 0, 1, 0, 0b11111) => return OpCode::CASP_CP64_ldstexcl,
                (0b01, 0, 0, 1, 1, 0b11111) => return OpCode::CASPL_CP64_ldstexcl,
                (0b01, 0, 1, 0, 0, _) => return OpCode::LDXRH_LR32_ldstexcl,
                (0b01, 0, 1, 0, 1, _) => return OpCode::LDAXRH_LR32_ldstexcl,
                (0b01, 0, 1, 1, 0, 0b11111) => return OpCode::CASPA_CP64_ldstexcl,
                (0b01, 0, 1, 1, 1, 0b11111) => return OpCode::CASPAL_CP64_ldstexcl,
                (0b01, 1, 0, 0, 0, _) => return OpCode::STLLRH_SL32_ldstexcl,
                (0b01, 1, 0, 0, 1, _) => return OpCode::STLRH_SL32_ldstexcl,
                (0b01, 1, 0, 1, 0, 0b11111) => return OpCode::CASH_C32_ldstexcl,
                (0b01, 1, 0, 1, 1, 0b11111) => return OpCode::CASLH_C32_ldstexcl,
                (0b01, 1, 1, 0, 0, _) => return OpCode::LDLARH_LR32_ldstexcl,
                (0b01, 1, 1, 0, 1, _) => return OpCode::LDARH_LR32_ldstexcl,
                (0b01, 1, 1, 1, 0, 0b11111) => return OpCode::CASAH_C32_ldstexcl,
                (0b01, 1, 1, 1, 1, 0b11111) => return OpCode::CASALH_C32_ldstexcl,
                (0b10, 0, 0, 0, 0, _) => return OpCode::STXR_SR32_ldstexcl,
                (0b10, 0, 0, 0, 1, _) => return OpCode::STLXR_SR32_ldstexcl,
                (0b10, 0, 0, 1, 0, _) => return OpCode::STXP_SP32_ldstexcl,
                (0b10, 0, 0, 1, 1, _) => return OpCode::STLXP_SP32_ldstexcl,
                (0b10, 0, 1, 0, 0, _) => return OpCode::LDXR_LR32_ldstexcl,
                (0b10, 0, 1, 0, 1, _) => return OpCode::LDAXR_LR32_ldstexcl,
                (0b10, 0, 1, 1, 0, _) => return OpCode::LDXP_LP32_ldstexcl,
                (0b10, 0, 1, 1, 1, _) => return OpCode::LDAXP_LP32_ldstexcl,
                (0b10, 1, 0, 0, 0, _) => return OpCode::STLLR_SL32_ldstexcl,
                (0b10, 1, 0, 0, 1, _) => return OpCode::STLR_SL32_ldstexcl,
                (0b10, 1, 0, 1, 0, 0b11111) => return OpCode::CAS_C32_ldstexcl,
                (0b10, 1, 0, 1, 1, 0b11111) => return OpCode::CASL_C32_ldstexcl,
                (0b10, 1, 1, 0, 0, _) => return OpCode::LDLAR_LR32_ldstexcl,
                (0b10, 1, 1, 0, 1, _) => return OpCode::LDAR_LR32_ldstexcl,
                (0b10, 1, 1, 1, 0, 0b11111) => return OpCode::CASA_C32_ldstexcl,
                (0b10, 1, 1, 1, 1, 0b11111) => return OpCode::CASAL_C32_ldstexcl,
                (0b11, 0, 0, 0, 0, _) => return OpCode::STXR_SR64_ldstexcl,
                (0b11, 0, 0, 0, 1, _) => return OpCode::STLXR_SR64_ldstexcl,
                (0b11, 0, 0, 1, 0, _) => return OpCode::STXP_SP64_ldstexcl,
                (0b11, 0, 0, 1, 1, _) => return OpCode::STLXP_SP64_ldstexcl,
                (0b11, 0, 1, 0, 0, _) => return OpCode::LDXR_LR64_ldstexcl,
                (0b11, 0, 1, 0, 1, _) => return OpCode::LDAXR_LR64_ldstexcl,
                (0b11, 0, 1, 1, 0, _) => return OpCode::LDXP_LP64_ldstexcl,
                (0b11, 0, 1, 1, 1, _) => return OpCode::LDAXP_LP64_ldstexcl,
                (0b11, 1, 0, 0, 0, _) => return OpCode::STLLR_SL64_ldstexcl,
                (0b11, 1, 0, 0, 1, _) => return OpCode::STLR_SL64_ldstexcl,
                (0b11, 1, 0, 1, 0, 0b11111) => return OpCode::CAS_C64_ldstexcl,
                (0b11, 1, 0, 1, 1, 0b11111) => return OpCode::CASL_C64_ldstexcl,
                (0b11, 1, 1, 0, 0, _) => return OpCode::LDLAR_LR64_ldstexcl,
                (0b11, 1, 1, 0, 1, _) => return OpCode::LDAR_LR64_ldstexcl,
                (0b11, 1, 1, 1, 0, 0b11111) => return OpCode::CASA_C64_ldstexcl,
                (0b11, 1, 1, 1, 1, 0b11111) => return OpCode::CASAL_C64_ldstexcl,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0101 | 0b1101, _, 0, _, 0b10 | 0b11, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _, 0b00, _) => {
            let size = (inst >> 30) & 0b11;
            let opc = (inst >> 22) & 0b11;
            let imm9 = (inst >> 12) & 0b111111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, opc) {
                (0b00, 0b00) => return OpCode::STLURB_32_ldapstl_unscaled,
                (0b00, 0b01) => return OpCode::LDAPURB_32_ldapstl_unscaled,
                (0b00, 0b10) => return OpCode::LDAPURSB_64_ldapstl_unscaled,
                (0b00, 0b11) => return OpCode::LDAPURSB_32_ldapstl_unscaled,
                (0b01, 0b00) => return OpCode::STLURH_32_ldapstl_unscaled,
                (0b01, 0b01) => return OpCode::LDAPURH_32_ldapstl_unscaled,
                (0b01, 0b10) => return OpCode::LDAPURSH_64_ldapstl_unscaled,
                (0b01, 0b11) => return OpCode::LDAPURSH_32_ldapstl_unscaled,
                (0b10, 0b00) => return OpCode::STLUR_32_ldapstl_unscaled,
                (0b10, 0b01) => return OpCode::LDAPUR_32_ldapstl_unscaled,
                (0b10, 0b10) => return OpCode::LDAPURSW_64_ldapstl_unscaled,
                (0b10, 0b11) => return OpCode::Unallocated,
                (0b11, 0b00) => return OpCode::STLUR_64_ldapstl_unscaled,
                (0b11, 0b01) => return OpCode::LDAPUR_64_ldapstl_unscaled,
                (0b11, 0b10) => return OpCode::Unallocated,
                (0b11, 0b11) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0101 | 0b1101, _, _, _, 0b00 | 0b01, _, _, _, _, _) => {
            let opc = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let imm19 = (inst >> 5) & 0b1111111111111111111;
            let Rt = inst & 0b11111;
            match (opc, V) {
                (0b00, 0) => return OpCode::LDR_32_loadlit,
                (0b00, 1) => return OpCode::LDR_S_loadlit,
                (0b01, 0) => return OpCode::LDR_64_loadlit,
                (0b01, 1) => return OpCode::LDR_D_loadlit,
                (0b10, 0) => return OpCode::LDRSW_64_loadlit,
                (0b10, 1) => return OpCode::LDR_Q_loadlit,
                (0b11, 0) => return OpCode::PRFM_P_loadlit,
                (0b11, 1) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0010 | 0b1010 | 0b0110 | 0b1110, _, _, _, 0b00, _, _, _, _, _) => {
            let opc = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let L = (inst >> 22) & 0b1;
            let imm7 = (inst >> 15) & 0b1111111;
            let Rt2 = (inst >> 10) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (opc, V, L) {
                (0b00, 0, 0) => return OpCode::STNP_32_ldstnapair_offs,
                (0b00, 0, 1) => return OpCode::LDNP_32_ldstnapair_offs,
                (0b00, 1, 0) => return OpCode::STNP_S_ldstnapair_offs,
                (0b00, 1, 1) => return OpCode::LDNP_S_ldstnapair_offs,
                (0b01, 0, _) => return OpCode::Unallocated,
                (0b01, 1, 0) => return OpCode::STNP_D_ldstnapair_offs,
                (0b01, 1, 1) => return OpCode::LDNP_D_ldstnapair_offs,
                (0b10, 0, 0) => return OpCode::STNP_64_ldstnapair_offs,
                (0b10, 0, 1) => return OpCode::LDNP_64_ldstnapair_offs,
                (0b10, 1, 0) => return OpCode::STNP_Q_ldstnapair_offs,
                (0b10, 1, 1) => return OpCode::LDNP_Q_ldstnapair_offs,
                (0b11, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0010 | 0b1010 | 0b0110 | 0b1110, _, _, _, 0b01, _, _, _, _, _) => {
            let opc = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let L = (inst >> 22) & 0b1;
            let imm7 = (inst >> 15) & 0b1111111;
            let Rt2 = (inst >> 10) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (opc, V, L) {
                (0b00, 0, 0) => return OpCode::STP_32_ldstpair_post,
                (0b00, 0, 1) => return OpCode::LDP_32_ldstpair_post,
                (0b00, 1, 0) => return OpCode::STP_S_ldstpair_post,
                (0b00, 1, 1) => return OpCode::LDP_S_ldstpair_post,
                (0b01, 0, 0) => return OpCode::STGP_64_ldstpair_post,
                (0b01, 0, 1) => return OpCode::LDPSW_64_ldstpair_post,
                (0b01, 1, 0) => return OpCode::STP_D_ldstpair_post,
                (0b01, 1, 1) => return OpCode::LDP_D_ldstpair_post,
                (0b10, 0, 0) => return OpCode::STP_64_ldstpair_post,
                (0b10, 0, 1) => return OpCode::LDP_64_ldstpair_post,
                (0b10, 1, 0) => return OpCode::STP_Q_ldstpair_post,
                (0b10, 1, 1) => return OpCode::LDP_Q_ldstpair_post,
                (0b11, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0010 | 0b1010 | 0b0110 | 0b1110, _, _, _, 0b10, _, _, _, _, _) => {
            let opc = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let L = (inst >> 22) & 0b1;
            let imm7 = (inst >> 15) & 0b1111111;
            let Rt2 = (inst >> 10) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (opc, V, L) {
                (0b00, 0, 0) => return OpCode::STP_32_ldstpair_off,
                (0b00, 0, 1) => return OpCode::LDP_32_ldstpair_off,
                (0b00, 1, 0) => return OpCode::STP_S_ldstpair_off,
                (0b00, 1, 1) => return OpCode::LDP_S_ldstpair_off,
                (0b01, 0, 0) => return OpCode::STGP_64_ldstpair_off,
                (0b01, 0, 1) => return OpCode::LDPSW_64_ldstpair_off,
                (0b01, 1, 0) => return OpCode::STP_D_ldstpair_off,
                (0b01, 1, 1) => return OpCode::LDP_D_ldstpair_off,
                (0b10, 0, 0) => return OpCode::STP_64_ldstpair_off,
                (0b10, 0, 1) => return OpCode::LDP_64_ldstpair_off,
                (0b10, 1, 0) => return OpCode::STP_Q_ldstpair_off,
                (0b10, 1, 1) => return OpCode::LDP_Q_ldstpair_off,
                (0b11, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0010 | 0b1010 | 0b0110 | 0b1110, _, _, _, 0b11, _, _, _, _, _) => {
            let opc = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let L = (inst >> 22) & 0b1;
            let imm7 = (inst >> 15) & 0b1111111;
            let Rt2 = (inst >> 10) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (opc, V, L) {
                (0b00, 0, 0) => return OpCode::STP_32_ldstpair_pre,
                (0b00, 0, 1) => return OpCode::LDP_32_ldstpair_pre,
                (0b00, 1, 0) => return OpCode::STP_S_ldstpair_pre,
                (0b00, 1, 1) => return OpCode::LDP_S_ldstpair_pre,
                (0b01, 0, 0) => return OpCode::STGP_64_ldstpair_pre,
                (0b01, 0, 1) => return OpCode::LDPSW_64_ldstpair_pre,
                (0b01, 1, 0) => return OpCode::STP_D_ldstpair_pre,
                (0b01, 1, 1) => return OpCode::LDP_D_ldstpair_pre,
                (0b10, 0, 0) => return OpCode::STP_64_ldstpair_pre,
                (0b10, 0, 1) => return OpCode::LDP_64_ldstpair_pre,
                (0b10, 1, 0) => return OpCode::STP_Q_ldstpair_pre,
                (0b10, 1, 1) => return OpCode::LDP_Q_ldstpair_pre,
                (0b11, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, 0b00 | 0b01, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _, 0b00, _) => {
            let size = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let opc = (inst >> 22) & 0b11;
            let imm9 = (inst >> 12) & 0b111111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, V, opc) {
                (0b01 | 0b11, 1, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b00, 0, 0b00) => return OpCode::STURB_32_ldst_unscaled,
                (0b00, 0, 0b01) => return OpCode::LDURB_32_ldst_unscaled,
                (0b00, 0, 0b10) => return OpCode::LDURSB_64_ldst_unscaled,
                (0b00, 0, 0b11) => return OpCode::LDURSB_32_ldst_unscaled,
                (0b00, 1, 0b00) => return OpCode::STUR_B_ldst_unscaled,
                (0b00, 1, 0b01) => return OpCode::LDUR_B_ldst_unscaled,
                (0b00, 1, 0b10) => return OpCode::STUR_Q_ldst_unscaled,
                (0b00, 1, 0b11) => return OpCode::LDUR_Q_ldst_unscaled,
                (0b01, 0, 0b00) => return OpCode::STURH_32_ldst_unscaled,
                (0b01, 0, 0b01) => return OpCode::LDURH_32_ldst_unscaled,
                (0b01, 0, 0b10) => return OpCode::LDURSH_64_ldst_unscaled,
                (0b01, 0, 0b11) => return OpCode::LDURSH_32_ldst_unscaled,
                (0b01, 1, 0b00) => return OpCode::STUR_H_ldst_unscaled,
                (0b01, 1, 0b01) => return OpCode::LDUR_H_ldst_unscaled,
                (0b10 | 0b11, 0, 0b11) => return OpCode::Unallocated,
                (0b10 | 0b11, 1, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b10, 0, 0b00) => return OpCode::STUR_32_ldst_unscaled,
                (0b10, 0, 0b01) => return OpCode::LDUR_32_ldst_unscaled,
                (0b10, 0, 0b10) => return OpCode::LDURSW_64_ldst_unscaled,
                (0b10, 1, 0b00) => return OpCode::STUR_S_ldst_unscaled,
                (0b10, 1, 0b01) => return OpCode::LDUR_S_ldst_unscaled,
                (0b11, 0, 0b00) => return OpCode::STUR_64_ldst_unscaled,
                (0b11, 0, 0b01) => return OpCode::LDUR_64_ldst_unscaled,
                (0b11, 0, 0b10) => return OpCode::PRFUM_P_ldst_unscaled,
                (0b11, 1, 0b00) => return OpCode::STUR_D_ldst_unscaled,
                (0b11, 1, 0b01) => return OpCode::LDUR_D_ldst_unscaled,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, 0b00 | 0b01, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _, 0b01, _) => {
            let size = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let opc = (inst >> 22) & 0b11;
            let imm9 = (inst >> 12) & 0b111111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, V, opc) {
                (0b01 | 0b11, 1, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b00, 0, 0b00) => return OpCode::STRB_32_ldst_immpost,
                (0b00, 0, 0b01) => return OpCode::LDRB_32_ldst_immpost,
                (0b00, 0, 0b10) => return OpCode::LDRSB_64_ldst_immpost,
                (0b00, 0, 0b11) => return OpCode::LDRSB_32_ldst_immpost,
                (0b00, 1, 0b00) => return OpCode::STR_B_ldst_immpost,
                (0b00, 1, 0b01) => return OpCode::LDR_B_ldst_immpost,
                (0b00, 1, 0b10) => return OpCode::STR_Q_ldst_immpost,
                (0b00, 1, 0b11) => return OpCode::LDR_Q_ldst_immpost,
                (0b01, 0, 0b00) => return OpCode::STRH_32_ldst_immpost,
                (0b01, 0, 0b01) => return OpCode::LDRH_32_ldst_immpost,
                (0b01, 0, 0b10) => return OpCode::LDRSH_64_ldst_immpost,
                (0b01, 0, 0b11) => return OpCode::LDRSH_32_ldst_immpost,
                (0b01, 1, 0b00) => return OpCode::STR_H_ldst_immpost,
                (0b01, 1, 0b01) => return OpCode::LDR_H_ldst_immpost,
                (0b10 | 0b11, 0, 0b11) => return OpCode::Unallocated,
                (0b10 | 0b11, 1, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b10, 0, 0b00) => return OpCode::STR_32_ldst_immpost,
                (0b10, 0, 0b01) => return OpCode::LDR_32_ldst_immpost,
                (0b10, 0, 0b10) => return OpCode::LDRSW_64_ldst_immpost,
                (0b10, 1, 0b00) => return OpCode::STR_S_ldst_immpost,
                (0b10, 1, 0b01) => return OpCode::LDR_S_ldst_immpost,
                (0b11, 0, 0b00) => return OpCode::STR_64_ldst_immpost,
                (0b11, 0, 0b01) => return OpCode::LDR_64_ldst_immpost,
                (0b11, 0, 0b10) => return OpCode::Unallocated,
                (0b11, 1, 0b00) => return OpCode::STR_D_ldst_immpost,
                (0b11, 1, 0b01) => return OpCode::LDR_D_ldst_immpost,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, 0b00 | 0b01, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _, 0b10, _) => {
            let size = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let opc = (inst >> 22) & 0b11;
            let imm9 = (inst >> 12) & 0b111111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, V, opc) {
                (_, 1, _) => return OpCode::Unallocated,
                (0b00, 0, 0b00) => return OpCode::STTRB_32_ldst_unpriv,
                (0b00, 0, 0b01) => return OpCode::LDTRB_32_ldst_unpriv,
                (0b00, 0, 0b10) => return OpCode::LDTRSB_64_ldst_unpriv,
                (0b00, 0, 0b11) => return OpCode::LDTRSB_32_ldst_unpriv,
                (0b01, 0, 0b00) => return OpCode::STTRH_32_ldst_unpriv,
                (0b01, 0, 0b01) => return OpCode::LDTRH_32_ldst_unpriv,
                (0b01, 0, 0b10) => return OpCode::LDTRSH_64_ldst_unpriv,
                (0b01, 0, 0b11) => return OpCode::LDTRSH_32_ldst_unpriv,
                (0b10 | 0b11, 0, 0b11) => return OpCode::Unallocated,
                (0b10, 0, 0b00) => return OpCode::STTR_32_ldst_unpriv,
                (0b10, 0, 0b01) => return OpCode::LDTR_32_ldst_unpriv,
                (0b10, 0, 0b10) => return OpCode::LDTRSW_64_ldst_unpriv,
                (0b11, 0, 0b00) => return OpCode::STTR_64_ldst_unpriv,
                (0b11, 0, 0b01) => return OpCode::LDTR_64_ldst_unpriv,
                (0b11, 0, 0b10) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, 0b00 | 0b01, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111, _, 0b11, _) => {
            let size = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let opc = (inst >> 22) & 0b11;
            let imm9 = (inst >> 12) & 0b111111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, V, opc) {
                (0b01 | 0b11, 1, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b00, 0, 0b00) => return OpCode::STRB_32_ldst_immpre,
                (0b00, 0, 0b01) => return OpCode::LDRB_32_ldst_immpre,
                (0b00, 0, 0b10) => return OpCode::LDRSB_64_ldst_immpre,
                (0b00, 0, 0b11) => return OpCode::LDRSB_32_ldst_immpre,
                (0b00, 1, 0b00) => return OpCode::STR_B_ldst_immpre,
                (0b00, 1, 0b01) => return OpCode::LDR_B_ldst_immpre,
                (0b00, 1, 0b10) => return OpCode::STR_Q_ldst_immpre,
                (0b00, 1, 0b11) => return OpCode::LDR_Q_ldst_immpre,
                (0b01, 0, 0b00) => return OpCode::STRH_32_ldst_immpre,
                (0b01, 0, 0b01) => return OpCode::LDRH_32_ldst_immpre,
                (0b01, 0, 0b10) => return OpCode::LDRSH_64_ldst_immpre,
                (0b01, 0, 0b11) => return OpCode::LDRSH_32_ldst_immpre,
                (0b01, 1, 0b00) => return OpCode::STR_H_ldst_immpre,
                (0b01, 1, 0b01) => return OpCode::LDR_H_ldst_immpre,
                (0b10 | 0b11, 0, 0b11) => return OpCode::Unallocated,
                (0b10 | 0b11, 1, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b10, 0, 0b00) => return OpCode::STR_32_ldst_immpre,
                (0b10, 0, 0b01) => return OpCode::LDR_32_ldst_immpre,
                (0b10, 0, 0b10) => return OpCode::LDRSW_64_ldst_immpre,
                (0b10, 1, 0b00) => return OpCode::STR_S_ldst_immpre,
                (0b10, 1, 0b01) => return OpCode::LDR_S_ldst_immpre,
                (0b11, 0, 0b00) => return OpCode::STR_64_ldst_immpre,
                (0b11, 0, 0b01) => return OpCode::LDR_64_ldst_immpre,
                (0b11, 0, 0b10) => return OpCode::Unallocated,
                (0b11, 1, 0b00) => return OpCode::STR_D_ldst_immpre,
                (0b11, 1, 0b01) => return OpCode::LDR_D_ldst_immpre,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, 0b00 | 0b01, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, 0b00, _) => {
            let size = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let A = (inst >> 23) & 0b1;
            let R = (inst >> 22) & 0b1;
            let Rs = (inst >> 16) & 0b11111;
            let o3 = (inst >> 15) & 0b1;
            let opc = (inst >> 12) & 0b111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, V, A, R, o3, opc) {
                (_, 0, _, _, 1, 0b001) => return OpCode::Unallocated,
                (_, 0, _, _, 1, 0b010 | 0b011) => return OpCode::Unallocated,
                (_, 0, _, _, 1, 0b101) => return OpCode::Unallocated,
                (_, 0, _, _, 1, 0b110 | 0b111) => return OpCode::Unallocated,
                (_, 0, 0, _, 1, 0b100) => return OpCode::Unallocated,
                (_, 0, 1, 1, 1, 0b100) => return OpCode::Unallocated,
                (_, 1, _, _, _, _) => return OpCode::Unallocated,
                (0b00, 0, 0, 0, 0, 0b000) => return OpCode::LDADDB_32_memop,
                (0b00, 0, 0, 0, 0, 0b001) => return OpCode::LDCLRB_32_memop,
                (0b00, 0, 0, 0, 0, 0b010) => return OpCode::LDEORB_32_memop,
                (0b00, 0, 0, 0, 0, 0b011) => return OpCode::LDSETB_32_memop,
                (0b00, 0, 0, 0, 0, 0b100) => return OpCode::LDSMAXB_32_memop,
                (0b00, 0, 0, 0, 0, 0b101) => return OpCode::LDSMINB_32_memop,
                (0b00, 0, 0, 0, 0, 0b110) => return OpCode::LDUMAXB_32_memop,
                (0b00, 0, 0, 0, 0, 0b111) => return OpCode::LDUMINB_32_memop,
                (0b00, 0, 0, 0, 1, 0b000) => return OpCode::SWPB_32_memop,
                (0b00, 0, 0, 1, 0, 0b000) => return OpCode::LDADDLB_32_memop,
                (0b00, 0, 0, 1, 0, 0b001) => return OpCode::LDCLRLB_32_memop,
                (0b00, 0, 0, 1, 0, 0b010) => return OpCode::LDEORLB_32_memop,
                (0b00, 0, 0, 1, 0, 0b011) => return OpCode::LDSETLB_32_memop,
                (0b00, 0, 0, 1, 0, 0b100) => return OpCode::LDSMAXLB_32_memop,
                (0b00, 0, 0, 1, 0, 0b101) => return OpCode::LDSMINLB_32_memop,
                (0b00, 0, 0, 1, 0, 0b110) => return OpCode::LDUMAXLB_32_memop,
                (0b00, 0, 0, 1, 0, 0b111) => return OpCode::LDUMINLB_32_memop,
                (0b00, 0, 0, 1, 1, 0b000) => return OpCode::SWPLB_32_memop,
                (0b00, 0, 1, 0, 0, 0b000) => return OpCode::LDADDAB_32_memop,
                (0b00, 0, 1, 0, 0, 0b001) => return OpCode::LDCLRAB_32_memop,
                (0b00, 0, 1, 0, 0, 0b010) => return OpCode::LDEORAB_32_memop,
                (0b00, 0, 1, 0, 0, 0b011) => return OpCode::LDSETAB_32_memop,
                (0b00, 0, 1, 0, 0, 0b100) => return OpCode::LDSMAXAB_32_memop,
                (0b00, 0, 1, 0, 0, 0b101) => return OpCode::LDSMINAB_32_memop,
                (0b00, 0, 1, 0, 0, 0b110) => return OpCode::LDUMAXAB_32_memop,
                (0b00, 0, 1, 0, 0, 0b111) => return OpCode::LDUMINAB_32_memop,
                (0b00, 0, 1, 0, 1, 0b000) => return OpCode::SWPAB_32_memop,
                (0b00, 0, 1, 0, 1, 0b100) => return OpCode::LDAPRB_32L_memop,
                (0b00, 0, 1, 1, 0, 0b000) => return OpCode::LDADDALB_32_memop,
                (0b00, 0, 1, 1, 0, 0b001) => return OpCode::LDCLRALB_32_memop,
                (0b00, 0, 1, 1, 0, 0b010) => return OpCode::LDEORALB_32_memop,
                (0b00, 0, 1, 1, 0, 0b011) => return OpCode::LDSETALB_32_memop,
                (0b00, 0, 1, 1, 0, 0b100) => return OpCode::LDSMAXALB_32_memop,
                (0b00, 0, 1, 1, 0, 0b101) => return OpCode::LDSMINALB_32_memop,
                (0b00, 0, 1, 1, 0, 0b110) => return OpCode::LDUMAXALB_32_memop,
                (0b00, 0, 1, 1, 0, 0b111) => return OpCode::LDUMINALB_32_memop,
                (0b00, 0, 1, 1, 1, 0b000) => return OpCode::SWPALB_32_memop,
                (0b01, 0, 0, 0, 0, 0b000) => return OpCode::LDADDH_32_memop,
                (0b01, 0, 0, 0, 0, 0b001) => return OpCode::LDCLRH_32_memop,
                (0b01, 0, 0, 0, 0, 0b010) => return OpCode::LDEORH_32_memop,
                (0b01, 0, 0, 0, 0, 0b011) => return OpCode::LDSETH_32_memop,
                (0b01, 0, 0, 0, 0, 0b100) => return OpCode::LDSMAXH_32_memop,
                (0b01, 0, 0, 0, 0, 0b101) => return OpCode::LDSMINH_32_memop,
                (0b01, 0, 0, 0, 0, 0b110) => return OpCode::LDUMAXH_32_memop,
                (0b01, 0, 0, 0, 0, 0b111) => return OpCode::LDUMINH_32_memop,
                (0b01, 0, 0, 0, 1, 0b000) => return OpCode::SWPH_32_memop,
                (0b01, 0, 0, 1, 0, 0b000) => return OpCode::LDADDLH_32_memop,
                (0b01, 0, 0, 1, 0, 0b001) => return OpCode::LDCLRLH_32_memop,
                (0b01, 0, 0, 1, 0, 0b010) => return OpCode::LDEORLH_32_memop,
                (0b01, 0, 0, 1, 0, 0b011) => return OpCode::LDSETLH_32_memop,
                (0b01, 0, 0, 1, 0, 0b100) => return OpCode::LDSMAXLH_32_memop,
                (0b01, 0, 0, 1, 0, 0b101) => return OpCode::LDSMINLH_32_memop,
                (0b01, 0, 0, 1, 0, 0b110) => return OpCode::LDUMAXLH_32_memop,
                (0b01, 0, 0, 1, 0, 0b111) => return OpCode::LDUMINLH_32_memop,
                (0b01, 0, 0, 1, 1, 0b000) => return OpCode::SWPLH_32_memop,
                (0b01, 0, 1, 0, 0, 0b000) => return OpCode::LDADDAH_32_memop,
                (0b01, 0, 1, 0, 0, 0b001) => return OpCode::LDCLRAH_32_memop,
                (0b01, 0, 1, 0, 0, 0b010) => return OpCode::LDEORAH_32_memop,
                (0b01, 0, 1, 0, 0, 0b011) => return OpCode::LDSETAH_32_memop,
                (0b01, 0, 1, 0, 0, 0b100) => return OpCode::LDSMAXAH_32_memop,
                (0b01, 0, 1, 0, 0, 0b101) => return OpCode::LDSMINAH_32_memop,
                (0b01, 0, 1, 0, 0, 0b110) => return OpCode::LDUMAXAH_32_memop,
                (0b01, 0, 1, 0, 0, 0b111) => return OpCode::LDUMINAH_32_memop,
                (0b01, 0, 1, 0, 1, 0b000) => return OpCode::SWPAH_32_memop,
                (0b01, 0, 1, 0, 1, 0b100) => return OpCode::LDAPRH_32L_memop,
                (0b01, 0, 1, 1, 0, 0b000) => return OpCode::LDADDALH_32_memop,
                (0b01, 0, 1, 1, 0, 0b001) => return OpCode::LDCLRALH_32_memop,
                (0b01, 0, 1, 1, 0, 0b010) => return OpCode::LDEORALH_32_memop,
                (0b01, 0, 1, 1, 0, 0b011) => return OpCode::LDSETALH_32_memop,
                (0b01, 0, 1, 1, 0, 0b100) => return OpCode::LDSMAXALH_32_memop,
                (0b01, 0, 1, 1, 0, 0b101) => return OpCode::LDSMINALH_32_memop,
                (0b01, 0, 1, 1, 0, 0b110) => return OpCode::LDUMAXALH_32_memop,
                (0b01, 0, 1, 1, 0, 0b111) => return OpCode::LDUMINALH_32_memop,
                (0b01, 0, 1, 1, 1, 0b000) => return OpCode::SWPALH_32_memop,
                (0b10, 0, 0, 0, 0, 0b000) => return OpCode::LDADD_32_memop,
                (0b10, 0, 0, 0, 0, 0b001) => return OpCode::LDCLR_32_memop,
                (0b10, 0, 0, 0, 0, 0b010) => return OpCode::LDEOR_32_memop,
                (0b10, 0, 0, 0, 0, 0b011) => return OpCode::LDSET_32_memop,
                (0b10, 0, 0, 0, 0, 0b100) => return OpCode::LDSMAX_32_memop,
                (0b10, 0, 0, 0, 0, 0b101) => return OpCode::LDSMIN_32_memop,
                (0b10, 0, 0, 0, 0, 0b110) => return OpCode::LDUMAX_32_memop,
                (0b10, 0, 0, 0, 0, 0b111) => return OpCode::LDUMIN_32_memop,
                (0b10, 0, 0, 0, 1, 0b000) => return OpCode::SWP_32_memop,
                (0b10, 0, 0, 1, 0, 0b000) => return OpCode::LDADDL_32_memop,
                (0b10, 0, 0, 1, 0, 0b001) => return OpCode::LDCLRL_32_memop,
                (0b10, 0, 0, 1, 0, 0b010) => return OpCode::LDEORL_32_memop,
                (0b10, 0, 0, 1, 0, 0b011) => return OpCode::LDSETL_32_memop,
                (0b10, 0, 0, 1, 0, 0b100) => return OpCode::LDSMAXL_32_memop,
                (0b10, 0, 0, 1, 0, 0b101) => return OpCode::LDSMINL_32_memop,
                (0b10, 0, 0, 1, 0, 0b110) => return OpCode::LDUMAXL_32_memop,
                (0b10, 0, 0, 1, 0, 0b111) => return OpCode::LDUMINL_32_memop,
                (0b10, 0, 0, 1, 1, 0b000) => return OpCode::SWPL_32_memop,
                (0b10, 0, 1, 0, 0, 0b000) => return OpCode::LDADDA_32_memop,
                (0b10, 0, 1, 0, 0, 0b001) => return OpCode::LDCLRA_32_memop,
                (0b10, 0, 1, 0, 0, 0b010) => return OpCode::LDEORA_32_memop,
                (0b10, 0, 1, 0, 0, 0b011) => return OpCode::LDSETA_32_memop,
                (0b10, 0, 1, 0, 0, 0b100) => return OpCode::LDSMAXA_32_memop,
                (0b10, 0, 1, 0, 0, 0b101) => return OpCode::LDSMINA_32_memop,
                (0b10, 0, 1, 0, 0, 0b110) => return OpCode::LDUMAXA_32_memop,
                (0b10, 0, 1, 0, 0, 0b111) => return OpCode::LDUMINA_32_memop,
                (0b10, 0, 1, 0, 1, 0b000) => return OpCode::SWPA_32_memop,
                (0b10, 0, 1, 0, 1, 0b100) => return OpCode::LDAPR_32L_memop,
                (0b10, 0, 1, 1, 0, 0b000) => return OpCode::LDADDAL_32_memop,
                (0b10, 0, 1, 1, 0, 0b001) => return OpCode::LDCLRAL_32_memop,
                (0b10, 0, 1, 1, 0, 0b010) => return OpCode::LDEORAL_32_memop,
                (0b10, 0, 1, 1, 0, 0b011) => return OpCode::LDSETAL_32_memop,
                (0b10, 0, 1, 1, 0, 0b100) => return OpCode::LDSMAXAL_32_memop,
                (0b10, 0, 1, 1, 0, 0b101) => return OpCode::LDSMINAL_32_memop,
                (0b10, 0, 1, 1, 0, 0b110) => return OpCode::LDUMAXAL_32_memop,
                (0b10, 0, 1, 1, 0, 0b111) => return OpCode::LDUMINAL_32_memop,
                (0b10, 0, 1, 1, 1, 0b000) => return OpCode::SWPAL_32_memop,
                (0b11, 0, 0, 0, 0, 0b000) => return OpCode::LDADD_64_memop,
                (0b11, 0, 0, 0, 0, 0b001) => return OpCode::LDCLR_64_memop,
                (0b11, 0, 0, 0, 0, 0b010) => return OpCode::LDEOR_64_memop,
                (0b11, 0, 0, 0, 0, 0b011) => return OpCode::LDSET_64_memop,
                (0b11, 0, 0, 0, 0, 0b100) => return OpCode::LDSMAX_64_memop,
                (0b11, 0, 0, 0, 0, 0b101) => return OpCode::LDSMIN_64_memop,
                (0b11, 0, 0, 0, 0, 0b110) => return OpCode::LDUMAX_64_memop,
                (0b11, 0, 0, 0, 0, 0b111) => return OpCode::LDUMIN_64_memop,
                (0b11, 0, 0, 0, 1, 0b000) => return OpCode::SWP_64_memop,
                (0b11, 0, 0, 1, 0, 0b000) => return OpCode::LDADDL_64_memop,
                (0b11, 0, 0, 1, 0, 0b001) => return OpCode::LDCLRL_64_memop,
                (0b11, 0, 0, 1, 0, 0b010) => return OpCode::LDEORL_64_memop,
                (0b11, 0, 0, 1, 0, 0b011) => return OpCode::LDSETL_64_memop,
                (0b11, 0, 0, 1, 0, 0b100) => return OpCode::LDSMAXL_64_memop,
                (0b11, 0, 0, 1, 0, 0b101) => return OpCode::LDSMINL_64_memop,
                (0b11, 0, 0, 1, 0, 0b110) => return OpCode::LDUMAXL_64_memop,
                (0b11, 0, 0, 1, 0, 0b111) => return OpCode::LDUMINL_64_memop,
                (0b11, 0, 0, 1, 1, 0b000) => return OpCode::SWPL_64_memop,
                (0b11, 0, 1, 0, 0, 0b000) => return OpCode::LDADDA_64_memop,
                (0b11, 0, 1, 0, 0, 0b001) => return OpCode::LDCLRA_64_memop,
                (0b11, 0, 1, 0, 0, 0b010) => return OpCode::LDEORA_64_memop,
                (0b11, 0, 1, 0, 0, 0b011) => return OpCode::LDSETA_64_memop,
                (0b11, 0, 1, 0, 0, 0b100) => return OpCode::LDSMAXA_64_memop,
                (0b11, 0, 1, 0, 0, 0b101) => return OpCode::LDSMINA_64_memop,
                (0b11, 0, 1, 0, 0, 0b110) => return OpCode::LDUMAXA_64_memop,
                (0b11, 0, 1, 0, 0, 0b111) => return OpCode::LDUMINA_64_memop,
                (0b11, 0, 1, 0, 1, 0b000) => return OpCode::SWPA_64_memop,
                (0b11, 0, 1, 0, 1, 0b100) => return OpCode::LDAPR_64L_memop,
                (0b11, 0, 1, 1, 0, 0b000) => return OpCode::LDADDAL_64_memop,
                (0b11, 0, 1, 1, 0, 0b001) => return OpCode::LDCLRAL_64_memop,
                (0b11, 0, 1, 1, 0, 0b010) => return OpCode::LDEORAL_64_memop,
                (0b11, 0, 1, 1, 0, 0b011) => return OpCode::LDSETAL_64_memop,
                (0b11, 0, 1, 1, 0, 0b100) => return OpCode::LDSMAXAL_64_memop,
                (0b11, 0, 1, 1, 0, 0b101) => return OpCode::LDSMINAL_64_memop,
                (0b11, 0, 1, 1, 0, 0b110) => return OpCode::LDUMAXAL_64_memop,
                (0b11, 0, 1, 1, 0, 0b111) => return OpCode::LDUMINAL_64_memop,
                (0b11, 0, 1, 1, 1, 0b000) => return OpCode::SWPAL_64_memop,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, 0b00 | 0b01, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, 0b10, _) => {
            let size = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let opc = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let option = (inst >> 13) & 0b111;
            let S = (inst >> 12) & 0b1;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, V, opc, option) {
                (_, _, _, 0b000 | 0b100 | 0b001 | 0b101) => return OpCode::Unallocated,
                (0b01 | 0b11, 1, 0b10 | 0b11, _) => return OpCode::Unallocated,
                (0b00, 0, 0b00, var0) if var0 != 0b011 => return OpCode::STRB_32B_ldst_regoff,
                (0b00, 0, 0b00, 0b011) => return OpCode::STRB_32BL_ldst_regoff,
                (0b00, 0, 0b01, var0) if var0 != 0b011 => return OpCode::LDRB_32B_ldst_regoff,
                (0b00, 0, 0b01, 0b011) => return OpCode::LDRB_32BL_ldst_regoff,
                (0b00, 0, 0b10, var0) if var0 != 0b011 => return OpCode::LDRSB_64B_ldst_regoff,
                (0b00, 0, 0b10, 0b011) => return OpCode::LDRSB_64BL_ldst_regoff,
                (0b00, 0, 0b11, var0) if var0 != 0b011 => return OpCode::LDRSB_32B_ldst_regoff,
                (0b00, 0, 0b11, 0b011) => return OpCode::LDRSB_32BL_ldst_regoff,
                (0b00, 1, 0b00, var0) if var0 != 0b011 => return OpCode::STR_B_ldst_regoff,
                (0b00, 1, 0b00, 0b011) => return OpCode::STR_BL_ldst_regoff,
                (0b00, 1, 0b01, var0) if var0 != 0b011 => return OpCode::LDR_B_ldst_regoff,
                (0b00, 1, 0b01, 0b011) => return OpCode::LDR_BL_ldst_regoff,
                (0b00, 1, 0b10, _) => return OpCode::STR_Q_ldst_regoff,
                (0b00, 1, 0b11, _) => return OpCode::LDR_Q_ldst_regoff,
                (0b01, 0, 0b00, _) => return OpCode::STRH_32_ldst_regoff,
                (0b01, 0, 0b01, _) => return OpCode::LDRH_32_ldst_regoff,
                (0b01, 0, 0b10, _) => return OpCode::LDRSH_64_ldst_regoff,
                (0b01, 0, 0b11, _) => return OpCode::LDRSH_32_ldst_regoff,
                (0b01, 1, 0b00, _) => return OpCode::STR_H_ldst_regoff,
                (0b01, 1, 0b01, _) => return OpCode::LDR_H_ldst_regoff,
                (0b10 | 0b11, 0, 0b11, _) => return OpCode::Unallocated,
                (0b10 | 0b11, 1, 0b10 | 0b11, _) => return OpCode::Unallocated,
                (0b10, 0, 0b00, _) => return OpCode::STR_32_ldst_regoff,
                (0b10, 0, 0b01, _) => return OpCode::LDR_32_ldst_regoff,
                (0b10, 0, 0b10, _) => return OpCode::LDRSW_64_ldst_regoff,
                (0b10, 1, 0b00, _) => return OpCode::STR_S_ldst_regoff,
                (0b10, 1, 0b01, _) => return OpCode::LDR_S_ldst_regoff,
                (0b11, 0, 0b00, _) => return OpCode::STR_64_ldst_regoff,
                (0b11, 0, 0b01, _) => return OpCode::LDR_64_ldst_regoff,
                (0b11, 0, 0b10, _) => return OpCode::PRFM_P_ldst_regoff,
                (0b11, 1, 0b00, _) => return OpCode::STR_D_ldst_regoff,
                (0b11, 1, 0b01, _) => return OpCode::LDR_D_ldst_regoff,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, 0b00 | 0b01, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _, 0b01 | 0b11, _) => {
            let size = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let M = (inst >> 23) & 0b1;
            let S = (inst >> 22) & 0b1;
            let imm9 = (inst >> 12) & 0b111111111;
            let W = (inst >> 11) & 0b1;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, V, M, W) {
                (var0, _, _, _) if var0 != 0b11 => return OpCode::Unallocated,
                (0b11, 0, 0, 0) => return OpCode::LDRAA_64_ldst_pac,
                (0b11, 0, 0, 1) => return OpCode::LDRAA_64W_ldst_pac,
                (0b11, 0, 1, 0) => return OpCode::LDRAB_64_ldst_pac,
                (0b11, 0, 1, 1) => return OpCode::LDRAB_64W_ldst_pac,
                (0b11, 1, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0011 | 0b1011 | 0b0111 | 0b1111, _, _, _, 0b10 | 0b11, _, _, _, _, _) => {
            let size = (inst >> 30) & 0b11;
            let V = (inst >> 26) & 0b1;
            let opc = (inst >> 22) & 0b11;
            let imm12 = (inst >> 10) & 0b111111111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rt = inst & 0b11111;
            match (size, V, opc) {
                (0b01 | 0b11, 1, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b00, 0, 0b00) => return OpCode::STRB_32_ldst_pos,
                (0b00, 0, 0b01) => return OpCode::LDRB_32_ldst_pos,
                (0b00, 0, 0b10) => return OpCode::LDRSB_64_ldst_pos,
                (0b00, 0, 0b11) => return OpCode::LDRSB_32_ldst_pos,
                (0b00, 1, 0b00) => return OpCode::STR_B_ldst_pos,
                (0b00, 1, 0b01) => return OpCode::LDR_B_ldst_pos,
                (0b00, 1, 0b10) => return OpCode::STR_Q_ldst_pos,
                (0b00, 1, 0b11) => return OpCode::LDR_Q_ldst_pos,
                (0b01, 0, 0b00) => return OpCode::STRH_32_ldst_pos,
                (0b01, 0, 0b01) => return OpCode::LDRH_32_ldst_pos,
                (0b01, 0, 0b10) => return OpCode::LDRSH_64_ldst_pos,
                (0b01, 0, 0b11) => return OpCode::LDRSH_32_ldst_pos,
                (0b01, 1, 0b00) => return OpCode::STR_H_ldst_pos,
                (0b01, 1, 0b01) => return OpCode::LDR_H_ldst_pos,
                (0b10 | 0b11, 0, 0b11) => return OpCode::Unallocated,
                (0b10 | 0b11, 1, 0b10 | 0b11) => return OpCode::Unallocated,
                (0b10, 0, 0b00) => return OpCode::STR_32_ldst_pos,
                (0b10, 0, 0b01) => return OpCode::LDR_32_ldst_pos,
                (0b10, 0, 0b10) => return OpCode::LDRSW_64_ldst_pos,
                (0b10, 1, 0b00) => return OpCode::STR_S_ldst_pos,
                (0b10, 1, 0b01) => return OpCode::LDR_S_ldst_pos,
                (0b11, 0, 0b00) => return OpCode::STR_64_ldst_pos,
                (0b11, 0, 0b01) => return OpCode::LDR_64_ldst_pos,
                (0b11, 0, 0b10) => return OpCode::PRFM_P_ldst_pos,
                (0b11, 1, 0b00) => return OpCode::STR_D_ldst_pos,
                (0b11, 1, 0b01) => return OpCode::LDR_D_ldst_pos,
                _ => return OpCode::Unpredictable,
            }
        }
        _ => return OpCode::Unpredictable,
    }
    (_, 0b01010 | 0b11010 | 0b01011 | 0b11011, _) => match ((inst >> 31) & 0b1, (inst >> 30) & 0b1, (inst >> 29) & 0b1, (inst >> 28) & 0b1, (inst >> 25) & 0b111, (inst >> 21) & 0b1111, (inst >> 16) & 0b11111, (inst >> 10) & 0b111111, inst & 0b1111111111) {
        (_, 0, _, 1, _, 0b0110, _, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, S, opcode) {
                (_, _, 0b000001) => return OpCode::Unallocated,
                (_, _, 0b011000 | 0b011100 | 0b011010 | 0b011110 | 0b011001 | 0b011101 | 0b011011 | 0b011111) => return OpCode::Unallocated,
                (_, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111) => return OpCode::Unallocated,
                (_, 0, 0b000110 | 0b000111) => return OpCode::Unallocated,
                (_, 0, 0b001101) => return OpCode::Unallocated,
                (_, 0, 0b001110 | 0b001111) => return OpCode::Unallocated,
                (_, 1, 0b000010 | 0b000011) => return OpCode::Unallocated,
                (_, 1, 0b000100 | 0b000110 | 0b000101 | 0b000111) => return OpCode::Unallocated,
                (_, 1, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111) => return OpCode::Unallocated,
                (_, 1, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111) => return OpCode::Unallocated,
                (0, _, 0b000000) => return OpCode::Unallocated,
                (0, 0, 0b000010) => return OpCode::UDIV_32_dp_2src,
                (0, 0, 0b000011) => return OpCode::SDIV_32_dp_2src,
                (0, 0, 0b000100 | 0b000101) => return OpCode::Unallocated,
                (0, 0, 0b001000) => return OpCode::LSLV_32_dp_2src,
                (0, 0, 0b001001) => return OpCode::LSRV_32_dp_2src,
                (0, 0, 0b001010) => return OpCode::ASRV_32_dp_2src,
                (0, 0, 0b001011) => return OpCode::RORV_32_dp_2src,
                (0, 0, 0b001100) => return OpCode::Unallocated,
                (0, 0, 0b010011 | 0b010111) => return OpCode::Unallocated,
                (0, 0, 0b010000) => return OpCode::CRC32B_32C_dp_2src,
                (0, 0, 0b010001) => return OpCode::CRC32H_32C_dp_2src,
                (0, 0, 0b010010) => return OpCode::CRC32W_32C_dp_2src,
                (0, 0, 0b010100) => return OpCode::CRC32CB_32C_dp_2src,
                (0, 0, 0b010101) => return OpCode::CRC32CH_32C_dp_2src,
                (0, 0, 0b010110) => return OpCode::CRC32CW_32C_dp_2src,
                (1, 0, 0b000000) => return OpCode::SUBP_64S_dp_2src,
                (1, 0, 0b000010) => return OpCode::UDIV_64_dp_2src,
                (1, 0, 0b000011) => return OpCode::SDIV_64_dp_2src,
                (1, 0, 0b000100) => return OpCode::IRG_64I_dp_2src,
                (1, 0, 0b000101) => return OpCode::GMI_64G_dp_2src,
                (1, 0, 0b001000) => return OpCode::LSLV_64_dp_2src,
                (1, 0, 0b001001) => return OpCode::LSRV_64_dp_2src,
                (1, 0, 0b001010) => return OpCode::ASRV_64_dp_2src,
                (1, 0, 0b001011) => return OpCode::RORV_64_dp_2src,
                (1, 0, 0b001100) => return OpCode::PACGA_64P_dp_2src,
                (1, 0, 0b010000 | 0b010100 | 0b010010 | 0b010110) => return OpCode::Unallocated,
                (1, 0, 0b010000 | 0b010100 | 0b010001 | 0b010101) => return OpCode::Unallocated,
                (1, 0, 0b010011) => return OpCode::CRC32X_64C_dp_2src,
                (1, 0, 0b010111) => return OpCode::CRC32CX_64C_dp_2src,
                (1, 1, 0b000000) => return OpCode::SUBPS_64S_dp_2src,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, 1, _, 1, _, 0b0110, _, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let opcode2 = (inst >> 16) & 0b11111;
            let opcode = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, S, opcode2, opcode, Rn) {
                (_, _, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111, _) => return OpCode::Unallocated,
                (_, _, 0b00010 | 0b10010 | 0b01010 | 0b11010 | 0b00110 | 0b10110 | 0b01110 | 0b11110 | 0b00011 | 0b10011 | 0b01011 | 0b11011 | 0b00111 | 0b10111 | 0b01111 | 0b11111, _, _) => return OpCode::Unallocated,
                (_, _, 0b00100 | 0b10100 | 0b01100 | 0b11100 | 0b00110 | 0b10110 | 0b01110 | 0b11110 | 0b00101 | 0b10101 | 0b01101 | 0b11101 | 0b00111 | 0b10111 | 0b01111 | 0b11111, _, _) => return OpCode::Unallocated,
                (_, _, 0b01000 | 0b11000 | 0b01100 | 0b11100 | 0b01010 | 0b11010 | 0b01110 | 0b11110 | 0b01001 | 0b11001 | 0b01101 | 0b11101 | 0b01011 | 0b11011 | 0b01111 | 0b11111, _, _) => return OpCode::Unallocated,
                (_, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111, _, _) => return OpCode::Unallocated,
                (_, 0, 0b00000, 0b000110 | 0b000111, _) => return OpCode::Unallocated,
                (_, 0, 0b00000, 0b001000 | 0b001100 | 0b001010 | 0b001110 | 0b001001 | 0b001101 | 0b001011 | 0b001111, _) => return OpCode::Unallocated,
                (_, 0, 0b00000, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111, _) => return OpCode::Unallocated,
                (_, 1, _, _, _) => return OpCode::Unallocated,
                (0, _, 0b00001, _, _) => return OpCode::Unallocated,
                (0, 0, 0b00000, 0b000000, _) => return OpCode::RBIT_32_dp_1src,
                (0, 0, 0b00000, 0b000001, _) => return OpCode::REV16_32_dp_1src,
                (0, 0, 0b00000, 0b000010, _) => return OpCode::REV_32_dp_1src,
                (0, 0, 0b00000, 0b000011, _) => return OpCode::Unallocated,
                (0, 0, 0b00000, 0b000100, _) => return OpCode::CLZ_32_dp_1src,
                (0, 0, 0b00000, 0b000101, _) => return OpCode::CLS_32_dp_1src,
                (1, 0, 0b00000, 0b000000, _) => return OpCode::RBIT_64_dp_1src,
                (1, 0, 0b00000, 0b000001, _) => return OpCode::REV16_64_dp_1src,
                (1, 0, 0b00000, 0b000010, _) => return OpCode::REV32_64_dp_1src,
                (1, 0, 0b00000, 0b000011, _) => return OpCode::REV_64_dp_1src,
                (1, 0, 0b00000, 0b000100, _) => return OpCode::CLZ_64_dp_1src,
                (1, 0, 0b00000, 0b000101, _) => return OpCode::CLS_64_dp_1src,
                (1, 0, 0b00001, 0b000000, _) => return OpCode::PACIA_64P_dp_1src,
                (1, 0, 0b00001, 0b000001, _) => return OpCode::PACIB_64P_dp_1src,
                (1, 0, 0b00001, 0b000010, _) => return OpCode::PACDA_64P_dp_1src,
                (1, 0, 0b00001, 0b000011, _) => return OpCode::PACDB_64P_dp_1src,
                (1, 0, 0b00001, 0b000100, _) => return OpCode::AUTIA_64P_dp_1src,
                (1, 0, 0b00001, 0b000101, _) => return OpCode::AUTIB_64P_dp_1src,
                (1, 0, 0b00001, 0b000110, _) => return OpCode::AUTDA_64P_dp_1src,
                (1, 0, 0b00001, 0b000111, _) => return OpCode::AUTDB_64P_dp_1src,
                (1, 0, 0b00001, 0b001000, 0b11111) => return OpCode::PACIZA_64Z_dp_1src,
                (1, 0, 0b00001, 0b001001, 0b11111) => return OpCode::PACIZB_64Z_dp_1src,
                (1, 0, 0b00001, 0b001010, 0b11111) => return OpCode::PACDZA_64Z_dp_1src,
                (1, 0, 0b00001, 0b001011, 0b11111) => return OpCode::PACDZB_64Z_dp_1src,
                (1, 0, 0b00001, 0b001100, 0b11111) => return OpCode::AUTIZA_64Z_dp_1src,
                (1, 0, 0b00001, 0b001101, 0b11111) => return OpCode::AUTIZB_64Z_dp_1src,
                (1, 0, 0b00001, 0b001110, 0b11111) => return OpCode::AUTDZA_64Z_dp_1src,
                (1, 0, 0b00001, 0b001111, 0b11111) => return OpCode::AUTDZB_64Z_dp_1src,
                (1, 0, 0b00001, 0b010000, 0b11111) => return OpCode::XPACI_64Z_dp_1src,
                (1, 0, 0b00001, 0b010001, 0b11111) => return OpCode::XPACD_64Z_dp_1src,
                (1, 0, 0b00001, 0b010010 | 0b010011, _) => return OpCode::Unallocated,
                (1, 0, 0b00001, 0b010100 | 0b010110 | 0b010101 | 0b010111, _) => return OpCode::Unallocated,
                (1, 0, 0b00001, 0b011000 | 0b011100 | 0b011010 | 0b011110 | 0b011001 | 0b011101 | 0b011011 | 0b011111, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 0, _, 0b0000 | 0b0100 | 0b0010 | 0b0110 | 0b0001 | 0b0101 | 0b0011 | 0b0111, _, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let opc = (inst >> 29) & 0b11;
            let shift = (inst >> 22) & 0b11;
            let N = (inst >> 21) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let imm6 = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, opc, N, imm6) {
                (0, _, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111) => return OpCode::Unallocated,
                (0, 0b00, 0, _) => return OpCode::AND_32_log_shift,
                (0, 0b00, 1, _) => return OpCode::BIC_32_log_shift,
                (0, 0b01, 0, _) => return OpCode::ORR_32_log_shift,
                (0, 0b01, 1, _) => return OpCode::ORN_32_log_shift,
                (0, 0b10, 0, _) => return OpCode::EOR_32_log_shift,
                (0, 0b10, 1, _) => return OpCode::EON_32_log_shift,
                (0, 0b11, 0, _) => return OpCode::ANDS_32_log_shift,
                (0, 0b11, 1, _) => return OpCode::BICS_32_log_shift,
                (1, 0b00, 0, _) => return OpCode::AND_64_log_shift,
                (1, 0b00, 1, _) => return OpCode::BIC_64_log_shift,
                (1, 0b01, 0, _) => return OpCode::ORR_64_log_shift,
                (1, 0b01, 1, _) => return OpCode::ORN_64_log_shift,
                (1, 0b10, 0, _) => return OpCode::EOR_64_log_shift,
                (1, 0b10, 1, _) => return OpCode::EON_64_log_shift,
                (1, 0b11, 0, _) => return OpCode::ANDS_64_log_shift,
                (1, 0b11, 1, _) => return OpCode::BICS_64_log_shift,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 0, _, 0b1000 | 0b1100 | 0b1010 | 0b1110, _, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let shift = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let imm6 = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, op, S, shift, imm6) {
                (_, _, _, 0b11, _) => return OpCode::Unallocated,
                (0, _, _, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111) => return OpCode::Unallocated,
                (0, 0, 0, _, _) => return OpCode::ADD_32_addsub_shift,
                (0, 0, 1, _, _) => return OpCode::ADDS_32_addsub_shift,
                (0, 1, 0, _, _) => return OpCode::SUB_32_addsub_shift,
                (0, 1, 1, _, _) => return OpCode::SUBS_32_addsub_shift,
                (1, 0, 0, _, _) => return OpCode::ADD_64_addsub_shift,
                (1, 0, 1, _, _) => return OpCode::ADDS_64_addsub_shift,
                (1, 1, 0, _, _) => return OpCode::SUB_64_addsub_shift,
                (1, 1, 1, _, _) => return OpCode::SUBS_64_addsub_shift,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 0, _, 0b1001 | 0b1101 | 0b1011 | 0b1111, _, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let opt = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let option = (inst >> 13) & 0b111;
            let imm3 = (inst >> 10) & 0b111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, op, S, opt, imm3) {
                (_, _, _, _, 0b101 | 0b111) => return OpCode::Unallocated,
                (_, _, _, _, 0b110 | 0b111) => return OpCode::Unallocated,
                (_, _, _, 0b01 | 0b11, _) => return OpCode::Unallocated,
                (_, _, _, 0b10 | 0b11, _) => return OpCode::Unallocated,
                (0, 0, 0, 0b00, _) => return OpCode::ADD_32_addsub_ext,
                (0, 0, 1, 0b00, _) => return OpCode::ADDS_32S_addsub_ext,
                (0, 1, 0, 0b00, _) => return OpCode::SUB_32_addsub_ext,
                (0, 1, 1, 0b00, _) => return OpCode::SUBS_32S_addsub_ext,
                (1, 0, 0, 0b00, _) => return OpCode::ADD_64_addsub_ext,
                (1, 0, 1, 0b00, _) => return OpCode::ADDS_64S_addsub_ext,
                (1, 1, 0, 0b00, _) => return OpCode::SUB_64_addsub_ext,
                (1, 1, 1, 0b00, _) => return OpCode::SUBS_64S_addsub_ext,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 1, _, 0b0000, _, 0b000000, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, op, S) {
                (0, 0, 0) => return OpCode::ADC_32_addsub_carry,
                (0, 0, 1) => return OpCode::ADCS_32_addsub_carry,
                (0, 1, 0) => return OpCode::SBC_32_addsub_carry,
                (0, 1, 1) => return OpCode::SBCS_32_addsub_carry,
                (1, 0, 0) => return OpCode::ADC_64_addsub_carry,
                (1, 0, 1) => return OpCode::ADCS_64_addsub_carry,
                (1, 1, 0) => return OpCode::SBC_64_addsub_carry,
                (1, 1, 1) => return OpCode::SBCS_64_addsub_carry,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 1, _, 0b0000, _, 0b000001 | 0b100001, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let imm6 = (inst >> 15) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let o2 = (inst >> 4) & 0b1;
            let mask = inst & 0b1111;
            match (sf, op, S, o2) {
                (0, _, _, _) => return OpCode::Unallocated,
                (1, 0, 0, _) => return OpCode::Unallocated,
                (1, 0, 1, 0) => return OpCode::RMIF_only_rmif,
                (1, 0, 1, 1) => return OpCode::Unallocated,
                (1, 1, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 1, _, 0b0000, _, 0b000010 | 0b100010 | 0b010010 | 0b110010, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let opcode2 = (inst >> 15) & 0b111111;
            let sz = (inst >> 14) & 0b1;
            let Rn = (inst >> 5) & 0b11111;
            let o3 = (inst >> 4) & 0b1;
            let mask = inst & 0b1111;
            match (sf, op, S, opcode2, sz, o3, mask) {
                (0, 0, 0, _, _, _, _) => return OpCode::Unallocated,
                (0, 0, 1, var0, _, _, _) if var0 != 0b000000 => return OpCode::Unallocated,
                (0, 0, 1, 0b000000, _, 0, var0) if var0 != 0b1101 => return OpCode::Unallocated,
                (0, 0, 1, 0b000000, _, 1, _) => return OpCode::Unallocated,
                (0, 0, 1, 0b000000, 0, 0, 0b1101) => return OpCode::SETF8_only_setf,
                (0, 0, 1, 0b000000, 1, 0, 0b1101) => return OpCode::SETF16_only_setf,
                (0, 1, _, _, _, _, _) => return OpCode::Unallocated,
                (1, _, _, _, _, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 1, _, 0b0010, _, 0b000000 | 0b100000 | 0b010000 | 0b110000 | 0b001000 | 0b101000 | 0b011000 | 0b111000 | 0b000100 | 0b100100 | 0b010100 | 0b110100 | 0b001100 | 0b101100 | 0b011100 | 0b111100 | 0b000001 | 0b100001 | 0b010001 | 0b110001 | 0b001001 | 0b101001 | 0b011001 | 0b111001 | 0b000101 | 0b100101 | 0b010101 | 0b110101 | 0b001101 | 0b101101 | 0b011101 | 0b111101, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let cond = (inst >> 12) & 0b1111;
            let o2 = (inst >> 10) & 0b1;
            let Rn = (inst >> 5) & 0b11111;
            let o3 = (inst >> 4) & 0b1;
            let nzcv = inst & 0b1111;
            match (sf, op, S, o2, o3) {
                (_, _, _, _, 1) => return OpCode::Unallocated,
                (_, _, _, 1, _) => return OpCode::Unallocated,
                (_, _, 0, _, _) => return OpCode::Unallocated,
                (0, 0, 1, 0, 0) => return OpCode::CCMN_32_condcmp_reg,
                (0, 1, 1, 0, 0) => return OpCode::CCMP_32_condcmp_reg,
                (1, 0, 1, 0, 0) => return OpCode::CCMN_64_condcmp_reg,
                (1, 1, 1, 0, 0) => return OpCode::CCMP_64_condcmp_reg,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 1, _, 0b0010, _, 0b000010 | 0b100010 | 0b010010 | 0b110010 | 0b001010 | 0b101010 | 0b011010 | 0b111010 | 0b000110 | 0b100110 | 0b010110 | 0b110110 | 0b001110 | 0b101110 | 0b011110 | 0b111110 | 0b000011 | 0b100011 | 0b010011 | 0b110011 | 0b001011 | 0b101011 | 0b011011 | 0b111011 | 0b000111 | 0b100111 | 0b010111 | 0b110111 | 0b001111 | 0b101111 | 0b011111 | 0b111111, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let imm5 = (inst >> 16) & 0b11111;
            let cond = (inst >> 12) & 0b1111;
            let o2 = (inst >> 10) & 0b1;
            let Rn = (inst >> 5) & 0b11111;
            let o3 = (inst >> 4) & 0b1;
            let nzcv = inst & 0b1111;
            match (sf, op, S, o2, o3) {
                (_, _, _, _, 1) => return OpCode::Unallocated,
                (_, _, _, 1, _) => return OpCode::Unallocated,
                (_, _, 0, _, _) => return OpCode::Unallocated,
                (0, 0, 1, 0, 0) => return OpCode::CCMN_32_condcmp_imm,
                (0, 1, 1, 0, 0) => return OpCode::CCMP_32_condcmp_imm,
                (1, 0, 1, 0, 0) => return OpCode::CCMN_64_condcmp_imm,
                (1, 1, 1, 0, 0) => return OpCode::CCMP_64_condcmp_imm,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 1, _, 0b0100, _, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let op = (inst >> 30) & 0b1;
            let S = (inst >> 29) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let cond = (inst >> 12) & 0b1111;
            let op2 = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, op, S, op2) {
                (_, _, _, 0b10 | 0b11) => return OpCode::Unallocated,
                (_, _, 1, _) => return OpCode::Unallocated,
                (0, 0, 0, 0b00) => return OpCode::CSEL_32_condsel,
                (0, 0, 0, 0b01) => return OpCode::CSINC_32_condsel,
                (0, 1, 0, 0b00) => return OpCode::CSINV_32_condsel,
                (0, 1, 0, 0b01) => return OpCode::CSNEG_32_condsel,
                (1, 0, 0, 0b00) => return OpCode::CSEL_64_condsel,
                (1, 0, 0, 0b01) => return OpCode::CSINC_64_condsel,
                (1, 1, 0, 0b00) => return OpCode::CSINV_64_condsel,
                (1, 1, 0, 0b01) => return OpCode::CSNEG_64_condsel,
                _ => return OpCode::Unpredictable,
            }
        }
        (_, _, _, 1, _, 0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111, _, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let op54 = (inst >> 29) & 0b11;
            let op31 = (inst >> 21) & 0b111;
            let Rm = (inst >> 16) & 0b11111;
            let o0 = (inst >> 15) & 0b1;
            let Ra = (inst >> 10) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, op54, op31, o0) {
                (_, 0b00, 0b010, 1) => return OpCode::Unallocated,
                (_, 0b00, 0b011, _) => return OpCode::Unallocated,
                (_, 0b00, 0b100, _) => return OpCode::Unallocated,
                (_, 0b00, 0b110, 1) => return OpCode::Unallocated,
                (_, 0b00, 0b111, _) => return OpCode::Unallocated,
                (_, 0b01, _, _) => return OpCode::Unallocated,
                (_, 0b10 | 0b11, _, _) => return OpCode::Unallocated,
                (0, 0b00, 0b000, 0) => return OpCode::MADD_32A_dp_3src,
                (0, 0b00, 0b000, 1) => return OpCode::MSUB_32A_dp_3src,
                (0, 0b00, 0b001, 0) => return OpCode::Unallocated,
                (0, 0b00, 0b001, 1) => return OpCode::Unallocated,
                (0, 0b00, 0b010, 0) => return OpCode::Unallocated,
                (0, 0b00, 0b101, 0) => return OpCode::Unallocated,
                (0, 0b00, 0b101, 1) => return OpCode::Unallocated,
                (0, 0b00, 0b110, 0) => return OpCode::Unallocated,
                (1, 0b00, 0b000, 0) => return OpCode::MADD_64A_dp_3src,
                (1, 0b00, 0b000, 1) => return OpCode::MSUB_64A_dp_3src,
                (1, 0b00, 0b001, 0) => return OpCode::SMADDL_64WA_dp_3src,
                (1, 0b00, 0b001, 1) => return OpCode::SMSUBL_64WA_dp_3src,
                (1, 0b00, 0b010, 0) => return OpCode::SMULH_64_dp_3src,
                (1, 0b00, 0b101, 0) => return OpCode::UMADDL_64WA_dp_3src,
                (1, 0b00, 0b101, 1) => return OpCode::UMSUBL_64WA_dp_3src,
                (1, 0b00, 0b110, 0) => return OpCode::UMULH_64_dp_3src,
                _ => return OpCode::Unpredictable,
            }
        }
        _ => return OpCode::Unpredictable,
    }
    (_, 0b01110 | 0b11110 | 0b01111 | 0b11111, _) => match ((inst >> 28) & 0b1111, (inst >> 25) & 0b111, (inst >> 23) & 0b11, (inst >> 19) & 0b1111, (inst >> 10) & 0b111111111, inst & 0b1111111111) {
        (0b0000, _, 0b00 | 0b01, 0b0101 | 0b1101, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => return OpCode::Unpredictable,
        (0b0010, _, 0b00 | 0b01, 0b0101 | 0b1101, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => return OpCode::Unpredictable,
        (0b0100, _, 0b00 | 0b01, 0b0101 | 0b1101, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => {
            let size = (inst >> 22) & 0b11;
            let opcode = (inst >> 12) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (size, opcode) {
                (_, 0b01000 | 0b11000 | 0b01100 | 0b11100 | 0b01010 | 0b11010 | 0b01110 | 0b11110 | 0b01001 | 0b11001 | 0b01101 | 0b11101 | 0b01011 | 0b11011 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, 0b00000 | 0b00010 | 0b00001 | 0b00011) => return OpCode::Unallocated,
                (_, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111) => return OpCode::Unallocated,
                (0b01 | 0b11, _) => return OpCode::Unallocated,
                (0b00, 0b00100) => return OpCode::AESE_B_cryptoaes,
                (0b00, 0b00101) => return OpCode::AESD_B_cryptoaes,
                (0b00, 0b00110) => return OpCode::AESMC_B_cryptoaes,
                (0b00, 0b00111) => return OpCode::AESIMC_B_cryptoaes,
                (0b10 | 0b11, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100, _) => {
            let size = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 12) & 0b111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (size, opcode) {
                (_, 0b111) => return OpCode::Unallocated,
                (0b01 | 0b11, _) => return OpCode::Unallocated,
                (0b00, 0b000) => return OpCode::SHA1C_QSV_cryptosha3,
                (0b00, 0b001) => return OpCode::SHA1P_QSV_cryptosha3,
                (0b00, 0b010) => return OpCode::SHA1M_QSV_cryptosha3,
                (0b00, 0b011) => return OpCode::SHA1SU0_VVV_cryptosha3,
                (0b00, 0b100) => return OpCode::SHA256H_QQV_cryptosha3,
                (0b00, 0b101) => return OpCode::SHA256H2_QQV_cryptosha3,
                (0b00, 0b110) => return OpCode::SHA256SU1_VVV_cryptosha3,
                (0b10 | 0b11, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000000010 | 0b100000010 | 0b010000010 | 0b110000010 | 0b001000010 | 0b101000010 | 0b011000010 | 0b111000010 | 0b000010010 | 0b100010010 | 0b010010010 | 0b110010010 | 0b001010010 | 0b101010010 | 0b011010010 | 0b111010010 | 0b000001010 | 0b100001010 | 0b010001010 | 0b110001010 | 0b001001010 | 0b101001010 | 0b011001010 | 0b111001010 | 0b000011010 | 0b100011010 | 0b010011010 | 0b110011010 | 0b001011010 | 0b101011010 | 0b011011010 | 0b111011010 | 0b000000110 | 0b100000110 | 0b010000110 | 0b110000110 | 0b001000110 | 0b101000110 | 0b011000110 | 0b111000110 | 0b000010110 | 0b100010110 | 0b010010110 | 0b110010110 | 0b001010110 | 0b101010110 | 0b011010110 | 0b111010110 | 0b000001110 | 0b100001110 | 0b010001110 | 0b110001110 | 0b001001110 | 0b101001110 | 0b011001110 | 0b111001110 | 0b000011110 | 0b100011110 | 0b010011110 | 0b110011110 | 0b001011110 | 0b101011110 | 0b011011110 | 0b111011110, _) => return OpCode::Unpredictable,
        (0b0101, _, 0b00 | 0b01, 0b0101 | 0b1101, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => {
            let size = (inst >> 22) & 0b11;
            let opcode = (inst >> 12) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (size, opcode) {
                (_, 0b00100 | 0b10100 | 0b01100 | 0b11100 | 0b00110 | 0b10110 | 0b01110 | 0b11110 | 0b00101 | 0b10101 | 0b01101 | 0b11101 | 0b00111 | 0b10111 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, 0b01000 | 0b11000 | 0b01100 | 0b11100 | 0b01010 | 0b11010 | 0b01110 | 0b11110 | 0b01001 | 0b11001 | 0b01101 | 0b11101 | 0b01011 | 0b11011 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111) => return OpCode::Unallocated,
                (0b01 | 0b11, _) => return OpCode::Unallocated,
                (0b00, 0b00000) => return OpCode::SHA1H_SS_cryptosha2,
                (0b00, 0b00001) => return OpCode::SHA1SU1_VV_cryptosha2,
                (0b00, 0b00010) => return OpCode::SHA256SU0_VV_cryptosha2,
                (0b00, 0b00011) => return OpCode::Unallocated,
                (0b10 | 0b11, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0110, _, 0b00 | 0b01, 0b0101 | 0b1101, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => return OpCode::Unpredictable,
        (0b0111, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100 | 0b000000010 | 0b100000010 | 0b010000010 | 0b110000010 | 0b001000010 | 0b101000010 | 0b011000010 | 0b111000010 | 0b000010010 | 0b100010010 | 0b010010010 | 0b110010010 | 0b001010010 | 0b101010010 | 0b011010010 | 0b111010010 | 0b000001010 | 0b100001010 | 0b010001010 | 0b110001010 | 0b001001010 | 0b101001010 | 0b011001010 | 0b111001010 | 0b000011010 | 0b100011010 | 0b010011010 | 0b110011010 | 0b001011010 | 0b101011010 | 0b011011010 | 0b111011010 | 0b000000110 | 0b100000110 | 0b010000110 | 0b110000110 | 0b001000110 | 0b101000110 | 0b011000110 | 0b111000110 | 0b000010110 | 0b100010110 | 0b010010110 | 0b110010110 | 0b001010110 | 0b101010110 | 0b011010110 | 0b111010110 | 0b000001110 | 0b100001110 | 0b010001110 | 0b110001110 | 0b001001110 | 0b101001110 | 0b011001110 | 0b111001110 | 0b000011110 | 0b100011110 | 0b010011110 | 0b110011110 | 0b001011110 | 0b101011110 | 0b011011110 | 0b111011110, _) => return OpCode::Unpredictable,
        (0b0111, _, 0b00 | 0b01, 0b0101 | 0b1101, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => return OpCode::Unpredictable,
        (0b0101 | 0b0111, _, 0b00, 0b0000 | 0b0010 | 0b0001 | 0b0011, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111, _) => {
            let op = (inst >> 29) & 0b1;
            let imm5 = (inst >> 16) & 0b11111;
            let imm4 = (inst >> 11) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (op, imm5, imm4) {
                (0, _, 0b0001 | 0b1001 | 0b0101 | 0b1101 | 0b0011 | 0b1011 | 0b0111 | 0b1111) => return OpCode::Unallocated,
                (0, _, 0b0010 | 0b1010 | 0b0110 | 0b1110 | 0b0011 | 0b1011 | 0b0111 | 0b1111) => return OpCode::Unallocated,
                (0, _, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111) => return OpCode::Unallocated,
                (0, _, 0b0000) => return OpCode::DUP_asisdone_only,
                (0, _, 0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111) => return OpCode::Unallocated,
                (0, 0b00000 | 0b10000, 0b0000) => return OpCode::Unallocated,
                (1, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b01, 0b0000 | 0b0010 | 0b0001 | 0b0011, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111, _) => return OpCode::Unpredictable,
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0111, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => return OpCode::Unpredictable,
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b1000 | 0b1010 | 0b1001 | 0b1011, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111, _) => {
            let U = (inst >> 29) & 0b1;
            let a = (inst >> 23) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 11) & 0b111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, a, opcode) {
                (_, _, 0b110) => return OpCode::Unallocated,
                (_, 1, 0b011) => return OpCode::Unallocated,
                (0, 0, 0b011) => return OpCode::FMULX_asisdsamefp16_only,
                (0, 0, 0b100) => return OpCode::FCMEQ_asisdsamefp16_only,
                (0, 0, 0b101) => return OpCode::Unallocated,
                (0, 0, 0b111) => return OpCode::FRECPS_asisdsamefp16_only,
                (0, 1, 0b100) => return OpCode::Unallocated,
                (0, 1, 0b101) => return OpCode::Unallocated,
                (0, 1, 0b111) => return OpCode::FRSQRTS_asisdsamefp16_only,
                (1, 0, 0b011) => return OpCode::Unallocated,
                (1, 0, 0b100) => return OpCode::FCMGE_asisdsamefp16_only,
                (1, 0, 0b101) => return OpCode::FACGE_asisdsamefp16_only,
                (1, 0, 0b111) => return OpCode::Unallocated,
                (1, 1, 0b010) => return OpCode::FABD_asisdsamefp16_only,
                (1, 1, 0b100) => return OpCode::FCMGT_asisdsamefp16_only,
                (1, 1, 0b101) => return OpCode::FACGT_asisdsamefp16_only,
                (1, 1, 0b111) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b1000 | 0b1010 | 0b1001 | 0b1011, 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111, _) => return OpCode::Unpredictable,
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b1111, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => {
            let U = (inst >> 29) & 0b1;
            let a = (inst >> 23) & 0b1;
            let opcode = (inst >> 12) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, a, opcode) {
                (_, _, 0b00000 | 0b00100 | 0b00010 | 0b00110 | 0b00001 | 0b00101 | 0b00011 | 0b00111) => return OpCode::Unallocated,
                (_, _, 0b01000 | 0b01010 | 0b01001 | 0b01011) => return OpCode::Unallocated,
                (_, _, 0b10000 | 0b10100 | 0b10010 | 0b10110 | 0b10001 | 0b10101 | 0b10011 | 0b10111) => return OpCode::Unallocated,
                (_, _, 0b11000 | 0b11001) => return OpCode::Unallocated,
                (_, _, 0b11110) => return OpCode::Unallocated,
                (_, 0, 0b01100 | 0b01110 | 0b01101 | 0b01111) => return OpCode::Unallocated,
                (_, 0, 0b11111) => return OpCode::Unallocated,
                (_, 1, 0b01111) => return OpCode::Unallocated,
                (_, 1, 0b11100) => return OpCode::Unallocated,
                (0, 0, 0b11010) => return OpCode::FCVTNS_asisdmiscfp16_R,
                (0, 0, 0b11011) => return OpCode::FCVTMS_asisdmiscfp16_R,
                (0, 0, 0b11100) => return OpCode::FCVTAS_asisdmiscfp16_R,
                (0, 0, 0b11101) => return OpCode::SCVTF_asisdmiscfp16_R,
                (0, 1, 0b01100) => return OpCode::FCMGT_asisdmiscfp16_FZ,
                (0, 1, 0b01101) => return OpCode::FCMEQ_asisdmiscfp16_FZ,
                (0, 1, 0b01110) => return OpCode::FCMLT_asisdmiscfp16_FZ,
                (0, 1, 0b11010) => return OpCode::FCVTPS_asisdmiscfp16_R,
                (0, 1, 0b11011) => return OpCode::FCVTZS_asisdmiscfp16_R,
                (0, 1, 0b11101) => return OpCode::FRECPE_asisdmiscfp16_R,
                (0, 1, 0b11111) => return OpCode::FRECPX_asisdmiscfp16_R,
                (1, 0, 0b11010) => return OpCode::FCVTNU_asisdmiscfp16_R,
                (1, 0, 0b11011) => return OpCode::FCVTMU_asisdmiscfp16_R,
                (1, 0, 0b11100) => return OpCode::FCVTAU_asisdmiscfp16_R,
                (1, 0, 0b11101) => return OpCode::UCVTF_asisdmiscfp16_R,
                (1, 1, 0b01100) => return OpCode::FCMGE_asisdmiscfp16_FZ,
                (1, 1, 0b01101) => return OpCode::FCMLE_asisdmiscfp16_FZ,
                (1, 1, 0b01110) => return OpCode::Unallocated,
                (1, 1, 0b11010) => return OpCode::FCVTPU_asisdmiscfp16_R,
                (1, 1, 0b11011) => return OpCode::FCVTZU_asisdmiscfp16_R,
                (1, 1, 0b11101) => return OpCode::FRSQRTE_asisdmiscfp16_R,
                (1, 1, 0b11111) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000100000 | 0b100100000 | 0b010100000 | 0b110100000 | 0b001100000 | 0b101100000 | 0b011100000 | 0b111100000 | 0b000110000 | 0b100110000 | 0b010110000 | 0b110110000 | 0b001110000 | 0b101110000 | 0b011110000 | 0b111110000 | 0b000101000 | 0b100101000 | 0b010101000 | 0b110101000 | 0b001101000 | 0b101101000 | 0b011101000 | 0b111101000 | 0b000111000 | 0b100111000 | 0b010111000 | 0b110111000 | 0b001111000 | 0b101111000 | 0b011111000 | 0b111111000 | 0b000100100 | 0b100100100 | 0b010100100 | 0b110100100 | 0b001100100 | 0b101100100 | 0b011100100 | 0b111100100 | 0b000110100 | 0b100110100 | 0b010110100 | 0b110110100 | 0b001110100 | 0b101110100 | 0b011110100 | 0b111110100 | 0b000101100 | 0b100101100 | 0b010101100 | 0b110101100 | 0b001101100 | 0b101101100 | 0b011101100 | 0b111101100 | 0b000111100 | 0b100111100 | 0b010111100 | 0b110111100 | 0b001111100 | 0b101111100 | 0b011111100 | 0b111111100 | 0b000100010 | 0b100100010 | 0b010100010 | 0b110100010 | 0b001100010 | 0b101100010 | 0b011100010 | 0b111100010 | 0b000110010 | 0b100110010 | 0b010110010 | 0b110110010 | 0b001110010 | 0b101110010 | 0b011110010 | 0b111110010 | 0b000101010 | 0b100101010 | 0b010101010 | 0b110101010 | 0b001101010 | 0b101101010 | 0b011101010 | 0b111101010 | 0b000111010 | 0b100111010 | 0b010111010 | 0b110111010 | 0b001111010 | 0b101111010 | 0b011111010 | 0b111111010 | 0b000100110 | 0b100100110 | 0b010100110 | 0b110100110 | 0b001100110 | 0b101100110 | 0b011100110 | 0b111100110 | 0b000110110 | 0b100110110 | 0b010110110 | 0b110110110 | 0b001110110 | 0b101110110 | 0b011110110 | 0b111110110 | 0b000101110 | 0b100101110 | 0b010101110 | 0b110101110 | 0b001101110 | 0b101101110 | 0b011101110 | 0b111101110 | 0b000111110 | 0b100111110 | 0b010111110 | 0b110111110 | 0b001111110 | 0b101111110 | 0b011111110 | 0b111111110, _) => return OpCode::Unpredictable,
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => {
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 11) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, opcode) {
                (_, 0b0010 | 0b0011) => return OpCode::Unallocated,
                (_, 0b0100 | 0b0110 | 0b0101 | 0b0111) => return OpCode::Unallocated,
                (_, 0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111) => return OpCode::Unallocated,
                (0, 0b0000) => return OpCode::Unallocated,
                (0, 0b0001) => return OpCode::Unallocated,
                (1, 0b0000) => return OpCode::SQRDMLAH_asisdsame2_only,
                (1, 0b0001) => return OpCode::SQRDMLSH_asisdsame2_only,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0100 | 0b1100, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => {
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let opcode = (inst >> 12) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, size, opcode) {
                (_, _, 0b00000 | 0b00001) => return OpCode::Unallocated,
                (_, _, 0b00010) => return OpCode::Unallocated,
                (_, _, 0b00100 | 0b00101) => return OpCode::Unallocated,
                (_, _, 0b00110) => return OpCode::Unallocated,
                (_, _, 0b01111) => return OpCode::Unallocated,
                (_, _, 0b10000 | 0b10001) => return OpCode::Unallocated,
                (_, _, 0b10011) => return OpCode::Unallocated,
                (_, _, 0b10101) => return OpCode::Unallocated,
                (_, _, 0b10111) => return OpCode::Unallocated,
                (_, _, 0b11000 | 0b11001) => return OpCode::Unallocated,
                (_, _, 0b11110) => return OpCode::Unallocated,
                (_, 0b00 | 0b01, 0b01100 | 0b01110 | 0b01101 | 0b01111) => return OpCode::Unallocated,
                (_, 0b00 | 0b01, 0b11111) => return OpCode::Unallocated,
                (_, 0b10 | 0b11, 0b10110) => return OpCode::Unallocated,
                (_, 0b10 | 0b11, 0b11100) => return OpCode::Unallocated,
                (0, _, 0b00011) => return OpCode::SUQADD_asisdmisc_R,
                (0, _, 0b00111) => return OpCode::SQABS_asisdmisc_R,
                (0, _, 0b01000) => return OpCode::CMGT_asisdmisc_Z,
                (0, _, 0b01001) => return OpCode::CMEQ_asisdmisc_Z,
                (0, _, 0b01010) => return OpCode::CMLT_asisdmisc_Z,
                (0, _, 0b01011) => return OpCode::ABS_asisdmisc_R,
                (0, _, 0b10010) => return OpCode::Unallocated,
                (0, _, 0b10100) => return OpCode::SQXTN_asisdmisc_N,
                (0, 0b00 | 0b01, 0b10110) => return OpCode::Unallocated,
                (0, 0b00 | 0b01, 0b11010) => return OpCode::FCVTNS_asisdmisc_R,
                (0, 0b00 | 0b01, 0b11011) => return OpCode::FCVTMS_asisdmisc_R,
                (0, 0b00 | 0b01, 0b11100) => return OpCode::FCVTAS_asisdmisc_R,
                (0, 0b00 | 0b01, 0b11101) => return OpCode::SCVTF_asisdmisc_R,
                (0, 0b10 | 0b11, 0b01100) => return OpCode::FCMGT_asisdmisc_FZ,
                (0, 0b10 | 0b11, 0b01101) => return OpCode::FCMEQ_asisdmisc_FZ,
                (0, 0b10 | 0b11, 0b01110) => return OpCode::FCMLT_asisdmisc_FZ,
                (0, 0b10 | 0b11, 0b11010) => return OpCode::FCVTPS_asisdmisc_R,
                (0, 0b10 | 0b11, 0b11011) => return OpCode::FCVTZS_asisdmisc_R,
                (0, 0b10 | 0b11, 0b11101) => return OpCode::FRECPE_asisdmisc_R,
                (0, 0b10 | 0b11, 0b11111) => return OpCode::FRECPX_asisdmisc_R,
                (1, _, 0b00011) => return OpCode::USQADD_asisdmisc_R,
                (1, _, 0b00111) => return OpCode::SQNEG_asisdmisc_R,
                (1, _, 0b01000) => return OpCode::CMGE_asisdmisc_Z,
                (1, _, 0b01001) => return OpCode::CMLE_asisdmisc_Z,
                (1, _, 0b01010) => return OpCode::Unallocated,
                (1, _, 0b01011) => return OpCode::NEG_asisdmisc_R,
                (1, _, 0b10010) => return OpCode::SQXTUN_asisdmisc_N,
                (1, _, 0b10100) => return OpCode::UQXTN_asisdmisc_N,
                (1, 0b00 | 0b01, 0b10110) => return OpCode::FCVTXN_asisdmisc_N,
                (1, 0b00 | 0b01, 0b11010) => return OpCode::FCVTNU_asisdmisc_R,
                (1, 0b00 | 0b01, 0b11011) => return OpCode::FCVTMU_asisdmisc_R,
                (1, 0b00 | 0b01, 0b11100) => return OpCode::FCVTAU_asisdmisc_R,
                (1, 0b00 | 0b01, 0b11101) => return OpCode::UCVTF_asisdmisc_R,
                (1, 0b10 | 0b11, 0b01100) => return OpCode::FCMGE_asisdmisc_FZ,
                (1, 0b10 | 0b11, 0b01101) => return OpCode::FCMLE_asisdmisc_FZ,
                (1, 0b10 | 0b11, 0b01110) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b11010) => return OpCode::FCVTPU_asisdmisc_R,
                (1, 0b10 | 0b11, 0b11011) => return OpCode::FCVTZU_asisdmisc_R,
                (1, 0b10 | 0b11, 0b11101) => return OpCode::FRSQRTE_asisdmisc_R,
                (1, 0b10 | 0b11, 0b11111) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0110 | 0b1110, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => {
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let opcode = (inst >> 12) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, size, opcode) {
                (_, _, 0b00000 | 0b00100 | 0b00010 | 0b00110 | 0b00001 | 0b00101 | 0b00011 | 0b00111) => return OpCode::Unallocated,
                (_, _, 0b01000 | 0b01010 | 0b01001 | 0b01011) => return OpCode::Unallocated,
                (_, _, 0b01110) => return OpCode::Unallocated,
                (_, _, 0b10000 | 0b10100 | 0b10010 | 0b10110 | 0b10001 | 0b10101 | 0b10011 | 0b10111) => return OpCode::Unallocated,
                (_, _, 0b11000 | 0b11001) => return OpCode::Unallocated,
                (_, _, 0b11010) => return OpCode::Unallocated,
                (_, _, 0b11100 | 0b11110 | 0b11101 | 0b11111) => return OpCode::Unallocated,
                (_, 0b10 | 0b11, 0b01101) => return OpCode::Unallocated,
                (0, _, 0b11011) => return OpCode::ADDP_asisdpair_only,
                (0, 0b00, 0b01100) => return OpCode::FMAXNMP_asisdpair_only_H,
                (0, 0b00, 0b01101) => return OpCode::FADDP_asisdpair_only_H,
                (0, 0b00, 0b01111) => return OpCode::FMAXP_asisdpair_only_H,
                (0, 0b01, 0b01100) => return OpCode::Unallocated,
                (0, 0b01, 0b01101) => return OpCode::Unallocated,
                (0, 0b01, 0b01111) => return OpCode::Unallocated,
                (0, 0b10, 0b01100) => return OpCode::FMINNMP_asisdpair_only_H,
                (0, 0b10, 0b01111) => return OpCode::FMINP_asisdpair_only_H,
                (0, 0b11, 0b01100) => return OpCode::Unallocated,
                (0, 0b11, 0b01111) => return OpCode::Unallocated,
                (1, _, 0b11011) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b01100) => return OpCode::FMAXNMP_asisdpair_only_SD,
                (1, 0b00 | 0b01, 0b01101) => return OpCode::FADDP_asisdpair_only_SD,
                (1, 0b00 | 0b01, 0b01111) => return OpCode::FMAXP_asisdpair_only_SD,
                (1, 0b10 | 0b11, 0b01100) => return OpCode::FMINNMP_asisdpair_only_SD,
                (1, 0b10 | 0b11, 0b01111) => return OpCode::FMINP_asisdpair_only_SD,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b100000010 | 0b110000010 | 0b101000010 | 0b111000010 | 0b100100010 | 0b110100010 | 0b101100010 | 0b111100010 | 0b100010010 | 0b110010010 | 0b101010010 | 0b111010010 | 0b100110010 | 0b110110010 | 0b101110010 | 0b111110010 | 0b100001010 | 0b110001010 | 0b101001010 | 0b111001010 | 0b100101010 | 0b110101010 | 0b101101010 | 0b111101010 | 0b100011010 | 0b110011010 | 0b101011010 | 0b111011010 | 0b100111010 | 0b110111010 | 0b101111010 | 0b111111010 | 0b100000110 | 0b110000110 | 0b101000110 | 0b111000110 | 0b100100110 | 0b110100110 | 0b101100110 | 0b111100110 | 0b100010110 | 0b110010110 | 0b101010110 | 0b111010110 | 0b100110110 | 0b110110110 | 0b101110110 | 0b111110110 | 0b100001110 | 0b110001110 | 0b101001110 | 0b111001110 | 0b100101110 | 0b110101110 | 0b101101110 | 0b111101110 | 0b100011110 | 0b110011110 | 0b101011110 | 0b111011110 | 0b100111110 | 0b110111110 | 0b101111110 | 0b111111110, _) => return OpCode::Unpredictable,
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b010000010 | 0b110000010 | 0b011000010 | 0b111000010 | 0b010100010 | 0b110100010 | 0b011100010 | 0b111100010 | 0b010010010 | 0b110010010 | 0b011010010 | 0b111010010 | 0b010110010 | 0b110110010 | 0b011110010 | 0b111110010 | 0b010001010 | 0b110001010 | 0b011001010 | 0b111001010 | 0b010101010 | 0b110101010 | 0b011101010 | 0b111101010 | 0b010011010 | 0b110011010 | 0b011011010 | 0b111011010 | 0b010111010 | 0b110111010 | 0b011111010 | 0b111111010 | 0b010000110 | 0b110000110 | 0b011000110 | 0b111000110 | 0b010100110 | 0b110100110 | 0b011100110 | 0b111100110 | 0b010010110 | 0b110010110 | 0b011010110 | 0b111010110 | 0b010110110 | 0b110110110 | 0b011110110 | 0b111110110 | 0b010001110 | 0b110001110 | 0b011001110 | 0b111001110 | 0b010101110 | 0b110101110 | 0b011101110 | 0b111101110 | 0b010011110 | 0b110011110 | 0b011011110 | 0b111011110 | 0b010111110 | 0b110111110 | 0b011111110 | 0b111111110, _) => return OpCode::Unpredictable,
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000100000 | 0b100100000 | 0b010100000 | 0b110100000 | 0b001100000 | 0b101100000 | 0b011100000 | 0b111100000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000110000 | 0b100110000 | 0b010110000 | 0b110110000 | 0b001110000 | 0b101110000 | 0b011110000 | 0b111110000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000101000 | 0b100101000 | 0b010101000 | 0b110101000 | 0b001101000 | 0b101101000 | 0b011101000 | 0b111101000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000111000 | 0b100111000 | 0b010111000 | 0b110111000 | 0b001111000 | 0b101111000 | 0b011111000 | 0b111111000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000100100 | 0b100100100 | 0b010100100 | 0b110100100 | 0b001100100 | 0b101100100 | 0b011100100 | 0b111100100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000110100 | 0b100110100 | 0b010110100 | 0b110110100 | 0b001110100 | 0b101110100 | 0b011110100 | 0b111110100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000101100 | 0b100101100 | 0b010101100 | 0b110101100 | 0b001101100 | 0b101101100 | 0b011101100 | 0b111101100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100 | 0b000111100 | 0b100111100 | 0b010111100 | 0b110111100 | 0b001111100 | 0b101111100 | 0b011111100 | 0b111111100, _) => {
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 12) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, opcode) {
                (_, 0b0000 | 0b0010 | 0b0001 | 0b0011) => return OpCode::Unallocated,
                (_, 0b0100 | 0b0110 | 0b0101 | 0b0111) => return OpCode::Unallocated,
                (_, 0b1000) => return OpCode::Unallocated,
                (_, 0b1010) => return OpCode::Unallocated,
                (_, 0b1100) => return OpCode::Unallocated,
                (_, 0b1110 | 0b1111) => return OpCode::Unallocated,
                (0, 0b1001) => return OpCode::SQDMLAL_asisddiff_only,
                (0, 0b1011) => return OpCode::SQDMLSL_asisddiff_only,
                (0, 0b1101) => return OpCode::SQDMULL_asisddiff_only,
                (1, 0b1001) => return OpCode::Unallocated,
                (1, 0b1011) => return OpCode::Unallocated,
                (1, 0b1101) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => {
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 11) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, size, opcode) {
                (_, _, 0b00000) => return OpCode::Unallocated,
                (_, _, 0b00010 | 0b00011) => return OpCode::Unallocated,
                (_, _, 0b00100) => return OpCode::Unallocated,
                (_, _, 0b01100 | 0b01110 | 0b01101 | 0b01111) => return OpCode::Unallocated,
                (_, _, 0b10010 | 0b10011) => return OpCode::Unallocated,
                (_, 0b10 | 0b11, 0b11011) => return OpCode::Unallocated,
                (0, _, 0b00001) => return OpCode::SQADD_asisdsame_only,
                (0, _, 0b00101) => return OpCode::SQSUB_asisdsame_only,
                (0, _, 0b00110) => return OpCode::CMGT_asisdsame_only,
                (0, _, 0b00111) => return OpCode::CMGE_asisdsame_only,
                (0, _, 0b01000) => return OpCode::SSHL_asisdsame_only,
                (0, _, 0b01001) => return OpCode::SQSHL_asisdsame_only,
                (0, _, 0b01010) => return OpCode::SRSHL_asisdsame_only,
                (0, _, 0b01011) => return OpCode::SQRSHL_asisdsame_only,
                (0, _, 0b10000) => return OpCode::ADD_asisdsame_only,
                (0, _, 0b10001) => return OpCode::CMTST_asisdsame_only,
                (0, _, 0b10100) => return OpCode::Unallocated,
                (0, _, 0b10101) => return OpCode::Unallocated,
                (0, _, 0b10110) => return OpCode::SQDMULH_asisdsame_only,
                (0, _, 0b10111) => return OpCode::Unallocated,
                (0, 0b00 | 0b01, 0b11000) => return OpCode::Unallocated,
                (0, 0b00 | 0b01, 0b11001) => return OpCode::Unallocated,
                (0, 0b00 | 0b01, 0b11010) => return OpCode::Unallocated,
                (0, 0b00 | 0b01, 0b11011) => return OpCode::FMULX_asisdsame_only,
                (0, 0b00 | 0b01, 0b11100) => return OpCode::FCMEQ_asisdsame_only,
                (0, 0b00 | 0b01, 0b11101) => return OpCode::Unallocated,
                (0, 0b00 | 0b01, 0b11110) => return OpCode::Unallocated,
                (0, 0b00 | 0b01, 0b11111) => return OpCode::FRECPS_asisdsame_only,
                (0, 0b10 | 0b11, 0b11000) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11001) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11010) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11100) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11101) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11110) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11111) => return OpCode::FRSQRTS_asisdsame_only,
                (1, _, 0b00001) => return OpCode::UQADD_asisdsame_only,
                (1, _, 0b00101) => return OpCode::UQSUB_asisdsame_only,
                (1, _, 0b00110) => return OpCode::CMHI_asisdsame_only,
                (1, _, 0b00111) => return OpCode::CMHS_asisdsame_only,
                (1, _, 0b01000) => return OpCode::USHL_asisdsame_only,
                (1, _, 0b01001) => return OpCode::UQSHL_asisdsame_only,
                (1, _, 0b01010) => return OpCode::URSHL_asisdsame_only,
                (1, _, 0b01011) => return OpCode::UQRSHL_asisdsame_only,
                (1, _, 0b10000) => return OpCode::SUB_asisdsame_only,
                (1, _, 0b10001) => return OpCode::CMEQ_asisdsame_only,
                (1, _, 0b10100) => return OpCode::Unallocated,
                (1, _, 0b10101) => return OpCode::Unallocated,
                (1, _, 0b10110) => return OpCode::SQRDMULH_asisdsame_only,
                (1, _, 0b10111) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b11000) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b11001) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b11010) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b11011) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b11100) => return OpCode::FCMGE_asisdsame_only,
                (1, 0b00 | 0b01, 0b11101) => return OpCode::FACGE_asisdsame_only,
                (1, 0b00 | 0b01, 0b11110) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b11111) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b11000) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b11001) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b11010) => return OpCode::FABD_asisdsame_only,
                (1, 0b10 | 0b11, 0b11100) => return OpCode::FCMGT_asisdsame_only,
                (1, 0b10 | 0b11, 0b11101) => return OpCode::FACGT_asisdsame_only,
                (1, 0b10 | 0b11, 0b11110) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b11111) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b10, _, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => {
            let U = (inst >> 29) & 0b1;
            let immh = (inst >> 19) & 0b1111;
            let immb = (inst >> 16) & 0b111;
            let opcode = (inst >> 11) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, immh, opcode) {
                (_, var0, 0b00001) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b00011) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b00101) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b00111) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b01001) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b01011) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b01101) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b01111) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b10100 | 0b10110 | 0b10101 | 0b10111) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b11000 | 0b11010 | 0b11001 | 0b11011) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b11101) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, var0, 0b11110) if var0 != 0b0000 => return OpCode::Unallocated,
                (_, 0b0000, _) => return OpCode::Unallocated,
                (0, var0, 0b00000) if var0 != 0b0000 => return OpCode::SSHR_asisdshf_R,
                (0, var0, 0b00010) if var0 != 0b0000 => return OpCode::SSRA_asisdshf_R,
                (0, var0, 0b00100) if var0 != 0b0000 => return OpCode::SRSHR_asisdshf_R,
                (0, var0, 0b00110) if var0 != 0b0000 => return OpCode::SRSRA_asisdshf_R,
                (0, var0, 0b01000) if var0 != 0b0000 => return OpCode::Unallocated,
                (0, var0, 0b01010) if var0 != 0b0000 => return OpCode::SHL_asisdshf_R,
                (0, var0, 0b01100) if var0 != 0b0000 => return OpCode::Unallocated,
                (0, var0, 0b01110) if var0 != 0b0000 => return OpCode::SQSHL_asisdshf_R,
                (0, var0, 0b10000) if var0 != 0b0000 => return OpCode::Unallocated,
                (0, var0, 0b10001) if var0 != 0b0000 => return OpCode::Unallocated,
                (0, var0, 0b10010) if var0 != 0b0000 => return OpCode::SQSHRN_asisdshf_N,
                (0, var0, 0b10011) if var0 != 0b0000 => return OpCode::SQRSHRN_asisdshf_N,
                (0, var0, 0b11100) if var0 != 0b0000 => return OpCode::SCVTF_asisdshf_C,
                (0, var0, 0b11111) if var0 != 0b0000 => return OpCode::FCVTZS_asisdshf_C,
                (1, var0, 0b00000) if var0 != 0b0000 => return OpCode::USHR_asisdshf_R,
                (1, var0, 0b00010) if var0 != 0b0000 => return OpCode::USRA_asisdshf_R,
                (1, var0, 0b00100) if var0 != 0b0000 => return OpCode::URSHR_asisdshf_R,
                (1, var0, 0b00110) if var0 != 0b0000 => return OpCode::URSRA_asisdshf_R,
                (1, var0, 0b01000) if var0 != 0b0000 => return OpCode::SRI_asisdshf_R,
                (1, var0, 0b01010) if var0 != 0b0000 => return OpCode::SLI_asisdshf_R,
                (1, var0, 0b01100) if var0 != 0b0000 => return OpCode::SQSHLU_asisdshf_R,
                (1, var0, 0b01110) if var0 != 0b0000 => return OpCode::UQSHL_asisdshf_R,
                (1, var0, 0b10000) if var0 != 0b0000 => return OpCode::SQSHRUN_asisdshf_N,
                (1, var0, 0b10001) if var0 != 0b0000 => return OpCode::SQRSHRUN_asisdshf_N,
                (1, var0, 0b10010) if var0 != 0b0000 => return OpCode::UQSHRN_asisdshf_N,
                (1, var0, 0b10011) if var0 != 0b0000 => return OpCode::UQRSHRN_asisdshf_N,
                (1, var0, 0b11100) if var0 != 0b0000 => return OpCode::UCVTF_asisdshf_C,
                (1, var0, 0b11111) if var0 != 0b0000 => return OpCode::FCVTZU_asisdshf_C,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0101 | 0b0111, _, 0b11, _, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => return OpCode::Unpredictable,
        (0b0101 | 0b0111, _, 0b10 | 0b11, _, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000100000 | 0b100100000 | 0b010100000 | 0b110100000 | 0b001100000 | 0b101100000 | 0b011100000 | 0b111100000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000110000 | 0b100110000 | 0b010110000 | 0b110110000 | 0b001110000 | 0b101110000 | 0b011110000 | 0b111110000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000101000 | 0b100101000 | 0b010101000 | 0b110101000 | 0b001101000 | 0b101101000 | 0b011101000 | 0b111101000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000111000 | 0b100111000 | 0b010111000 | 0b110111000 | 0b001111000 | 0b101111000 | 0b011111000 | 0b111111000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000100100 | 0b100100100 | 0b010100100 | 0b110100100 | 0b001100100 | 0b101100100 | 0b011100100 | 0b111100100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000110100 | 0b100110100 | 0b010110100 | 0b110110100 | 0b001110100 | 0b101110100 | 0b011110100 | 0b111110100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000101100 | 0b100101100 | 0b010101100 | 0b110101100 | 0b001101100 | 0b101101100 | 0b011101100 | 0b111101100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100 | 0b000111100 | 0b100111100 | 0b010111100 | 0b110111100 | 0b001111100 | 0b101111100 | 0b011111100 | 0b111111100 | 0b000000010 | 0b100000010 | 0b010000010 | 0b110000010 | 0b001000010 | 0b101000010 | 0b011000010 | 0b111000010 | 0b000100010 | 0b100100010 | 0b010100010 | 0b110100010 | 0b001100010 | 0b101100010 | 0b011100010 | 0b111100010 | 0b000010010 | 0b100010010 | 0b010010010 | 0b110010010 | 0b001010010 | 0b101010010 | 0b011010010 | 0b111010010 | 0b000110010 | 0b100110010 | 0b010110010 | 0b110110010 | 0b001110010 | 0b101110010 | 0b011110010 | 0b111110010 | 0b000001010 | 0b100001010 | 0b010001010 | 0b110001010 | 0b001001010 | 0b101001010 | 0b011001010 | 0b111001010 | 0b000101010 | 0b100101010 | 0b010101010 | 0b110101010 | 0b001101010 | 0b101101010 | 0b011101010 | 0b111101010 | 0b000011010 | 0b100011010 | 0b010011010 | 0b110011010 | 0b001011010 | 0b101011010 | 0b011011010 | 0b111011010 | 0b000111010 | 0b100111010 | 0b010111010 | 0b110111010 | 0b001111010 | 0b101111010 | 0b011111010 | 0b111111010 | 0b000000110 | 0b100000110 | 0b010000110 | 0b110000110 | 0b001000110 | 0b101000110 | 0b011000110 | 0b111000110 | 0b000100110 | 0b100100110 | 0b010100110 | 0b110100110 | 0b001100110 | 0b101100110 | 0b011100110 | 0b111100110 | 0b000010110 | 0b100010110 | 0b010010110 | 0b110010110 | 0b001010110 | 0b101010110 | 0b011010110 | 0b111010110 | 0b000110110 | 0b100110110 | 0b010110110 | 0b110110110 | 0b001110110 | 0b101110110 | 0b011110110 | 0b111110110 | 0b000001110 | 0b100001110 | 0b010001110 | 0b110001110 | 0b001001110 | 0b101001110 | 0b011001110 | 0b111001110 | 0b000101110 | 0b100101110 | 0b010101110 | 0b110101110 | 0b001101110 | 0b101101110 | 0b011101110 | 0b111101110 | 0b000011110 | 0b100011110 | 0b010011110 | 0b110011110 | 0b001011110 | 0b101011110 | 0b011011110 | 0b111011110 | 0b000111110 | 0b100111110 | 0b010111110 | 0b110111110 | 0b001111110 | 0b101111110 | 0b011111110 | 0b111111110, _) => {
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let L = (inst >> 21) & 0b1;
            let M = (inst >> 20) & 0b1;
            let Rm = (inst >> 16) & 0b1111;
            let opcode = (inst >> 12) & 0b1111;
            let H = (inst >> 11) & 0b1;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, size, opcode) {
                (_, _, 0b0000) => return OpCode::Unallocated,
                (_, _, 0b0010) => return OpCode::Unallocated,
                (_, _, 0b0100) => return OpCode::Unallocated,
                (_, _, 0b0110) => return OpCode::Unallocated,
                (_, _, 0b1000) => return OpCode::Unallocated,
                (_, _, 0b1010) => return OpCode::Unallocated,
                (_, _, 0b1110) => return OpCode::Unallocated,
                (_, 0b01, 0b0001) => return OpCode::Unallocated,
                (_, 0b01, 0b0101) => return OpCode::Unallocated,
                (_, 0b01, 0b1001) => return OpCode::Unallocated,
                (0, _, 0b0011) => return OpCode::SQDMLAL_asisdelem_L,
                (0, _, 0b0111) => return OpCode::SQDMLSL_asisdelem_L,
                (0, _, 0b1011) => return OpCode::SQDMULL_asisdelem_L,
                (0, _, 0b1100) => return OpCode::SQDMULH_asisdelem_R,
                (0, _, 0b1101) => return OpCode::SQRDMULH_asisdelem_R,
                (0, _, 0b1111) => return OpCode::Unallocated,
                (0, 0b00, 0b0001) => return OpCode::FMLA_asisdelem_RH_H,
                (0, 0b00, 0b0101) => return OpCode::FMLS_asisdelem_RH_H,
                (0, 0b00, 0b1001) => return OpCode::FMUL_asisdelem_RH_H,
                (0, 0b10 | 0b11, 0b0001) => return OpCode::FMLA_asisdelem_R_SD,
                (0, 0b10 | 0b11, 0b0101) => return OpCode::FMLS_asisdelem_R_SD,
                (0, 0b10 | 0b11, 0b1001) => return OpCode::FMUL_asisdelem_R_SD,
                (1, _, 0b0011) => return OpCode::Unallocated,
                (1, _, 0b0111) => return OpCode::Unallocated,
                (1, _, 0b1011) => return OpCode::Unallocated,
                (1, _, 0b1100) => return OpCode::Unallocated,
                (1, _, 0b1101) => return OpCode::SQRDMLAH_asisdelem_R,
                (1, _, 0b1111) => return OpCode::SQRDMLSH_asisdelem_R,
                (1, 0b00, 0b0001) => return OpCode::Unallocated,
                (1, 0b00, 0b0101) => return OpCode::Unallocated,
                (1, 0b00, 0b1001) => return OpCode::FMULX_asisdelem_RH_H,
                (1, 0b10 | 0b11, 0b0001) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b0101) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b1001) => return OpCode::FMULX_asisdelem_R_SD,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100, _) => {
            let Q = (inst >> 30) & 0b1;
            let op2 = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let len = (inst >> 13) & 0b11;
            let op = (inst >> 12) & 0b1;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (op2, len, op) {
                (0b01 | 0b11, _, _) => return OpCode::Unallocated,
                (0b00, 0b00, 0) => return OpCode::TBL_asimdtbl_L1_1,
                (0b00, 0b00, 1) => return OpCode::TBX_asimdtbl_L1_1,
                (0b00, 0b01, 0) => return OpCode::TBL_asimdtbl_L2_2,
                (0b00, 0b01, 1) => return OpCode::TBX_asimdtbl_L2_2,
                (0b00, 0b10, 0) => return OpCode::TBL_asimdtbl_L3_3,
                (0b00, 0b10, 1) => return OpCode::TBX_asimdtbl_L3_3,
                (0b00, 0b11, 0) => return OpCode::TBL_asimdtbl_L4_4,
                (0b00, 0b11, 1) => return OpCode::TBX_asimdtbl_L4_4,
                (0b10 | 0b11, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000000010 | 0b100000010 | 0b010000010 | 0b110000010 | 0b001000010 | 0b101000010 | 0b011000010 | 0b111000010 | 0b000010010 | 0b100010010 | 0b010010010 | 0b110010010 | 0b001010010 | 0b101010010 | 0b011010010 | 0b111010010 | 0b000001010 | 0b100001010 | 0b010001010 | 0b110001010 | 0b001001010 | 0b101001010 | 0b011001010 | 0b111001010 | 0b000011010 | 0b100011010 | 0b010011010 | 0b110011010 | 0b001011010 | 0b101011010 | 0b011011010 | 0b111011010 | 0b000000110 | 0b100000110 | 0b010000110 | 0b110000110 | 0b001000110 | 0b101000110 | 0b011000110 | 0b111000110 | 0b000010110 | 0b100010110 | 0b010010110 | 0b110010110 | 0b001010110 | 0b101010110 | 0b011010110 | 0b111010110 | 0b000001110 | 0b100001110 | 0b010001110 | 0b110001110 | 0b001001110 | 0b101001110 | 0b011001110 | 0b111001110 | 0b000011110 | 0b100011110 | 0b010011110 | 0b110011110 | 0b001011110 | 0b101011110 | 0b011011110 | 0b111011110, _) => {
            let Q = (inst >> 30) & 0b1;
            let size = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 12) & 0b111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match opcode {
                0b000 => return OpCode::Unallocated,
                0b001 => return OpCode::UZP1_asimdperm_only,
                0b010 => return OpCode::TRN1_asimdperm_only,
                0b011 => return OpCode::ZIP1_asimdperm_only,
                0b100 => return OpCode::Unallocated,
                0b101 => return OpCode::UZP2_asimdperm_only,
                0b110 => return OpCode::TRN2_asimdperm_only,
                0b111 => return OpCode::ZIP2_asimdperm_only,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0010 | 0b0110, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100 | 0b000000010 | 0b100000010 | 0b010000010 | 0b110000010 | 0b001000010 | 0b101000010 | 0b011000010 | 0b111000010 | 0b000010010 | 0b100010010 | 0b010010010 | 0b110010010 | 0b001010010 | 0b101010010 | 0b011010010 | 0b111010010 | 0b000001010 | 0b100001010 | 0b010001010 | 0b110001010 | 0b001001010 | 0b101001010 | 0b011001010 | 0b111001010 | 0b000011010 | 0b100011010 | 0b010011010 | 0b110011010 | 0b001011010 | 0b101011010 | 0b011011010 | 0b111011010 | 0b000000110 | 0b100000110 | 0b010000110 | 0b110000110 | 0b001000110 | 0b101000110 | 0b011000110 | 0b111000110 | 0b000010110 | 0b100010110 | 0b010010110 | 0b110010110 | 0b001010110 | 0b101010110 | 0b011010110 | 0b111010110 | 0b000001110 | 0b100001110 | 0b010001110 | 0b110001110 | 0b001001110 | 0b101001110 | 0b011001110 | 0b111001110 | 0b000011110 | 0b100011110 | 0b010011110 | 0b110011110 | 0b001011110 | 0b101011110 | 0b011011110 | 0b111011110, _) => {
            let Q = (inst >> 30) & 0b1;
            let op2 = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let imm4 = (inst >> 11) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match op2 {
                0b01 | 0b11 => return OpCode::Unallocated,
                0b00 => return OpCode::EXT_asimdext_only,
                0b10 | 0b11 => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00, 0b0000 | 0b0010 | 0b0001 | 0b0011, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111, _) => {
            let Q = (inst >> 30) & 0b1;
            let op = (inst >> 29) & 0b1;
            let imm5 = (inst >> 16) & 0b11111;
            let imm4 = (inst >> 11) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (Q, op, imm5, imm4) {
                (_, _, 0b00000 | 0b10000, _) => return OpCode::Unallocated,
                (_, 0, _, 0b0000) => return OpCode::DUP_asimdins_DV_v,
                (_, 0, _, 0b0001) => return OpCode::DUP_asimdins_DR_r,
                (_, 0, _, 0b0010) => return OpCode::Unallocated,
                (_, 0, _, 0b0100) => return OpCode::Unallocated,
                (_, 0, _, 0b0110) => return OpCode::Unallocated,
                (_, 0, _, 0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111) => return OpCode::Unallocated,
                (0, 0, _, 0b0011) => return OpCode::Unallocated,
                (0, 0, _, 0b0101) => return OpCode::SMOV_asimdins_W_w,
                (0, 0, _, 0b0111) => return OpCode::UMOV_asimdins_W_w,
                (0, 1, _, _) => return OpCode::Unallocated,
                (1, 0, _, 0b0011) => return OpCode::INS_asimdins_IR_r,
                (1, 0, _, 0b0101) => return OpCode::SMOV_asimdins_X_x,
                (1, 0, 0b01000 | 0b11000, 0b0111) => return OpCode::UMOV_asimdins_X_x,
                (1, 1, _, _) => return OpCode::INS_asimdins_IV_v,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b01, 0b0000 | 0b0010 | 0b0001 | 0b0011, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0111, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b1000 | 0b1010 | 0b1001 | 0b1011, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111, _) => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let a = (inst >> 23) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 11) & 0b111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, a, opcode) {
                (0, 0, 0b000) => return OpCode::FMAXNM_asimdsamefp16_only,
                (0, 0, 0b001) => return OpCode::FMLA_asimdsamefp16_only,
                (0, 0, 0b010) => return OpCode::FADD_asimdsamefp16_only,
                (0, 0, 0b011) => return OpCode::FMULX_asimdsamefp16_only,
                (0, 0, 0b100) => return OpCode::FCMEQ_asimdsamefp16_only,
                (0, 0, 0b101) => return OpCode::Unallocated,
                (0, 0, 0b110) => return OpCode::FMAX_asimdsamefp16_only,
                (0, 0, 0b111) => return OpCode::FRECPS_asimdsamefp16_only,
                (0, 1, 0b000) => return OpCode::FMINNM_asimdsamefp16_only,
                (0, 1, 0b001) => return OpCode::FMLS_asimdsamefp16_only,
                (0, 1, 0b010) => return OpCode::FSUB_asimdsamefp16_only,
                (0, 1, 0b011) => return OpCode::Unallocated,
                (0, 1, 0b100) => return OpCode::Unallocated,
                (0, 1, 0b101) => return OpCode::Unallocated,
                (0, 1, 0b110) => return OpCode::FMIN_asimdsamefp16_only,
                (0, 1, 0b111) => return OpCode::FRSQRTS_asimdsamefp16_only,
                (1, 0, 0b000) => return OpCode::FMAXNMP_asimdsamefp16_only,
                (1, 0, 0b001) => return OpCode::Unallocated,
                (1, 0, 0b010) => return OpCode::FADDP_asimdsamefp16_only,
                (1, 0, 0b011) => return OpCode::FMUL_asimdsamefp16_only,
                (1, 0, 0b100) => return OpCode::FCMGE_asimdsamefp16_only,
                (1, 0, 0b101) => return OpCode::FACGE_asimdsamefp16_only,
                (1, 0, 0b110) => return OpCode::FMAXP_asimdsamefp16_only,
                (1, 0, 0b111) => return OpCode::FDIV_asimdsamefp16_only,
                (1, 1, 0b000) => return OpCode::FMINNMP_asimdsamefp16_only,
                (1, 1, 0b001) => return OpCode::Unallocated,
                (1, 1, 0b010) => return OpCode::FABD_asimdsamefp16_only,
                (1, 1, 0b011) => return OpCode::Unallocated,
                (1, 1, 0b100) => return OpCode::FCMGT_asimdsamefp16_only,
                (1, 1, 0b101) => return OpCode::FACGT_asimdsamefp16_only,
                (1, 1, 0b110) => return OpCode::FMINP_asimdsamefp16_only,
                (1, 1, 0b111) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b1000 | 0b1010 | 0b1001 | 0b1011, 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b1111, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let a = (inst >> 23) & 0b1;
            let opcode = (inst >> 12) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, a, opcode) {
                (_, _, 0b00000 | 0b00100 | 0b00010 | 0b00110 | 0b00001 | 0b00101 | 0b00011 | 0b00111) => return OpCode::Unallocated,
                (_, _, 0b01000 | 0b01010 | 0b01001 | 0b01011) => return OpCode::Unallocated,
                (_, _, 0b10000 | 0b10100 | 0b10010 | 0b10110 | 0b10001 | 0b10101 | 0b10011 | 0b10111) => return OpCode::Unallocated,
                (_, _, 0b11110) => return OpCode::Unallocated,
                (_, 0, 0b01100 | 0b01110 | 0b01101 | 0b01111) => return OpCode::Unallocated,
                (_, 0, 0b11111) => return OpCode::Unallocated,
                (_, 1, 0b11100) => return OpCode::Unallocated,
                (0, 0, 0b11000) => return OpCode::FRINTN_asimdmiscfp16_R,
                (0, 0, 0b11001) => return OpCode::FRINTM_asimdmiscfp16_R,
                (0, 0, 0b11010) => return OpCode::FCVTNS_asimdmiscfp16_R,
                (0, 0, 0b11011) => return OpCode::FCVTMS_asimdmiscfp16_R,
                (0, 0, 0b11100) => return OpCode::FCVTAS_asimdmiscfp16_R,
                (0, 0, 0b11101) => return OpCode::SCVTF_asimdmiscfp16_R,
                (0, 1, 0b01100) => return OpCode::FCMGT_asimdmiscfp16_FZ,
                (0, 1, 0b01101) => return OpCode::FCMEQ_asimdmiscfp16_FZ,
                (0, 1, 0b01110) => return OpCode::FCMLT_asimdmiscfp16_FZ,
                (0, 1, 0b01111) => return OpCode::FABS_asimdmiscfp16_R,
                (0, 1, 0b11000) => return OpCode::FRINTP_asimdmiscfp16_R,
                (0, 1, 0b11001) => return OpCode::FRINTZ_asimdmiscfp16_R,
                (0, 1, 0b11010) => return OpCode::FCVTPS_asimdmiscfp16_R,
                (0, 1, 0b11011) => return OpCode::FCVTZS_asimdmiscfp16_R,
                (0, 1, 0b11101) => return OpCode::FRECPE_asimdmiscfp16_R,
                (0, 1, 0b11111) => return OpCode::Unallocated,
                (1, 0, 0b11000) => return OpCode::FRINTA_asimdmiscfp16_R,
                (1, 0, 0b11001) => return OpCode::FRINTX_asimdmiscfp16_R,
                (1, 0, 0b11010) => return OpCode::FCVTNU_asimdmiscfp16_R,
                (1, 0, 0b11011) => return OpCode::FCVTMU_asimdmiscfp16_R,
                (1, 0, 0b11100) => return OpCode::FCVTAU_asimdmiscfp16_R,
                (1, 0, 0b11101) => return OpCode::UCVTF_asimdmiscfp16_R,
                (1, 1, 0b01100) => return OpCode::FCMGE_asimdmiscfp16_FZ,
                (1, 1, 0b01101) => return OpCode::FCMLE_asimdmiscfp16_FZ,
                (1, 1, 0b01110) => return OpCode::Unallocated,
                (1, 1, 0b01111) => return OpCode::FNEG_asimdmiscfp16_R,
                (1, 1, 0b11000) => return OpCode::Unallocated,
                (1, 1, 0b11001) => return OpCode::FRINTI_asimdmiscfp16_R,
                (1, 1, 0b11010) => return OpCode::FCVTPU_asimdmiscfp16_R,
                (1, 1, 0b11011) => return OpCode::FCVTZU_asimdmiscfp16_R,
                (1, 1, 0b11101) => return OpCode::FRSQRTE_asimdmiscfp16_R,
                (1, 1, 0b11111) => return OpCode::FSQRT_asimdmiscfp16_R,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000100000 | 0b100100000 | 0b010100000 | 0b110100000 | 0b001100000 | 0b101100000 | 0b011100000 | 0b111100000 | 0b000110000 | 0b100110000 | 0b010110000 | 0b110110000 | 0b001110000 | 0b101110000 | 0b011110000 | 0b111110000 | 0b000101000 | 0b100101000 | 0b010101000 | 0b110101000 | 0b001101000 | 0b101101000 | 0b011101000 | 0b111101000 | 0b000111000 | 0b100111000 | 0b010111000 | 0b110111000 | 0b001111000 | 0b101111000 | 0b011111000 | 0b111111000 | 0b000100100 | 0b100100100 | 0b010100100 | 0b110100100 | 0b001100100 | 0b101100100 | 0b011100100 | 0b111100100 | 0b000110100 | 0b100110100 | 0b010110100 | 0b110110100 | 0b001110100 | 0b101110100 | 0b011110100 | 0b111110100 | 0b000101100 | 0b100101100 | 0b010101100 | 0b110101100 | 0b001101100 | 0b101101100 | 0b011101100 | 0b111101100 | 0b000111100 | 0b100111100 | 0b010111100 | 0b110111100 | 0b001111100 | 0b101111100 | 0b011111100 | 0b111111100 | 0b000100010 | 0b100100010 | 0b010100010 | 0b110100010 | 0b001100010 | 0b101100010 | 0b011100010 | 0b111100010 | 0b000110010 | 0b100110010 | 0b010110010 | 0b110110010 | 0b001110010 | 0b101110010 | 0b011110010 | 0b111110010 | 0b000101010 | 0b100101010 | 0b010101010 | 0b110101010 | 0b001101010 | 0b101101010 | 0b011101010 | 0b111101010 | 0b000111010 | 0b100111010 | 0b010111010 | 0b110111010 | 0b001111010 | 0b101111010 | 0b011111010 | 0b111111010 | 0b000100110 | 0b100100110 | 0b010100110 | 0b110100110 | 0b001100110 | 0b101100110 | 0b011100110 | 0b111100110 | 0b000110110 | 0b100110110 | 0b010110110 | 0b110110110 | 0b001110110 | 0b101110110 | 0b011110110 | 0b111110110 | 0b000101110 | 0b100101110 | 0b010101110 | 0b110101110 | 0b001101110 | 0b101101110 | 0b011101110 | 0b111101110 | 0b000111110 | 0b100111110 | 0b010111110 | 0b110111110 | 0b001111110 | 0b101111110 | 0b011111110 | 0b111111110, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 11) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (Q, U, size, opcode) {
                (_, _, 0b00 | 0b01, 0b0011) => return OpCode::Unallocated,
                (_, _, 0b11, 0b0011) => return OpCode::Unallocated,
                (_, 0, _, 0b0000) => return OpCode::Unallocated,
                (_, 0, _, 0b0001) => return OpCode::Unallocated,
                (_, 0, _, 0b0010) => return OpCode::SDOT_asimdsame2_D,
                (_, 0, _, 0b1000 | 0b1100 | 0b1010 | 0b1110 | 0b1001 | 0b1101 | 0b1011 | 0b1111) => return OpCode::Unallocated,
                (_, 0, 0b10, 0b0011) => return OpCode::USDOT_asimdsame2_D,
                (_, 1, _, 0b0000) => return OpCode::SQRDMLAH_asimdsame2_only,
                (_, 1, _, 0b0001) => return OpCode::SQRDMLSH_asimdsame2_only,
                (_, 1, _, 0b0010) => return OpCode::UDOT_asimdsame2_D,
                (_, 1, _, 0b1000 | 0b1010 | 0b1001 | 0b1011) => return OpCode::FCMLA_asimdsame2_C,
                (_, 1, _, 0b1100 | 0b1110) => return OpCode::FCADD_asimdsame2_C,
                (_, 1, 0b00, 0b1101) => return OpCode::Unallocated,
                (_, 1, 0b00, 0b1111) => return OpCode::Unallocated,
                (_, 1, 0b01, 0b1111) => return OpCode::BFDOT_asimdsame2_D,
                (_, 1, 0b10 | 0b11, 0b1101) => return OpCode::Unallocated,
                (_, 1, 0b10, 0b0011) => return OpCode::Unallocated,
                (_, 1, 0b10, 0b1111) => return OpCode::Unallocated,
                (_, 1, 0b11, 0b1111) => return OpCode::BFMLAL_asimdsame2_F_,
                (0, _, _, 0b0100 | 0b0110 | 0b0101 | 0b0111) => return OpCode::Unallocated,
                (0, 1, 0b01, 0b1101) => return OpCode::Unallocated,
                (1, _, 0b00 | 0b01, 0b0100 | 0b0110 | 0b0101 | 0b0111) => return OpCode::Unallocated,
                (1, _, 0b10 | 0b11, 0b0110 | 0b0111) => return OpCode::Unallocated,
                (1, 0, 0b10, 0b0100) => return OpCode::SMMLA_asimdsame2_G,
                (1, 0, 0b10, 0b0101) => return OpCode::USMMLA_asimdsame2_G,
                (1, 1, 0b01, 0b1101) => return OpCode::BFMMLA_asimdsame2_E,
                (1, 1, 0b10, 0b0100) => return OpCode::UMMLA_asimdsame2_G,
                (1, 1, 0b10, 0b0101) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0100 | 0b1100, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let opcode = (inst >> 12) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, size, opcode) {
                (_, _, 0b10000 | 0b10001) => return OpCode::Unallocated,
                (_, _, 0b10101) => return OpCode::Unallocated,
                (_, 0b00 | 0b01, 0b01100 | 0b01110 | 0b01101 | 0b01111) => return OpCode::Unallocated,
                (_, 0b10 | 0b11, 0b10111) => return OpCode::Unallocated,
                (_, 0b10 | 0b11, 0b11110) => return OpCode::Unallocated,
                (_, 0b11, 0b10110) => return OpCode::Unallocated,
                (0, _, 0b00000) => return OpCode::REV64_asimdmisc_R,
                (0, _, 0b00001) => return OpCode::REV16_asimdmisc_R,
                (0, _, 0b00010) => return OpCode::SADDLP_asimdmisc_P,
                (0, _, 0b00011) => return OpCode::SUQADD_asimdmisc_R,
                (0, _, 0b00100) => return OpCode::CLS_asimdmisc_R,
                (0, _, 0b00101) => return OpCode::CNT_asimdmisc_R,
                (0, _, 0b00110) => return OpCode::SADALP_asimdmisc_P,
                (0, _, 0b00111) => return OpCode::SQABS_asimdmisc_R,
                (0, _, 0b01000) => return OpCode::CMGT_asimdmisc_Z,
                (0, _, 0b01001) => return OpCode::CMEQ_asimdmisc_Z,
                (0, _, 0b01010) => return OpCode::CMLT_asimdmisc_Z,
                (0, _, 0b01011) => return OpCode::ABS_asimdmisc_R,
                (0, _, 0b10010) => return OpCode::XTN_asimdmisc_N,
                (0, _, 0b10011) => return OpCode::Unallocated,
                (0, _, 0b10100) => return OpCode::SQXTN_asimdmisc_N,
                (0, 0b00 | 0b01, 0b10110) => return OpCode::FCVTN_asimdmisc_N,
                (0, 0b00 | 0b01, 0b10111) => return OpCode::FCVTL_asimdmisc_L,
                (0, 0b00 | 0b01, 0b11000) => return OpCode::FRINTN_asimdmisc_R,
                (0, 0b00 | 0b01, 0b11001) => return OpCode::FRINTM_asimdmisc_R,
                (0, 0b00 | 0b01, 0b11010) => return OpCode::FCVTNS_asimdmisc_R,
                (0, 0b00 | 0b01, 0b11011) => return OpCode::FCVTMS_asimdmisc_R,
                (0, 0b00 | 0b01, 0b11100) => return OpCode::FCVTAS_asimdmisc_R,
                (0, 0b00 | 0b01, 0b11101) => return OpCode::SCVTF_asimdmisc_R,
                (0, 0b00 | 0b01, 0b11110) => return OpCode::FRINT32Z_asimdmisc_R,
                (0, 0b00 | 0b01, 0b11111) => return OpCode::FRINT64Z_asimdmisc_R,
                (0, 0b10 | 0b11, 0b01100) => return OpCode::FCMGT_asimdmisc_FZ,
                (0, 0b10 | 0b11, 0b01101) => return OpCode::FCMEQ_asimdmisc_FZ,
                (0, 0b10 | 0b11, 0b01110) => return OpCode::FCMLT_asimdmisc_FZ,
                (0, 0b10 | 0b11, 0b01111) => return OpCode::FABS_asimdmisc_R,
                (0, 0b10 | 0b11, 0b11000) => return OpCode::FRINTP_asimdmisc_R,
                (0, 0b10 | 0b11, 0b11001) => return OpCode::FRINTZ_asimdmisc_R,
                (0, 0b10 | 0b11, 0b11010) => return OpCode::FCVTPS_asimdmisc_R,
                (0, 0b10 | 0b11, 0b11011) => return OpCode::FCVTZS_asimdmisc_R,
                (0, 0b10 | 0b11, 0b11100) => return OpCode::URECPE_asimdmisc_R,
                (0, 0b10 | 0b11, 0b11101) => return OpCode::FRECPE_asimdmisc_R,
                (0, 0b10 | 0b11, 0b11111) => return OpCode::Unallocated,
                (0, 0b10, 0b10110) => return OpCode::BFCVTN_asimdmisc_4S,
                (1, _, 0b00000) => return OpCode::REV32_asimdmisc_R,
                (1, _, 0b00001) => return OpCode::Unallocated,
                (1, _, 0b00010) => return OpCode::UADDLP_asimdmisc_P,
                (1, _, 0b00011) => return OpCode::USQADD_asimdmisc_R,
                (1, _, 0b00100) => return OpCode::CLZ_asimdmisc_R,
                (1, _, 0b00110) => return OpCode::UADALP_asimdmisc_P,
                (1, _, 0b00111) => return OpCode::SQNEG_asimdmisc_R,
                (1, _, 0b01000) => return OpCode::CMGE_asimdmisc_Z,
                (1, _, 0b01001) => return OpCode::CMLE_asimdmisc_Z,
                (1, _, 0b01010) => return OpCode::Unallocated,
                (1, _, 0b01011) => return OpCode::NEG_asimdmisc_R,
                (1, _, 0b10010) => return OpCode::SQXTUN_asimdmisc_N,
                (1, _, 0b10011) => return OpCode::SHLL_asimdmisc_S,
                (1, _, 0b10100) => return OpCode::UQXTN_asimdmisc_N,
                (1, 0b00 | 0b01, 0b10110) => return OpCode::FCVTXN_asimdmisc_N,
                (1, 0b00 | 0b01, 0b10111) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b11000) => return OpCode::FRINTA_asimdmisc_R,
                (1, 0b00 | 0b01, 0b11001) => return OpCode::FRINTX_asimdmisc_R,
                (1, 0b00 | 0b01, 0b11010) => return OpCode::FCVTNU_asimdmisc_R,
                (1, 0b00 | 0b01, 0b11011) => return OpCode::FCVTMU_asimdmisc_R,
                (1, 0b00 | 0b01, 0b11100) => return OpCode::FCVTAU_asimdmisc_R,
                (1, 0b00 | 0b01, 0b11101) => return OpCode::UCVTF_asimdmisc_R,
                (1, 0b00 | 0b01, 0b11110) => return OpCode::FRINT32X_asimdmisc_R,
                (1, 0b00 | 0b01, 0b11111) => return OpCode::FRINT64X_asimdmisc_R,
                (1, 0b00, 0b00101) => return OpCode::NOT_asimdmisc_R,
                (1, 0b01, 0b00101) => return OpCode::RBIT_asimdmisc_R,
                (1, 0b10 | 0b11, 0b00101) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b01100) => return OpCode::FCMGE_asimdmisc_FZ,
                (1, 0b10 | 0b11, 0b01101) => return OpCode::FCMLE_asimdmisc_FZ,
                (1, 0b10 | 0b11, 0b01110) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b01111) => return OpCode::FNEG_asimdmisc_R,
                (1, 0b10 | 0b11, 0b11000) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b11001) => return OpCode::FRINTI_asimdmisc_R,
                (1, 0b10 | 0b11, 0b11010) => return OpCode::FCVTPU_asimdmisc_R,
                (1, 0b10 | 0b11, 0b11011) => return OpCode::FCVTZU_asimdmisc_R,
                (1, 0b10 | 0b11, 0b11100) => return OpCode::URSQRTE_asimdmisc_R,
                (1, 0b10 | 0b11, 0b11101) => return OpCode::FRSQRTE_asimdmisc_R,
                (1, 0b10 | 0b11, 0b11111) => return OpCode::FSQRT_asimdmisc_R,
                (1, 0b10, 0b10110) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0110 | 0b1110, 0b000000010 | 0b001000010 | 0b000100010 | 0b001100010 | 0b000010010 | 0b001010010 | 0b000110010 | 0b001110010 | 0b000001010 | 0b001001010 | 0b000101010 | 0b001101010 | 0b000011010 | 0b001011010 | 0b000111010 | 0b001111010 | 0b000000110 | 0b001000110 | 0b000100110 | 0b001100110 | 0b000010110 | 0b001010110 | 0b000110110 | 0b001110110 | 0b000001110 | 0b001001110 | 0b000101110 | 0b001101110 | 0b000011110 | 0b001011110 | 0b000111110 | 0b001111110, _) => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let opcode = (inst >> 12) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, size, opcode) {
                (_, _, 0b00000 | 0b00001) => return OpCode::Unallocated,
                (_, _, 0b00010) => return OpCode::Unallocated,
                (_, _, 0b00100 | 0b00110 | 0b00101 | 0b00111) => return OpCode::Unallocated,
                (_, _, 0b01000 | 0b01001) => return OpCode::Unallocated,
                (_, _, 0b01011) => return OpCode::Unallocated,
                (_, _, 0b01101) => return OpCode::Unallocated,
                (_, _, 0b01110) => return OpCode::Unallocated,
                (_, _, 0b10000 | 0b10100 | 0b10010 | 0b10110 | 0b10001 | 0b10101 | 0b10011 | 0b10111) => return OpCode::Unallocated,
                (_, _, 0b11000 | 0b11001) => return OpCode::Unallocated,
                (_, _, 0b11100 | 0b11110 | 0b11101 | 0b11111) => return OpCode::Unallocated,
                (0, _, 0b00011) => return OpCode::SADDLV_asimdall_only,
                (0, _, 0b01010) => return OpCode::SMAXV_asimdall_only,
                (0, _, 0b11010) => return OpCode::SMINV_asimdall_only,
                (0, _, 0b11011) => return OpCode::ADDV_asimdall_only,
                (0, 0b00, 0b01100) => return OpCode::FMAXNMV_asimdall_only_H,
                (0, 0b00, 0b01111) => return OpCode::FMAXV_asimdall_only_H,
                (0, 0b01, 0b01100) => return OpCode::Unallocated,
                (0, 0b01, 0b01111) => return OpCode::Unallocated,
                (0, 0b10, 0b01100) => return OpCode::FMINNMV_asimdall_only_H,
                (0, 0b10, 0b01111) => return OpCode::FMINV_asimdall_only_H,
                (0, 0b11, 0b01100) => return OpCode::Unallocated,
                (0, 0b11, 0b01111) => return OpCode::Unallocated,
                (1, _, 0b00011) => return OpCode::UADDLV_asimdall_only,
                (1, _, 0b01010) => return OpCode::UMAXV_asimdall_only,
                (1, _, 0b11010) => return OpCode::UMINV_asimdall_only,
                (1, _, 0b11011) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b01100) => return OpCode::FMAXNMV_asimdall_only_SD,
                (1, 0b00 | 0b01, 0b01111) => return OpCode::FMAXV_asimdall_only_SD,
                (1, 0b10 | 0b11, 0b01100) => return OpCode::FMINNMV_asimdall_only_SD,
                (1, 0b10 | 0b11, 0b01111) => return OpCode::FMINV_asimdall_only_SD,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b100000010 | 0b110000010 | 0b101000010 | 0b111000010 | 0b100100010 | 0b110100010 | 0b101100010 | 0b111100010 | 0b100010010 | 0b110010010 | 0b101010010 | 0b111010010 | 0b100110010 | 0b110110010 | 0b101110010 | 0b111110010 | 0b100001010 | 0b110001010 | 0b101001010 | 0b111001010 | 0b100101010 | 0b110101010 | 0b101101010 | 0b111101010 | 0b100011010 | 0b110011010 | 0b101011010 | 0b111011010 | 0b100111010 | 0b110111010 | 0b101111010 | 0b111111010 | 0b100000110 | 0b110000110 | 0b101000110 | 0b111000110 | 0b100100110 | 0b110100110 | 0b101100110 | 0b111100110 | 0b100010110 | 0b110010110 | 0b101010110 | 0b111010110 | 0b100110110 | 0b110110110 | 0b101110110 | 0b111110110 | 0b100001110 | 0b110001110 | 0b101001110 | 0b111001110 | 0b100101110 | 0b110101110 | 0b101101110 | 0b111101110 | 0b100011110 | 0b110011110 | 0b101011110 | 0b111011110 | 0b100111110 | 0b110111110 | 0b101111110 | 0b111111110, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b010000010 | 0b110000010 | 0b011000010 | 0b111000010 | 0b010100010 | 0b110100010 | 0b011100010 | 0b111100010 | 0b010010010 | 0b110010010 | 0b011010010 | 0b111010010 | 0b010110010 | 0b110110010 | 0b011110010 | 0b111110010 | 0b010001010 | 0b110001010 | 0b011001010 | 0b111001010 | 0b010101010 | 0b110101010 | 0b011101010 | 0b111101010 | 0b010011010 | 0b110011010 | 0b011011010 | 0b111011010 | 0b010111010 | 0b110111010 | 0b011111010 | 0b111111010 | 0b010000110 | 0b110000110 | 0b011000110 | 0b111000110 | 0b010100110 | 0b110100110 | 0b011100110 | 0b111100110 | 0b010010110 | 0b110010110 | 0b011010110 | 0b111010110 | 0b010110110 | 0b110110110 | 0b011110110 | 0b111110110 | 0b010001110 | 0b110001110 | 0b011001110 | 0b111001110 | 0b010101110 | 0b110101110 | 0b011101110 | 0b111101110 | 0b010011110 | 0b110011110 | 0b011011110 | 0b111011110 | 0b010111110 | 0b110111110 | 0b011111110 | 0b111111110, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000100000 | 0b100100000 | 0b010100000 | 0b110100000 | 0b001100000 | 0b101100000 | 0b011100000 | 0b111100000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000110000 | 0b100110000 | 0b010110000 | 0b110110000 | 0b001110000 | 0b101110000 | 0b011110000 | 0b111110000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000101000 | 0b100101000 | 0b010101000 | 0b110101000 | 0b001101000 | 0b101101000 | 0b011101000 | 0b111101000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000111000 | 0b100111000 | 0b010111000 | 0b110111000 | 0b001111000 | 0b101111000 | 0b011111000 | 0b111111000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000100100 | 0b100100100 | 0b010100100 | 0b110100100 | 0b001100100 | 0b101100100 | 0b011100100 | 0b111100100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000110100 | 0b100110100 | 0b010110100 | 0b110110100 | 0b001110100 | 0b101110100 | 0b011110100 | 0b111110100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000101100 | 0b100101100 | 0b010101100 | 0b110101100 | 0b001101100 | 0b101101100 | 0b011101100 | 0b111101100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100 | 0b000111100 | 0b100111100 | 0b010111100 | 0b110111100 | 0b001111100 | 0b101111100 | 0b011111100 | 0b111111100, _) => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 12) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, opcode) {
                (_, 0b1111) => return OpCode::Unallocated,
                (0, 0b0000) => return OpCode::SADDL_asimddiff_L,
                (0, 0b0001) => return OpCode::SADDW_asimddiff_W,
                (0, 0b0010) => return OpCode::SSUBL_asimddiff_L,
                (0, 0b0011) => return OpCode::SSUBW_asimddiff_W,
                (0, 0b0100) => return OpCode::ADDHN_asimddiff_N,
                (0, 0b0101) => return OpCode::SABAL_asimddiff_L,
                (0, 0b0110) => return OpCode::SUBHN_asimddiff_N,
                (0, 0b0111) => return OpCode::SABDL_asimddiff_L,
                (0, 0b1000) => return OpCode::SMLAL_asimddiff_L,
                (0, 0b1001) => return OpCode::SQDMLAL_asimddiff_L,
                (0, 0b1010) => return OpCode::SMLSL_asimddiff_L,
                (0, 0b1011) => return OpCode::SQDMLSL_asimddiff_L,
                (0, 0b1100) => return OpCode::SMULL_asimddiff_L,
                (0, 0b1101) => return OpCode::SQDMULL_asimddiff_L,
                (0, 0b1110) => return OpCode::PMULL_asimddiff_L,
                (1, 0b0000) => return OpCode::UADDL_asimddiff_L,
                (1, 0b0001) => return OpCode::UADDW_asimddiff_W,
                (1, 0b0010) => return OpCode::USUBL_asimddiff_L,
                (1, 0b0011) => return OpCode::USUBW_asimddiff_W,
                (1, 0b0100) => return OpCode::RADDHN_asimddiff_N,
                (1, 0b0101) => return OpCode::UABAL_asimddiff_L,
                (1, 0b0110) => return OpCode::RSUBHN_asimddiff_N,
                (1, 0b0111) => return OpCode::UABDL_asimddiff_L,
                (1, 0b1000) => return OpCode::UMLAL_asimddiff_L,
                (1, 0b1001) => return OpCode::Unallocated,
                (1, 0b1010) => return OpCode::UMLSL_asimddiff_L,
                (1, 0b1011) => return OpCode::Unallocated,
                (1, 0b1100) => return OpCode::UMULL_asimddiff_L,
                (1, 0b1101) => return OpCode::Unallocated,
                (1, 0b1110) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 11) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, size, opcode) {
                (0, _, 0b00000) => return OpCode::SHADD_asimdsame_only,
                (0, _, 0b00001) => return OpCode::SQADD_asimdsame_only,
                (0, _, 0b00010) => return OpCode::SRHADD_asimdsame_only,
                (0, _, 0b00100) => return OpCode::SHSUB_asimdsame_only,
                (0, _, 0b00101) => return OpCode::SQSUB_asimdsame_only,
                (0, _, 0b00110) => return OpCode::CMGT_asimdsame_only,
                (0, _, 0b00111) => return OpCode::CMGE_asimdsame_only,
                (0, _, 0b01000) => return OpCode::SSHL_asimdsame_only,
                (0, _, 0b01001) => return OpCode::SQSHL_asimdsame_only,
                (0, _, 0b01010) => return OpCode::SRSHL_asimdsame_only,
                (0, _, 0b01011) => return OpCode::SQRSHL_asimdsame_only,
                (0, _, 0b01100) => return OpCode::SMAX_asimdsame_only,
                (0, _, 0b01101) => return OpCode::SMIN_asimdsame_only,
                (0, _, 0b01110) => return OpCode::SABD_asimdsame_only,
                (0, _, 0b01111) => return OpCode::SABA_asimdsame_only,
                (0, _, 0b10000) => return OpCode::ADD_asimdsame_only,
                (0, _, 0b10001) => return OpCode::CMTST_asimdsame_only,
                (0, _, 0b10010) => return OpCode::MLA_asimdsame_only,
                (0, _, 0b10011) => return OpCode::MUL_asimdsame_only,
                (0, _, 0b10100) => return OpCode::SMAXP_asimdsame_only,
                (0, _, 0b10101) => return OpCode::SMINP_asimdsame_only,
                (0, _, 0b10110) => return OpCode::SQDMULH_asimdsame_only,
                (0, _, 0b10111) => return OpCode::ADDP_asimdsame_only,
                (0, 0b00 | 0b01, 0b11000) => return OpCode::FMAXNM_asimdsame_only,
                (0, 0b00 | 0b01, 0b11001) => return OpCode::FMLA_asimdsame_only,
                (0, 0b00 | 0b01, 0b11010) => return OpCode::FADD_asimdsame_only,
                (0, 0b00 | 0b01, 0b11011) => return OpCode::FMULX_asimdsame_only,
                (0, 0b00 | 0b01, 0b11100) => return OpCode::FCMEQ_asimdsame_only,
                (0, 0b00 | 0b01, 0b11110) => return OpCode::FMAX_asimdsame_only,
                (0, 0b00 | 0b01, 0b11111) => return OpCode::FRECPS_asimdsame_only,
                (0, 0b00, 0b00011) => return OpCode::AND_asimdsame_only,
                (0, 0b00, 0b11101) => return OpCode::FMLAL_asimdsame_F,
                (0, 0b01, 0b00011) => return OpCode::BIC_asimdsame_only,
                (0, 0b01, 0b11101) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11000) => return OpCode::FMINNM_asimdsame_only,
                (0, 0b10 | 0b11, 0b11001) => return OpCode::FMLS_asimdsame_only,
                (0, 0b10 | 0b11, 0b11010) => return OpCode::FSUB_asimdsame_only,
                (0, 0b10 | 0b11, 0b11011) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11100) => return OpCode::Unallocated,
                (0, 0b10 | 0b11, 0b11110) => return OpCode::FMIN_asimdsame_only,
                (0, 0b10 | 0b11, 0b11111) => return OpCode::FRSQRTS_asimdsame_only,
                (0, 0b10, 0b00011) => return OpCode::ORR_asimdsame_only,
                (0, 0b10, 0b11101) => return OpCode::FMLSL_asimdsame_F,
                (0, 0b11, 0b00011) => return OpCode::ORN_asimdsame_only,
                (0, 0b11, 0b11101) => return OpCode::Unallocated,
                (1, _, 0b00000) => return OpCode::UHADD_asimdsame_only,
                (1, _, 0b00001) => return OpCode::UQADD_asimdsame_only,
                (1, _, 0b00010) => return OpCode::URHADD_asimdsame_only,
                (1, _, 0b00100) => return OpCode::UHSUB_asimdsame_only,
                (1, _, 0b00101) => return OpCode::UQSUB_asimdsame_only,
                (1, _, 0b00110) => return OpCode::CMHI_asimdsame_only,
                (1, _, 0b00111) => return OpCode::CMHS_asimdsame_only,
                (1, _, 0b01000) => return OpCode::USHL_asimdsame_only,
                (1, _, 0b01001) => return OpCode::UQSHL_asimdsame_only,
                (1, _, 0b01010) => return OpCode::URSHL_asimdsame_only,
                (1, _, 0b01011) => return OpCode::UQRSHL_asimdsame_only,
                (1, _, 0b01100) => return OpCode::UMAX_asimdsame_only,
                (1, _, 0b01101) => return OpCode::UMIN_asimdsame_only,
                (1, _, 0b01110) => return OpCode::UABD_asimdsame_only,
                (1, _, 0b01111) => return OpCode::UABA_asimdsame_only,
                (1, _, 0b10000) => return OpCode::SUB_asimdsame_only,
                (1, _, 0b10001) => return OpCode::CMEQ_asimdsame_only,
                (1, _, 0b10010) => return OpCode::MLS_asimdsame_only,
                (1, _, 0b10011) => return OpCode::PMUL_asimdsame_only,
                (1, _, 0b10100) => return OpCode::UMAXP_asimdsame_only,
                (1, _, 0b10101) => return OpCode::UMINP_asimdsame_only,
                (1, _, 0b10110) => return OpCode::SQRDMULH_asimdsame_only,
                (1, _, 0b10111) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b11000) => return OpCode::FMAXNMP_asimdsame_only,
                (1, 0b00 | 0b01, 0b11010) => return OpCode::FADDP_asimdsame_only,
                (1, 0b00 | 0b01, 0b11011) => return OpCode::FMUL_asimdsame_only,
                (1, 0b00 | 0b01, 0b11100) => return OpCode::FCMGE_asimdsame_only,
                (1, 0b00 | 0b01, 0b11101) => return OpCode::FACGE_asimdsame_only,
                (1, 0b00 | 0b01, 0b11110) => return OpCode::FMAXP_asimdsame_only,
                (1, 0b00 | 0b01, 0b11111) => return OpCode::FDIV_asimdsame_only,
                (1, 0b00, 0b00011) => return OpCode::EOR_asimdsame_only,
                (1, 0b00, 0b11001) => return OpCode::FMLAL2_asimdsame_F,
                (1, 0b01, 0b00011) => return OpCode::BSL_asimdsame_only,
                (1, 0b01, 0b11001) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b11000) => return OpCode::FMINNMP_asimdsame_only,
                (1, 0b10 | 0b11, 0b11010) => return OpCode::FABD_asimdsame_only,
                (1, 0b10 | 0b11, 0b11011) => return OpCode::Unallocated,
                (1, 0b10 | 0b11, 0b11100) => return OpCode::FCMGT_asimdsame_only,
                (1, 0b10 | 0b11, 0b11101) => return OpCode::FACGT_asimdsame_only,
                (1, 0b10 | 0b11, 0b11110) => return OpCode::FMINP_asimdsame_only,
                (1, 0b10 | 0b11, 0b11111) => return OpCode::Unallocated,
                (1, 0b10, 0b00011) => return OpCode::BIT_asimdsame_only,
                (1, 0b10, 0b11001) => return OpCode::FMLSL2_asimdsame_F,
                (1, 0b11, 0b00011) => return OpCode::BIF_asimdsame_only,
                (1, 0b11, 0b11001) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b10, 0b0000, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => {
            let Q = (inst >> 30) & 0b1;
            let op = (inst >> 29) & 0b1;
            let a = (inst >> 18) & 0b1;
            let b = (inst >> 17) & 0b1;
            let c = (inst >> 16) & 0b1;
            let cmode = (inst >> 12) & 0b1111;
            let o2 = (inst >> 11) & 0b1;
            let d = (inst >> 9) & 0b1;
            let e = (inst >> 8) & 0b1;
            let f = (inst >> 7) & 0b1;
            let g = (inst >> 6) & 0b1;
            let h = (inst >> 5) & 0b1;
            let Rd = inst & 0b11111;
            match (Q, op, cmode, o2) {
                (_, 0, 0b0000 | 0b0100 | 0b0010 | 0b0110 | 0b0001 | 0b0101 | 0b0011 | 0b0111, 1) => return OpCode::Unallocated,
                (_, 0, 0b0000 | 0b0100 | 0b0010 | 0b0110, 0) => return OpCode::MOVI_asimdimm_L_sl,
                (_, 0, 0b0001 | 0b0101 | 0b0011 | 0b0111, 0) => return OpCode::ORR_asimdimm_L_sl,
                (_, 0, 0b1000 | 0b1010 | 0b1001 | 0b1011, 1) => return OpCode::Unallocated,
                (_, 0, 0b1000 | 0b1010, 0) => return OpCode::MOVI_asimdimm_L_hl,
                (_, 0, 0b1001 | 0b1011, 0) => return OpCode::ORR_asimdimm_L_hl,
                (_, 0, 0b1100 | 0b1101, 0) => return OpCode::MOVI_asimdimm_M_sm,
                (_, 0, 0b1100 | 0b1101, 1) => return OpCode::Unallocated,
                (_, 0, 0b1110, 0) => return OpCode::MOVI_asimdimm_N_b,
                (_, 0, 0b1110, 1) => return OpCode::Unallocated,
                (_, 0, 0b1111, 0) => return OpCode::FMOV_asimdimm_S_s,
                (_, 0, 0b1111, 1) => return OpCode::FMOV_asimdimm_H_h,
                (_, 1, _, 1) => return OpCode::Unallocated,
                (_, 1, 0b0000 | 0b0100 | 0b0010 | 0b0110, 0) => return OpCode::MVNI_asimdimm_L_sl,
                (_, 1, 0b0001 | 0b0101 | 0b0011 | 0b0111, 0) => return OpCode::BIC_asimdimm_L_sl,
                (_, 1, 0b1000 | 0b1010, 0) => return OpCode::MVNI_asimdimm_L_hl,
                (_, 1, 0b1001 | 0b1011, 0) => return OpCode::BIC_asimdimm_L_hl,
                (_, 1, 0b1100 | 0b1101, 0) => return OpCode::MVNI_asimdimm_M_sm,
                (0, 1, 0b1110, 0) => return OpCode::MOVI_asimdimm_D_ds,
                (0, 1, 0b1111, 0) => return OpCode::Unallocated,
                (1, 1, 0b1110, 0) => return OpCode::MOVI_asimdimm_D2_d,
                (1, 1, 0b1111, 0) => return OpCode::FMOV_asimdimm_D2_d,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b10, var0, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) if var0 != 0b0000 => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let immh = (inst >> 19) & 0b1111;
            let immb = (inst >> 16) & 0b111;
            let opcode = (inst >> 11) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, opcode) {
                (_, 0b00001) => return OpCode::Unallocated,
                (_, 0b00011) => return OpCode::Unallocated,
                (_, 0b00101) => return OpCode::Unallocated,
                (_, 0b00111) => return OpCode::Unallocated,
                (_, 0b01001) => return OpCode::Unallocated,
                (_, 0b01011) => return OpCode::Unallocated,
                (_, 0b01101) => return OpCode::Unallocated,
                (_, 0b01111) => return OpCode::Unallocated,
                (_, 0b10101) => return OpCode::Unallocated,
                (_, 0b10110 | 0b10111) => return OpCode::Unallocated,
                (_, 0b11000 | 0b11010 | 0b11001 | 0b11011) => return OpCode::Unallocated,
                (_, 0b11101) => return OpCode::Unallocated,
                (_, 0b11110) => return OpCode::Unallocated,
                (0, 0b00000) => return OpCode::SSHR_asimdshf_R,
                (0, 0b00010) => return OpCode::SSRA_asimdshf_R,
                (0, 0b00100) => return OpCode::SRSHR_asimdshf_R,
                (0, 0b00110) => return OpCode::SRSRA_asimdshf_R,
                (0, 0b01000) => return OpCode::Unallocated,
                (0, 0b01010) => return OpCode::SHL_asimdshf_R,
                (0, 0b01100) => return OpCode::Unallocated,
                (0, 0b01110) => return OpCode::SQSHL_asimdshf_R,
                (0, 0b10000) => return OpCode::SHRN_asimdshf_N,
                (0, 0b10001) => return OpCode::RSHRN_asimdshf_N,
                (0, 0b10010) => return OpCode::SQSHRN_asimdshf_N,
                (0, 0b10011) => return OpCode::SQRSHRN_asimdshf_N,
                (0, 0b10100) => return OpCode::SSHLL_asimdshf_L,
                (0, 0b11100) => return OpCode::SCVTF_asimdshf_C,
                (0, 0b11111) => return OpCode::FCVTZS_asimdshf_C,
                (1, 0b00000) => return OpCode::USHR_asimdshf_R,
                (1, 0b00010) => return OpCode::USRA_asimdshf_R,
                (1, 0b00100) => return OpCode::URSHR_asimdshf_R,
                (1, 0b00110) => return OpCode::URSRA_asimdshf_R,
                (1, 0b01000) => return OpCode::SRI_asimdshf_R,
                (1, 0b01010) => return OpCode::SLI_asimdshf_R,
                (1, 0b01100) => return OpCode::SQSHLU_asimdshf_R,
                (1, 0b01110) => return OpCode::UQSHL_asimdshf_R,
                (1, 0b10000) => return OpCode::SQSHRUN_asimdshf_N,
                (1, 0b10001) => return OpCode::SQRSHRUN_asimdshf_N,
                (1, 0b10010) => return OpCode::UQSHRN_asimdshf_N,
                (1, 0b10011) => return OpCode::UQRSHRN_asimdshf_N,
                (1, 0b10100) => return OpCode::USHLL_asimdshf_L,
                (1, 0b11100) => return OpCode::UCVTF_asimdshf_C,
                (1, 0b11111) => return OpCode::FCVTZU_asimdshf_C,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b11, _, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => return OpCode::Unpredictable,
        (0b0000 | 0b0100 | 0b0010 | 0b0110, _, 0b10 | 0b11, _, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000100000 | 0b100100000 | 0b010100000 | 0b110100000 | 0b001100000 | 0b101100000 | 0b011100000 | 0b111100000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000110000 | 0b100110000 | 0b010110000 | 0b110110000 | 0b001110000 | 0b101110000 | 0b011110000 | 0b111110000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000101000 | 0b100101000 | 0b010101000 | 0b110101000 | 0b001101000 | 0b101101000 | 0b011101000 | 0b111101000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000111000 | 0b100111000 | 0b010111000 | 0b110111000 | 0b001111000 | 0b101111000 | 0b011111000 | 0b111111000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000100100 | 0b100100100 | 0b010100100 | 0b110100100 | 0b001100100 | 0b101100100 | 0b011100100 | 0b111100100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000110100 | 0b100110100 | 0b010110100 | 0b110110100 | 0b001110100 | 0b101110100 | 0b011110100 | 0b111110100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000101100 | 0b100101100 | 0b010101100 | 0b110101100 | 0b001101100 | 0b101101100 | 0b011101100 | 0b111101100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100 | 0b000111100 | 0b100111100 | 0b010111100 | 0b110111100 | 0b001111100 | 0b101111100 | 0b011111100 | 0b111111100 | 0b000000010 | 0b100000010 | 0b010000010 | 0b110000010 | 0b001000010 | 0b101000010 | 0b011000010 | 0b111000010 | 0b000100010 | 0b100100010 | 0b010100010 | 0b110100010 | 0b001100010 | 0b101100010 | 0b011100010 | 0b111100010 | 0b000010010 | 0b100010010 | 0b010010010 | 0b110010010 | 0b001010010 | 0b101010010 | 0b011010010 | 0b111010010 | 0b000110010 | 0b100110010 | 0b010110010 | 0b110110010 | 0b001110010 | 0b101110010 | 0b011110010 | 0b111110010 | 0b000001010 | 0b100001010 | 0b010001010 | 0b110001010 | 0b001001010 | 0b101001010 | 0b011001010 | 0b111001010 | 0b000101010 | 0b100101010 | 0b010101010 | 0b110101010 | 0b001101010 | 0b101101010 | 0b011101010 | 0b111101010 | 0b000011010 | 0b100011010 | 0b010011010 | 0b110011010 | 0b001011010 | 0b101011010 | 0b011011010 | 0b111011010 | 0b000111010 | 0b100111010 | 0b010111010 | 0b110111010 | 0b001111010 | 0b101111010 | 0b011111010 | 0b111111010 | 0b000000110 | 0b100000110 | 0b010000110 | 0b110000110 | 0b001000110 | 0b101000110 | 0b011000110 | 0b111000110 | 0b000100110 | 0b100100110 | 0b010100110 | 0b110100110 | 0b001100110 | 0b101100110 | 0b011100110 | 0b111100110 | 0b000010110 | 0b100010110 | 0b010010110 | 0b110010110 | 0b001010110 | 0b101010110 | 0b011010110 | 0b111010110 | 0b000110110 | 0b100110110 | 0b010110110 | 0b110110110 | 0b001110110 | 0b101110110 | 0b011110110 | 0b111110110 | 0b000001110 | 0b100001110 | 0b010001110 | 0b110001110 | 0b001001110 | 0b101001110 | 0b011001110 | 0b111001110 | 0b000101110 | 0b100101110 | 0b010101110 | 0b110101110 | 0b001101110 | 0b101101110 | 0b011101110 | 0b111101110 | 0b000011110 | 0b100011110 | 0b010011110 | 0b110011110 | 0b001011110 | 0b101011110 | 0b011011110 | 0b111011110 | 0b000111110 | 0b100111110 | 0b010111110 | 0b110111110 | 0b001111110 | 0b101111110 | 0b011111110 | 0b111111110, _) => {
            let Q = (inst >> 30) & 0b1;
            let U = (inst >> 29) & 0b1;
            let size = (inst >> 22) & 0b11;
            let L = (inst >> 21) & 0b1;
            let M = (inst >> 20) & 0b1;
            let Rm = (inst >> 16) & 0b1111;
            let opcode = (inst >> 12) & 0b1111;
            let H = (inst >> 11) & 0b1;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (U, size, opcode) {
                (_, 0b01, 0b1001) => return OpCode::Unallocated,
                (0, _, 0b0010) => return OpCode::SMLAL_asimdelem_L,
                (0, _, 0b0011) => return OpCode::SQDMLAL_asimdelem_L,
                (0, _, 0b0110) => return OpCode::SMLSL_asimdelem_L,
                (0, _, 0b0111) => return OpCode::SQDMLSL_asimdelem_L,
                (0, _, 0b1000) => return OpCode::MUL_asimdelem_R,
                (0, _, 0b1010) => return OpCode::SMULL_asimdelem_L,
                (0, _, 0b1011) => return OpCode::SQDMULL_asimdelem_L,
                (0, _, 0b1100) => return OpCode::SQDMULH_asimdelem_R,
                (0, _, 0b1101) => return OpCode::SQRDMULH_asimdelem_R,
                (0, _, 0b1110) => return OpCode::SDOT_asimdelem_D,
                (0, 0b00 | 0b01, 0b0000) => return OpCode::Unallocated,
                (0, 0b00 | 0b01, 0b0100) => return OpCode::Unallocated,
                (0, 0b00, 0b0001) => return OpCode::FMLA_asimdelem_RH_H,
                (0, 0b00, 0b0101) => return OpCode::FMLS_asimdelem_RH_H,
                (0, 0b00, 0b1001) => return OpCode::FMUL_asimdelem_RH_H,
                (0, 0b00, 0b1111) => return OpCode::SUDOT_asimdelem_D,
                (0, 0b01, 0b0001) => return OpCode::Unallocated,
                (0, 0b01, 0b0101) => return OpCode::Unallocated,
                (0, 0b01, 0b1111) => return OpCode::BFDOT_asimdelem_E,
                (0, 0b10 | 0b11, 0b0001) => return OpCode::FMLA_asimdelem_R_SD,
                (0, 0b10 | 0b11, 0b0101) => return OpCode::FMLS_asimdelem_R_SD,
                (0, 0b10 | 0b11, 0b1001) => return OpCode::FMUL_asimdelem_R_SD,
                (0, 0b10, 0b0000) => return OpCode::FMLAL_asimdelem_LH,
                (0, 0b10, 0b0100) => return OpCode::FMLSL_asimdelem_LH,
                (0, 0b10, 0b1111) => return OpCode::USDOT_asimdelem_D,
                (0, 0b11, 0b0000) => return OpCode::Unallocated,
                (0, 0b11, 0b0100) => return OpCode::Unallocated,
                (0, 0b11, 0b1111) => return OpCode::BFMLAL_asimdelem_F,
                (1, _, 0b0000) => return OpCode::MLA_asimdelem_R,
                (1, _, 0b0010) => return OpCode::UMLAL_asimdelem_L,
                (1, _, 0b0100) => return OpCode::MLS_asimdelem_R,
                (1, _, 0b0110) => return OpCode::UMLSL_asimdelem_L,
                (1, _, 0b1010) => return OpCode::UMULL_asimdelem_L,
                (1, _, 0b1011) => return OpCode::Unallocated,
                (1, _, 0b1101) => return OpCode::SQRDMLAH_asimdelem_R,
                (1, _, 0b1110) => return OpCode::UDOT_asimdelem_D,
                (1, _, 0b1111) => return OpCode::SQRDMLSH_asimdelem_R,
                (1, 0b00 | 0b01, 0b1000) => return OpCode::Unallocated,
                (1, 0b00 | 0b01, 0b1100) => return OpCode::Unallocated,
                (1, 0b00, 0b0001) => return OpCode::Unallocated,
                (1, 0b00, 0b0011) => return OpCode::Unallocated,
                (1, 0b00, 0b0101) => return OpCode::Unallocated,
                (1, 0b00, 0b0111) => return OpCode::Unallocated,
                (1, 0b00, 0b1001) => return OpCode::FMULX_asimdelem_RH_H,
                (1, 0b01, 0b0001 | 0b0101 | 0b0011 | 0b0111) => return OpCode::FCMLA_asimdelem_C_H,
                (1, 0b10 | 0b11, 0b1001) => return OpCode::FMULX_asimdelem_R_SD,
                (1, 0b10, 0b0001 | 0b0101 | 0b0011 | 0b0111) => return OpCode::FCMLA_asimdelem_C_S,
                (1, 0b10, 0b1000) => return OpCode::FMLAL2_asimdelem_LH,
                (1, 0b10, 0b1100) => return OpCode::FMLSL2_asimdelem_LH,
                (1, 0b11, 0b0001) => return OpCode::Unallocated,
                (1, 0b11, 0b0011) => return OpCode::Unallocated,
                (1, 0b11, 0b0101) => return OpCode::Unallocated,
                (1, 0b11, 0b0111) => return OpCode::Unallocated,
                (1, 0b11, 0b1000) => return OpCode::Unallocated,
                (1, 0b11, 0b1100) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b1100, _, 0b00, 0b1000 | 0b1010 | 0b1001 | 0b1011, 0b000100000 | 0b100100000 | 0b010100000 | 0b110100000 | 0b001100000 | 0b101100000 | 0b011100000 | 0b111100000 | 0b000101000 | 0b100101000 | 0b010101000 | 0b110101000 | 0b001101000 | 0b101101000 | 0b011101000 | 0b111101000 | 0b000100100 | 0b100100100 | 0b010100100 | 0b110100100 | 0b001100100 | 0b101100100 | 0b011100100 | 0b111100100 | 0b000101100 | 0b100101100 | 0b010101100 | 0b110101100 | 0b001101100 | 0b101101100 | 0b011101100 | 0b111101100 | 0b000100010 | 0b100100010 | 0b010100010 | 0b110100010 | 0b001100010 | 0b101100010 | 0b011100010 | 0b111100010 | 0b000101010 | 0b100101010 | 0b010101010 | 0b110101010 | 0b001101010 | 0b101101010 | 0b011101010 | 0b111101010 | 0b000100110 | 0b100100110 | 0b010100110 | 0b110100110 | 0b001100110 | 0b101100110 | 0b011100110 | 0b111100110 | 0b000101110 | 0b100101110 | 0b010101110 | 0b110101110 | 0b001101110 | 0b101101110 | 0b011101110 | 0b111101110 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111, _) => {
            let Rm = (inst >> 16) & 0b11111;
            let imm2 = (inst >> 12) & 0b11;
            let opcode = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match opcode {
                0b00 => return OpCode::SM3TT1A_VVV4_crypto3_imm2,
                0b01 => return OpCode::SM3TT1B_VVV4_crypto3_imm2,
                0b10 => return OpCode::SM3TT2A_VVV4_crypto3_imm2,
                0b11 => return OpCode::SM3TT2B_VVV_crypto3_imm2,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b1100, _, 0b00, 0b1100 | 0b1110 | 0b1101 | 0b1111, 0b000100000 | 0b100100000 | 0b010100000 | 0b110100000 | 0b001100000 | 0b101100000 | 0b011100000 | 0b111100000 | 0b000110000 | 0b100110000 | 0b010110000 | 0b110110000 | 0b001110000 | 0b101110000 | 0b011110000 | 0b111110000 | 0b000100010 | 0b100100010 | 0b010100010 | 0b110100010 | 0b001100010 | 0b101100010 | 0b011100010 | 0b111100010 | 0b000110010 | 0b100110010 | 0b010110010 | 0b110110010 | 0b001110010 | 0b101110010 | 0b011110010 | 0b111110010 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011, _) => {
            let Rm = (inst >> 16) & 0b11111;
            let O = (inst >> 14) & 0b1;
            let opcode = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (O, opcode) {
                (0, 0b00) => return OpCode::SHA512H_QQV_cryptosha512_3,
                (0, 0b01) => return OpCode::SHA512H2_QQV_cryptosha512_3,
                (0, 0b10) => return OpCode::SHA512SU1_VVV2_cryptosha512_3,
                (0, 0b11) => return OpCode::RAX1_VVV2_cryptosha512_3,
                (1, 0b00) => return OpCode::SM3PARTW1_VVV4_cryptosha512_3,
                (1, 0b01) => return OpCode::SM3PARTW2_VVV4_cryptosha512_3,
                (1, 0b10) => return OpCode::SM4EKEY_VVV4_cryptosha512_3,
                (1, 0b11) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b1100, _, 0b00, _, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000 | 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100 | 0b000000010 | 0b100000010 | 0b010000010 | 0b110000010 | 0b001000010 | 0b101000010 | 0b011000010 | 0b111000010 | 0b000010010 | 0b100010010 | 0b010010010 | 0b110010010 | 0b001010010 | 0b101010010 | 0b011010010 | 0b111010010 | 0b000001010 | 0b100001010 | 0b010001010 | 0b110001010 | 0b001001010 | 0b101001010 | 0b011001010 | 0b111001010 | 0b000011010 | 0b100011010 | 0b010011010 | 0b110011010 | 0b001011010 | 0b101011010 | 0b011011010 | 0b111011010 | 0b000000110 | 0b100000110 | 0b010000110 | 0b110000110 | 0b001000110 | 0b101000110 | 0b011000110 | 0b111000110 | 0b000010110 | 0b100010110 | 0b010010110 | 0b110010110 | 0b001010110 | 0b101010110 | 0b011010110 | 0b111010110 | 0b000001110 | 0b100001110 | 0b010001110 | 0b110001110 | 0b001001110 | 0b101001110 | 0b011001110 | 0b111001110 | 0b000011110 | 0b100011110 | 0b010011110 | 0b110011110 | 0b001011110 | 0b101011110 | 0b011011110 | 0b111011110 | 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111, _) => {
            let Op0 = (inst >> 21) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let Ra = (inst >> 10) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match Op0 {
                0b00 => return OpCode::EOR3_VVV16_crypto4,
                0b01 => return OpCode::BCAX_VVV16_crypto4,
                0b10 => return OpCode::SM3SS1_VVV4_crypto4,
                0b11 => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b1100, _, 0b01, 0b0000 | 0b0010 | 0b0001 | 0b0011, _, _) => {
            let Rm = (inst >> 16) & 0b11111;
            let imm6 = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
return OpCode::XAR_VVV2_crypto3_imm6;
        }
        (0b1100, _, 0b01, 0b1000, 0b000100000 | 0b000100010 | 0b000100001 | 0b000100011, _) => {
            let opcode = (inst >> 10) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match opcode {
                0b00 => return OpCode::SHA512SU0_VV2_cryptosha512_2,
                0b01 => return OpCode::SM4E_VV4_cryptosha512_2,
                0b10 | 0b11 => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b1000 | 0b1100 | 0b1010 | 0b1110, _, 0b10 | 0b11, _, _, _) => return OpCode::Unpredictable,
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b00 | 0b01, 0b0000 | 0b1000 | 0b0010 | 0b1010 | 0b0001 | 0b1001 | 0b0011 | 0b1011, _, _) => {
            let sf = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let rmode = (inst >> 19) & 0b11;
            let opcode = (inst >> 16) & 0b111;
            let scale = (inst >> 10) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, S, ptype, rmode, opcode, scale) {
                (_, _, _, _, 0b100 | 0b110 | 0b101 | 0b111, _) => return OpCode::Unallocated,
                (_, _, _, 0b00 | 0b10, 0b000 | 0b001, _) => return OpCode::Unallocated,
                (_, _, _, 0b01 | 0b11, 0b010 | 0b011, _) => return OpCode::Unallocated,
                (_, _, _, 0b00 | 0b01, 0b000 | 0b001, _) => return OpCode::Unallocated,
                (_, _, _, 0b10 | 0b11, 0b010 | 0b011, _) => return OpCode::Unallocated,
                (_, _, 0b10, _, _, _) => return OpCode::Unallocated,
                (_, 1, _, _, _, _) => return OpCode::Unallocated,
                (0, _, _, _, _, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b00, 0b010, _) => return OpCode::SCVTF_S32_float2fix,
                (0, 0, 0b00, 0b00, 0b011, _) => return OpCode::UCVTF_S32_float2fix,
                (0, 0, 0b00, 0b11, 0b000, _) => return OpCode::FCVTZS_32S_float2fix,
                (0, 0, 0b00, 0b11, 0b001, _) => return OpCode::FCVTZU_32S_float2fix,
                (0, 0, 0b01, 0b00, 0b010, _) => return OpCode::SCVTF_D32_float2fix,
                (0, 0, 0b01, 0b00, 0b011, _) => return OpCode::UCVTF_D32_float2fix,
                (0, 0, 0b01, 0b11, 0b000, _) => return OpCode::FCVTZS_32D_float2fix,
                (0, 0, 0b01, 0b11, 0b001, _) => return OpCode::FCVTZU_32D_float2fix,
                (0, 0, 0b11, 0b00, 0b010, _) => return OpCode::SCVTF_H32_float2fix,
                (0, 0, 0b11, 0b00, 0b011, _) => return OpCode::UCVTF_H32_float2fix,
                (0, 0, 0b11, 0b11, 0b000, _) => return OpCode::FCVTZS_32H_float2fix,
                (0, 0, 0b11, 0b11, 0b001, _) => return OpCode::FCVTZU_32H_float2fix,
                (1, 0, 0b00, 0b00, 0b010, _) => return OpCode::SCVTF_S64_float2fix,
                (1, 0, 0b00, 0b00, 0b011, _) => return OpCode::UCVTF_S64_float2fix,
                (1, 0, 0b00, 0b11, 0b000, _) => return OpCode::FCVTZS_64S_float2fix,
                (1, 0, 0b00, 0b11, 0b001, _) => return OpCode::FCVTZU_64S_float2fix,
                (1, 0, 0b01, 0b00, 0b010, _) => return OpCode::SCVTF_D64_float2fix,
                (1, 0, 0b01, 0b00, 0b011, _) => return OpCode::UCVTF_D64_float2fix,
                (1, 0, 0b01, 0b11, 0b000, _) => return OpCode::FCVTZS_64D_float2fix,
                (1, 0, 0b01, 0b11, 0b001, _) => return OpCode::FCVTZU_64D_float2fix,
                (1, 0, 0b11, 0b00, 0b010, _) => return OpCode::SCVTF_H64_float2fix,
                (1, 0, 0b11, 0b00, 0b011, _) => return OpCode::UCVTF_H64_float2fix,
                (1, 0, 0b11, 0b11, 0b000, _) => return OpCode::FCVTZS_64H_float2fix,
                (1, 0, 0b11, 0b11, 0b001, _) => return OpCode::FCVTZU_64H_float2fix,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000000 | 0b100000000 | 0b010000000 | 0b110000000 | 0b001000000 | 0b101000000 | 0b011000000 | 0b111000000, _) => {
            let sf = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let rmode = (inst >> 19) & 0b11;
            let opcode = (inst >> 16) & 0b111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (sf, S, ptype, rmode, opcode) {
                (_, _, _, 0b01 | 0b11, 0b010 | 0b011) => return OpCode::Unallocated,
                (_, _, _, 0b01 | 0b11, 0b100 | 0b101) => return OpCode::Unallocated,
                (_, _, _, 0b10 | 0b11, 0b010 | 0b011) => return OpCode::Unallocated,
                (_, _, _, 0b10 | 0b11, 0b100 | 0b101) => return OpCode::Unallocated,
                (_, 0, 0b10, _, 0b000 | 0b010 | 0b001 | 0b011) => return OpCode::Unallocated,
                (_, 0, 0b10, _, 0b100 | 0b101) => return OpCode::Unallocated,
                (_, 1, _, _, _) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b01 | 0b11, 0b110 | 0b111) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b00, 0b000) => return OpCode::FCVTNS_32S_float2int,
                (0, 0, 0b00, 0b00, 0b001) => return OpCode::FCVTNU_32S_float2int,
                (0, 0, 0b00, 0b00, 0b010) => return OpCode::SCVTF_S32_float2int,
                (0, 0, 0b00, 0b00, 0b011) => return OpCode::UCVTF_S32_float2int,
                (0, 0, 0b00, 0b00, 0b100) => return OpCode::FCVTAS_32S_float2int,
                (0, 0, 0b00, 0b00, 0b101) => return OpCode::FCVTAU_32S_float2int,
                (0, 0, 0b00, 0b00, 0b110) => return OpCode::FMOV_32S_float2int,
                (0, 0, 0b00, 0b00, 0b111) => return OpCode::FMOV_S32_float2int,
                (0, 0, 0b00, 0b01, 0b000) => return OpCode::FCVTPS_32S_float2int,
                (0, 0, 0b00, 0b01, 0b001) => return OpCode::FCVTPU_32S_float2int,
                (0, 0, 0b00, 0b10 | 0b11, 0b110 | 0b111) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b10, 0b000) => return OpCode::FCVTMS_32S_float2int,
                (0, 0, 0b00, 0b10, 0b001) => return OpCode::FCVTMU_32S_float2int,
                (0, 0, 0b00, 0b11, 0b000) => return OpCode::FCVTZS_32S_float2int,
                (0, 0, 0b00, 0b11, 0b001) => return OpCode::FCVTZU_32S_float2int,
                (0, 0, 0b01, 0b00 | 0b01, 0b110 | 0b111) => return OpCode::Unallocated,
                (0, 0, 0b01, 0b00, 0b000) => return OpCode::FCVTNS_32D_float2int,
                (0, 0, 0b01, 0b00, 0b001) => return OpCode::FCVTNU_32D_float2int,
                (0, 0, 0b01, 0b00, 0b010) => return OpCode::SCVTF_D32_float2int,
                (0, 0, 0b01, 0b00, 0b011) => return OpCode::UCVTF_D32_float2int,
                (0, 0, 0b01, 0b00, 0b100) => return OpCode::FCVTAS_32D_float2int,
                (0, 0, 0b01, 0b00, 0b101) => return OpCode::FCVTAU_32D_float2int,
                (0, 0, 0b01, 0b01, 0b000) => return OpCode::FCVTPS_32D_float2int,
                (0, 0, 0b01, 0b01, 0b001) => return OpCode::FCVTPU_32D_float2int,
                (0, 0, 0b01, 0b10, 0b000) => return OpCode::FCVTMS_32D_float2int,
                (0, 0, 0b01, 0b10, 0b001) => return OpCode::FCVTMU_32D_float2int,
                (0, 0, 0b01, 0b10, 0b110 | 0b111) => return OpCode::Unallocated,
                (0, 0, 0b01, 0b11, 0b000) => return OpCode::FCVTZS_32D_float2int,
                (0, 0, 0b01, 0b11, 0b001) => return OpCode::FCVTZU_32D_float2int,
                (0, 0, 0b01, 0b11, 0b110) => return OpCode::FJCVTZS_32D_float2int,
                (0, 0, 0b01, 0b11, 0b111) => return OpCode::Unallocated,
                (0, 0, 0b10, _, 0b110 | 0b111) => return OpCode::Unallocated,
                (0, 0, 0b11, 0b00, 0b000) => return OpCode::FCVTNS_32H_float2int,
                (0, 0, 0b11, 0b00, 0b001) => return OpCode::FCVTNU_32H_float2int,
                (0, 0, 0b11, 0b00, 0b010) => return OpCode::SCVTF_H32_float2int,
                (0, 0, 0b11, 0b00, 0b011) => return OpCode::UCVTF_H32_float2int,
                (0, 0, 0b11, 0b00, 0b100) => return OpCode::FCVTAS_32H_float2int,
                (0, 0, 0b11, 0b00, 0b101) => return OpCode::FCVTAU_32H_float2int,
                (0, 0, 0b11, 0b00, 0b110) => return OpCode::FMOV_32H_float2int,
                (0, 0, 0b11, 0b00, 0b111) => return OpCode::FMOV_H32_float2int,
                (0, 0, 0b11, 0b01, 0b000) => return OpCode::FCVTPS_32H_float2int,
                (0, 0, 0b11, 0b01, 0b001) => return OpCode::FCVTPU_32H_float2int,
                (0, 0, 0b11, 0b10, 0b000) => return OpCode::FCVTMS_32H_float2int,
                (0, 0, 0b11, 0b10, 0b001) => return OpCode::FCVTMU_32H_float2int,
                (0, 0, 0b11, 0b11, 0b000) => return OpCode::FCVTZS_32H_float2int,
                (0, 0, 0b11, 0b11, 0b001) => return OpCode::FCVTZU_32H_float2int,
                (1, 0, 0b00, _, 0b110 | 0b111) => return OpCode::Unallocated,
                (1, 0, 0b00, 0b00, 0b000) => return OpCode::FCVTNS_64S_float2int,
                (1, 0, 0b00, 0b00, 0b001) => return OpCode::FCVTNU_64S_float2int,
                (1, 0, 0b00, 0b00, 0b010) => return OpCode::SCVTF_S64_float2int,
                (1, 0, 0b00, 0b00, 0b011) => return OpCode::UCVTF_S64_float2int,
                (1, 0, 0b00, 0b00, 0b100) => return OpCode::FCVTAS_64S_float2int,
                (1, 0, 0b00, 0b00, 0b101) => return OpCode::FCVTAU_64S_float2int,
                (1, 0, 0b00, 0b01, 0b000) => return OpCode::FCVTPS_64S_float2int,
                (1, 0, 0b00, 0b01, 0b001) => return OpCode::FCVTPU_64S_float2int,
                (1, 0, 0b00, 0b10, 0b000) => return OpCode::FCVTMS_64S_float2int,
                (1, 0, 0b00, 0b10, 0b001) => return OpCode::FCVTMU_64S_float2int,
                (1, 0, 0b00, 0b11, 0b000) => return OpCode::FCVTZS_64S_float2int,
                (1, 0, 0b00, 0b11, 0b001) => return OpCode::FCVTZU_64S_float2int,
                (1, 0, 0b01, 0b01 | 0b11, 0b110 | 0b111) => return OpCode::Unallocated,
                (1, 0, 0b01, 0b00, 0b000) => return OpCode::FCVTNS_64D_float2int,
                (1, 0, 0b01, 0b00, 0b001) => return OpCode::FCVTNU_64D_float2int,
                (1, 0, 0b01, 0b00, 0b010) => return OpCode::SCVTF_D64_float2int,
                (1, 0, 0b01, 0b00, 0b011) => return OpCode::UCVTF_D64_float2int,
                (1, 0, 0b01, 0b00, 0b100) => return OpCode::FCVTAS_64D_float2int,
                (1, 0, 0b01, 0b00, 0b101) => return OpCode::FCVTAU_64D_float2int,
                (1, 0, 0b01, 0b00, 0b110) => return OpCode::FMOV_64D_float2int,
                (1, 0, 0b01, 0b00, 0b111) => return OpCode::FMOV_D64_float2int,
                (1, 0, 0b01, 0b01, 0b000) => return OpCode::FCVTPS_64D_float2int,
                (1, 0, 0b01, 0b01, 0b001) => return OpCode::FCVTPU_64D_float2int,
                (1, 0, 0b01, 0b10 | 0b11, 0b110 | 0b111) => return OpCode::Unallocated,
                (1, 0, 0b01, 0b10, 0b000) => return OpCode::FCVTMS_64D_float2int,
                (1, 0, 0b01, 0b10, 0b001) => return OpCode::FCVTMU_64D_float2int,
                (1, 0, 0b01, 0b11, 0b000) => return OpCode::FCVTZS_64D_float2int,
                (1, 0, 0b01, 0b11, 0b001) => return OpCode::FCVTZU_64D_float2int,
                (1, 0, 0b10, 0b00 | 0b10, 0b110 | 0b111) => return OpCode::Unallocated,
                (1, 0, 0b10, 0b01, 0b110) => return OpCode::FMOV_64VX_float2int,
                (1, 0, 0b10, 0b01, 0b111) => return OpCode::FMOV_V64I_float2int,
                (1, 0, 0b10, 0b10 | 0b11, 0b110 | 0b111) => return OpCode::Unallocated,
                (1, 0, 0b11, 0b00, 0b000) => return OpCode::FCVTNS_64H_float2int,
                (1, 0, 0b11, 0b00, 0b001) => return OpCode::FCVTNU_64H_float2int,
                (1, 0, 0b11, 0b00, 0b010) => return OpCode::SCVTF_H64_float2int,
                (1, 0, 0b11, 0b00, 0b011) => return OpCode::UCVTF_H64_float2int,
                (1, 0, 0b11, 0b00, 0b100) => return OpCode::FCVTAS_64H_float2int,
                (1, 0, 0b11, 0b00, 0b101) => return OpCode::FCVTAU_64H_float2int,
                (1, 0, 0b11, 0b00, 0b110) => return OpCode::FMOV_64H_float2int,
                (1, 0, 0b11, 0b00, 0b111) => return OpCode::FMOV_H64_float2int,
                (1, 0, 0b11, 0b01, 0b000) => return OpCode::FCVTPS_64H_float2int,
                (1, 0, 0b11, 0b01, 0b001) => return OpCode::FCVTPU_64H_float2int,
                (1, 0, 0b11, 0b10, 0b000) => return OpCode::FCVTMS_64H_float2int,
                (1, 0, 0b11, 0b10, 0b001) => return OpCode::FCVTMU_64H_float2int,
                (1, 0, 0b11, 0b11, 0b000) => return OpCode::FCVTZS_64H_float2int,
                (1, 0, 0b11, 0b11, 0b001) => return OpCode::FCVTZU_64H_float2int,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000010000 | 0b100010000 | 0b010010000 | 0b110010000 | 0b001010000 | 0b101010000 | 0b011010000 | 0b111010000 | 0b000110000 | 0b100110000 | 0b010110000 | 0b110110000 | 0b001110000 | 0b101110000 | 0b011110000 | 0b111110000, _) => {
            let M = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let opcode = (inst >> 15) & 0b111111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (M, S, ptype, opcode) {
                (_, _, _, 0b100000 | 0b110000 | 0b101000 | 0b111000 | 0b100100 | 0b110100 | 0b101100 | 0b111100 | 0b100010 | 0b110010 | 0b101010 | 0b111010 | 0b100110 | 0b110110 | 0b101110 | 0b111110 | 0b100001 | 0b110001 | 0b101001 | 0b111001 | 0b100101 | 0b110101 | 0b101101 | 0b111101 | 0b100011 | 0b110011 | 0b101011 | 0b111011 | 0b100111 | 0b110111 | 0b101111 | 0b111111) => return OpCode::Unallocated,
                (_, 1, _, _) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b000000) => return OpCode::FMOV_S_floatdp1,
                (0, 0, 0b00, 0b000001) => return OpCode::FABS_S_floatdp1,
                (0, 0, 0b00, 0b000010) => return OpCode::FNEG_S_floatdp1,
                (0, 0, 0b00, 0b000011) => return OpCode::FSQRT_S_floatdp1,
                (0, 0, 0b00, 0b000100) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b000101) => return OpCode::FCVT_DS_floatdp1,
                (0, 0, 0b00, 0b000110) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b000111) => return OpCode::FCVT_HS_floatdp1,
                (0, 0, 0b00, 0b001000) => return OpCode::FRINTN_S_floatdp1,
                (0, 0, 0b00, 0b001001) => return OpCode::FRINTP_S_floatdp1,
                (0, 0, 0b00, 0b001010) => return OpCode::FRINTM_S_floatdp1,
                (0, 0, 0b00, 0b001011) => return OpCode::FRINTZ_S_floatdp1,
                (0, 0, 0b00, 0b001100) => return OpCode::FRINTA_S_floatdp1,
                (0, 0, 0b00, 0b001101) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b001110) => return OpCode::FRINTX_S_floatdp1,
                (0, 0, 0b00, 0b001111) => return OpCode::FRINTI_S_floatdp1,
                (0, 0, 0b00, 0b010000) => return OpCode::FRINT32Z_S_floatdp1,
                (0, 0, 0b00, 0b010001) => return OpCode::FRINT32X_S_floatdp1,
                (0, 0, 0b00, 0b010010) => return OpCode::FRINT64Z_S_floatdp1,
                (0, 0, 0b00, 0b010011) => return OpCode::FRINT64X_S_floatdp1,
                (0, 0, 0b00, 0b010100 | 0b010110 | 0b010101 | 0b010111) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b011000 | 0b011100 | 0b011010 | 0b011110 | 0b011001 | 0b011101 | 0b011011 | 0b011111) => return OpCode::Unallocated,
                (0, 0, 0b01, 0b000000) => return OpCode::FMOV_D_floatdp1,
                (0, 0, 0b01, 0b000001) => return OpCode::FABS_D_floatdp1,
                (0, 0, 0b01, 0b000010) => return OpCode::FNEG_D_floatdp1,
                (0, 0, 0b01, 0b000011) => return OpCode::FSQRT_D_floatdp1,
                (0, 0, 0b01, 0b000100) => return OpCode::FCVT_SD_floatdp1,
                (0, 0, 0b01, 0b000101) => return OpCode::Unallocated,
                (0, 0, 0b01, 0b000110) => return OpCode::BFCVT_BS_floatdp1,
                (0, 0, 0b01, 0b000111) => return OpCode::FCVT_HD_floatdp1,
                (0, 0, 0b01, 0b001000) => return OpCode::FRINTN_D_floatdp1,
                (0, 0, 0b01, 0b001001) => return OpCode::FRINTP_D_floatdp1,
                (0, 0, 0b01, 0b001010) => return OpCode::FRINTM_D_floatdp1,
                (0, 0, 0b01, 0b001011) => return OpCode::FRINTZ_D_floatdp1,
                (0, 0, 0b01, 0b001100) => return OpCode::FRINTA_D_floatdp1,
                (0, 0, 0b01, 0b001101) => return OpCode::Unallocated,
                (0, 0, 0b01, 0b001110) => return OpCode::FRINTX_D_floatdp1,
                (0, 0, 0b01, 0b001111) => return OpCode::FRINTI_D_floatdp1,
                (0, 0, 0b01, 0b010000) => return OpCode::FRINT32Z_D_floatdp1,
                (0, 0, 0b01, 0b010001) => return OpCode::FRINT32X_D_floatdp1,
                (0, 0, 0b01, 0b010010) => return OpCode::FRINT64Z_D_floatdp1,
                (0, 0, 0b01, 0b010011) => return OpCode::FRINT64X_D_floatdp1,
                (0, 0, 0b01, 0b010100 | 0b010110 | 0b010101 | 0b010111) => return OpCode::Unallocated,
                (0, 0, 0b01, 0b011000 | 0b011100 | 0b011010 | 0b011110 | 0b011001 | 0b011101 | 0b011011 | 0b011111) => return OpCode::Unallocated,
                (0, 0, 0b10, 0b000000 | 0b010000 | 0b001000 | 0b011000 | 0b000100 | 0b010100 | 0b001100 | 0b011100 | 0b000010 | 0b010010 | 0b001010 | 0b011010 | 0b000110 | 0b010110 | 0b001110 | 0b011110 | 0b000001 | 0b010001 | 0b001001 | 0b011001 | 0b000101 | 0b010101 | 0b001101 | 0b011101 | 0b000011 | 0b010011 | 0b001011 | 0b011011 | 0b000111 | 0b010111 | 0b001111 | 0b011111) => return OpCode::Unallocated,
                (0, 0, 0b11, 0b000000) => return OpCode::FMOV_H_floatdp1,
                (0, 0, 0b11, 0b000001) => return OpCode::FABS_H_floatdp1,
                (0, 0, 0b11, 0b000010) => return OpCode::FNEG_H_floatdp1,
                (0, 0, 0b11, 0b000011) => return OpCode::FSQRT_H_floatdp1,
                (0, 0, 0b11, 0b000100) => return OpCode::FCVT_SH_floatdp1,
                (0, 0, 0b11, 0b000101) => return OpCode::FCVT_DH_floatdp1,
                (0, 0, 0b11, 0b000110 | 0b000111) => return OpCode::Unallocated,
                (0, 0, 0b11, 0b001000) => return OpCode::FRINTN_H_floatdp1,
                (0, 0, 0b11, 0b001001) => return OpCode::FRINTP_H_floatdp1,
                (0, 0, 0b11, 0b001010) => return OpCode::FRINTM_H_floatdp1,
                (0, 0, 0b11, 0b001011) => return OpCode::FRINTZ_H_floatdp1,
                (0, 0, 0b11, 0b001100) => return OpCode::FRINTA_H_floatdp1,
                (0, 0, 0b11, 0b001101) => return OpCode::Unallocated,
                (0, 0, 0b11, 0b001110) => return OpCode::FRINTX_H_floatdp1,
                (0, 0, 0b11, 0b001111) => return OpCode::FRINTI_H_floatdp1,
                (0, 0, 0b11, 0b010000 | 0b011000 | 0b010100 | 0b011100 | 0b010010 | 0b011010 | 0b010110 | 0b011110 | 0b010001 | 0b011001 | 0b010101 | 0b011101 | 0b010011 | 0b011011 | 0b010111 | 0b011111) => return OpCode::Unallocated,
                (1, _, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000001000 | 0b100001000 | 0b010001000 | 0b110001000 | 0b001001000 | 0b101001000 | 0b011001000 | 0b111001000 | 0b000101000 | 0b100101000 | 0b010101000 | 0b110101000 | 0b001101000 | 0b101101000 | 0b011101000 | 0b111101000 | 0b000011000 | 0b100011000 | 0b010011000 | 0b110011000 | 0b001011000 | 0b101011000 | 0b011011000 | 0b111011000 | 0b000111000 | 0b100111000 | 0b010111000 | 0b110111000 | 0b001111000 | 0b101111000 | 0b011111000 | 0b111111000, _) => {
            let M = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let op = (inst >> 14) & 0b11;
            let Rn = (inst >> 5) & 0b11111;
            let opcode2 = inst & 0b11111;
            match (M, S, ptype, op, opcode2) {
                (_, _, _, _, 0b00001 | 0b10001 | 0b01001 | 0b11001 | 0b00101 | 0b10101 | 0b01101 | 0b11101 | 0b00011 | 0b10011 | 0b01011 | 0b11011 | 0b00111 | 0b10111 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, _, _, _, 0b00010 | 0b10010 | 0b01010 | 0b11010 | 0b00110 | 0b10110 | 0b01110 | 0b11110 | 0b00011 | 0b10011 | 0b01011 | 0b11011 | 0b00111 | 0b10111 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, _, _, _, 0b00100 | 0b10100 | 0b01100 | 0b11100 | 0b00110 | 0b10110 | 0b01110 | 0b11110 | 0b00101 | 0b10101 | 0b01101 | 0b11101 | 0b00111 | 0b10111 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, _, _, 0b01 | 0b11, _) => return OpCode::Unallocated,
                (_, _, _, 0b10 | 0b11, _) => return OpCode::Unallocated,
                (_, _, 0b10, _, _) => return OpCode::Unallocated,
                (_, 1, _, _, _) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b00, 0b00000) => return OpCode::FCMP_S_floatcmp,
                (0, 0, 0b00, 0b00, 0b01000) => return OpCode::FCMP_SZ_floatcmp,
                (0, 0, 0b00, 0b00, 0b10000) => return OpCode::FCMPE_S_floatcmp,
                (0, 0, 0b00, 0b00, 0b11000) => return OpCode::FCMPE_SZ_floatcmp,
                (0, 0, 0b01, 0b00, 0b00000) => return OpCode::FCMP_D_floatcmp,
                (0, 0, 0b01, 0b00, 0b01000) => return OpCode::FCMP_DZ_floatcmp,
                (0, 0, 0b01, 0b00, 0b10000) => return OpCode::FCMPE_D_floatcmp,
                (0, 0, 0b01, 0b00, 0b11000) => return OpCode::FCMPE_DZ_floatcmp,
                (0, 0, 0b11, 0b00, 0b00000) => return OpCode::FCMP_H_floatcmp,
                (0, 0, 0b11, 0b00, 0b01000) => return OpCode::FCMP_HZ_floatcmp,
                (0, 0, 0b11, 0b00, 0b10000) => return OpCode::FCMPE_H_floatcmp,
                (0, 0, 0b11, 0b00, 0b11000) => return OpCode::FCMPE_HZ_floatcmp,
                (1, _, _, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000100 | 0b100000100 | 0b010000100 | 0b110000100 | 0b001000100 | 0b101000100 | 0b011000100 | 0b111000100 | 0b000100100 | 0b100100100 | 0b010100100 | 0b110100100 | 0b001100100 | 0b101100100 | 0b011100100 | 0b111100100 | 0b000010100 | 0b100010100 | 0b010010100 | 0b110010100 | 0b001010100 | 0b101010100 | 0b011010100 | 0b111010100 | 0b000110100 | 0b100110100 | 0b010110100 | 0b110110100 | 0b001110100 | 0b101110100 | 0b011110100 | 0b111110100 | 0b000001100 | 0b100001100 | 0b010001100 | 0b110001100 | 0b001001100 | 0b101001100 | 0b011001100 | 0b111001100 | 0b000101100 | 0b100101100 | 0b010101100 | 0b110101100 | 0b001101100 | 0b101101100 | 0b011101100 | 0b111101100 | 0b000011100 | 0b100011100 | 0b010011100 | 0b110011100 | 0b001011100 | 0b101011100 | 0b011011100 | 0b111011100 | 0b000111100 | 0b100111100 | 0b010111100 | 0b110111100 | 0b001111100 | 0b101111100 | 0b011111100 | 0b111111100, _) => {
            let M = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let imm8 = (inst >> 13) & 0b11111111;
            let imm5 = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (M, S, ptype, imm5) {
                (_, _, _, 0b00001 | 0b10001 | 0b01001 | 0b11001 | 0b00101 | 0b10101 | 0b01101 | 0b11101 | 0b00011 | 0b10011 | 0b01011 | 0b11011 | 0b00111 | 0b10111 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, _, _, 0b00010 | 0b10010 | 0b01010 | 0b11010 | 0b00110 | 0b10110 | 0b01110 | 0b11110 | 0b00011 | 0b10011 | 0b01011 | 0b11011 | 0b00111 | 0b10111 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, _, _, 0b00100 | 0b10100 | 0b01100 | 0b11100 | 0b00110 | 0b10110 | 0b01110 | 0b11110 | 0b00101 | 0b10101 | 0b01101 | 0b11101 | 0b00111 | 0b10111 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, _, _, 0b01000 | 0b11000 | 0b01100 | 0b11100 | 0b01010 | 0b11010 | 0b01110 | 0b11110 | 0b01001 | 0b11001 | 0b01101 | 0b11101 | 0b01011 | 0b11011 | 0b01111 | 0b11111) => return OpCode::Unallocated,
                (_, _, _, 0b10000 | 0b11000 | 0b10100 | 0b11100 | 0b10010 | 0b11010 | 0b10110 | 0b11110 | 0b10001 | 0b11001 | 0b10101 | 0b11101 | 0b10011 | 0b11011 | 0b10111 | 0b11111) => return OpCode::Unallocated,
                (_, _, 0b10, _) => return OpCode::Unallocated,
                (_, 1, _, _) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b00000) => return OpCode::FMOV_S_floatimm,
                (0, 0, 0b01, 0b00000) => return OpCode::FMOV_D_floatimm,
                (0, 0, 0b11, 0b00000) => return OpCode::FMOV_H_floatimm,
                (1, _, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000001 | 0b100000001 | 0b010000001 | 0b110000001 | 0b001000001 | 0b101000001 | 0b011000001 | 0b111000001 | 0b000100001 | 0b100100001 | 0b010100001 | 0b110100001 | 0b001100001 | 0b101100001 | 0b011100001 | 0b111100001 | 0b000010001 | 0b100010001 | 0b010010001 | 0b110010001 | 0b001010001 | 0b101010001 | 0b011010001 | 0b111010001 | 0b000110001 | 0b100110001 | 0b010110001 | 0b110110001 | 0b001110001 | 0b101110001 | 0b011110001 | 0b111110001 | 0b000001001 | 0b100001001 | 0b010001001 | 0b110001001 | 0b001001001 | 0b101001001 | 0b011001001 | 0b111001001 | 0b000101001 | 0b100101001 | 0b010101001 | 0b110101001 | 0b001101001 | 0b101101001 | 0b011101001 | 0b111101001 | 0b000011001 | 0b100011001 | 0b010011001 | 0b110011001 | 0b001011001 | 0b101011001 | 0b011011001 | 0b111011001 | 0b000111001 | 0b100111001 | 0b010111001 | 0b110111001 | 0b001111001 | 0b101111001 | 0b011111001 | 0b111111001 | 0b000000101 | 0b100000101 | 0b010000101 | 0b110000101 | 0b001000101 | 0b101000101 | 0b011000101 | 0b111000101 | 0b000100101 | 0b100100101 | 0b010100101 | 0b110100101 | 0b001100101 | 0b101100101 | 0b011100101 | 0b111100101 | 0b000010101 | 0b100010101 | 0b010010101 | 0b110010101 | 0b001010101 | 0b101010101 | 0b011010101 | 0b111010101 | 0b000110101 | 0b100110101 | 0b010110101 | 0b110110101 | 0b001110101 | 0b101110101 | 0b011110101 | 0b111110101 | 0b000001101 | 0b100001101 | 0b010001101 | 0b110001101 | 0b001001101 | 0b101001101 | 0b011001101 | 0b111001101 | 0b000101101 | 0b100101101 | 0b010101101 | 0b110101101 | 0b001101101 | 0b101101101 | 0b011101101 | 0b111101101 | 0b000011101 | 0b100011101 | 0b010011101 | 0b110011101 | 0b001011101 | 0b101011101 | 0b011011101 | 0b111011101 | 0b000111101 | 0b100111101 | 0b010111101 | 0b110111101 | 0b001111101 | 0b101111101 | 0b011111101 | 0b111111101, _) => {
            let M = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let cond = (inst >> 12) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let op = (inst >> 4) & 0b1;
            let nzcv = inst & 0b1111;
            match (M, S, ptype, op) {
                (_, _, 0b10, _) => return OpCode::Unallocated,
                (_, 1, _, _) => return OpCode::Unallocated,
                (0, 0, 0b00, 0) => return OpCode::FCCMP_S_floatccmp,
                (0, 0, 0b00, 1) => return OpCode::FCCMPE_S_floatccmp,
                (0, 0, 0b01, 0) => return OpCode::FCCMP_D_floatccmp,
                (0, 0, 0b01, 1) => return OpCode::FCCMPE_D_floatccmp,
                (0, 0, 0b11, 0) => return OpCode::FCCMP_H_floatccmp,
                (0, 0, 0b11, 1) => return OpCode::FCCMPE_H_floatccmp,
                (1, _, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000010 | 0b100000010 | 0b010000010 | 0b110000010 | 0b001000010 | 0b101000010 | 0b011000010 | 0b111000010 | 0b000100010 | 0b100100010 | 0b010100010 | 0b110100010 | 0b001100010 | 0b101100010 | 0b011100010 | 0b111100010 | 0b000010010 | 0b100010010 | 0b010010010 | 0b110010010 | 0b001010010 | 0b101010010 | 0b011010010 | 0b111010010 | 0b000110010 | 0b100110010 | 0b010110010 | 0b110110010 | 0b001110010 | 0b101110010 | 0b011110010 | 0b111110010 | 0b000001010 | 0b100001010 | 0b010001010 | 0b110001010 | 0b001001010 | 0b101001010 | 0b011001010 | 0b111001010 | 0b000101010 | 0b100101010 | 0b010101010 | 0b110101010 | 0b001101010 | 0b101101010 | 0b011101010 | 0b111101010 | 0b000011010 | 0b100011010 | 0b010011010 | 0b110011010 | 0b001011010 | 0b101011010 | 0b011011010 | 0b111011010 | 0b000111010 | 0b100111010 | 0b010111010 | 0b110111010 | 0b001111010 | 0b101111010 | 0b011111010 | 0b111111010 | 0b000000110 | 0b100000110 | 0b010000110 | 0b110000110 | 0b001000110 | 0b101000110 | 0b011000110 | 0b111000110 | 0b000100110 | 0b100100110 | 0b010100110 | 0b110100110 | 0b001100110 | 0b101100110 | 0b011100110 | 0b111100110 | 0b000010110 | 0b100010110 | 0b010010110 | 0b110010110 | 0b001010110 | 0b101010110 | 0b011010110 | 0b111010110 | 0b000110110 | 0b100110110 | 0b010110110 | 0b110110110 | 0b001110110 | 0b101110110 | 0b011110110 | 0b111110110 | 0b000001110 | 0b100001110 | 0b010001110 | 0b110001110 | 0b001001110 | 0b101001110 | 0b011001110 | 0b111001110 | 0b000101110 | 0b100101110 | 0b010101110 | 0b110101110 | 0b001101110 | 0b101101110 | 0b011101110 | 0b111101110 | 0b000011110 | 0b100011110 | 0b010011110 | 0b110011110 | 0b001011110 | 0b101011110 | 0b011011110 | 0b111011110 | 0b000111110 | 0b100111110 | 0b010111110 | 0b110111110 | 0b001111110 | 0b101111110 | 0b011111110 | 0b111111110, _) => {
            let M = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let opcode = (inst >> 12) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (M, S, ptype, opcode) {
                (_, _, _, 0b1001 | 0b1101 | 0b1011 | 0b1111) => return OpCode::Unallocated,
                (_, _, _, 0b1010 | 0b1110 | 0b1011 | 0b1111) => return OpCode::Unallocated,
                (_, _, _, 0b1100 | 0b1110 | 0b1101 | 0b1111) => return OpCode::Unallocated,
                (_, _, 0b10, _) => return OpCode::Unallocated,
                (_, 1, _, _) => return OpCode::Unallocated,
                (0, 0, 0b00, 0b0000) => return OpCode::FMUL_S_floatdp2,
                (0, 0, 0b00, 0b0001) => return OpCode::FDIV_S_floatdp2,
                (0, 0, 0b00, 0b0010) => return OpCode::FADD_S_floatdp2,
                (0, 0, 0b00, 0b0011) => return OpCode::FSUB_S_floatdp2,
                (0, 0, 0b00, 0b0100) => return OpCode::FMAX_S_floatdp2,
                (0, 0, 0b00, 0b0101) => return OpCode::FMIN_S_floatdp2,
                (0, 0, 0b00, 0b0110) => return OpCode::FMAXNM_S_floatdp2,
                (0, 0, 0b00, 0b0111) => return OpCode::FMINNM_S_floatdp2,
                (0, 0, 0b00, 0b1000) => return OpCode::FNMUL_S_floatdp2,
                (0, 0, 0b01, 0b0000) => return OpCode::FMUL_D_floatdp2,
                (0, 0, 0b01, 0b0001) => return OpCode::FDIV_D_floatdp2,
                (0, 0, 0b01, 0b0010) => return OpCode::FADD_D_floatdp2,
                (0, 0, 0b01, 0b0011) => return OpCode::FSUB_D_floatdp2,
                (0, 0, 0b01, 0b0100) => return OpCode::FMAX_D_floatdp2,
                (0, 0, 0b01, 0b0101) => return OpCode::FMIN_D_floatdp2,
                (0, 0, 0b01, 0b0110) => return OpCode::FMAXNM_D_floatdp2,
                (0, 0, 0b01, 0b0111) => return OpCode::FMINNM_D_floatdp2,
                (0, 0, 0b01, 0b1000) => return OpCode::FNMUL_D_floatdp2,
                (0, 0, 0b11, 0b0000) => return OpCode::FMUL_H_floatdp2,
                (0, 0, 0b11, 0b0001) => return OpCode::FDIV_H_floatdp2,
                (0, 0, 0b11, 0b0010) => return OpCode::FADD_H_floatdp2,
                (0, 0, 0b11, 0b0011) => return OpCode::FSUB_H_floatdp2,
                (0, 0, 0b11, 0b0100) => return OpCode::FMAX_H_floatdp2,
                (0, 0, 0b11, 0b0101) => return OpCode::FMIN_H_floatdp2,
                (0, 0, 0b11, 0b0110) => return OpCode::FMAXNM_H_floatdp2,
                (0, 0, 0b11, 0b0111) => return OpCode::FMINNM_H_floatdp2,
                (0, 0, 0b11, 0b1000) => return OpCode::FNMUL_H_floatdp2,
                (1, _, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b00 | 0b01, 0b0100 | 0b1100 | 0b0110 | 0b1110 | 0b0101 | 0b1101 | 0b0111 | 0b1111, 0b000000011 | 0b100000011 | 0b010000011 | 0b110000011 | 0b001000011 | 0b101000011 | 0b011000011 | 0b111000011 | 0b000100011 | 0b100100011 | 0b010100011 | 0b110100011 | 0b001100011 | 0b101100011 | 0b011100011 | 0b111100011 | 0b000010011 | 0b100010011 | 0b010010011 | 0b110010011 | 0b001010011 | 0b101010011 | 0b011010011 | 0b111010011 | 0b000110011 | 0b100110011 | 0b010110011 | 0b110110011 | 0b001110011 | 0b101110011 | 0b011110011 | 0b111110011 | 0b000001011 | 0b100001011 | 0b010001011 | 0b110001011 | 0b001001011 | 0b101001011 | 0b011001011 | 0b111001011 | 0b000101011 | 0b100101011 | 0b010101011 | 0b110101011 | 0b001101011 | 0b101101011 | 0b011101011 | 0b111101011 | 0b000011011 | 0b100011011 | 0b010011011 | 0b110011011 | 0b001011011 | 0b101011011 | 0b011011011 | 0b111011011 | 0b000111011 | 0b100111011 | 0b010111011 | 0b110111011 | 0b001111011 | 0b101111011 | 0b011111011 | 0b111111011 | 0b000000111 | 0b100000111 | 0b010000111 | 0b110000111 | 0b001000111 | 0b101000111 | 0b011000111 | 0b111000111 | 0b000100111 | 0b100100111 | 0b010100111 | 0b110100111 | 0b001100111 | 0b101100111 | 0b011100111 | 0b111100111 | 0b000010111 | 0b100010111 | 0b010010111 | 0b110010111 | 0b001010111 | 0b101010111 | 0b011010111 | 0b111010111 | 0b000110111 | 0b100110111 | 0b010110111 | 0b110110111 | 0b001110111 | 0b101110111 | 0b011110111 | 0b111110111 | 0b000001111 | 0b100001111 | 0b010001111 | 0b110001111 | 0b001001111 | 0b101001111 | 0b011001111 | 0b111001111 | 0b000101111 | 0b100101111 | 0b010101111 | 0b110101111 | 0b001101111 | 0b101101111 | 0b011101111 | 0b111101111 | 0b000011111 | 0b100011111 | 0b010011111 | 0b110011111 | 0b001011111 | 0b101011111 | 0b011011111 | 0b111011111 | 0b000111111 | 0b100111111 | 0b010111111 | 0b110111111 | 0b001111111 | 0b101111111 | 0b011111111 | 0b111111111, _) => {
            let M = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let Rm = (inst >> 16) & 0b11111;
            let cond = (inst >> 12) & 0b1111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (M, S, ptype) {
                (_, _, 0b10) => return OpCode::Unallocated,
                (_, 1, _) => return OpCode::Unallocated,
                (0, 0, 0b00) => return OpCode::FCSEL_S_floatsel,
                (0, 0, 0b01) => return OpCode::FCSEL_D_floatsel,
                (0, 0, 0b11) => return OpCode::FCSEL_H_floatsel,
                (1, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        (0b0001 | 0b1001 | 0b0011 | 0b1011, _, 0b10 | 0b11, _, _, _) => {
            let M = (inst >> 31) & 0b1;
            let S = (inst >> 29) & 0b1;
            let ptype = (inst >> 22) & 0b11;
            let o1 = (inst >> 21) & 0b1;
            let Rm = (inst >> 16) & 0b11111;
            let o0 = (inst >> 15) & 0b1;
            let Ra = (inst >> 10) & 0b11111;
            let Rn = (inst >> 5) & 0b11111;
            let Rd = inst & 0b11111;
            match (M, S, ptype, o1, o0) {
                (_, _, 0b10, _, _) => return OpCode::Unallocated,
                (_, 1, _, _, _) => return OpCode::Unallocated,
                (0, 0, 0b00, 0, 0) => return OpCode::FMADD_S_floatdp3,
                (0, 0, 0b00, 0, 1) => return OpCode::FMSUB_S_floatdp3,
                (0, 0, 0b00, 1, 0) => return OpCode::FNMADD_S_floatdp3,
                (0, 0, 0b00, 1, 1) => return OpCode::FNMSUB_S_floatdp3,
                (0, 0, 0b01, 0, 0) => return OpCode::FMADD_D_floatdp3,
                (0, 0, 0b01, 0, 1) => return OpCode::FMSUB_D_floatdp3,
                (0, 0, 0b01, 1, 0) => return OpCode::FNMADD_D_floatdp3,
                (0, 0, 0b01, 1, 1) => return OpCode::FNMSUB_D_floatdp3,
                (0, 0, 0b11, 0, 0) => return OpCode::FMADD_H_floatdp3,
                (0, 0, 0b11, 0, 1) => return OpCode::FMSUB_H_floatdp3,
                (0, 0, 0b11, 1, 0) => return OpCode::FNMADD_H_floatdp3,
                (0, 0, 0b11, 1, 1) => return OpCode::FNMSUB_H_floatdp3,
                (1, _, _, _, _) => return OpCode::Unallocated,
                _ => return OpCode::Unpredictable,
            }
        }
        _ => return OpCode::Unpredictable,
    }
    _ => return OpCode::Unpredictable,
}
}
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ABS_Z_P_Z__(u32);
impl ABS_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ABS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ABS_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADCS_32_addsub_carry(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADCS_64_addsub_carry(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADC_32_addsub_carry(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADC_64_addsub_carry(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDG_64_addsub_immtags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDHN_asimddiff_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDPL_R_RI__(u32);
impl ADDPL_R_RI__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b111111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDP_asisdpair_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDS_32S_addsub_ext(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDS_32S_addsub_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDS_32_addsub_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDS_64S_addsub_ext(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDS_64S_addsub_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDS_64_addsub_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDVL_R_RI__(u32);
impl ADDVL_R_RI__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b111111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADDV_asimdall_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_32_addsub_ext(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_32_addsub_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_32_addsub_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_64_addsub_ext(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_64_addsub_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_64_addsub_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_Z_P_ZZ__(u32);
impl ADD_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_Z_ZI__(u32);
impl ADD_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_Z_ZZ__(u32);
impl ADD_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADD_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADRP_only_pcreladdr(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADR_Z_AZ_D_s32_scaled(u32);
impl ADR_Z_AZ_D_s32_scaled {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn msz(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b11
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADR_Z_AZ_D_u32_scaled(u32);
impl ADR_Z_AZ_D_u32_scaled {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn msz(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b11
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADR_Z_AZ_SD_same_scaled(u32);
impl ADR_Z_AZ_SD_same_scaled {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn msz(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b11
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn sz(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ADR_only_pcreladdr(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AESD_B_cryptoaes(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AESE_B_cryptoaes(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AESIMC_B_cryptoaes(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AESMC_B_cryptoaes(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ANDS_32S_log_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ANDS_32_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ANDS_64S_log_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ANDS_64_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ANDS_P_P_PP_Z(u32);
impl ANDS_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn S(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ANDV_R_P_Z__(u32);
impl ANDV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_32_log_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_32_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_64_log_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_64_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_P_P_PP_Z(u32);
impl AND_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn S(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_Z_P_ZZ__(u32);
impl AND_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_Z_ZI__(u32);
impl AND_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm13(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111111111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_Z_ZZ__(u32);
impl AND_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AND_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASRD_Z_P_ZI__(u32);
impl ASRD_Z_P_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm3(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b111
    }
    pub fn tszl(self) -> u32 {
        let inst = self.0;
        (inst >> 8) & 0b11
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn tszh(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASRR_Z_P_ZZ__(u32);
impl ASRR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASRV_32_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASRV_64_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASR_Z_P_ZI__(u32);
impl ASR_Z_P_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm3(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b111
    }
    pub fn tszl(self) -> u32 {
        let inst = self.0;
        (inst >> 8) & 0b11
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn tszh(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASR_Z_P_ZW__(u32);
impl ASR_Z_P_ZW__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASR_Z_P_ZZ__(u32);
impl ASR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASR_Z_ZI__(u32);
impl ASR_Z_ZI__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm3(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn tszl(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
    pub fn tszh(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ASR_Z_ZW__(u32);
impl ASR_Z_ZW__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTDA_64P_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTDB_64P_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTDZA_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTDZB_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIA1716_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIASP_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIAZ_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIA_64P_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIB1716_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIBSP_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIBZ_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIB_64P_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIZA_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AUTIZB_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct AXFLAG_M_pstate(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BCAX_VVV16_crypto4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFCVTNT_Z_P_Z_S2BF(u32);
impl BFCVTNT_Z_P_Z_S2BF {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFCVTN_asimdmisc_4S(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFCVT_BS_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFCVT_Z_P_Z_S2BF(u32);
impl BFCVT_Z_P_Z_S2BF {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFDOT_Z_ZZZ__(u32);
impl BFDOT_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFDOT_Z_ZZZi__(u32);
impl BFDOT_Z_ZZZi__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFDOT_asimdelem_E(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFDOT_asimdsame2_D(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFMLALB_Z_ZZZ__(u32);
impl BFMLALB_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFMLALB_Z_ZZZi__(u32);
impl BFMLALB_Z_ZZZi__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn i3l(self) -> u32 {
        let inst = self.0;
        (inst >> 11) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i3h(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFMLALT_Z_ZZZ__(u32);
impl BFMLALT_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFMLALT_Z_ZZZi__(u32);
impl BFMLALT_Z_ZZZi__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn i3l(self) -> u32 {
        let inst = self.0;
        (inst >> 11) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i3h(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFMLAL_asimdelem_F(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFMLAL_asimdsame2_F_(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFMMLA_Z_ZZZ__(u32);
impl BFMMLA_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFMMLA_asimdsame2_E(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFM_32M_bitfield(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BFM_64M_bitfield(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BICS_32_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BICS_64_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BICS_P_P_PP_Z(u32);
impl BICS_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIC_32_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIC_64_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIC_P_P_PP_Z(u32);
impl BIC_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIC_Z_P_ZZ__(u32);
impl BIC_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIC_Z_ZZ__(u32);
impl BIC_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIC_asimdimm_L_hl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIC_asimdimm_L_sl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIC_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIF_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BIT_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BLRAAZ_64_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BLRAA_64P_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BLRABZ_64_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BLRAB_64P_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BLR_64_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BL_only_branch_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRAAZ_64_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRAA_64P_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRABZ_64_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRAB_64P_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKAS_P_P_P_Z(u32);
impl BRKAS_P_P_P_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKA_P_P_P__(u32);
impl BRKA_P_P_P__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn M(self) -> u32 {
        let inst = self.0;
        (inst >> 4) & 0b1
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKBS_P_P_P_Z(u32);
impl BRKBS_P_P_P_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKB_P_P_P__(u32);
impl BRKB_P_P_P__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn M(self) -> u32 {
        let inst = self.0;
        (inst >> 4) & 0b1
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKNS_P_P_PP__(u32);
impl BRKNS_P_P_PP__ {
    pub fn Pdm(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKN_P_P_PP__(u32);
impl BRKN_P_P_PP__ {
    pub fn Pdm(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKPAS_P_P_PP__(u32);
impl BRKPAS_P_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKPA_P_P_PP__(u32);
impl BRKPA_P_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKPBS_P_P_PP__(u32);
impl BRKPBS_P_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRKPB_P_P_PP__(u32);
impl BRKPB_P_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BRK_EX_exception(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BR_64_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BSL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct BTI_HB_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct B_only_branch_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct B_only_condbranch(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASAB_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASAH_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASALB_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASALH_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASAL_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASAL_C64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASA_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASA_C64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASB_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASH_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASLB_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASLH_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASL_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASL_C64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASPAL_CP32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASPAL_CP64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASPA_CP32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASPA_CP64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASPL_CP32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASPL_CP64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASP_CP32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CASP_CP64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CAS_C32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CAS_C64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CBNZ_32_compbranch(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CBNZ_64_compbranch(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CBZ_32_compbranch(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CBZ_64_compbranch(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CCMN_32_condcmp_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CCMN_32_condcmp_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CCMN_64_condcmp_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CCMN_64_condcmp_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CCMP_32_condcmp_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CCMP_32_condcmp_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CCMP_64_condcmp_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CCMP_64_condcmp_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CFINV_M_pstate(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLASTA_R_P_Z__(u32);
impl CLASTA_R_P_Z__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLASTA_V_P_Z__(u32);
impl CLASTA_V_P_Z__ {
    pub fn Vdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLASTA_Z_P_ZZ__(u32);
impl CLASTA_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLASTB_R_P_Z__(u32);
impl CLASTB_R_P_Z__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLASTB_V_P_Z__(u32);
impl CLASTB_V_P_Z__ {
    pub fn Vdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLASTB_Z_P_ZZ__(u32);
impl CLASTB_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLREX_BN_barriers(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLS_32_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLS_64_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLS_Z_P_Z__(u32);
impl CLS_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLZ_32_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLZ_64_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLZ_Z_P_Z__(u32);
impl CLZ_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CLZ_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMEQ_asimdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMEQ_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMEQ_asisdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMEQ_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMGE_asimdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMGE_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMGE_asisdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMGE_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMGT_asimdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMGT_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMGT_asisdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMGT_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMHI_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMHI_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMHS_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMHS_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMLE_asimdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMLE_asisdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMLT_asimdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMLT_asisdmisc_Z(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPEQ_P_P_ZI__(u32);
impl CMPEQ_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPEQ_P_P_ZW__(u32);
impl CMPEQ_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPEQ_P_P_ZZ__(u32);
impl CMPEQ_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPGE_P_P_ZI__(u32);
impl CMPGE_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPGE_P_P_ZW__(u32);
impl CMPGE_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPGE_P_P_ZZ__(u32);
impl CMPGE_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPGT_P_P_ZI__(u32);
impl CMPGT_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPGT_P_P_ZW__(u32);
impl CMPGT_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPGT_P_P_ZZ__(u32);
impl CMPGT_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPHI_P_P_ZI__(u32);
impl CMPHI_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm7(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPHI_P_P_ZW__(u32);
impl CMPHI_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPHI_P_P_ZZ__(u32);
impl CMPHI_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPHS_P_P_ZI__(u32);
impl CMPHS_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm7(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPHS_P_P_ZW__(u32);
impl CMPHS_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPHS_P_P_ZZ__(u32);
impl CMPHS_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPLE_P_P_ZI__(u32);
impl CMPLE_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPLE_P_P_ZW__(u32);
impl CMPLE_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPLO_P_P_ZI__(u32);
impl CMPLO_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm7(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPLO_P_P_ZW__(u32);
impl CMPLO_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPLS_P_P_ZI__(u32);
impl CMPLS_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm7(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPLS_P_P_ZW__(u32);
impl CMPLS_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPLT_P_P_ZI__(u32);
impl CMPLT_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPLT_P_P_ZW__(u32);
impl CMPLT_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPNE_P_P_ZI__(u32);
impl CMPNE_P_P_ZI__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPNE_P_P_ZW__(u32);
impl CMPNE_P_P_ZW__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMPNE_P_P_ZZ__(u32);
impl CMPNE_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMTST_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CMTST_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CNOT_Z_P_Z__(u32);
impl CNOT_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CNTB_R_S__(u32);
impl CNTB_R_S__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CNTD_R_S__(u32);
impl CNTD_R_S__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CNTH_R_S__(u32);
impl CNTH_R_S__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CNTP_R_P_P__(u32);
impl CNTP_R_P_P__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CNTW_R_S__(u32);
impl CNTW_R_S__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CNT_Z_P_Z__(u32);
impl CNT_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CNT_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct COMPACT_Z_P_Z__(u32);
impl COMPACT_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CPY_Z_O_I__(u32);
impl CPY_Z_O_I__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CPY_Z_P_I__(u32);
impl CPY_Z_P_I__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CPY_Z_P_R__(u32);
impl CPY_Z_P_R__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CPY_Z_P_V__(u32);
impl CPY_Z_P_V__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Vn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CRC32B_32C_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CRC32CB_32C_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CRC32CH_32C_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CRC32CW_32C_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CRC32CX_64C_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CRC32H_32C_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CRC32W_32C_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CRC32X_64C_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSDB_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSEL_32_condsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSEL_64_condsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSINC_32_condsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSINC_64_condsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSINV_32_condsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSINV_64_condsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSNEG_32_condsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CSNEG_64_condsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CTERMEQ_RR__(u32);
impl CTERMEQ_RR__ {
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn sz(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct CTERMNE_RR__(u32);
impl CTERMNE_RR__ {
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn sz(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DCPS1_DC_exception(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DCPS2_DC_exception(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DCPS3_DC_exception(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECB_R_RS__(u32);
impl DECB_R_RS__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECD_R_RS__(u32);
impl DECD_R_RS__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECD_Z_ZS__(u32);
impl DECD_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECH_R_RS__(u32);
impl DECH_R_RS__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECH_Z_ZS__(u32);
impl DECH_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECP_R_P_R__(u32);
impl DECP_R_P_R__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECP_Z_P_Z__(u32);
impl DECP_Z_P_Z__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECW_R_RS__(u32);
impl DECW_R_RS__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DECW_Z_ZS__(u32);
impl DECW_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DGH_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DMB_BO_barriers(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DRPS_64E_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DSB_BO_barriers(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DUPM_Z_I__(u32);
impl DUPM_Z_I__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm13(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111111111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DUP_Z_I__(u32);
impl DUP_Z_I__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DUP_Z_R__(u32);
impl DUP_Z_R__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DUP_Z_Zi__(u32);
impl DUP_Z_Zi__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn tsz(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn imm2(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DUP_asimdins_DR_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DUP_asimdins_DV_v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct DUP_asisdone_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EON_32_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EON_64_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR3_VVV16_crypto4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EORS_P_P_PP_Z(u32);
impl EORS_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EORV_R_P_Z__(u32);
impl EORV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_32_log_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_32_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_64_log_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_64_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_P_P_PP_Z(u32);
impl EOR_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_Z_P_ZZ__(u32);
impl EOR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_Z_ZI__(u32);
impl EOR_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm13(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111111111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_Z_ZZ__(u32);
impl EOR_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EOR_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ERETAA_64E_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ERETAB_64E_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ERET_64E_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ESB_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EXTR_32_extract(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EXTR_64_extract(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EXT_Z_ZI_Des(u32);
impl EXT_Z_ZI_Des {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm8l(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm8h(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct EXT_asimdext_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABD_Z_P_ZZ__(u32);
impl FABD_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABD_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABD_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABD_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABS_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABS_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABS_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABS_Z_P_Z__(u32);
impl FABS_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FABS_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGE_P_P_ZZ__(u32);
impl FACGE_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGE_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGE_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGE_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGE_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGT_P_P_ZZ__(u32);
impl FACGT_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGT_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGT_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGT_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FACGT_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADDA_V_P_Z__(u32);
impl FADDA_V_P_Z__ {
    pub fn Vdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADDP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADDP_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADDP_asisdpair_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADDP_asisdpair_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADDV_V_P_Z__(u32);
impl FADDV_V_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADD_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADD_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADD_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADD_Z_P_ZS__(u32);
impl FADD_Z_P_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADD_Z_P_ZZ__(u32);
impl FADD_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADD_Z_ZZ__(u32);
impl FADD_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FADD_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCADD_Z_P_ZZ__(u32);
impl FCADD_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn rot(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCADD_asimdsame2_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCCMPE_D_floatccmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCCMPE_H_floatccmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCCMPE_S_floatccmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCCMP_D_floatccmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCCMP_H_floatccmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCCMP_S_floatccmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_P_P_Z0__(u32);
impl FCMEQ_P_P_Z0__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_P_P_ZZ__(u32);
impl FCMEQ_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_asimdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_asimdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_asisdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_asisdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMEQ_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_P_P_Z0__(u32);
impl FCMGE_P_P_Z0__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_P_P_ZZ__(u32);
impl FCMGE_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_asimdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_asimdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_asisdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_asisdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGE_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_P_P_Z0__(u32);
impl FCMGT_P_P_Z0__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_P_P_ZZ__(u32);
impl FCMGT_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_asimdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_asimdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_asisdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_asisdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMGT_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLA_Z_P_ZZZ__(u32);
impl FCMLA_Z_P_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn rot(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b11
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLA_Z_ZZZi_H(u32);
impl FCMLA_Z_ZZZi_H {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn rot(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b11
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLA_Z_ZZZi_S(u32);
impl FCMLA_Z_ZZZi_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn rot(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b11
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 20) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLA_asimdelem_C_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLA_asimdelem_C_S(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLA_asimdsame2_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLE_P_P_Z0__(u32);
impl FCMLE_P_P_Z0__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLE_asimdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLE_asimdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLE_asisdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLE_asisdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLT_P_P_Z0__(u32);
impl FCMLT_P_P_Z0__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLT_asimdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLT_asimdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLT_asisdmisc_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMLT_asisdmiscfp16_FZ(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMNE_P_P_Z0__(u32);
impl FCMNE_P_P_Z0__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMNE_P_P_ZZ__(u32);
impl FCMNE_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMPE_DZ_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMPE_D_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMPE_HZ_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMPE_H_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMPE_SZ_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMPE_S_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMP_DZ_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMP_D_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMP_HZ_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMP_H_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMP_SZ_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMP_S_floatcmp(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCMUO_P_P_ZZ__(u32);
impl FCMUO_P_P_ZZ__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCPY_Z_P_I__(u32);
impl FCPY_Z_P_I__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCSEL_D_floatsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCSEL_H_floatsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCSEL_S_floatsel(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAS_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTAU_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTL_asimdmisc_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMS_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTMU_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNS_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTNU_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTN_asimdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPS_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTPU_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTXN_asimdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTXN_asisdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_32D_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_32H_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_32S_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_64D_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_64H_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_64S_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_Z_P_Z_D2W(u32);
impl FCVTZS_Z_P_Z_D2W {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_Z_P_Z_D2X(u32);
impl FCVTZS_Z_P_Z_D2X {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_Z_P_Z_FP162H(u32);
impl FCVTZS_Z_P_Z_FP162H {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_Z_P_Z_FP162W(u32);
impl FCVTZS_Z_P_Z_FP162W {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_Z_P_Z_FP162X(u32);
impl FCVTZS_Z_P_Z_FP162X {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_Z_P_Z_S2W(u32);
impl FCVTZS_Z_P_Z_S2W {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_Z_P_Z_S2X(u32);
impl FCVTZS_Z_P_Z_S2X {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_asimdshf_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZS_asisdshf_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_32D_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_32H_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_32S_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_64D_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_64H_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_64S_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_64S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_Z_P_Z_D2W(u32);
impl FCVTZU_Z_P_Z_D2W {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_Z_P_Z_D2X(u32);
impl FCVTZU_Z_P_Z_D2X {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_Z_P_Z_FP162H(u32);
impl FCVTZU_Z_P_Z_FP162H {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_Z_P_Z_FP162W(u32);
impl FCVTZU_Z_P_Z_FP162W {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_Z_P_Z_FP162X(u32);
impl FCVTZU_Z_P_Z_FP162X {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_Z_P_Z_S2W(u32);
impl FCVTZU_Z_P_Z_S2W {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_Z_P_Z_S2X(u32);
impl FCVTZU_Z_P_Z_S2X {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_asimdshf_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVTZU_asisdshf_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_DH_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_DS_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_HD_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_HS_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_SD_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_SH_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_Z_P_Z_D2H(u32);
impl FCVT_Z_P_Z_D2H {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_Z_P_Z_D2S(u32);
impl FCVT_Z_P_Z_D2S {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_Z_P_Z_H2D(u32);
impl FCVT_Z_P_Z_H2D {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_Z_P_Z_H2S(u32);
impl FCVT_Z_P_Z_H2S {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_Z_P_Z_S2D(u32);
impl FCVT_Z_P_Z_S2D {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FCVT_Z_P_Z_S2H(u32);
impl FCVT_Z_P_Z_S2H {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FDIVR_Z_P_ZZ__(u32);
impl FDIVR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FDIV_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FDIV_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FDIV_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FDIV_Z_P_ZZ__(u32);
impl FDIV_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FDIV_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FDIV_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FDUP_Z_I__(u32);
impl FDUP_Z_I__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FEXPA_Z_Z__(u32);
impl FEXPA_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FJCVTZS_32D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMADD_D_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMADD_H_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMADD_S_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAD_Z_P_ZZZ__(u32);
impl FMAD_Z_P_ZZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Za(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNMP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNMP_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNMP_asisdpair_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNMP_asisdpair_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNMV_V_P_Z__(u32);
impl FMAXNMV_V_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNMV_asimdall_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNMV_asimdall_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNM_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNM_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNM_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNM_Z_P_ZS__(u32);
impl FMAXNM_Z_P_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNM_Z_P_ZZ__(u32);
impl FMAXNM_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNM_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXNM_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXP_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXP_asisdpair_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXP_asisdpair_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXV_V_P_Z__(u32);
impl FMAXV_V_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXV_asimdall_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAXV_asimdall_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAX_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAX_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAX_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAX_Z_P_ZS__(u32);
impl FMAX_Z_P_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAX_Z_P_ZZ__(u32);
impl FMAX_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAX_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMAX_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNMP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNMP_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNMP_asisdpair_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNMP_asisdpair_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNMV_V_P_Z__(u32);
impl FMINNMV_V_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNMV_asimdall_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNMV_asimdall_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNM_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNM_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNM_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNM_Z_P_ZS__(u32);
impl FMINNM_Z_P_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNM_Z_P_ZZ__(u32);
impl FMINNM_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNM_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINNM_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINP_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINP_asisdpair_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINP_asisdpair_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINV_V_P_Z__(u32);
impl FMINV_V_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINV_asimdall_only_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMINV_asimdall_only_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMIN_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMIN_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMIN_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMIN_Z_P_ZS__(u32);
impl FMIN_Z_P_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMIN_Z_P_ZZ__(u32);
impl FMIN_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMIN_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMIN_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLAL2_asimdelem_LH(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLAL2_asimdsame_F(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLAL_asimdelem_LH(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLAL_asimdsame_F(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_Z_P_ZZZ__(u32);
impl FMLA_Z_P_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_Z_ZZZi_D(u32);
impl FMLA_Z_ZZZi_D {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 20) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_Z_ZZZi_H(u32);
impl FMLA_Z_ZZZi_H {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i3l(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
    pub fn i3h(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_Z_ZZZi_S(u32);
impl FMLA_Z_ZZZi_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_asimdelem_RH_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_asimdelem_R_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_asisdelem_RH_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLA_asisdelem_R_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLSL2_asimdelem_LH(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLSL2_asimdsame_F(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLSL_asimdelem_LH(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLSL_asimdsame_F(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_Z_P_ZZZ__(u32);
impl FMLS_Z_P_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_Z_ZZZi_D(u32);
impl FMLS_Z_ZZZi_D {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 20) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_Z_ZZZi_H(u32);
impl FMLS_Z_ZZZi_H {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i3l(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
    pub fn i3h(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_Z_ZZZi_S(u32);
impl FMLS_Z_ZZZi_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_asimdelem_RH_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_asimdelem_R_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_asisdelem_RH_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMLS_asisdelem_R_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMMLA_Z_ZZZ_D(u32);
impl FMMLA_Z_ZZZ_D {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMMLA_Z_ZZZ_S(u32);
impl FMMLA_Z_ZZZ_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_32H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_32S_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_64D_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_64H_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_64VX_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_D64_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_D_floatimm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_H32_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_H64_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_H_floatimm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_S32_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_S_floatimm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_V64I_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_asimdimm_D2_d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_asimdimm_H_h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMOV_asimdimm_S_s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMSB_Z_P_ZZZ__(u32);
impl FMSB_Z_P_ZZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Za(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMSUB_D_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMSUB_H_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMSUB_S_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_Z_P_ZZ__(u32);
impl FMULX_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_asimdelem_RH_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_asimdelem_R_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_asisdelem_RH_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_asisdelem_R_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMULX_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_Z_P_ZS__(u32);
impl FMUL_Z_P_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_Z_P_ZZ__(u32);
impl FMUL_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_Z_ZZ__(u32);
impl FMUL_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_Z_ZZi_D(u32);
impl FMUL_Z_ZZi_D {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 20) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_Z_ZZi_H(u32);
impl FMUL_Z_ZZi_H {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i3l(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
    pub fn i3h(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_Z_ZZi_S(u32);
impl FMUL_Z_ZZi_S {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_asimdelem_RH_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_asimdelem_R_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_asisdelem_RH_H(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FMUL_asisdelem_R_SD(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNEG_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNEG_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNEG_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNEG_Z_P_Z__(u32);
impl FNEG_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNEG_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNEG_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMADD_D_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMADD_H_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMADD_S_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMAD_Z_P_ZZZ__(u32);
impl FNMAD_Z_P_ZZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Za(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMLA_Z_P_ZZZ__(u32);
impl FNMLA_Z_P_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMLS_Z_P_ZZZ__(u32);
impl FNMLS_Z_P_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMSB_Z_P_ZZZ__(u32);
impl FNMSB_Z_P_ZZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Za(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMSUB_D_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMSUB_H_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMSUB_S_floatdp3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMUL_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMUL_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FNMUL_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPE_Z_Z__(u32);
impl FRECPE_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPE_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPE_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPE_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPE_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPS_Z_ZZ__(u32);
impl FRECPS_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPS_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPS_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPS_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPS_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPX_Z_P_Z__(u32);
impl FRECPX_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPX_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRECPX_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT32X_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT32X_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT32X_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT32Z_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT32Z_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT32Z_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT64X_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT64X_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT64X_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT64Z_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT64Z_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINT64Z_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTA_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTA_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTA_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTA_Z_P_Z__(u32);
impl FRINTA_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTA_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTA_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTI_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTI_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTI_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTI_Z_P_Z__(u32);
impl FRINTI_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTI_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTI_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTM_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTM_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTM_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTM_Z_P_Z__(u32);
impl FRINTM_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTM_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTM_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTN_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTN_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTN_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTN_Z_P_Z__(u32);
impl FRINTN_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTN_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTN_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTP_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTP_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTP_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTP_Z_P_Z__(u32);
impl FRINTP_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTP_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTP_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTX_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTX_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTX_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTX_Z_P_Z__(u32);
impl FRINTX_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTX_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTX_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTZ_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTZ_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTZ_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTZ_Z_P_Z__(u32);
impl FRINTZ_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTZ_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRINTZ_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTE_Z_Z__(u32);
impl FRSQRTE_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTE_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTE_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTE_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTE_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTS_Z_ZZ__(u32);
impl FRSQRTS_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTS_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTS_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTS_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FRSQRTS_asisdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSCALE_Z_P_ZZ__(u32);
impl FSCALE_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSQRT_D_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSQRT_H_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSQRT_S_floatdp1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSQRT_Z_P_Z__(u32);
impl FSQRT_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSQRT_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSQRT_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUBR_Z_P_ZS__(u32);
impl FSUBR_Z_P_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUBR_Z_P_ZZ__(u32);
impl FSUBR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUB_D_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUB_H_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUB_S_floatdp2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUB_Z_P_ZS__(u32);
impl FSUB_Z_P_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUB_Z_P_ZZ__(u32);
impl FSUB_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUB_Z_ZZ__(u32);
impl FSUB_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUB_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FSUB_asimdsamefp16_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FTMAD_Z_ZZI__(u32);
impl FTMAD_Z_ZZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm3(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FTSMUL_Z_ZZ__(u32);
impl FTSMUL_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct FTSSEL_Z_ZZ__(u32);
impl FTSSEL_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct GMI_64G_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct HINT_HM_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct HLT_EX_exception(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct HVC_EX_exception(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCB_R_RS__(u32);
impl INCB_R_RS__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCD_R_RS__(u32);
impl INCD_R_RS__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCD_Z_ZS__(u32);
impl INCD_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCH_R_RS__(u32);
impl INCH_R_RS__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCH_Z_ZS__(u32);
impl INCH_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCP_R_P_R__(u32);
impl INCP_R_P_R__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCP_Z_P_Z__(u32);
impl INCP_Z_P_Z__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCW_R_RS__(u32);
impl INCW_R_RS__ {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INCW_Z_ZS__(u32);
impl INCW_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INDEX_Z_II__(u32);
impl INDEX_Z_II__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm5b(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INDEX_Z_IR__(u32);
impl INDEX_Z_IR__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INDEX_Z_RI__(u32);
impl INDEX_Z_RI__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INDEX_Z_RR__(u32);
impl INDEX_Z_RR__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INSR_Z_R__(u32);
impl INSR_Z_R__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INSR_Z_V__(u32);
impl INSR_Z_V__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Vm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INS_asimdins_IR_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct INS_asimdins_IV_v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct IRG_64I_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ISB_BI_barriers(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LASTA_R_P_Z__(u32);
impl LASTA_R_P_Z__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LASTA_V_P_Z__(u32);
impl LASTA_V_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LASTB_R_P_Z__(u32);
impl LASTB_R_P_Z__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LASTB_V_P_Z__(u32);
impl LASTB_V_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_AI_D(u32);
impl LD1B_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_AI_S(u32);
impl LD1B_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BI_U16(u32);
impl LD1B_Z_P_BI_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BI_U32(u32);
impl LD1B_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BI_U64(u32);
impl LD1B_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BI_U8(u32);
impl LD1B_Z_P_BI_U8 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BR_U16(u32);
impl LD1B_Z_P_BR_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BR_U32(u32);
impl LD1B_Z_P_BR_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BR_U64(u32);
impl LD1B_Z_P_BR_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BR_U8(u32);
impl LD1B_Z_P_BR_U8 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BZ_D_64_unscaled(u32);
impl LD1B_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BZ_D_x32_unscaled(u32);
impl LD1B_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1B_Z_P_BZ_S_x32_unscaled(u32);
impl LD1B_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1D_Z_P_AI_D(u32);
impl LD1D_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1D_Z_P_BI_U64(u32);
impl LD1D_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1D_Z_P_BR_U64(u32);
impl LD1D_Z_P_BR_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1D_Z_P_BZ_D_64_scaled(u32);
impl LD1D_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1D_Z_P_BZ_D_64_unscaled(u32);
impl LD1D_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1D_Z_P_BZ_D_x32_scaled(u32);
impl LD1D_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1D_Z_P_BZ_D_x32_unscaled(u32);
impl LD1D_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_AI_D(u32);
impl LD1H_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_AI_S(u32);
impl LD1H_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BI_U16(u32);
impl LD1H_Z_P_BI_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BI_U32(u32);
impl LD1H_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BI_U64(u32);
impl LD1H_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BR_U16(u32);
impl LD1H_Z_P_BR_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BR_U32(u32);
impl LD1H_Z_P_BR_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BR_U64(u32);
impl LD1H_Z_P_BR_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BZ_D_64_scaled(u32);
impl LD1H_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BZ_D_64_unscaled(u32);
impl LD1H_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BZ_D_x32_scaled(u32);
impl LD1H_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BZ_D_x32_unscaled(u32);
impl LD1H_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BZ_S_x32_scaled(u32);
impl LD1H_Z_P_BZ_S_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1H_Z_P_BZ_S_x32_unscaled(u32);
impl LD1H_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RB_Z_P_BI_U16(u32);
impl LD1RB_Z_P_BI_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RB_Z_P_BI_U32(u32);
impl LD1RB_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RB_Z_P_BI_U64(u32);
impl LD1RB_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RB_Z_P_BI_U8(u32);
impl LD1RB_Z_P_BI_U8 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RD_Z_P_BI_U64(u32);
impl LD1RD_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RH_Z_P_BI_U16(u32);
impl LD1RH_Z_P_BI_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RH_Z_P_BI_U32(u32);
impl LD1RH_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RH_Z_P_BI_U64(u32);
impl LD1RH_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1ROB_Z_P_BI_U8(u32);
impl LD1ROB_Z_P_BI_U8 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1ROB_Z_P_BR_Contiguous(u32);
impl LD1ROB_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1ROD_Z_P_BI_U64(u32);
impl LD1ROD_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1ROD_Z_P_BR_Contiguous(u32);
impl LD1ROD_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1ROH_Z_P_BI_U16(u32);
impl LD1ROH_Z_P_BI_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1ROH_Z_P_BR_Contiguous(u32);
impl LD1ROH_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1ROW_Z_P_BI_U32(u32);
impl LD1ROW_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1ROW_Z_P_BR_Contiguous(u32);
impl LD1ROW_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RQB_Z_P_BI_U8(u32);
impl LD1RQB_Z_P_BI_U8 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RQB_Z_P_BR_Contiguous(u32);
impl LD1RQB_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RQD_Z_P_BI_U64(u32);
impl LD1RQD_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RQD_Z_P_BR_Contiguous(u32);
impl LD1RQD_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RQH_Z_P_BI_U16(u32);
impl LD1RQH_Z_P_BI_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RQH_Z_P_BR_Contiguous(u32);
impl LD1RQH_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RQW_Z_P_BI_U32(u32);
impl LD1RQW_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RQW_Z_P_BR_Contiguous(u32);
impl LD1RQW_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RSB_Z_P_BI_S16(u32);
impl LD1RSB_Z_P_BI_S16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RSB_Z_P_BI_S32(u32);
impl LD1RSB_Z_P_BI_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RSB_Z_P_BI_S64(u32);
impl LD1RSB_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RSH_Z_P_BI_S32(u32);
impl LD1RSH_Z_P_BI_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RSH_Z_P_BI_S64(u32);
impl LD1RSH_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RSW_Z_P_BI_S64(u32);
impl LD1RSW_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RW_Z_P_BI_U32(u32);
impl LD1RW_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1RW_Z_P_BI_U64(u32);
impl LD1RW_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1R_asisdlso_R1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1R_asisdlsop_R1_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1R_asisdlsop_RX1_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_AI_D(u32);
impl LD1SB_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_AI_S(u32);
impl LD1SB_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BI_S16(u32);
impl LD1SB_Z_P_BI_S16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BI_S32(u32);
impl LD1SB_Z_P_BI_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BI_S64(u32);
impl LD1SB_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BR_S16(u32);
impl LD1SB_Z_P_BR_S16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BR_S32(u32);
impl LD1SB_Z_P_BR_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BR_S64(u32);
impl LD1SB_Z_P_BR_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BZ_D_64_unscaled(u32);
impl LD1SB_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BZ_D_x32_unscaled(u32);
impl LD1SB_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SB_Z_P_BZ_S_x32_unscaled(u32);
impl LD1SB_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_AI_D(u32);
impl LD1SH_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_AI_S(u32);
impl LD1SH_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BI_S32(u32);
impl LD1SH_Z_P_BI_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BI_S64(u32);
impl LD1SH_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BR_S32(u32);
impl LD1SH_Z_P_BR_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BR_S64(u32);
impl LD1SH_Z_P_BR_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BZ_D_64_scaled(u32);
impl LD1SH_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BZ_D_64_unscaled(u32);
impl LD1SH_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BZ_D_x32_scaled(u32);
impl LD1SH_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BZ_D_x32_unscaled(u32);
impl LD1SH_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BZ_S_x32_scaled(u32);
impl LD1SH_Z_P_BZ_S_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SH_Z_P_BZ_S_x32_unscaled(u32);
impl LD1SH_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SW_Z_P_AI_D(u32);
impl LD1SW_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SW_Z_P_BI_S64(u32);
impl LD1SW_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SW_Z_P_BR_S64(u32);
impl LD1SW_Z_P_BR_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SW_Z_P_BZ_D_64_scaled(u32);
impl LD1SW_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SW_Z_P_BZ_D_64_unscaled(u32);
impl LD1SW_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SW_Z_P_BZ_D_x32_scaled(u32);
impl LD1SW_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1SW_Z_P_BZ_D_x32_unscaled(u32);
impl LD1SW_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_AI_D(u32);
impl LD1W_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_AI_S(u32);
impl LD1W_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BI_U32(u32);
impl LD1W_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BI_U64(u32);
impl LD1W_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BR_U32(u32);
impl LD1W_Z_P_BR_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BR_U64(u32);
impl LD1W_Z_P_BR_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BZ_D_64_scaled(u32);
impl LD1W_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BZ_D_64_unscaled(u32);
impl LD1W_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BZ_D_x32_scaled(u32);
impl LD1W_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BZ_D_x32_unscaled(u32);
impl LD1W_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BZ_S_x32_scaled(u32);
impl LD1W_Z_P_BZ_S_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1W_Z_P_BZ_S_x32_unscaled(u32);
impl LD1W_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlse_R1_1v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlse_R2_2v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlse_R3_3v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlse_R4_4v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsep_I1_i1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsep_I2_i2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsep_I3_i3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsep_I4_i4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsep_R1_r1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsep_R2_r2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsep_R3_r3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsep_R4_r4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlso_B1_1b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlso_D1_1d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlso_H1_1h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlso_S1_1s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsop_B1_i1b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsop_BX1_r1b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsop_D1_i1d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsop_DX1_r1d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsop_H1_i1h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsop_HX1_r1h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsop_S1_i1s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD1_asisdlsop_SX1_r1s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2B_Z_P_BI_Contiguous(u32);
impl LD2B_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2B_Z_P_BR_Contiguous(u32);
impl LD2B_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2D_Z_P_BI_Contiguous(u32);
impl LD2D_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2D_Z_P_BR_Contiguous(u32);
impl LD2D_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2H_Z_P_BI_Contiguous(u32);
impl LD2H_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2H_Z_P_BR_Contiguous(u32);
impl LD2H_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2R_asisdlso_R2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2R_asisdlsop_R2_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2R_asisdlsop_RX2_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2W_Z_P_BI_Contiguous(u32);
impl LD2W_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2W_Z_P_BR_Contiguous(u32);
impl LD2W_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlse_R2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsep_I2_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsep_R2_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlso_B2_2b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlso_D2_2d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlso_H2_2h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlso_S2_2s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsop_B2_i2b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsop_BX2_r2b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsop_D2_i2d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsop_DX2_r2d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsop_H2_i2h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsop_HX2_r2h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsop_S2_i2s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD2_asisdlsop_SX2_r2s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3B_Z_P_BI_Contiguous(u32);
impl LD3B_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3B_Z_P_BR_Contiguous(u32);
impl LD3B_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3D_Z_P_BI_Contiguous(u32);
impl LD3D_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3D_Z_P_BR_Contiguous(u32);
impl LD3D_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3H_Z_P_BI_Contiguous(u32);
impl LD3H_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3H_Z_P_BR_Contiguous(u32);
impl LD3H_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3R_asisdlso_R3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3R_asisdlsop_R3_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3R_asisdlsop_RX3_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3W_Z_P_BI_Contiguous(u32);
impl LD3W_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3W_Z_P_BR_Contiguous(u32);
impl LD3W_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlse_R3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsep_I3_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsep_R3_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlso_B3_3b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlso_D3_3d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlso_H3_3h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlso_S3_3s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsop_B3_i3b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsop_BX3_r3b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsop_D3_i3d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsop_DX3_r3d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsop_H3_i3h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsop_HX3_r3h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsop_S3_i3s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD3_asisdlsop_SX3_r3s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4B_Z_P_BI_Contiguous(u32);
impl LD4B_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4B_Z_P_BR_Contiguous(u32);
impl LD4B_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4D_Z_P_BI_Contiguous(u32);
impl LD4D_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4D_Z_P_BR_Contiguous(u32);
impl LD4D_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4H_Z_P_BI_Contiguous(u32);
impl LD4H_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4H_Z_P_BR_Contiguous(u32);
impl LD4H_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4R_asisdlso_R4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4R_asisdlsop_R4_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4R_asisdlsop_RX4_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4W_Z_P_BI_Contiguous(u32);
impl LD4W_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4W_Z_P_BR_Contiguous(u32);
impl LD4W_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlse_R4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsep_I4_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsep_R4_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlso_B4_4b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlso_D4_4d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlso_H4_4h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlso_S4_4s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsop_B4_i4b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsop_BX4_r4b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsop_D4_i4d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsop_DX4_r4d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsop_H4_i4h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsop_HX4_r4h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsop_S4_i4s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LD4_asisdlsop_SX4_r4s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADDL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADD_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDADD_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPRB_32L_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPRH_32L_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPR_32L_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPR_64L_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPURB_32_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPURH_32_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPURSB_32_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPURSB_64_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPURSH_32_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPURSH_64_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPURSW_64_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPUR_32_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAPUR_64_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDARB_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDARH_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAR_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAR_LR64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAXP_LP32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAXP_LP64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAXRB_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAXRH_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAXR_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDAXR_LR64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLRL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLR_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDCLR_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEORL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEOR_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDEOR_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_AI_D(u32);
impl LDFF1B_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_AI_S(u32);
impl LDFF1B_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_BR_U16(u32);
impl LDFF1B_Z_P_BR_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_BR_U32(u32);
impl LDFF1B_Z_P_BR_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_BR_U64(u32);
impl LDFF1B_Z_P_BR_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_BR_U8(u32);
impl LDFF1B_Z_P_BR_U8 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_BZ_D_64_unscaled(u32);
impl LDFF1B_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_BZ_D_x32_unscaled(u32);
impl LDFF1B_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1B_Z_P_BZ_S_x32_unscaled(u32);
impl LDFF1B_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1D_Z_P_AI_D(u32);
impl LDFF1D_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1D_Z_P_BR_U64(u32);
impl LDFF1D_Z_P_BR_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1D_Z_P_BZ_D_64_scaled(u32);
impl LDFF1D_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1D_Z_P_BZ_D_64_unscaled(u32);
impl LDFF1D_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1D_Z_P_BZ_D_x32_scaled(u32);
impl LDFF1D_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1D_Z_P_BZ_D_x32_unscaled(u32);
impl LDFF1D_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_AI_D(u32);
impl LDFF1H_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_AI_S(u32);
impl LDFF1H_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BR_U16(u32);
impl LDFF1H_Z_P_BR_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BR_U32(u32);
impl LDFF1H_Z_P_BR_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BR_U64(u32);
impl LDFF1H_Z_P_BR_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BZ_D_64_scaled(u32);
impl LDFF1H_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BZ_D_64_unscaled(u32);
impl LDFF1H_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BZ_D_x32_scaled(u32);
impl LDFF1H_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BZ_D_x32_unscaled(u32);
impl LDFF1H_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BZ_S_x32_scaled(u32);
impl LDFF1H_Z_P_BZ_S_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1H_Z_P_BZ_S_x32_unscaled(u32);
impl LDFF1H_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SB_Z_P_AI_D(u32);
impl LDFF1SB_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SB_Z_P_AI_S(u32);
impl LDFF1SB_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SB_Z_P_BR_S16(u32);
impl LDFF1SB_Z_P_BR_S16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SB_Z_P_BR_S32(u32);
impl LDFF1SB_Z_P_BR_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SB_Z_P_BR_S64(u32);
impl LDFF1SB_Z_P_BR_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SB_Z_P_BZ_D_64_unscaled(u32);
impl LDFF1SB_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SB_Z_P_BZ_D_x32_unscaled(u32);
impl LDFF1SB_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SB_Z_P_BZ_S_x32_unscaled(u32);
impl LDFF1SB_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_AI_D(u32);
impl LDFF1SH_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_AI_S(u32);
impl LDFF1SH_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_BR_S32(u32);
impl LDFF1SH_Z_P_BR_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_BR_S64(u32);
impl LDFF1SH_Z_P_BR_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_BZ_D_64_scaled(u32);
impl LDFF1SH_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_BZ_D_64_unscaled(u32);
impl LDFF1SH_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_BZ_D_x32_scaled(u32);
impl LDFF1SH_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_BZ_D_x32_unscaled(u32);
impl LDFF1SH_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_BZ_S_x32_scaled(u32);
impl LDFF1SH_Z_P_BZ_S_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SH_Z_P_BZ_S_x32_unscaled(u32);
impl LDFF1SH_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SW_Z_P_AI_D(u32);
impl LDFF1SW_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SW_Z_P_BR_S64(u32);
impl LDFF1SW_Z_P_BR_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SW_Z_P_BZ_D_64_scaled(u32);
impl LDFF1SW_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SW_Z_P_BZ_D_64_unscaled(u32);
impl LDFF1SW_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SW_Z_P_BZ_D_x32_scaled(u32);
impl LDFF1SW_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1SW_Z_P_BZ_D_x32_unscaled(u32);
impl LDFF1SW_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_AI_D(u32);
impl LDFF1W_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_AI_S(u32);
impl LDFF1W_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_BR_U32(u32);
impl LDFF1W_Z_P_BR_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_BR_U64(u32);
impl LDFF1W_Z_P_BR_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_BZ_D_64_scaled(u32);
impl LDFF1W_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_BZ_D_64_unscaled(u32);
impl LDFF1W_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_BZ_D_x32_scaled(u32);
impl LDFF1W_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_BZ_D_x32_unscaled(u32);
impl LDFF1W_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_BZ_S_x32_scaled(u32);
impl LDFF1W_Z_P_BZ_S_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDFF1W_Z_P_BZ_S_x32_unscaled(u32);
impl LDFF1W_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDGM_64bulk_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDG_64Loffset_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDLARB_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDLARH_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDLAR_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDLAR_LR64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1B_Z_P_BI_U16(u32);
impl LDNF1B_Z_P_BI_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1B_Z_P_BI_U32(u32);
impl LDNF1B_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1B_Z_P_BI_U64(u32);
impl LDNF1B_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1B_Z_P_BI_U8(u32);
impl LDNF1B_Z_P_BI_U8 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1D_Z_P_BI_U64(u32);
impl LDNF1D_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1H_Z_P_BI_U16(u32);
impl LDNF1H_Z_P_BI_U16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1H_Z_P_BI_U32(u32);
impl LDNF1H_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1H_Z_P_BI_U64(u32);
impl LDNF1H_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1SB_Z_P_BI_S16(u32);
impl LDNF1SB_Z_P_BI_S16 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1SB_Z_P_BI_S32(u32);
impl LDNF1SB_Z_P_BI_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1SB_Z_P_BI_S64(u32);
impl LDNF1SB_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1SH_Z_P_BI_S32(u32);
impl LDNF1SH_Z_P_BI_S32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1SH_Z_P_BI_S64(u32);
impl LDNF1SH_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1SW_Z_P_BI_S64(u32);
impl LDNF1SW_Z_P_BI_S64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1W_Z_P_BI_U32(u32);
impl LDNF1W_Z_P_BI_U32 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNF1W_Z_P_BI_U64(u32);
impl LDNF1W_Z_P_BI_U64 {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNP_32_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNP_64_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNP_D_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNP_Q_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNP_S_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNT1B_Z_P_BI_Contiguous(u32);
impl LDNT1B_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNT1B_Z_P_BR_Contiguous(u32);
impl LDNT1B_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNT1D_Z_P_BI_Contiguous(u32);
impl LDNT1D_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNT1D_Z_P_BR_Contiguous(u32);
impl LDNT1D_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNT1H_Z_P_BI_Contiguous(u32);
impl LDNT1H_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNT1H_Z_P_BR_Contiguous(u32);
impl LDNT1H_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNT1W_Z_P_BI_Contiguous(u32);
impl LDNT1W_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDNT1W_Z_P_BR_Contiguous(u32);
impl LDNT1W_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDPSW_64_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDPSW_64_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDPSW_64_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_32_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_32_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_32_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_64_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_64_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_64_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_D_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_D_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_D_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_Q_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_Q_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_Q_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_S_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_S_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDP_S_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRAA_64W_ldst_pac(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRAA_64_ldst_pac(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRAB_64W_ldst_pac(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRAB_64_ldst_pac(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRB_32BL_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRB_32B_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRB_32_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRB_32_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRB_32_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRH_32_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRH_32_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRH_32_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRH_32_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_32BL_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_32B_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_32_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_32_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_32_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_64BL_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_64B_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_64_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_64_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSB_64_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSH_32_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSH_32_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSH_32_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSH_32_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSH_64_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSH_64_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSH_64_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSH_64_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSW_64_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSW_64_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSW_64_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSW_64_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDRSW_64_loadlit(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_32_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_32_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_32_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_32_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_32_loadlit(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_64_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_64_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_64_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_64_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_64_loadlit(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_BL_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_B_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_B_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_B_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_B_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_D_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_D_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_D_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_D_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_D_loadlit(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_H_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_H_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_H_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_H_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_P_BI__(u32);
impl LDR_P_BI__ {
    pub fn Pt(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm9l(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm9h(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_Q_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_Q_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_Q_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_Q_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_Q_loadlit(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_S_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_S_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_S_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_S_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_S_loadlit(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDR_Z_BI__(u32);
impl LDR_Z_BI__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm9l(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm9h(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSETL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSET_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSET_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAXL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAX_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMAX_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMINL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMIN_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDSMIN_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTRB_32_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTRH_32_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTRSB_32_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTRSB_64_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTRSH_32_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTRSH_64_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTRSW_64_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTR_32_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDTR_64_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAXL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAX_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMAX_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMINL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMIN_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUMIN_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDURB_32_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDURH_32_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDURSB_32_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDURSB_64_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDURSH_32_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDURSH_64_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDURSW_64_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUR_32_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUR_64_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUR_B_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUR_D_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUR_H_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUR_Q_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDUR_S_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDXP_LP32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDXP_LP64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDXRB_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDXRH_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDXR_LR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LDXR_LR64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSLR_Z_P_ZZ__(u32);
impl LSLR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSLV_32_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSLV_64_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSL_Z_P_ZI__(u32);
impl LSL_Z_P_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm3(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b111
    }
    pub fn tszl(self) -> u32 {
        let inst = self.0;
        (inst >> 8) & 0b11
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn tszh(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSL_Z_P_ZW__(u32);
impl LSL_Z_P_ZW__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSL_Z_P_ZZ__(u32);
impl LSL_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSL_Z_ZI__(u32);
impl LSL_Z_ZI__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm3(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn tszl(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
    pub fn tszh(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSL_Z_ZW__(u32);
impl LSL_Z_ZW__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSRR_Z_P_ZZ__(u32);
impl LSRR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSRV_32_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSRV_64_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSR_Z_P_ZI__(u32);
impl LSR_Z_P_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm3(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b111
    }
    pub fn tszl(self) -> u32 {
        let inst = self.0;
        (inst >> 8) & 0b11
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn tszh(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSR_Z_P_ZW__(u32);
impl LSR_Z_P_ZW__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSR_Z_P_ZZ__(u32);
impl LSR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSR_Z_ZI__(u32);
impl LSR_Z_ZI__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm3(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn tszl(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
    pub fn tszh(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct LSR_Z_ZW__(u32);
impl LSR_Z_ZW__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MADD_32A_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MADD_64A_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MAD_Z_P_ZZZ__(u32);
impl MAD_Z_P_ZZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Za(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MLA_Z_P_ZZZ__(u32);
impl MLA_Z_P_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MLA_asimdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MLA_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MLS_Z_P_ZZZ__(u32);
impl MLS_Z_P_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MLS_asimdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MLS_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVI_asimdimm_D2_d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVI_asimdimm_D_ds(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVI_asimdimm_L_hl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVI_asimdimm_L_sl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVI_asimdimm_M_sm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVI_asimdimm_N_b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVK_32_movewide(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVK_64_movewide(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVN_32_movewide(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVN_64_movewide(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVPRFX_Z_P_Z__(u32);
impl MOVPRFX_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn M(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVPRFX_Z_Z__(u32);
impl MOVPRFX_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVZ_32_movewide(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MOVZ_64_movewide(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MRS_RS_systemmove(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MSB_Z_P_ZZZ__(u32);
impl MSB_Z_P_ZZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Za(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MSR_SI_pstate(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MSR_SR_systemmove(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MSUB_32A_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MSUB_64A_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MUL_Z_P_ZZ__(u32);
impl MUL_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MUL_Z_ZI__(u32);
impl MUL_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MUL_asimdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MUL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MVNI_asimdimm_L_hl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MVNI_asimdimm_L_sl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct MVNI_asimdimm_M_sm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NANDS_P_P_PP_Z(u32);
impl NANDS_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NAND_P_P_PP_Z(u32);
impl NAND_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NEG_Z_P_Z__(u32);
impl NEG_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NEG_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NEG_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NOP_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NORS_P_P_PP_Z(u32);
impl NORS_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NOR_P_P_PP_Z(u32);
impl NOR_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NOT_Z_P_Z__(u32);
impl NOT_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct NOT_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORNS_P_P_PP_Z(u32);
impl ORNS_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORN_32_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORN_64_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORN_P_P_PP_Z(u32);
impl ORN_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORN_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORRS_P_P_PP_Z(u32);
impl ORRS_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn S(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_32_log_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_32_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_64_log_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_64_log_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_P_P_PP_Z(u32);
impl ORR_P_P_PP_Z {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn S(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_Z_P_ZZ__(u32);
impl ORR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_Z_ZI__(u32);
impl ORR_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm13(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111111111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_Z_ZZ__(u32);
impl ORR_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_asimdimm_L_hl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_asimdimm_L_sl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORR_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ORV_R_P_Z__(u32);
impl ORV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACDA_64P_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACDB_64P_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACDZA_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACDZB_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACGA_64P_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIA1716_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIASP_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIAZ_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIA_64P_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIB1716_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIBSP_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIBZ_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIB_64P_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIZA_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PACIZB_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PFALSE_P__(u32);
impl PFALSE_P__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PFIRST_P_P_P__(u32);
impl PFIRST_P_P_P__ {
    pub fn Pdn(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PMULL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PMUL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PNEXT_P_P_P__(u32);
impl PNEXT_P_P_P__ {
    pub fn Pdn(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFB_I_P_AI_D(u32);
impl PRFB_I_P_AI_D {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFB_I_P_AI_S(u32);
impl PRFB_I_P_AI_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFB_I_P_BI_S(u32);
impl PRFB_I_P_BI_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFB_I_P_BR_S(u32);
impl PRFB_I_P_BR_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFB_I_P_BZ_D_64_scaled(u32);
impl PRFB_I_P_BZ_D_64_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFB_I_P_BZ_D_x32_scaled(u32);
impl PRFB_I_P_BZ_D_x32_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFB_I_P_BZ_S_x32_scaled(u32);
impl PRFB_I_P_BZ_S_x32_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFD_I_P_AI_D(u32);
impl PRFD_I_P_AI_D {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFD_I_P_AI_S(u32);
impl PRFD_I_P_AI_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFD_I_P_BI_S(u32);
impl PRFD_I_P_BI_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFD_I_P_BR_S(u32);
impl PRFD_I_P_BR_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFD_I_P_BZ_D_64_scaled(u32);
impl PRFD_I_P_BZ_D_64_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFD_I_P_BZ_D_x32_scaled(u32);
impl PRFD_I_P_BZ_D_x32_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFD_I_P_BZ_S_x32_scaled(u32);
impl PRFD_I_P_BZ_S_x32_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFH_I_P_AI_D(u32);
impl PRFH_I_P_AI_D {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFH_I_P_AI_S(u32);
impl PRFH_I_P_AI_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFH_I_P_BI_S(u32);
impl PRFH_I_P_BI_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFH_I_P_BR_S(u32);
impl PRFH_I_P_BR_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFH_I_P_BZ_D_64_scaled(u32);
impl PRFH_I_P_BZ_D_64_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFH_I_P_BZ_D_x32_scaled(u32);
impl PRFH_I_P_BZ_D_x32_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFH_I_P_BZ_S_x32_scaled(u32);
impl PRFH_I_P_BZ_S_x32_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFM_P_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFM_P_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFM_P_loadlit(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFUM_P_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFW_I_P_AI_D(u32);
impl PRFW_I_P_AI_D {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFW_I_P_AI_S(u32);
impl PRFW_I_P_AI_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFW_I_P_BI_S(u32);
impl PRFW_I_P_BI_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFW_I_P_BR_S(u32);
impl PRFW_I_P_BR_S {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFW_I_P_BZ_D_64_scaled(u32);
impl PRFW_I_P_BZ_D_64_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFW_I_P_BZ_D_x32_scaled(u32);
impl PRFW_I_P_BZ_D_x32_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PRFW_I_P_BZ_S_x32_scaled(u32);
impl PRFW_I_P_BZ_S_x32_scaled {
    pub fn prfop(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PSB_HC_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PSSBB_only_barriers(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PTEST__P_P__(u32);
impl PTEST__P_P__ {
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PTRUES_P_S__(u32);
impl PTRUES_P_S__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PTRUE_P_S__(u32);
impl PTRUE_P_S__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PUNPKHI_P_P__(u32);
impl PUNPKHI_P_P__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct PUNPKLO_P_P__(u32);
impl PUNPKLO_P_P__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RADDHN_asimddiff_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RAX1_VVV2_cryptosha512_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RBIT_32_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RBIT_64_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RBIT_Z_P_Z__(u32);
impl RBIT_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RBIT_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RDFFRS_P_P_F__(u32);
impl RDFFRS_P_P_F__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RDFFR_P_F__(u32);
impl RDFFR_P_F__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RDFFR_P_P_F__(u32);
impl RDFFR_P_P_F__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RDVL_R_I__(u32);
impl RDVL_R_I__ {
    pub fn Rd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm6(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RETAA_64E_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RETAB_64E_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RET_64R_branch_reg(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV16_32_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV16_64_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV16_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV32_64_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV32_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV64_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REVB_Z_Z__(u32);
impl REVB_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REVH_Z_Z__(u32);
impl REVH_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REVW_Z_Z__(u32);
impl REVW_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV_32_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV_64_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV_P_P__(u32);
impl REV_P_P__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct REV_Z_Z__(u32);
impl REV_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RMIF_only_rmif(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RORV_32_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RORV_64_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RSHRN_asimdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct RSUBHN_asimddiff_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SABAL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SABA_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SABDL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SABD_Z_P_ZZ__(u32);
impl SABD_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SABD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SADALP_asimdmisc_P(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SADDLP_asimdmisc_P(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SADDLV_asimdall_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SADDL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SADDV_R_P_Z__(u32);
impl SADDV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SADDW_asimddiff_W(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SBCS_32_addsub_carry(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SBCS_64_addsub_carry(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SBC_32_addsub_carry(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SBC_64_addsub_carry(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SBFM_32M_bitfield(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SBFM_64M_bitfield(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SB_only_barriers(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_D32_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_D32_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_D64_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_D64_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_H32_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_H32_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_H64_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_H64_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_S32_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_S32_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_S64_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_S64_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_Z_P_Z_H2FP16(u32);
impl SCVTF_Z_P_Z_H2FP16 {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_Z_P_Z_W2D(u32);
impl SCVTF_Z_P_Z_W2D {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_Z_P_Z_W2FP16(u32);
impl SCVTF_Z_P_Z_W2FP16 {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_Z_P_Z_W2S(u32);
impl SCVTF_Z_P_Z_W2S {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_Z_P_Z_X2D(u32);
impl SCVTF_Z_P_Z_X2D {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_Z_P_Z_X2FP16(u32);
impl SCVTF_Z_P_Z_X2FP16 {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_Z_P_Z_X2S(u32);
impl SCVTF_Z_P_Z_X2S {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_asimdshf_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SCVTF_asisdshf_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDIVR_Z_P_ZZ__(u32);
impl SDIVR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDIV_32_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDIV_64_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDIV_Z_P_ZZ__(u32);
impl SDIV_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDOT_Z_ZZZ__(u32);
impl SDOT_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDOT_Z_ZZZi_D(u32);
impl SDOT_Z_ZZZi_D {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 20) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDOT_Z_ZZZi_S(u32);
impl SDOT_Z_ZZZi_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDOT_asimdelem_D(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SDOT_asimdsame2_D(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SEL_P_P_PP__(u32);
impl SEL_P_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SEL_Z_P_ZZ__(u32);
impl SEL_Z_P_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b1111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SETF16_only_setf(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SETF8_only_setf(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SETFFR_F__(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SEVL_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SEV_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA1C_QSV_cryptosha3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA1H_SS_cryptosha2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA1M_QSV_cryptosha3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA1P_QSV_cryptosha3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA1SU0_VVV_cryptosha3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA1SU1_VV_cryptosha2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA256H2_QQV_cryptosha3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA256H_QQV_cryptosha3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA256SU0_VV_cryptosha2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA256SU1_VVV_cryptosha3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA512H2_QQV_cryptosha512_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA512H_QQV_cryptosha512_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA512SU0_VV2_cryptosha512_2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHA512SU1_VVV2_cryptosha512_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHADD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHLL_asimdmisc_S(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHL_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHL_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHRN_asimdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SHSUB_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SLI_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SLI_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM3PARTW1_VVV4_cryptosha512_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM3PARTW2_VVV4_cryptosha512_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM3SS1_VVV4_crypto4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM3TT1A_VVV4_crypto3_imm2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM3TT1B_VVV4_crypto3_imm2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM3TT2A_VVV4_crypto3_imm2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM3TT2B_VVV_crypto3_imm2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM4EKEY_VVV4_cryptosha512_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SM4E_VV4_cryptosha512_2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMADDL_64WA_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMAXP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMAXV_R_P_Z__(u32);
impl SMAXV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMAXV_asimdall_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMAX_Z_P_ZZ__(u32);
impl SMAX_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMAX_Z_ZI__(u32);
impl SMAX_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMAX_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMC_EX_exception(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMINP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMINV_R_P_Z__(u32);
impl SMINV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMINV_asimdall_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMIN_Z_P_ZZ__(u32);
impl SMIN_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMIN_Z_ZI__(u32);
impl SMIN_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMIN_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMLAL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMLAL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMLSL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMLSL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMMLA_Z_ZZZ__(u32);
impl SMMLA_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMMLA_asimdsame2_G(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMOV_asimdins_W_w(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMOV_asimdins_X_x(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMSUBL_64WA_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMULH_64_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMULH_Z_P_ZZ__(u32);
impl SMULH_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMULL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SMULL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SPLICE_Z_P_ZZ_Des(u32);
impl SPLICE_Z_P_ZZ_Des {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQABS_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQABS_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQADD_Z_ZI__(u32);
impl SQADD_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQADD_Z_ZZ__(u32);
impl SQADD_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQADD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQADD_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECB_R_RS_SX(u32);
impl SQDECB_R_RS_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECB_R_RS_X(u32);
impl SQDECB_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECD_R_RS_SX(u32);
impl SQDECD_R_RS_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECD_R_RS_X(u32);
impl SQDECD_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECD_Z_ZS__(u32);
impl SQDECD_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECH_R_RS_SX(u32);
impl SQDECH_R_RS_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECH_R_RS_X(u32);
impl SQDECH_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECH_Z_ZS__(u32);
impl SQDECH_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECP_R_P_R_SX(u32);
impl SQDECP_R_P_R_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECP_R_P_R_X(u32);
impl SQDECP_R_P_R_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECP_Z_P_Z__(u32);
impl SQDECP_Z_P_Z__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECW_R_RS_SX(u32);
impl SQDECW_R_RS_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECW_R_RS_X(u32);
impl SQDECW_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDECW_Z_ZS__(u32);
impl SQDECW_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMLAL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMLAL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMLAL_asisddiff_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMLAL_asisdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMLSL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMLSL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMLSL_asisddiff_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMLSL_asisdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMULH_asimdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMULH_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMULH_asisdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMULH_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMULL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMULL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMULL_asisddiff_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQDMULL_asisdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCB_R_RS_SX(u32);
impl SQINCB_R_RS_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCB_R_RS_X(u32);
impl SQINCB_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCD_R_RS_SX(u32);
impl SQINCD_R_RS_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCD_R_RS_X(u32);
impl SQINCD_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCD_Z_ZS__(u32);
impl SQINCD_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCH_R_RS_SX(u32);
impl SQINCH_R_RS_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCH_R_RS_X(u32);
impl SQINCH_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCH_Z_ZS__(u32);
impl SQINCH_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCP_R_P_R_SX(u32);
impl SQINCP_R_P_R_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCP_R_P_R_X(u32);
impl SQINCP_R_P_R_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCP_Z_P_Z__(u32);
impl SQINCP_Z_P_Z__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCW_R_RS_SX(u32);
impl SQINCW_R_RS_SX {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCW_R_RS_X(u32);
impl SQINCW_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQINCW_Z_ZS__(u32);
impl SQINCW_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQNEG_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQNEG_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMLAH_asimdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMLAH_asimdsame2_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMLAH_asisdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMLAH_asisdsame2_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMLSH_asimdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMLSH_asimdsame2_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMLSH_asisdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMLSH_asisdsame2_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMULH_asimdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMULH_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMULH_asisdelem_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRDMULH_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRSHL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRSHL_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRSHRN_asimdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRSHRN_asisdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRSHRUN_asimdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQRSHRUN_asisdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHLU_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHLU_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHL_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHL_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHL_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHRN_asimdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHRN_asisdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHRUN_asimdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSHRUN_asisdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSUB_Z_ZI__(u32);
impl SQSUB_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSUB_Z_ZZ__(u32);
impl SQSUB_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSUB_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQSUB_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQXTN_asimdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQXTN_asisdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQXTUN_asimdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SQXTUN_asisdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRHADD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRI_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRI_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRSHL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRSHL_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRSHR_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRSHR_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRSRA_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SRSRA_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSBB_only_barriers(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSHLL_asimdshf_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSHL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSHL_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSHR_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSHR_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSRA_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSRA_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSUBL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SSUBW_asimddiff_W(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1B_Z_P_AI_D(u32);
impl ST1B_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1B_Z_P_AI_S(u32);
impl ST1B_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1B_Z_P_BI__(u32);
impl ST1B_Z_P_BI__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 21) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1B_Z_P_BR__(u32);
impl ST1B_Z_P_BR__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 21) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1B_Z_P_BZ_D_64_unscaled(u32);
impl ST1B_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1B_Z_P_BZ_D_x32_unscaled(u32);
impl ST1B_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1B_Z_P_BZ_S_x32_unscaled(u32);
impl ST1B_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1D_Z_P_AI_D(u32);
impl ST1D_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1D_Z_P_BI__(u32);
impl ST1D_Z_P_BI__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 21) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1D_Z_P_BR__(u32);
impl ST1D_Z_P_BR__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1D_Z_P_BZ_D_64_scaled(u32);
impl ST1D_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1D_Z_P_BZ_D_64_unscaled(u32);
impl ST1D_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1D_Z_P_BZ_D_x32_scaled(u32);
impl ST1D_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1D_Z_P_BZ_D_x32_unscaled(u32);
impl ST1D_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_AI_D(u32);
impl ST1H_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_AI_S(u32);
impl ST1H_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_BI__(u32);
impl ST1H_Z_P_BI__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 21) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_BR__(u32);
impl ST1H_Z_P_BR__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 21) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_BZ_D_64_scaled(u32);
impl ST1H_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_BZ_D_64_unscaled(u32);
impl ST1H_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_BZ_D_x32_scaled(u32);
impl ST1H_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_BZ_D_x32_unscaled(u32);
impl ST1H_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_BZ_S_x32_scaled(u32);
impl ST1H_Z_P_BZ_S_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1H_Z_P_BZ_S_x32_unscaled(u32);
impl ST1H_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_AI_D(u32);
impl ST1W_Z_P_AI_D {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_AI_S(u32);
impl ST1W_Z_P_AI_S {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm5(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_BI__(u32);
impl ST1W_Z_P_BI__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 21) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_BR__(u32);
impl ST1W_Z_P_BR__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 21) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_BZ_D_64_scaled(u32);
impl ST1W_Z_P_BZ_D_64_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_BZ_D_64_unscaled(u32);
impl ST1W_Z_P_BZ_D_64_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_BZ_D_x32_scaled(u32);
impl ST1W_Z_P_BZ_D_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_BZ_D_x32_unscaled(u32);
impl ST1W_Z_P_BZ_D_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_BZ_S_x32_scaled(u32);
impl ST1W_Z_P_BZ_S_x32_scaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1W_Z_P_BZ_S_x32_unscaled(u32);
impl ST1W_Z_P_BZ_S_x32_unscaled {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn xs(self) -> u32 {
        let inst = self.0;
        (inst >> 14) & 0b1
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlse_R1_1v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlse_R2_2v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlse_R3_3v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlse_R4_4v(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsep_I1_i1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsep_I2_i2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsep_I3_i3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsep_I4_i4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsep_R1_r1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsep_R2_r2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsep_R3_r3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsep_R4_r4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlso_B1_1b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlso_D1_1d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlso_H1_1h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlso_S1_1s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsop_B1_i1b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsop_BX1_r1b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsop_D1_i1d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsop_DX1_r1d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsop_H1_i1h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsop_HX1_r1h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsop_S1_i1s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST1_asisdlsop_SX1_r1s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2B_Z_P_BI_Contiguous(u32);
impl ST2B_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2B_Z_P_BR_Contiguous(u32);
impl ST2B_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2D_Z_P_BI_Contiguous(u32);
impl ST2D_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2D_Z_P_BR_Contiguous(u32);
impl ST2D_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2G_64Soffset_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2G_64Spost_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2G_64Spre_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2H_Z_P_BI_Contiguous(u32);
impl ST2H_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2H_Z_P_BR_Contiguous(u32);
impl ST2H_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2W_Z_P_BI_Contiguous(u32);
impl ST2W_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2W_Z_P_BR_Contiguous(u32);
impl ST2W_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlse_R2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsep_I2_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsep_R2_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlso_B2_2b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlso_D2_2d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlso_H2_2h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlso_S2_2s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsop_B2_i2b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsop_BX2_r2b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsop_D2_i2d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsop_DX2_r2d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsop_H2_i2h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsop_HX2_r2h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsop_S2_i2s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST2_asisdlsop_SX2_r2s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3B_Z_P_BI_Contiguous(u32);
impl ST3B_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3B_Z_P_BR_Contiguous(u32);
impl ST3B_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3D_Z_P_BI_Contiguous(u32);
impl ST3D_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3D_Z_P_BR_Contiguous(u32);
impl ST3D_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3H_Z_P_BI_Contiguous(u32);
impl ST3H_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3H_Z_P_BR_Contiguous(u32);
impl ST3H_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3W_Z_P_BI_Contiguous(u32);
impl ST3W_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3W_Z_P_BR_Contiguous(u32);
impl ST3W_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlse_R3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsep_I3_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsep_R3_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlso_B3_3b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlso_D3_3d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlso_H3_3h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlso_S3_3s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsop_B3_i3b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsop_BX3_r3b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsop_D3_i3d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsop_DX3_r3d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsop_H3_i3h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsop_HX3_r3h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsop_S3_i3s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST3_asisdlsop_SX3_r3s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4B_Z_P_BI_Contiguous(u32);
impl ST4B_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4B_Z_P_BR_Contiguous(u32);
impl ST4B_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4D_Z_P_BI_Contiguous(u32);
impl ST4D_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4D_Z_P_BR_Contiguous(u32);
impl ST4D_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4H_Z_P_BI_Contiguous(u32);
impl ST4H_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4H_Z_P_BR_Contiguous(u32);
impl ST4H_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4W_Z_P_BI_Contiguous(u32);
impl ST4W_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4W_Z_P_BR_Contiguous(u32);
impl ST4W_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlse_R4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsep_I4_i(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsep_R4_r(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlso_B4_4b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlso_D4_4d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlso_H4_4h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlso_S4_4s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsop_B4_i4b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsop_BX4_r4b(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsop_D4_i4d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsop_DX4_r4d(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsop_H4_i4h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsop_HX4_r4h(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsop_S4_i4s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ST4_asisdlsop_SX4_r4s(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STGM_64bulk_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STGP_64_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STGP_64_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STGP_64_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STG_64Soffset_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STG_64Spost_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STG_64Spre_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLLRB_SL32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLLRH_SL32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLLR_SL32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLLR_SL64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLRB_SL32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLRH_SL32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLR_SL32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLR_SL64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLURB_32_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLURH_32_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLUR_32_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLUR_64_ldapstl_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLXP_SP32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLXP_SP64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLXRB_SR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLXRH_SR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLXR_SR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STLXR_SR64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNP_32_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNP_64_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNP_D_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNP_Q_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNP_S_ldstnapair_offs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNT1B_Z_P_BI_Contiguous(u32);
impl STNT1B_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNT1B_Z_P_BR_Contiguous(u32);
impl STNT1B_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNT1D_Z_P_BI_Contiguous(u32);
impl STNT1D_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNT1D_Z_P_BR_Contiguous(u32);
impl STNT1D_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNT1H_Z_P_BI_Contiguous(u32);
impl STNT1H_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNT1H_Z_P_BR_Contiguous(u32);
impl STNT1H_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNT1W_Z_P_BI_Contiguous(u32);
impl STNT1W_Z_P_BI_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STNT1W_Z_P_BR_Contiguous(u32);
impl STNT1W_Z_P_BR_Contiguous {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_32_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_32_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_32_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_64_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_64_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_64_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_D_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_D_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_D_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_Q_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_Q_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_Q_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_S_ldstpair_off(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_S_ldstpair_post(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STP_S_ldstpair_pre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRB_32BL_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRB_32B_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRB_32_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRB_32_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRB_32_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRH_32_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRH_32_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRH_32_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STRH_32_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_32_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_32_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_32_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_32_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_64_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_64_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_64_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_64_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_BL_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_B_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_B_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_B_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_B_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_D_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_D_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_D_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_D_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_H_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_H_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_H_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_H_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_P_BI__(u32);
impl STR_P_BI__ {
    pub fn Pt(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm9l(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm9h(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_Q_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_Q_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_Q_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_Q_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_S_ldst_immpost(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_S_ldst_immpre(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_S_ldst_pos(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_S_ldst_regoff(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STR_Z_BI__(u32);
impl STR_Z_BI__ {
    pub fn Zt(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm9l(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn imm9h(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STTRB_32_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STTRH_32_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STTR_32_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STTR_64_ldst_unpriv(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STURB_32_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STURH_32_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STUR_32_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STUR_64_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STUR_B_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STUR_D_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STUR_H_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STUR_Q_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STUR_S_ldst_unscaled(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STXP_SP32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STXP_SP64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STXRB_SR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STXRH_SR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STXR_SR32_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STXR_SR64_ldstexcl(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STZ2G_64Soffset_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STZ2G_64Spost_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STZ2G_64Spre_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STZGM_64bulk_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STZG_64Soffset_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STZG_64Spost_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct STZG_64Spre_ldsttags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBG_64_addsub_immtags(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBHN_asimddiff_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBPS_64S_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBP_64S_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBR_Z_P_ZZ__(u32);
impl SUBR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBR_Z_ZI__(u32);
impl SUBR_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBS_32S_addsub_ext(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBS_32S_addsub_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBS_32_addsub_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBS_64S_addsub_ext(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBS_64S_addsub_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUBS_64_addsub_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_32_addsub_ext(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_32_addsub_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_32_addsub_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_64_addsub_ext(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_64_addsub_imm(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_64_addsub_shift(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_Z_P_ZZ__(u32);
impl SUB_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_Z_ZI__(u32);
impl SUB_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_Z_ZZ__(u32);
impl SUB_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUB_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUDOT_Z_ZZZi_S(u32);
impl SUDOT_Z_ZZZi_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUDOT_asimdelem_D(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUNPKHI_Z_Z__(u32);
impl SUNPKHI_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUNPKLO_Z_Z__(u32);
impl SUNPKLO_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUQADD_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SUQADD_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SVC_EX_exception(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPAB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPAH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPALB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPALH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPAL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPAL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPA_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPA_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPLB_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPLH_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPL_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWPL_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWP_32_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SWP_64_memop(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SXTB_Z_P_Z__(u32);
impl SXTB_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SXTH_Z_P_Z__(u32);
impl SXTH_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SXTW_Z_P_Z__(u32);
impl SXTW_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SYSL_RC_systeminstrs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct SYS_CR_systeminstrs(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBL_Z_ZZ_1(u32);
impl TBL_Z_ZZ_1 {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBL_asimdtbl_L1_1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBL_asimdtbl_L2_2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBL_asimdtbl_L3_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBL_asimdtbl_L4_4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBNZ_only_testbranch(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBX_asimdtbl_L1_1(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBX_asimdtbl_L2_2(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBX_asimdtbl_L3_3(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBX_asimdtbl_L4_4(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TBZ_only_testbranch(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TRN1_P_PP__(u32);
impl TRN1_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TRN1_Z_ZZ_Q(u32);
impl TRN1_Z_ZZ_Q {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TRN1_Z_ZZ__(u32);
impl TRN1_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TRN1_asimdperm_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TRN2_P_PP__(u32);
impl TRN2_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TRN2_Z_ZZ_Q(u32);
impl TRN2_Z_ZZ_Q {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TRN2_Z_ZZ__(u32);
impl TRN2_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TRN2_asimdperm_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct TSB_HC_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UABAL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UABA_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UABDL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UABD_Z_P_ZZ__(u32);
impl UABD_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UABD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UADALP_asimdmisc_P(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UADDLP_asimdmisc_P(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UADDLV_asimdall_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UADDL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UADDV_R_P_Z__(u32);
impl UADDV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UADDW_asimddiff_W(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UBFM_32M_bitfield(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UBFM_64M_bitfield(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_D32_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_D32_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_D64_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_D64_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_H32_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_H32_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_H64_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_H64_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_S32_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_S32_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_S64_float2fix(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_S64_float2int(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_Z_P_Z_H2FP16(u32);
impl UCVTF_Z_P_Z_H2FP16 {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_Z_P_Z_W2D(u32);
impl UCVTF_Z_P_Z_W2D {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_Z_P_Z_W2FP16(u32);
impl UCVTF_Z_P_Z_W2FP16 {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_Z_P_Z_W2S(u32);
impl UCVTF_Z_P_Z_W2S {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_Z_P_Z_X2D(u32);
impl UCVTF_Z_P_Z_X2D {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_Z_P_Z_X2FP16(u32);
impl UCVTF_Z_P_Z_X2FP16 {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_Z_P_Z_X2S(u32);
impl UCVTF_Z_P_Z_X2S {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_asimdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_asimdshf_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_asisdmiscfp16_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UCVTF_asisdshf_C(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDF_only_perm_undef(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDIVR_Z_P_ZZ__(u32);
impl UDIVR_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDIV_32_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDIV_64_dp_2src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDIV_Z_P_ZZ__(u32);
impl UDIV_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDOT_Z_ZZZ__(u32);
impl UDOT_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDOT_Z_ZZZi_D(u32);
impl UDOT_Z_ZZZi_D {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn i1(self) -> u32 {
        let inst = self.0;
        (inst >> 20) & 0b1
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDOT_Z_ZZZi_S(u32);
impl UDOT_Z_ZZZi_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDOT_asimdelem_D(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UDOT_asimdsame2_D(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UHADD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UHSUB_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMADDL_64WA_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMAXP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMAXV_R_P_Z__(u32);
impl UMAXV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMAXV_asimdall_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMAX_Z_P_ZZ__(u32);
impl UMAX_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMAX_Z_ZI__(u32);
impl UMAX_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMAX_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMINP_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMINV_R_P_Z__(u32);
impl UMINV_R_P_Z__ {
    pub fn Vd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMINV_asimdall_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMIN_Z_P_ZZ__(u32);
impl UMIN_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMIN_Z_ZI__(u32);
impl UMIN_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMIN_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMLAL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMLAL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMLSL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMLSL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMMLA_Z_ZZZ__(u32);
impl UMMLA_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMMLA_asimdsame2_G(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMOV_asimdins_W_w(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMOV_asimdins_X_x(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMSUBL_64WA_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMULH_64_dp_3src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMULH_Z_P_ZZ__(u32);
impl UMULH_Z_P_ZZ__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMULL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UMULL_asimdelem_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQADD_Z_ZI__(u32);
impl UQADD_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQADD_Z_ZZ__(u32);
impl UQADD_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQADD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQADD_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECB_R_RS_UW(u32);
impl UQDECB_R_RS_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECB_R_RS_X(u32);
impl UQDECB_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECD_R_RS_UW(u32);
impl UQDECD_R_RS_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECD_R_RS_X(u32);
impl UQDECD_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECD_Z_ZS__(u32);
impl UQDECD_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECH_R_RS_UW(u32);
impl UQDECH_R_RS_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECH_R_RS_X(u32);
impl UQDECH_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECH_Z_ZS__(u32);
impl UQDECH_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECP_R_P_R_UW(u32);
impl UQDECP_R_P_R_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECP_R_P_R_X(u32);
impl UQDECP_R_P_R_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECP_Z_P_Z__(u32);
impl UQDECP_Z_P_Z__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECW_R_RS_UW(u32);
impl UQDECW_R_RS_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECW_R_RS_X(u32);
impl UQDECW_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQDECW_Z_ZS__(u32);
impl UQDECW_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCB_R_RS_UW(u32);
impl UQINCB_R_RS_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCB_R_RS_X(u32);
impl UQINCB_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCD_R_RS_UW(u32);
impl UQINCD_R_RS_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCD_R_RS_X(u32);
impl UQINCD_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCD_Z_ZS__(u32);
impl UQINCD_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCH_R_RS_UW(u32);
impl UQINCH_R_RS_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCH_R_RS_X(u32);
impl UQINCH_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCH_Z_ZS__(u32);
impl UQINCH_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCP_R_P_R_UW(u32);
impl UQINCP_R_P_R_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCP_R_P_R_X(u32);
impl UQINCP_R_P_R_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCP_Z_P_Z__(u32);
impl UQINCP_Z_P_Z__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCW_R_RS_UW(u32);
impl UQINCW_R_RS_UW {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCW_R_RS_X(u32);
impl UQINCW_R_RS_X {
    pub fn Rdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQINCW_Z_ZS__(u32);
impl UQINCW_Z_ZS__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn pattern(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn imm4(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQRSHL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQRSHL_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQRSHRN_asimdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQRSHRN_asisdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSHL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSHL_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSHL_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSHL_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSHRN_asimdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSHRN_asisdshf_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSUB_Z_ZI__(u32);
impl UQSUB_Z_ZI__ {
    pub fn Zdn(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn imm8(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111111
    }
    pub fn sh(self) -> u32 {
        let inst = self.0;
        (inst >> 13) & 0b1
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSUB_Z_ZZ__(u32);
impl UQSUB_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSUB_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQSUB_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQXTN_asimdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UQXTN_asisdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URECPE_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URHADD_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URSHL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URSHL_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URSHR_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URSHR_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URSQRTE_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URSRA_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct URSRA_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USDOT_Z_ZZZ_S(u32);
impl USDOT_Z_ZZZ_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USDOT_Z_ZZZi_S(u32);
impl USDOT_Z_ZZZi_S {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b111
    }
    pub fn i2(self) -> u32 {
        let inst = self.0;
        (inst >> 19) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USDOT_asimdelem_D(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USDOT_asimdsame2_D(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USHLL_asimdshf_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USHL_asimdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USHL_asisdsame_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USHR_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USHR_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USMMLA_Z_ZZZ__(u32);
impl USMMLA_Z_ZZZ__ {
    pub fn Zda(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USMMLA_asimdsame2_G(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USQADD_asimdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USQADD_asisdmisc_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USRA_asimdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USRA_asisdshf_R(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USUBL_asimddiff_L(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct USUBW_asimddiff_W(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UUNPKHI_Z_Z__(u32);
impl UUNPKHI_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UUNPKLO_Z_Z__(u32);
impl UUNPKLO_Z_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UXTB_Z_P_Z__(u32);
impl UXTB_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UXTH_Z_P_Z__(u32);
impl UXTH_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UXTW_Z_P_Z__(u32);
impl UXTW_Z_P_Z__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Pg(self) -> u32 {
        let inst = self.0;
        (inst >> 10) & 0b111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UZP1_P_PP__(u32);
impl UZP1_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UZP1_Z_ZZ_Q(u32);
impl UZP1_Z_ZZ_Q {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UZP1_Z_ZZ__(u32);
impl UZP1_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UZP1_asimdperm_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UZP2_P_PP__(u32);
impl UZP2_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UZP2_Z_ZZ_Q(u32);
impl UZP2_Z_ZZ_Q {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UZP2_Z_ZZ__(u32);
impl UZP2_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct UZP2_asimdperm_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct WFE_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct WFI_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct WHILELE_P_P_RR__(u32);
impl WHILELE_P_P_RR__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn sf(self) -> u32 {
        let inst = self.0;
        (inst >> 12) & 0b1
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct WHILELO_P_P_RR__(u32);
impl WHILELO_P_P_RR__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn sf(self) -> u32 {
        let inst = self.0;
        (inst >> 12) & 0b1
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct WHILELS_P_P_RR__(u32);
impl WHILELS_P_P_RR__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn sf(self) -> u32 {
        let inst = self.0;
        (inst >> 12) & 0b1
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct WHILELT_P_P_RR__(u32);
impl WHILELT_P_P_RR__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Rn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn sf(self) -> u32 {
        let inst = self.0;
        (inst >> 12) & 0b1
    }
    pub fn Rm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct WRFFR_F_P__(u32);
impl WRFFR_F_P__ {
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct XAFLAG_M_pstate(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct XAR_VVV2_crypto3_imm6(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct XPACD_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct XPACI_64Z_dp_1src(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct XPACLRI_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct XTN_asimdmisc_N(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct YIELD_HI_hints(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ZIP1_P_PP__(u32);
impl ZIP1_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ZIP1_Z_ZZ_Q(u32);
impl ZIP1_Z_ZZ_Q {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ZIP1_Z_ZZ__(u32);
impl ZIP1_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ZIP1_asimdperm_only(u32);
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ZIP2_P_PP__(u32);
impl ZIP2_P_PP__ {
    pub fn Pd(self) -> u32 {
        let inst = self.0;
        inst & 0b1111
    }
    pub fn Pn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b1111
    }
    pub fn Pm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b1111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ZIP2_Z_ZZ_Q(u32);
impl ZIP2_Z_ZZ_Q {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ZIP2_Z_ZZ__(u32);
impl ZIP2_Z_ZZ__ {
    pub fn Zd(self) -> u32 {
        let inst = self.0;
        inst & 0b11111
    }
    pub fn Zn(self) -> u32 {
        let inst = self.0;
        (inst >> 5) & 0b11111
    }
    pub fn Zm(self) -> u32 {
        let inst = self.0;
        (inst >> 16) & 0b11111
    }
    pub fn size(self) -> u32 {
        let inst = self.0;
        (inst >> 22) & 0b11
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub struct ZIP2_asimdperm_only(u32);
