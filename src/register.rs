use std::fmt;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Register {
    X0,
    X1,
    X2,
    X3,
    X4,
    X5,
    X6,
    X7,
    X8,
    X9,
    X10,
    X11,
    X12,
    X13,
    X14,
    X15,
    X16,
    X17,
    X18,
    X19,
    X20,
    X21,
    X22,
    X23,
    X24,
    X25,
    X26,
    X27,
    X28,
    X29,
    X30,

    W0,
    W1,
    W2,
    W3,
    W4,
    W5,
    W6,
    W7,
    W8,
    W9,
    W10,
    W11,
    W12,
    W13,
    W14,
    W15,
    W16,
    W17,
    W18,
    W19,
    W20,
    W21,
    W22,
    W23,
    W24,
    W25,
    W26,
    W27,
    W28,
    W29,
    W30,

    /// Stack Pointer
    Sp,

    /// Link Register
    Lr,

    /// Program Counter
    Pc,

    /// Application Program Status Register
    Apsr,

    /// 32-bit Zero Register
    Wzr,

    /// 64-bit Zero Register
    Xzr,
}

impl Register {
    pub fn from_int(n: u32) -> Self {
        match n {
            0 => Self::X0,
            1 => Self::X1,
            2 => Self::X2,
            3 => Self::X3,
            4 => Self::X4,
            5 => Self::X5,
            6 => Self::X6,
            7 => Self::X7,
            8 => Self::X8,
            9 => Self::X9,
            10 => Self::X10,
            11 => Self::X11,
            12 => Self::X12,
            13 => Self::X13,
            14 => Self::X14,
            15 => Self::X15,
            16 => Self::X16,
            17 => Self::X17,
            18 => Self::X18,
            19 => Self::X19,
            20 => Self::X20,
            21 => Self::X21,
            22 => Self::X22,
            23 => Self::X23,
            24 => Self::X24,
            25 => Self::X25,
            26 => Self::X26,
            27 => Self::X27,
            28 => Self::X28,
            29 => Self::X29,
            30 => Self::X30,
            31 => Self::Xzr,
            _ => todo!(),
        }
    }

    pub fn encoding(self) -> u32 {
        match self {
            Self::W0 | Self::X0 => 0,
            Self::W1 | Self::X1 => 1,
            Self::W2 | Self::X2 => 2,
            Self::W3 | Self::X3 => 3,
            Self::W4 | Self::X4 => 4,
            Self::W5 | Self::X5 => 5,
            Self::W6 | Self::X6 => 6,
            Self::W7 | Self::X7 => 7,
            Self::W8 | Self::X8 => 8,
            Self::W9 | Self::X9 => 9,
            Self::W10 | Self::X10 => 10,
            Self::W11 | Self::X11 => 11,
            Self::W12 | Self::X12 => 12,
            Self::W13 | Self::X13 => 13,
            Self::W14 | Self::X14 => 14,
            Self::W15 | Self::X15 => 15,
            Self::W16 | Self::X16 => 16,
            Self::W17 | Self::X17 => 17,
            Self::W18 | Self::X18 => 18,
            Self::W19 | Self::X19 => 19,
            Self::W20 | Self::X20 => 20,
            Self::W21 | Self::X21 => 21,
            Self::W22 | Self::X22 => 22,
            Self::W23 | Self::X23 => 23,
            Self::W24 | Self::X24 => 24,
            Self::W25 | Self::X25 => 25,
            Self::W26 | Self::X26 => 26,
            Self::W27 | Self::X27 => 27,
            Self::W28 | Self::X28 => 28,
            Self::W29 | Self::X29 => 29,
            Self::W30 | Self::X30 => 30,
            Self::Wzr | Self::Xzr => 31,
            reg => todo!("{:?}", reg),
        }
    }
}

impl fmt::Display for Register {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(match self {
            Self::X0 => "x0",
            Self::X1 => "x1",
            Self::X2 => "x2",
            Self::X3 => "x3",
            Self::X4 => "x4",
            Self::X5 => "x5",
            Self::X6 => "x6",
            Self::X7 => "x7",
            Self::X8 => "x8",
            Self::X9 => "x9",
            Self::X10 => "x10",
            Self::X11 => "x11",
            Self::X12 => "x12",
            Self::X13 => "x13",
            Self::X14 => "x14",
            Self::X15 => "x15",
            Self::X16 => "x16",
            Self::X17 => "x17",
            Self::X18 => "x18",
            Self::X19 => "x19",
            Self::X20 => "x20",
            Self::X21 => "x21",
            Self::X22 => "x22",
            Self::X23 => "x23",
            Self::X24 => "x24",
            Self::X25 => "x25",
            Self::X26 => "x26",
            Self::X27 => "x27",
            Self::X28 => "x28",
            Self::X29 => "x29",
            Self::X30 => "x30",

            Self::W0 => "w0",
            Self::W1 => "w1",
            Self::W2 => "w2",
            Self::W3 => "w3",
            Self::W4 => "w4",
            Self::W5 => "w5",
            Self::W6 => "w6",
            Self::W7 => "w7",
            Self::W8 => "w8",
            Self::W9 => "w9",
            Self::W10 => "w10",
            Self::W11 => "w11",
            Self::W12 => "w12",
            Self::W13 => "w13",
            Self::W14 => "w14",
            Self::W15 => "w15",
            Self::W16 => "w16",
            Self::W17 => "w17",
            Self::W18 => "w18",
            Self::W19 => "w19",
            Self::W20 => "w20",
            Self::W21 => "w21",
            Self::W22 => "w22",
            Self::W23 => "w23",
            Self::W24 => "w24",
            Self::W25 => "w25",
            Self::W26 => "w26",
            Self::W27 => "w27",
            Self::W28 => "w28",
            Self::W29 => "w29",
            Self::W30 => "w30",
            Self::Sp => "sp",
            Self::Lr => "lr",
            Self::Pc => "pc",
            Self::Apsr => "apsr",
            Self::Wzr => "wzr",
            Self::Xzr => "xzr",
        })
    }
}

#[derive(Debug, Clone, Copy)]
pub enum Register32 {
    W0,
    W1,
    W2,
    W3,
    W4,
    W5,
    W6,
    W7,
    W8,
    W9,
    W10,
    W11,
    W12,
    W13,
    W14,
    W15,
    W16,
    W17,
    W18,
    W19,
    W20,
    W21,
    W22,
    W23,
    W24,
    W25,
    W26,
    W27,
    W28,
    W29,
    W30,
}

impl Register32 {
    pub fn as_register(self) -> Register {
        match self {
            Self::W0 => Register::W0,
            Self::W1 => Register::W1,
            Self::W2 => Register::W2,
            Self::W3 => Register::W3,
            Self::W4 => Register::W4,
            Self::W5 => Register::W5,
            Self::W6 => Register::W6,
            Self::W7 => Register::W7,
            Self::W8 => Register::W8,
            Self::W9 => Register::W9,
            Self::W10 => Register::W10,
            Self::W11 => Register::W11,
            Self::W12 => Register::W12,
            Self::W13 => Register::W13,
            Self::W14 => Register::W14,
            Self::W15 => Register::W15,
            Self::W16 => Register::W16,
            Self::W17 => Register::W17,
            Self::W18 => Register::W18,
            Self::W19 => Register::W19,
            Self::W20 => Register::W20,
            Self::W21 => Register::W21,
            Self::W22 => Register::W22,
            Self::W23 => Register::W23,
            Self::W24 => Register::W24,
            Self::W25 => Register::W25,
            Self::W26 => Register::W26,
            Self::W27 => Register::W27,
            Self::W28 => Register::W28,
            Self::W29 => Register::W29,
            Self::W30 => Register::W30,
        }
    }
}
